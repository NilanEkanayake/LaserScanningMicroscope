
stm32g473-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0f4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  0800d2d4  0800d2d4  0001d2d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5a0  0800d5a0  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800d5a0  0800d5a0  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d5a0  0800d5a0  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5a0  0800d5a0  0001d5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d5a4  0800d5a4  0001d5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800d5a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cbc  200001f8  0800d7a0  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001eb4  0800d7a0  00021eb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cefc  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004180  00000000  00000000  0003d124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001968  00000000  00000000  000412a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001790  00000000  00000000  00042c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026dd1  00000000  00000000  000443a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001de53  00000000  00000000  0006b171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3fd5  00000000  00000000  00088fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017cf99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075b4  00000000  00000000  0017cfec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d2bc 	.word	0x0800d2bc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001fc 	.word	0x200001fc
 800021c:	0800d2bc 	.word	0x0800d2bc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_d2iz>:
 8000638:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800063c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000640:	d215      	bcs.n	800066e <__aeabi_d2iz+0x36>
 8000642:	d511      	bpl.n	8000668 <__aeabi_d2iz+0x30>
 8000644:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000648:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800064c:	d912      	bls.n	8000674 <__aeabi_d2iz+0x3c>
 800064e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000652:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000656:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800065a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800065e:	fa23 f002 	lsr.w	r0, r3, r2
 8000662:	bf18      	it	ne
 8000664:	4240      	negne	r0, r0
 8000666:	4770      	bx	lr
 8000668:	f04f 0000 	mov.w	r0, #0
 800066c:	4770      	bx	lr
 800066e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000672:	d105      	bne.n	8000680 <__aeabi_d2iz+0x48>
 8000674:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000678:	bf08      	it	eq
 800067a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800067e:	4770      	bx	lr
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <delay_us>:
/* USER CODE BEGIN 0 */

//microsecond delay (not used)
//https://controllerstech.com/create-1-microsecond-delay-stm32/
void delay_us(uint16_t us)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <delay_us+0x30>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);
 800069a:	bf00      	nop
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <delay_us+0x30>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d3f9      	bcc.n	800069c <delay_us+0x14>
}
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	20000418 	.word	0x20000418

080006bc <_write>:

//USB cdc transmit
//https://github.com/alexeykosinov/Redirect-printf-to-USB-VCP-on-STM32H7-MCU
int _write(int file, char *ptr, int len) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
    static uint8_t rc = USBD_OK;

    do {
        rc = CDC_Transmit_FS((unsigned char*)ptr, len);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	4619      	mov	r1, r3
 80006ce:	68b8      	ldr	r0, [r7, #8]
 80006d0:	f00a ff94 	bl	800b5fc <CDC_Transmit_FS>
 80006d4:	4603      	mov	r3, r0
 80006d6:	461a      	mov	r2, r3
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <_write+0x40>)
 80006da:	701a      	strb	r2, [r3, #0]
    } while (USBD_BUSY == rc);
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <_write+0x40>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d0f1      	beq.n	80006c8 <_write+0xc>

    if (USBD_FAIL == rc) {
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <_write+0x40>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b03      	cmp	r3, #3
 80006ea:	d101      	bne.n	80006f0 <_write+0x34>
        /// NOTE: Should never reach here.
        /// TODO: Handle this error.
        return 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	e000      	b.n	80006f2 <_write+0x36>
    }
    return len;
 80006f0:	687b      	ldr	r3, [r7, #4]
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200004b1 	.word	0x200004b1

08000700 <analogRead>:
uint8_t buffer[64];
bool newReceived;

//ADC
uint32_t analogRead(uint8_t channel)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
	uint32_t ADCValue = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
	if (channel == 1) {
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d111      	bne.n	8000738 <analogRead+0x38>
		  HAL_ADC_Start(&hadc1);
 8000714:	4815      	ldr	r0, [pc, #84]	; (800076c <analogRead+0x6c>)
 8000716:	f001 ff7d 	bl	8002614 <HAL_ADC_Start>
		  if (HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK) {
 800071a:	4915      	ldr	r1, [pc, #84]	; (8000770 <analogRead+0x70>)
 800071c:	4813      	ldr	r0, [pc, #76]	; (800076c <analogRead+0x6c>)
 800071e:	f002 f891 	bl	8002844 <HAL_ADC_PollForConversion>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d103      	bne.n	8000730 <analogRead+0x30>
		      ADCValue = HAL_ADC_GetValue(&hadc1);
 8000728:	4810      	ldr	r0, [pc, #64]	; (800076c <analogRead+0x6c>)
 800072a:	f002 f991 	bl	8002a50 <HAL_ADC_GetValue>
 800072e:	60f8      	str	r0, [r7, #12]
		  }
		  HAL_ADC_Stop(&hadc1);
 8000730:	480e      	ldr	r0, [pc, #56]	; (800076c <analogRead+0x6c>)
 8000732:	f002 f853 	bl	80027dc <HAL_ADC_Stop>
 8000736:	e013      	b.n	8000760 <analogRead+0x60>
	} else if (channel == 5) {
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	2b05      	cmp	r3, #5
 800073c:	d110      	bne.n	8000760 <analogRead+0x60>
		  HAL_ADC_Start(&hadc5);
 800073e:	480d      	ldr	r0, [pc, #52]	; (8000774 <analogRead+0x74>)
 8000740:	f001 ff68 	bl	8002614 <HAL_ADC_Start>
		  if (HAL_ADC_PollForConversion(&hadc5, 1000000) == HAL_OK) {
 8000744:	490a      	ldr	r1, [pc, #40]	; (8000770 <analogRead+0x70>)
 8000746:	480b      	ldr	r0, [pc, #44]	; (8000774 <analogRead+0x74>)
 8000748:	f002 f87c 	bl	8002844 <HAL_ADC_PollForConversion>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d103      	bne.n	800075a <analogRead+0x5a>
		      ADCValue = HAL_ADC_GetValue(&hadc5);
 8000752:	4808      	ldr	r0, [pc, #32]	; (8000774 <analogRead+0x74>)
 8000754:	f002 f97c 	bl	8002a50 <HAL_ADC_GetValue>
 8000758:	60f8      	str	r0, [r7, #12]
		  }
		  HAL_ADC_Stop(&hadc5);
 800075a:	4806      	ldr	r0, [pc, #24]	; (8000774 <analogRead+0x74>)
 800075c:	f002 f83e 	bl	80027dc <HAL_ADC_Stop>
	}

  return ADCValue;
 8000760:	68fb      	ldr	r3, [r7, #12]
}
 8000762:	4618      	mov	r0, r3
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000214 	.word	0x20000214
 8000770:	000f4240 	.word	0x000f4240
 8000774:	20000280 	.word	0x20000280

08000778 <getNum>:

//parse usb serial input
uint16_t getNum() {
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
	  uint16_t num = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	80fb      	strh	r3, [r7, #6]
	  for (int i=1; i<=4; i++) {
 8000782:	2301      	movs	r3, #1
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	e01e      	b.n	80007c6 <getNum+0x4e>
		  if (isdigit(buffer[i])) { //only works if buffer isn't initialized with all zeros - shouldn't be
 8000788:	4a14      	ldr	r2, [pc, #80]	; (80007dc <getNum+0x64>)
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	4413      	add	r3, r2
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	3301      	adds	r3, #1
 8000792:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <getNum+0x68>)
 8000794:	4413      	add	r3, r2
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	f003 0304 	and.w	r3, r3, #4
 800079c:	2b00      	cmp	r3, #0
 800079e:	d00f      	beq.n	80007c0 <getNum+0x48>
			  num *= 10;
 80007a0:	88fb      	ldrh	r3, [r7, #6]
 80007a2:	461a      	mov	r2, r3
 80007a4:	0092      	lsls	r2, r2, #2
 80007a6:	4413      	add	r3, r2
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	80fb      	strh	r3, [r7, #6]
			  num += buffer[i] - '0';
 80007ac:	4a0b      	ldr	r2, [pc, #44]	; (80007dc <getNum+0x64>)
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	4413      	add	r3, r2
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	88fb      	ldrh	r3, [r7, #6]
 80007b8:	4413      	add	r3, r2
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	3b30      	subs	r3, #48	; 0x30
 80007be:	80fb      	strh	r3, [r7, #6]
	  for (int i=1; i<=4; i++) {
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	3301      	adds	r3, #1
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	2b04      	cmp	r3, #4
 80007ca:	dddd      	ble.n	8000788 <getNum+0x10>
		  }
	  }
	  return num;
 80007cc:	88fb      	ldrh	r3, [r7, #6]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	20000470 	.word	0x20000470
 80007e0:	0800d404 	.word	0x0800d404

080007e4 <fineFocus>:

//fine focus
//return true for successful focus, false for not
int16_t fineFocus() {
 80007e4:	b5b0      	push	{r4, r5, r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
	int16_t currentAdc;
	int16_t topAdc = -10000;
 80007ea:	f64d 03f0 	movw	r3, #55536	; 0xd8f0
 80007ee:	82fb      	strh	r3, [r7, #22]
	int16_t bottomAdc = 10000;
 80007f0:	f242 7310 	movw	r3, #10000	; 0x2710
 80007f4:	82bb      	strh	r3, [r7, #20]
	int16_t topDac = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	827b      	strh	r3, [r7, #18]
	int16_t bottomDac = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	823b      	strh	r3, [r7, #16]
	int16_t middleDac;
	int8_t precision = 3;
 80007fe:	2303      	movs	r3, #3
 8000800:	71fb      	strb	r3, [r7, #7]

	//set offsets
	HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_1, DAC_ALIGN_12B_R, xOffset);
 8000802:	4b56      	ldr	r3, [pc, #344]	; (800095c <fineFocus+0x178>)
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	4855      	ldr	r0, [pc, #340]	; (8000960 <fineFocus+0x17c>)
 800080c:	f003 f99e 	bl	8003b4c <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_2, DAC_ALIGN_12B_R, yOffset);
 8000810:	4b54      	ldr	r3, [pc, #336]	; (8000964 <fineFocus+0x180>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	2200      	movs	r2, #0
 8000816:	2110      	movs	r1, #16
 8000818:	4851      	ldr	r0, [pc, #324]	; (8000960 <fineFocus+0x17c>)
 800081a:	f003 f997 	bl	8003b4c <HAL_DAC_SetValue>

	//set laser power
	HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, laserPower);
 800081e:	4b52      	ldr	r3, [pc, #328]	; (8000968 <fineFocus+0x184>)
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	2200      	movs	r2, #0
 8000824:	2100      	movs	r1, #0
 8000826:	4851      	ldr	r0, [pc, #324]	; (800096c <fineFocus+0x188>)
 8000828:	f003 f990 	bl	8003b4c <HAL_DAC_SetValue>

	//delay to settle
	HAL_Delay(3);
 800082c:	2003      	movs	r0, #3
 800082e:	f001 fa8f 	bl	8001d50 <HAL_Delay>

	for (int i=0; i<4096; i+=precision) { //can do +=5?
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	e038      	b.n	80008aa <fineFocus+0xc6>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, i);
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	2200      	movs	r2, #0
 800083c:	2100      	movs	r1, #0
 800083e:	484c      	ldr	r0, [pc, #304]	; (8000970 <fineFocus+0x18c>)
 8000840:	f003 f984 	bl	8003b4c <HAL_DAC_SetValue>
		//delay_us(1000);
		HAL_Delay(2);
 8000844:	2002      	movs	r0, #2
 8000846:	f001 fa83 	bl	8001d50 <HAL_Delay>
		currentAdc = analogRead(5)-analogRead(1);
 800084a:	2005      	movs	r0, #5
 800084c:	f7ff ff58 	bl	8000700 <analogRead>
 8000850:	4603      	mov	r3, r0
 8000852:	b29c      	uxth	r4, r3
 8000854:	2001      	movs	r0, #1
 8000856:	f7ff ff53 	bl	8000700 <analogRead>
 800085a:	4603      	mov	r3, r0
 800085c:	b29b      	uxth	r3, r3
 800085e:	1ae3      	subs	r3, r4, r3
 8000860:	b29b      	uxth	r3, r3
 8000862:	807b      	strh	r3, [r7, #2]
		if (currentAdc > topAdc) {
 8000864:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000868:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800086c:	429a      	cmp	r2, r3
 800086e:	dd04      	ble.n	800087a <fineFocus+0x96>
			topAdc = currentAdc;
 8000870:	887b      	ldrh	r3, [r7, #2]
 8000872:	82fb      	strh	r3, [r7, #22]
			topDac = i;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	827b      	strh	r3, [r7, #18]
 8000878:	e009      	b.n	800088e <fineFocus+0xaa>
		} else if (currentAdc < bottomAdc) {
 800087a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800087e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000882:	429a      	cmp	r2, r3
 8000884:	da03      	bge.n	800088e <fineFocus+0xaa>
			bottomAdc = currentAdc;
 8000886:	887b      	ldrh	r3, [r7, #2]
 8000888:	82bb      	strh	r3, [r7, #20]
			bottomDac = i;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	823b      	strh	r3, [r7, #16]
		}
		//delay_us(1000); //give time for VCM to catch up - maybe not needed
		HAL_Delay(2);
 800088e:	2002      	movs	r0, #2
 8000890:	f001 fa5e 	bl	8001d50 <HAL_Delay>
		printf("%d\r\n", currentAdc);
 8000894:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000898:	4619      	mov	r1, r3
 800089a:	4836      	ldr	r0, [pc, #216]	; (8000974 <fineFocus+0x190>)
 800089c:	f00b fb3c 	bl	800bf18 <iprintf>
	for (int i=0; i<4096; i+=precision) { //can do +=5?
 80008a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a4:	68fa      	ldr	r2, [r7, #12]
 80008a6:	4413      	add	r3, r2
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008b0:	dbc2      	blt.n	8000838 <fineFocus+0x54>
	}
	middleDac = (round((topDac-bottomDac)/2))+bottomDac;
 80008b2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80008b6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80008ba:	1ad3      	subs	r3, r2, r3
 80008bc:	0fda      	lsrs	r2, r3, #31
 80008be:	4413      	add	r3, r2
 80008c0:	105b      	asrs	r3, r3, #1
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fe4e 	bl	8000564 <__aeabi_i2d>
 80008c8:	4604      	mov	r4, r0
 80008ca:	460d      	mov	r5, r1
 80008cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff fe47 	bl	8000564 <__aeabi_i2d>
 80008d6:	4602      	mov	r2, r0
 80008d8:	460b      	mov	r3, r1
 80008da:	4620      	mov	r0, r4
 80008dc:	4629      	mov	r1, r5
 80008de:	f7ff fcf5 	bl	80002cc <__adddf3>
 80008e2:	4602      	mov	r2, r0
 80008e4:	460b      	mov	r3, r1
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	f7ff fea5 	bl	8000638 <__aeabi_d2iz>
 80008ee:	4603      	mov	r3, r0
 80008f0:	80bb      	strh	r3, [r7, #4]

	printf("Top DAC: %d\r\n", topDac);
 80008f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80008f6:	4619      	mov	r1, r3
 80008f8:	481f      	ldr	r0, [pc, #124]	; (8000978 <fineFocus+0x194>)
 80008fa:	f00b fb0d 	bl	800bf18 <iprintf>
	printf("Bottom DAC: %d\r\n", bottomDac);
 80008fe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000902:	4619      	mov	r1, r3
 8000904:	481d      	ldr	r0, [pc, #116]	; (800097c <fineFocus+0x198>)
 8000906:	f00b fb07 	bl	800bf18 <iprintf>
	printf("Middle DAC: %d\r\n", middleDac);
 800090a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800090e:	4619      	mov	r1, r3
 8000910:	481b      	ldr	r0, [pc, #108]	; (8000980 <fineFocus+0x19c>)
 8000912:	f00b fb01 	bl	800bf18 <iprintf>



	for (int i = 4095; i >= middleDac; i-=precision) {
 8000916:	f640 73ff 	movw	r3, #4095	; 0xfff
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	e00d      	b.n	800093a <fineFocus+0x156>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, i); //is blocking?
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	2200      	movs	r2, #0
 8000922:	2100      	movs	r1, #0
 8000924:	4812      	ldr	r0, [pc, #72]	; (8000970 <fineFocus+0x18c>)
 8000926:	f003 f911 	bl	8003b4c <HAL_DAC_SetValue>
		HAL_Delay(2);
 800092a:	2002      	movs	r0, #2
 800092c:	f001 fa10 	bl	8001d50 <HAL_Delay>
	for (int i = 4095; i >= middleDac; i-=precision) {
 8000930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000934:	68ba      	ldr	r2, [r7, #8]
 8000936:	1ad3      	subs	r3, r2, r3
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	429a      	cmp	r2, r3
 8000942:	daec      	bge.n	800091e <fineFocus+0x13a>
	}

	HAL_Delay(1); //leave time to settle
 8000944:	2001      	movs	r0, #1
 8000946:	f001 fa03 	bl	8001d50 <HAL_Delay>
	return topAdc-bottomAdc; //return difference, aka size of S-shape
 800094a:	8afa      	ldrh	r2, [r7, #22]
 800094c:	8abb      	ldrh	r3, [r7, #20]
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	b29b      	uxth	r3, r3
 8000952:	b21b      	sxth	r3, r3
}
 8000954:	4618      	mov	r0, r3
 8000956:	3718      	adds	r7, #24
 8000958:	46bd      	mov	sp, r7
 800095a:	bdb0      	pop	{r4, r5, r7, pc}
 800095c:	20000006 	.word	0x20000006
 8000960:	20000314 	.word	0x20000314
 8000964:	20000008 	.word	0x20000008
 8000968:	2000000c 	.word	0x2000000c
 800096c:	20000300 	.word	0x20000300
 8000970:	200002ec 	.word	0x200002ec
 8000974:	0800d2d4 	.word	0x0800d2d4
 8000978:	0800d2dc 	.word	0x0800d2dc
 800097c:	0800d2ec 	.word	0x0800d2ec
 8000980:	0800d300 	.word	0x0800d300

08000984 <coarseFocus>:

//coarse focus
uint16_t coarseFocus() {
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
	uint16_t sum = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	807b      	strh	r3, [r7, #2]
	uint16_t minDac = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	81fb      	strh	r3, [r7, #14]
	uint8_t precision = 3;
 8000992:	2303      	movs	r3, #3
 8000994:	707b      	strb	r3, [r7, #1]
	uint16_t minSum = 10000;
 8000996:	f242 7310 	movw	r3, #10000	; 0x2710
 800099a:	81bb      	strh	r3, [r7, #12]
	//set offsets
	HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_1, DAC_ALIGN_12B_R, xOffset);
 800099c:	4b3a      	ldr	r3, [pc, #232]	; (8000a88 <coarseFocus+0x104>)
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	4839      	ldr	r0, [pc, #228]	; (8000a8c <coarseFocus+0x108>)
 80009a6:	f003 f8d1 	bl	8003b4c <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_2, DAC_ALIGN_12B_R, yOffset);
 80009aa:	4b39      	ldr	r3, [pc, #228]	; (8000a90 <coarseFocus+0x10c>)
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	2200      	movs	r2, #0
 80009b0:	2110      	movs	r1, #16
 80009b2:	4836      	ldr	r0, [pc, #216]	; (8000a8c <coarseFocus+0x108>)
 80009b4:	f003 f8ca 	bl	8003b4c <HAL_DAC_SetValue>

	//set laser power
	HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, laserPower);
 80009b8:	4b36      	ldr	r3, [pc, #216]	; (8000a94 <coarseFocus+0x110>)
 80009ba:	881b      	ldrh	r3, [r3, #0]
 80009bc:	2200      	movs	r2, #0
 80009be:	2100      	movs	r1, #0
 80009c0:	4835      	ldr	r0, [pc, #212]	; (8000a98 <coarseFocus+0x114>)
 80009c2:	f003 f8c3 	bl	8003b4c <HAL_DAC_SetValue>

	//delay to settle
	HAL_Delay(3);
 80009c6:	2003      	movs	r0, #3
 80009c8:	f001 f9c2 	bl	8001d50 <HAL_Delay>

	for (int i=0; i<4096; i+=precision) {
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	e028      	b.n	8000a24 <coarseFocus+0xa0>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, i);
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	2200      	movs	r2, #0
 80009d6:	2110      	movs	r1, #16
 80009d8:	4830      	ldr	r0, [pc, #192]	; (8000a9c <coarseFocus+0x118>)
 80009da:	f003 f8b7 	bl	8003b4c <HAL_DAC_SetValue>
		HAL_Delay(2);
 80009de:	2002      	movs	r0, #2
 80009e0:	f001 f9b6 	bl	8001d50 <HAL_Delay>
		sum = analogRead(5)+analogRead(1);
 80009e4:	2005      	movs	r0, #5
 80009e6:	f7ff fe8b 	bl	8000700 <analogRead>
 80009ea:	4603      	mov	r3, r0
 80009ec:	b29c      	uxth	r4, r3
 80009ee:	2001      	movs	r0, #1
 80009f0:	f7ff fe86 	bl	8000700 <analogRead>
 80009f4:	4603      	mov	r3, r0
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	4423      	add	r3, r4
 80009fa:	807b      	strh	r3, [r7, #2]
		if (sum < minSum) { //values get smaller as light increases (inverted)
 80009fc:	887a      	ldrh	r2, [r7, #2]
 80009fe:	89bb      	ldrh	r3, [r7, #12]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d203      	bcs.n	8000a0c <coarseFocus+0x88>
			minSum = sum;
 8000a04:	887b      	ldrh	r3, [r7, #2]
 8000a06:	81bb      	strh	r3, [r7, #12]
			minDac = i;
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	81fb      	strh	r3, [r7, #14]
		}
		HAL_Delay(2); //give time for VCM to catch up - maybe not needed
 8000a0c:	2002      	movs	r0, #2
 8000a0e:	f001 f99f 	bl	8001d50 <HAL_Delay>
		printf("%d\r\n", sum); //print to see curve
 8000a12:	887b      	ldrh	r3, [r7, #2]
 8000a14:	4619      	mov	r1, r3
 8000a16:	4822      	ldr	r0, [pc, #136]	; (8000aa0 <coarseFocus+0x11c>)
 8000a18:	f00b fa7e 	bl	800bf18 <iprintf>
	for (int i=0; i<4096; i+=precision) {
 8000a1c:	787b      	ldrb	r3, [r7, #1]
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	4413      	add	r3, r2
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a2a:	dbd2      	blt.n	80009d2 <coarseFocus+0x4e>
	}

	printf("%d\r\n", minDac);
 8000a2c:	89fb      	ldrh	r3, [r7, #14]
 8000a2e:	4619      	mov	r1, r3
 8000a30:	481b      	ldr	r0, [pc, #108]	; (8000aa0 <coarseFocus+0x11c>)
 8000a32:	f00b fa71 	bl	800bf18 <iprintf>

	for (int i = 4095; i >= minDac; i-=precision) {
 8000a36:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	e00c      	b.n	8000a58 <coarseFocus+0xd4>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, i);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2200      	movs	r2, #0
 8000a42:	2110      	movs	r1, #16
 8000a44:	4815      	ldr	r0, [pc, #84]	; (8000a9c <coarseFocus+0x118>)
 8000a46:	f003 f881 	bl	8003b4c <HAL_DAC_SetValue>
		HAL_Delay(1);
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f001 f980 	bl	8001d50 <HAL_Delay>
	for (int i = 4095; i >= minDac; i-=precision) {
 8000a50:	787b      	ldrb	r3, [r7, #1]
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	89fb      	ldrh	r3, [r7, #14]
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	daee      	bge.n	8000a3e <coarseFocus+0xba>
		//printf("%d\r\n", i);
	}

	HAL_Delay(1); //time to settle
 8000a60:	2001      	movs	r0, #1
 8000a62:	f001 f975 	bl	8001d50 <HAL_Delay>
	//maybe print DAC value at max, to know general position (aka make sure it's not at a max?)
	return analogRead(5)+analogRead(1);
 8000a66:	2005      	movs	r0, #5
 8000a68:	f7ff fe4a 	bl	8000700 <analogRead>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	b29c      	uxth	r4, r3
 8000a70:	2001      	movs	r0, #1
 8000a72:	f7ff fe45 	bl	8000700 <analogRead>
 8000a76:	4603      	mov	r3, r0
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	4423      	add	r3, r4
 8000a7c:	b29b      	uxth	r3, r3
	//return 0;
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd90      	pop	{r4, r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000006 	.word	0x20000006
 8000a8c:	20000314 	.word	0x20000314
 8000a90:	20000008 	.word	0x20000008
 8000a94:	2000000c 	.word	0x2000000c
 8000a98:	20000300 	.word	0x20000300
 8000a9c:	200002ec 	.word	0x200002ec
 8000aa0:	0800d2d4 	.word	0x0800d2d4

08000aa4 <scan>:

//main scan
void scan() {
 8000aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000aa8:	b088      	sub	sp, #32
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	466b      	mov	r3, sp
 8000aae:	4698      	mov	r8, r3
	//TODO: corrupt first line can have output that crashes program. (by printing a very long int)
	//TODO: Doing too many scans in one program run results in only getting very warped images out.
	//TODO: sometimes crashes while starting scan, I don't know why. Might be related to line corruption
	//TODO: images are inverted. What is dark should be light, and vice versa
	int raw;
	unsigned char row[(xRes*5)+1]; //maybe not long enough? because of delims?
 8000ab0:	4b72      	ldr	r3, [pc, #456]	; (8000c7c <scan+0x1d8>)
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	4413      	add	r3, r2
 8000abc:	1c5e      	adds	r6, r3, #1
 8000abe:	1e73      	subs	r3, r6, #1
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	4632      	mov	r2, r6
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	4614      	mov	r4, r2
 8000ac8:	461d      	mov	r5, r3
 8000aca:	f04f 0200 	mov.w	r2, #0
 8000ace:	f04f 0300 	mov.w	r3, #0
 8000ad2:	00eb      	lsls	r3, r5, #3
 8000ad4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ad8:	00e2      	lsls	r2, r4, #3
 8000ada:	4632      	mov	r2, r6
 8000adc:	2300      	movs	r3, #0
 8000ade:	4610      	mov	r0, r2
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f04f 0200 	mov.w	r2, #0
 8000ae6:	f04f 0300 	mov.w	r3, #0
 8000aea:	00cb      	lsls	r3, r1, #3
 8000aec:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000af0:	00c2      	lsls	r2, r0, #3
 8000af2:	4633      	mov	r3, r6
 8000af4:	3307      	adds	r3, #7
 8000af6:	08db      	lsrs	r3, r3, #3
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	ebad 0d03 	sub.w	sp, sp, r3
 8000afe:	466b      	mov	r3, sp
 8000b00:	3300      	adds	r3, #0
 8000b02:	607b      	str	r3, [r7, #4]
	//unsigned char row[xRes*4]; //max 8192 = 4 digits long
	uint16_t usedCounter = 0; //keep track of how much of the array has been filled
 8000b04:	2300      	movs	r3, #0
 8000b06:	82fb      	strh	r3, [r7, #22]

	HAL_Delay(100);
 8000b08:	2064      	movs	r0, #100	; 0x64
 8000b0a:	f001 f921 	bl	8001d50 <HAL_Delay>
	printf("starting scan loop\r\n");
 8000b0e:	485c      	ldr	r0, [pc, #368]	; (8000c80 <scan+0x1dc>)
 8000b10:	f00b fa88 	bl	800c024 <puts>
	for (int y=0; y<yRes; y++) {
 8000b14:	2300      	movs	r3, #0
 8000b16:	61bb      	str	r3, [r7, #24]
 8000b18:	e0a3      	b.n	8000c62 <scan+0x1be>
		  memset(row, 0, sizeof row); //see if this fixes corruption - doesn't work
 8000b1a:	4633      	mov	r3, r6
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	2100      	movs	r1, #0
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f00b f9f1 	bl	800bf08 <memset>
		  HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_2, DAC_ALIGN_12B_R, scanOffsetY+(y*skipSteps));
 8000b26:	4b57      	ldr	r3, [pc, #348]	; (8000c84 <scan+0x1e0>)
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	fb03 f202 	mul.w	r2, r3, r2
 8000b32:	4b55      	ldr	r3, [pc, #340]	; (8000c88 <scan+0x1e4>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2110      	movs	r1, #16
 8000b3c:	4853      	ldr	r0, [pc, #332]	; (8000c8c <scan+0x1e8>)
 8000b3e:	f003 f805 	bl	8003b4c <HAL_DAC_SetValue>
		  HAL_Delay(10);
 8000b42:	200a      	movs	r0, #10
 8000b44:	f001 f904 	bl	8001d50 <HAL_Delay>
		  //delay_us(20);
		  usedCounter = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	82fb      	strh	r3, [r7, #22]
		  for (int x=0; x<xRes; x++) {
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
 8000b50:	e064      	b.n	8000c1c <scan+0x178>
			  raw = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
			  HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_1, DAC_ALIGN_12B_R, scanOffsetX+(x*skipSteps));
 8000b56:	4b4b      	ldr	r3, [pc, #300]	; (8000c84 <scan+0x1e0>)
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	fb03 f202 	mul.w	r2, r3, r2
 8000b62:	4b4b      	ldr	r3, [pc, #300]	; (8000c90 <scan+0x1ec>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4413      	add	r3, r2
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4847      	ldr	r0, [pc, #284]	; (8000c8c <scan+0x1e8>)
 8000b6e:	f002 ffed 	bl	8003b4c <HAL_DAC_SetValue>
			  if (x <= 1) {
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	dc03      	bgt.n	8000b80 <scan+0xdc>
				  HAL_Delay(60);
 8000b78:	203c      	movs	r0, #60	; 0x3c
 8000b7a:	f001 f8e9 	bl	8001d50 <HAL_Delay>
 8000b7e:	e002      	b.n	8000b86 <scan+0xe2>
			  } else {
				  HAL_Delay(3);
 8000b80:	2003      	movs	r0, #3
 8000b82:	f001 f8e5 	bl	8001d50 <HAL_Delay>
			  }
			  //delay_us(500);
			  for (int i=1; i<=adcAvg; i++) {
 8000b86:	2301      	movs	r3, #1
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	e011      	b.n	8000bb0 <scan+0x10c>
				  raw += analogRead(5)+analogRead(1);
 8000b8c:	2005      	movs	r0, #5
 8000b8e:	f7ff fdb7 	bl	8000700 <analogRead>
 8000b92:	4604      	mov	r4, r0
 8000b94:	2001      	movs	r0, #1
 8000b96:	f7ff fdb3 	bl	8000700 <analogRead>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	18e2      	adds	r2, r4, r3
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
				  delay_us(50);
 8000ba4:	2032      	movs	r0, #50	; 0x32
 8000ba6:	f7ff fd6f 	bl	8000688 <delay_us>
			  for (int i=1; i<=adcAvg; i++) {
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	3301      	adds	r3, #1
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	4b38      	ldr	r3, [pc, #224]	; (8000c94 <scan+0x1f0>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	dde7      	ble.n	8000b8c <scan+0xe8>
			  }
			  raw = (raw/adcAvg);
 8000bbc:	4b35      	ldr	r3, [pc, #212]	; (8000c94 <scan+0x1f0>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	fb93 f3f2 	sdiv	r3, r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
			  raw = 8191 - raw; //invert the image
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	f5c3 53ff 	rsb	r3, r3, #8160	; 0x1fe0
 8000bd0:	331f      	adds	r3, #31
 8000bd2:	613b      	str	r3, [r7, #16]
			  //printf("%d\r\n", raw);
			  if (x+1 != xRes) {
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	4a28      	ldr	r2, [pc, #160]	; (8000c7c <scan+0x1d8>)
 8000bda:	8812      	ldrh	r2, [r2, #0]
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d00d      	beq.n	8000bfc <scan+0x158>
				  usedCounter += sprintf(row+usedCounter, "%d,", raw);
 8000be0:	8afb      	ldrh	r3, [r7, #22]
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	4413      	add	r3, r2
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	492b      	ldr	r1, [pc, #172]	; (8000c98 <scan+0x1f4>)
 8000bea:	4618      	mov	r0, r3
 8000bec:	f00b fa22 	bl	800c034 <siprintf>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	8afb      	ldrh	r3, [r7, #22]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	82fb      	strh	r3, [r7, #22]
 8000bfa:	e00c      	b.n	8000c16 <scan+0x172>
			  } else {
				  usedCounter += sprintf(row+usedCounter, "%d\r\n", raw);
 8000bfc:	8afb      	ldrh	r3, [r7, #22]
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4925      	ldr	r1, [pc, #148]	; (8000c9c <scan+0x1f8>)
 8000c06:	4618      	mov	r0, r3
 8000c08:	f00b fa14 	bl	800c034 <siprintf>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	8afb      	ldrh	r3, [r7, #22]
 8000c12:	4413      	add	r3, r2
 8000c14:	82fb      	strh	r3, [r7, #22]
		  for (int x=0; x<xRes; x++) {
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	61fb      	str	r3, [r7, #28]
 8000c1c:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <scan+0x1d8>)
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	4293      	cmp	r3, r2
 8000c26:	db94      	blt.n	8000b52 <scan+0xae>
			  }
		  }
		  //can use usedCounter instead of sizeof(row) to account for >512 by splitting?
		  //temp -> remove last comma for easy parsing
		  HAL_Delay(5); //delays around USB transmit don't help line corruption
 8000c28:	2005      	movs	r0, #5
 8000c2a:	f001 f891 	bl	8001d50 <HAL_Delay>
		  static uint8_t rc = USBD_OK;
		  do {
		          rc = CDC_Transmit_FS(row, usedCounter);
 8000c2e:	8afb      	ldrh	r3, [r7, #22]
 8000c30:	4619      	mov	r1, r3
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f00a fce2 	bl	800b5fc <CDC_Transmit_FS>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <scan+0x1fc>)
 8000c3e:	701a      	strb	r2, [r3, #0]
		      } while (USBD_BUSY == rc);
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <scan+0x1fc>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d0f2      	beq.n	8000c2e <scan+0x18a>

		      if (USBD_FAIL == rc) {
 8000c48:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <scan+0x1fc>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	d102      	bne.n	8000c56 <scan+0x1b2>
		          /// NOTE: Should never reach here.
		          /// TODO: Handle this error.
		          printf("Failed to send image");
 8000c50:	4814      	ldr	r0, [pc, #80]	; (8000ca4 <scan+0x200>)
 8000c52:	f00b f961 	bl	800bf18 <iprintf>
		      }
		  HAL_Delay(5);
 8000c56:	2005      	movs	r0, #5
 8000c58:	f001 f87a 	bl	8001d50 <HAL_Delay>
	for (int y=0; y<yRes; y++) {
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	61bb      	str	r3, [r7, #24]
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <scan+0x204>)
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	461a      	mov	r2, r3
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	f6ff af55 	blt.w	8000b1a <scan+0x76>
 8000c70:	46c5      	mov	sp, r8
		  //HAL_Delay(30);
		  //memset(row, 0, xRes*4);

	}
}
 8000c72:	bf00      	nop
 8000c74:	3720      	adds	r7, #32
 8000c76:	46bd      	mov	sp, r7
 8000c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	0800d314 	.word	0x0800d314
 8000c84:	20000004 	.word	0x20000004
 8000c88:	2000046c 	.word	0x2000046c
 8000c8c:	20000314 	.word	0x20000314
 8000c90:	20000468 	.word	0x20000468
 8000c94:	2000000a 	.word	0x2000000a
 8000c98:	0800d328 	.word	0x0800d328
 8000c9c:	0800d2d4 	.word	0x0800d2d4
 8000ca0:	200004b2 	.word	0x200004b2
 8000ca4:	0800d32c 	.word	0x0800d32c
 8000ca8:	20000002 	.word	0x20000002

08000cac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb2:	f000 ffdc 	bl	8001c6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb6:	f000 fa13 	bl	80010e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cba:	f000 fcfb 	bl	80016b4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000cbe:	f000 fa59 	bl	8001174 <MX_ADC1_Init>
  MX_ADC5_Init();
 8000cc2:	f000 facf 	bl	8001264 <MX_ADC5_Init>
  MX_DAC1_Init();
 8000cc6:	f000 fb33 	bl	8001330 <MX_DAC1_Init>
  MX_DAC2_Init();
 8000cca:	f000 fb75 	bl	80013b8 <MX_DAC2_Init>
  MX_DAC3_Init();
 8000cce:	f000 fbad 	bl	800142c <MX_DAC3_Init>
  MX_OPAMP1_Init();
 8000cd2:	f000 fbef 	bl	80014b4 <MX_OPAMP1_Init>
  MX_OPAMP3_Init();
 8000cd6:	f000 fc1d 	bl	8001514 <MX_OPAMP3_Init>
  MX_OPAMP4_Init();
 8000cda:	f000 fc41 	bl	8001560 <MX_OPAMP4_Init>
  MX_OPAMP6_Init();
 8000cde:	f000 fc6f 	bl	80015c0 <MX_OPAMP6_Init>
  MX_USB_Device_Init();
 8000ce2:	f00a fbb3 	bl	800b44c <MX_USB_Device_Init>
  MX_TIM1_Init();
 8000ce6:	f000 fc91 	bl	800160c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //DAC setup
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000cea:	2100      	movs	r1, #0
 8000cec:	48a4      	ldr	r0, [pc, #656]	; (8000f80 <main+0x2d4>)
 8000cee:	f002 feda 	bl	8003aa6 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000cf2:	2110      	movs	r1, #16
 8000cf4:	48a2      	ldr	r0, [pc, #648]	; (8000f80 <main+0x2d4>)
 8000cf6:	f002 fed6 	bl	8003aa6 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	48a1      	ldr	r0, [pc, #644]	; (8000f84 <main+0x2d8>)
 8000cfe:	f002 fed2 	bl	8003aa6 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac3, DAC_CHANNEL_1);
 8000d02:	2100      	movs	r1, #0
 8000d04:	48a0      	ldr	r0, [pc, #640]	; (8000f88 <main+0x2dc>)
 8000d06:	f002 fece 	bl	8003aa6 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac3, DAC_CHANNEL_2);
 8000d0a:	2110      	movs	r1, #16
 8000d0c:	489e      	ldr	r0, [pc, #632]	; (8000f88 <main+0x2dc>)
 8000d0e:	f002 feca 	bl	8003aa6 <HAL_DAC_Start>

  //ADC setup
  HAL_ADC_Start(&hadc1);
 8000d12:	489e      	ldr	r0, [pc, #632]	; (8000f8c <main+0x2e0>)
 8000d14:	f001 fc7e 	bl	8002614 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc5);
 8000d18:	489d      	ldr	r0, [pc, #628]	; (8000f90 <main+0x2e4>)
 8000d1a:	f001 fc7b 	bl	8002614 <HAL_ADC_Start>

  //opamp setup for DAC outputs
  HAL_OPAMP_Start(&hopamp3);
 8000d1e:	489d      	ldr	r0, [pc, #628]	; (8000f94 <main+0x2e8>)
 8000d20:	f003 fb36 	bl	8004390 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp6);
 8000d24:	489c      	ldr	r0, [pc, #624]	; (8000f98 <main+0x2ec>)
 8000d26:	f003 fb33 	bl	8004390 <HAL_OPAMP_Start>

  //opamp setup for ADC inputs
  HAL_OPAMP_Start(&hopamp1);
 8000d2a:	489c      	ldr	r0, [pc, #624]	; (8000f9c <main+0x2f0>)
 8000d2c:	f003 fb30 	bl	8004390 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp4);
 8000d30:	489b      	ldr	r0, [pc, #620]	; (8000fa0 <main+0x2f4>)
 8000d32:	f003 fb2d 	bl	8004390 <HAL_OPAMP_Start>

  //timer setup
  HAL_TIM_Base_Start(&htim1);
 8000d36:	489b      	ldr	r0, [pc, #620]	; (8000fa4 <main+0x2f8>)
 8000d38:	f006 f91a 	bl	8006f70 <HAL_TIM_Base_Start>
	  //0 -> no input after

	  //missing vars are above

	  //6 -> int between 0 and 5 (0=2x, 1=4x, 2=8x, 3=16x, 4=32x, 5=64x)
	  uint8_t adcGain = 1;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	71fb      	strb	r3, [r7, #7]

	  //buffer[0]
	  uint8_t start;

	  //value of following data after buffer[0]
	  uint16_t num = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	80bb      	strh	r3, [r7, #4]
	  //missing is above
	  //9 -> (1=fine focus, 2=coarse focus).

	  //when starting a scan, do checks to make sure you aren't exceeding 4096 for any VCM output, and not exceeding 2500 for laser input.
	  //avoid floats?
	  if (newReceived) {
 8000d44:	4b98      	ldr	r3, [pc, #608]	; (8000fa8 <main+0x2fc>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f000 81b3 	beq.w	80010b4 <main+0x408>
		  printf("Received\r\n");
 8000d4e:	4897      	ldr	r0, [pc, #604]	; (8000fac <main+0x300>)
 8000d50:	f00b f968 	bl	800c024 <puts>
		  //hangs on line below -> when I send loads of 0s, it only shows one in the buffer.
		  if (buffer[0]=='0') {
 8000d54:	4b96      	ldr	r3, [pc, #600]	; (8000fb0 <main+0x304>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b30      	cmp	r3, #48	; 0x30
 8000d5a:	d102      	bne.n	8000d62 <main+0xb6>
				  start = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	71bb      	strb	r3, [r7, #6]
 8000d60:	e007      	b.n	8000d72 <main+0xc6>
		  } else {
			  start = buffer[0]-'0';
 8000d62:	4b93      	ldr	r3, [pc, #588]	; (8000fb0 <main+0x304>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	3b30      	subs	r3, #48	; 0x30
 8000d68:	71bb      	strb	r3, [r7, #6]
			  num = getNum();
 8000d6a:	f7ff fd05 	bl	8000778 <getNum>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	80bb      	strh	r3, [r7, #4]
		  }
		  switch (start) {
 8000d72:	79bb      	ldrb	r3, [r7, #6]
 8000d74:	2b09      	cmp	r3, #9
 8000d76:	f200 819a 	bhi.w	80010ae <main+0x402>
 8000d7a:	a201      	add	r2, pc, #4	; (adr r2, 8000d80 <main+0xd4>)
 8000d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d80:	08000da9 	.word	0x08000da9
 8000d84:	08000e71 	.word	0x08000e71
 8000d88:	08000e97 	.word	0x08000e97
 8000d8c:	08000ebd 	.word	0x08000ebd
 8000d90:	08000ee3 	.word	0x08000ee3
 8000d94:	08000f01 	.word	0x08000f01
 8000d98:	08000f1f 	.word	0x08000f1f
 8000d9c:	0800102d 	.word	0x0800102d
 8000da0:	08001059 	.word	0x08001059
 8000da4:	0800107b 	.word	0x0800107b
			case 0:
				printf("Scanning\r\n");
 8000da8:	4882      	ldr	r0, [pc, #520]	; (8000fb4 <main+0x308>)
 8000daa:	f00b f93b 	bl	800c024 <puts>
				int16_t xSum = (skipSteps*xRes)+xOffset; //not setting properly?
 8000dae:	4b82      	ldr	r3, [pc, #520]	; (8000fb8 <main+0x30c>)
 8000db0:	881a      	ldrh	r2, [r3, #0]
 8000db2:	4b82      	ldr	r3, [pc, #520]	; (8000fbc <main+0x310>)
 8000db4:	881b      	ldrh	r3, [r3, #0]
 8000db6:	fb12 f303 	smulbb	r3, r2, r3
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	4b80      	ldr	r3, [pc, #512]	; (8000fc0 <main+0x314>)
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	807b      	strh	r3, [r7, #2]
				int16_t ySum = (skipSteps*yRes)+yOffset;
 8000dc6:	4b7c      	ldr	r3, [pc, #496]	; (8000fb8 <main+0x30c>)
 8000dc8:	881a      	ldrh	r2, [r3, #0]
 8000dca:	4b7e      	ldr	r3, [pc, #504]	; (8000fc4 <main+0x318>)
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	fb12 f303 	smulbb	r3, r2, r3
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	4b7c      	ldr	r3, [pc, #496]	; (8000fc8 <main+0x31c>)
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	4413      	add	r3, r2
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	803b      	strh	r3, [r7, #0]

				scanOffsetX = xOffset - (xRes * skipSteps / 2); // set focus to center of scanned image (make sure > 0)
 8000dde:	4b78      	ldr	r3, [pc, #480]	; (8000fc0 <main+0x314>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	4619      	mov	r1, r3
 8000de4:	4b75      	ldr	r3, [pc, #468]	; (8000fbc <main+0x310>)
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b73      	ldr	r3, [pc, #460]	; (8000fb8 <main+0x30c>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	fb02 f303 	mul.w	r3, r2, r3
 8000df2:	0fda      	lsrs	r2, r3, #31
 8000df4:	4413      	add	r3, r2
 8000df6:	105b      	asrs	r3, r3, #1
 8000df8:	425b      	negs	r3, r3
 8000dfa:	440b      	add	r3, r1
 8000dfc:	4a73      	ldr	r2, [pc, #460]	; (8000fcc <main+0x320>)
 8000dfe:	6013      	str	r3, [r2, #0]
				scanOffsetY = yOffset - (yRes * skipSteps / 2);
 8000e00:	4b71      	ldr	r3, [pc, #452]	; (8000fc8 <main+0x31c>)
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	4619      	mov	r1, r3
 8000e06:	4b6f      	ldr	r3, [pc, #444]	; (8000fc4 <main+0x318>)
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4b6a      	ldr	r3, [pc, #424]	; (8000fb8 <main+0x30c>)
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	fb02 f303 	mul.w	r3, r2, r3
 8000e14:	0fda      	lsrs	r2, r3, #31
 8000e16:	4413      	add	r3, r2
 8000e18:	105b      	asrs	r3, r3, #1
 8000e1a:	425b      	negs	r3, r3
 8000e1c:	440b      	add	r3, r1
 8000e1e:	4a6c      	ldr	r2, [pc, #432]	; (8000fd0 <main+0x324>)
 8000e20:	6013      	str	r3, [r2, #0]

				if (xSum < 4096 && ySum < 4096) { //doesn't go to else properly
 8000e22:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e2a:	da1c      	bge.n	8000e66 <main+0x1ba>
 8000e2c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e34:	da17      	bge.n	8000e66 <main+0x1ba>
					if (scanOffsetX >= 0 && scanOffsetY >= 0) {
 8000e36:	4b65      	ldr	r3, [pc, #404]	; (8000fcc <main+0x320>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	db0f      	blt.n	8000e5e <main+0x1b2>
 8000e3e:	4b64      	ldr	r3, [pc, #400]	; (8000fd0 <main+0x324>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	db0b      	blt.n	8000e5e <main+0x1b2>
						printf("passed checks\r\n");
 8000e46:	4863      	ldr	r0, [pc, #396]	; (8000fd4 <main+0x328>)
 8000e48:	f00b f8ec 	bl	800c024 <puts>
					    //call scan function
					    //might have issues sending if char count is over 512 in the X axis (maybe break into chunks if an issue)
						scan(); //pass pointer
 8000e4c:	f7ff fe2a 	bl	8000aa4 <scan>

						HAL_Delay(1);
 8000e50:	2001      	movs	r0, #1
 8000e52:	f000 ff7d 	bl	8001d50 <HAL_Delay>
						printf("done\r\n");
 8000e56:	4860      	ldr	r0, [pc, #384]	; (8000fd8 <main+0x32c>)
 8000e58:	f00b f8e4 	bl	800c024 <puts>
					if (scanOffsetX >= 0 && scanOffsetY >= 0) {
 8000e5c:	e007      	b.n	8000e6e <main+0x1c2>
					} else {
						printf("Offset too small\r\n");
 8000e5e:	485f      	ldr	r0, [pc, #380]	; (8000fdc <main+0x330>)
 8000e60:	f00b f8e0 	bl	800c024 <puts>
					if (scanOffsetX >= 0 && scanOffsetY >= 0) {
 8000e64:	e003      	b.n	8000e6e <main+0x1c2>
					}
				} else {
				  	printf("Dimensions too large\r\n");
 8000e66:	485e      	ldr	r0, [pc, #376]	; (8000fe0 <main+0x334>)
 8000e68:	f00b f8dc 	bl	800c024 <puts>
				}
				break;
 8000e6c:	e11f      	b.n	80010ae <main+0x402>
 8000e6e:	e11e      	b.n	80010ae <main+0x402>
			case 1:
				if (xRes < 4096 && xRes > 0) {
 8000e70:	4b52      	ldr	r3, [pc, #328]	; (8000fbc <main+0x310>)
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e78:	d206      	bcs.n	8000e88 <main+0x1dc>
 8000e7a:	4b50      	ldr	r3, [pc, #320]	; (8000fbc <main+0x310>)
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d002      	beq.n	8000e88 <main+0x1dc>
					xRes = num;
 8000e82:	4a4e      	ldr	r2, [pc, #312]	; (8000fbc <main+0x310>)
 8000e84:	88bb      	ldrh	r3, [r7, #4]
 8000e86:	8013      	strh	r3, [r2, #0]
				}
				printf("%d\r\n", xRes);
 8000e88:	4b4c      	ldr	r3, [pc, #304]	; (8000fbc <main+0x310>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4855      	ldr	r0, [pc, #340]	; (8000fe4 <main+0x338>)
 8000e90:	f00b f842 	bl	800bf18 <iprintf>
				break;
 8000e94:	e10b      	b.n	80010ae <main+0x402>
			case 2:
				if (yRes < 4096 && yRes > 0) {
 8000e96:	4b4b      	ldr	r3, [pc, #300]	; (8000fc4 <main+0x318>)
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e9e:	d206      	bcs.n	8000eae <main+0x202>
 8000ea0:	4b48      	ldr	r3, [pc, #288]	; (8000fc4 <main+0x318>)
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d002      	beq.n	8000eae <main+0x202>
					yRes = num;
 8000ea8:	4a46      	ldr	r2, [pc, #280]	; (8000fc4 <main+0x318>)
 8000eaa:	88bb      	ldrh	r3, [r7, #4]
 8000eac:	8013      	strh	r3, [r2, #0]
				}
				printf("%d\r\n", yRes);
 8000eae:	4b45      	ldr	r3, [pc, #276]	; (8000fc4 <main+0x318>)
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	484b      	ldr	r0, [pc, #300]	; (8000fe4 <main+0x338>)
 8000eb6:	f00b f82f 	bl	800bf18 <iprintf>
				break;
 8000eba:	e0f8      	b.n	80010ae <main+0x402>
			case 3:
				if (skipSteps < 4096 && skipSteps > 0) {
 8000ebc:	4b3e      	ldr	r3, [pc, #248]	; (8000fb8 <main+0x30c>)
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ec4:	d206      	bcs.n	8000ed4 <main+0x228>
 8000ec6:	4b3c      	ldr	r3, [pc, #240]	; (8000fb8 <main+0x30c>)
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d002      	beq.n	8000ed4 <main+0x228>
					skipSteps = num;
 8000ece:	4a3a      	ldr	r2, [pc, #232]	; (8000fb8 <main+0x30c>)
 8000ed0:	88bb      	ldrh	r3, [r7, #4]
 8000ed2:	8013      	strh	r3, [r2, #0]
				}
				printf("%d\r\n", skipSteps);
 8000ed4:	4b38      	ldr	r3, [pc, #224]	; (8000fb8 <main+0x30c>)
 8000ed6:	881b      	ldrh	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4842      	ldr	r0, [pc, #264]	; (8000fe4 <main+0x338>)
 8000edc:	f00b f81c 	bl	800bf18 <iprintf>
				break;
 8000ee0:	e0e5      	b.n	80010ae <main+0x402>
			case 4:
				//apply offsets here so that focus is on the correct scan area, or apply in focus functions
				if (xOffset < 4096) {
 8000ee2:	4b37      	ldr	r3, [pc, #220]	; (8000fc0 <main+0x314>)
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000eea:	d202      	bcs.n	8000ef2 <main+0x246>
					xOffset = num;
 8000eec:	4a34      	ldr	r2, [pc, #208]	; (8000fc0 <main+0x314>)
 8000eee:	88bb      	ldrh	r3, [r7, #4]
 8000ef0:	8013      	strh	r3, [r2, #0]
				}
				printf("%d\r\n", xOffset);
 8000ef2:	4b33      	ldr	r3, [pc, #204]	; (8000fc0 <main+0x314>)
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	483a      	ldr	r0, [pc, #232]	; (8000fe4 <main+0x338>)
 8000efa:	f00b f80d 	bl	800bf18 <iprintf>
				break;
 8000efe:	e0d6      	b.n	80010ae <main+0x402>
			case 5:
				if (yOffset < 4096) {
 8000f00:	4b31      	ldr	r3, [pc, #196]	; (8000fc8 <main+0x31c>)
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f08:	d202      	bcs.n	8000f10 <main+0x264>
					yOffset = num;
 8000f0a:	4a2f      	ldr	r2, [pc, #188]	; (8000fc8 <main+0x31c>)
 8000f0c:	88bb      	ldrh	r3, [r7, #4]
 8000f0e:	8013      	strh	r3, [r2, #0]
				}
				printf("%d\r\n", yOffset);
 8000f10:	4b2d      	ldr	r3, [pc, #180]	; (8000fc8 <main+0x31c>)
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	4833      	ldr	r0, [pc, #204]	; (8000fe4 <main+0x338>)
 8000f18:	f00a fffe 	bl	800bf18 <iprintf>
				break;
 8000f1c:	e0c7      	b.n	80010ae <main+0x402>
			case 6:
			    if (num <= 5) {
 8000f1e:	88bb      	ldrh	r3, [r7, #4]
 8000f20:	2b05      	cmp	r3, #5
 8000f22:	d87d      	bhi.n	8001020 <main+0x374>
				  adcGain = num;
 8000f24:	88bb      	ldrh	r3, [r7, #4]
 8000f26:	71fb      	strb	r3, [r7, #7]
				  HAL_OPAMP_Stop(&hopamp1);
 8000f28:	481c      	ldr	r0, [pc, #112]	; (8000f9c <main+0x2f0>)
 8000f2a:	f003 fa62 	bl	80043f2 <HAL_OPAMP_Stop>
				  HAL_OPAMP_Stop(&hopamp4);
 8000f2e:	481c      	ldr	r0, [pc, #112]	; (8000fa0 <main+0x2f4>)
 8000f30:	f003 fa5f 	bl	80043f2 <HAL_OPAMP_Stop>
				  switch (adcGain) {
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	2b05      	cmp	r3, #5
 8000f38:	d862      	bhi.n	8001000 <main+0x354>
 8000f3a:	a201      	add	r2, pc, #4	; (adr r2, 8000f40 <main+0x294>)
 8000f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f40:	08000f59 	.word	0x08000f59
 8000f44:	08000f61 	.word	0x08000f61
 8000f48:	08000f6b 	.word	0x08000f6b
 8000f4c:	08000f75 	.word	0x08000f75
 8000f50:	08000fed 	.word	0x08000fed
 8000f54:	08000ff7 	.word	0x08000ff7
					  case 0:
					    pgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8000f58:	4b23      	ldr	r3, [pc, #140]	; (8000fe8 <main+0x33c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
					    break;
 8000f5e:	e04f      	b.n	8001000 <main+0x354>
					  case 1:
					    pgaGain = OPAMP_PGA_GAIN_4_OR_MINUS_3;
 8000f60:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <main+0x33c>)
 8000f62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f66:	601a      	str	r2, [r3, #0]
					    break;
 8000f68:	e04a      	b.n	8001000 <main+0x354>
					  case 2:
					    pgaGain = OPAMP_PGA_GAIN_8_OR_MINUS_7;
 8000f6a:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <main+0x33c>)
 8000f6c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f70:	601a      	str	r2, [r3, #0]
					    break;
 8000f72:	e045      	b.n	8001000 <main+0x354>
					  case 3:
					    pgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000f74:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <main+0x33c>)
 8000f76:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000f7a:	601a      	str	r2, [r3, #0]
					    break;
 8000f7c:	e040      	b.n	8001000 <main+0x354>
 8000f7e:	bf00      	nop
 8000f80:	200002ec 	.word	0x200002ec
 8000f84:	20000300 	.word	0x20000300
 8000f88:	20000314 	.word	0x20000314
 8000f8c:	20000214 	.word	0x20000214
 8000f90:	20000280 	.word	0x20000280
 8000f94:	20000364 	.word	0x20000364
 8000f98:	200003dc 	.word	0x200003dc
 8000f9c:	20000328 	.word	0x20000328
 8000fa0:	200003a0 	.word	0x200003a0
 8000fa4:	20000418 	.word	0x20000418
 8000fa8:	200004b0 	.word	0x200004b0
 8000fac:	0800d344 	.word	0x0800d344
 8000fb0:	20000470 	.word	0x20000470
 8000fb4:	0800d350 	.word	0x0800d350
 8000fb8:	20000004 	.word	0x20000004
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	20000006 	.word	0x20000006
 8000fc4:	20000002 	.word	0x20000002
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	20000468 	.word	0x20000468
 8000fd0:	2000046c 	.word	0x2000046c
 8000fd4:	0800d35c 	.word	0x0800d35c
 8000fd8:	0800d36c 	.word	0x0800d36c
 8000fdc:	0800d374 	.word	0x0800d374
 8000fe0:	0800d388 	.word	0x0800d388
 8000fe4:	0800d2d4 	.word	0x0800d2d4
 8000fe8:	20000464 	.word	0x20000464
					  case 4:
					    pgaGain = OPAMP_PGA_GAIN_32_OR_MINUS_31;
 8000fec:	4b33      	ldr	r3, [pc, #204]	; (80010bc <main+0x410>)
 8000fee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ff2:	601a      	str	r2, [r3, #0]
					    break;
 8000ff4:	e004      	b.n	8001000 <main+0x354>
					  case 5:
					    pgaGain = OPAMP_PGA_GAIN_64_OR_MINUS_63;
 8000ff6:	4b31      	ldr	r3, [pc, #196]	; (80010bc <main+0x410>)
 8000ff8:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 8000ffc:	601a      	str	r2, [r3, #0]
					    break;
 8000ffe:	bf00      	nop
				  }
				  HAL_Delay(2); //just to give it time to shut down?
 8001000:	2002      	movs	r0, #2
 8001002:	f000 fea5 	bl	8001d50 <HAL_Delay>
				  MX_OPAMP1_Init();
 8001006:	f000 fa55 	bl	80014b4 <MX_OPAMP1_Init>
				  MX_OPAMP4_Init();
 800100a:	f000 faa9 	bl	8001560 <MX_OPAMP4_Init>
				  HAL_Delay(2); //just to give it time to start up?
 800100e:	2002      	movs	r0, #2
 8001010:	f000 fe9e 	bl	8001d50 <HAL_Delay>
				  HAL_OPAMP_Start(&hopamp1);
 8001014:	482a      	ldr	r0, [pc, #168]	; (80010c0 <main+0x414>)
 8001016:	f003 f9bb 	bl	8004390 <HAL_OPAMP_Start>
				  HAL_OPAMP_Start(&hopamp4);
 800101a:	482a      	ldr	r0, [pc, #168]	; (80010c4 <main+0x418>)
 800101c:	f003 f9b8 	bl	8004390 <HAL_OPAMP_Start>
			    }
			    printf("%d\r\n", adcGain);
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	4619      	mov	r1, r3
 8001024:	4828      	ldr	r0, [pc, #160]	; (80010c8 <main+0x41c>)
 8001026:	f00a ff77 	bl	800bf18 <iprintf>
			    break;
 800102a:	e040      	b.n	80010ae <main+0x402>
			case 7:
				if (num <= 2500) {
 800102c:	88bb      	ldrh	r3, [r7, #4]
 800102e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001032:	4293      	cmp	r3, r2
 8001034:	d809      	bhi.n	800104a <main+0x39e>
					laserPower = num;
 8001036:	4a25      	ldr	r2, [pc, #148]	; (80010cc <main+0x420>)
 8001038:	88bb      	ldrh	r3, [r7, #4]
 800103a:	8013      	strh	r3, [r2, #0]
					HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, laserPower);
 800103c:	4b23      	ldr	r3, [pc, #140]	; (80010cc <main+0x420>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	2200      	movs	r2, #0
 8001042:	2100      	movs	r1, #0
 8001044:	4822      	ldr	r0, [pc, #136]	; (80010d0 <main+0x424>)
 8001046:	f002 fd81 	bl	8003b4c <HAL_DAC_SetValue>
				}
				printf("%d\r\n", laserPower);
 800104a:	4b20      	ldr	r3, [pc, #128]	; (80010cc <main+0x420>)
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	4619      	mov	r1, r3
 8001050:	481d      	ldr	r0, [pc, #116]	; (80010c8 <main+0x41c>)
 8001052:	f00a ff61 	bl	800bf18 <iprintf>
				break;
 8001056:	e02a      	b.n	80010ae <main+0x402>
			case 8:
				//TODO: apply averaging to focus as well for very high zoom (fine only?)
				if (num <= 20 && num != 0) {
 8001058:	88bb      	ldrh	r3, [r7, #4]
 800105a:	2b14      	cmp	r3, #20
 800105c:	d806      	bhi.n	800106c <main+0x3c0>
 800105e:	88bb      	ldrh	r3, [r7, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <main+0x3c0>
					adcAvg = num;
 8001064:	88bb      	ldrh	r3, [r7, #4]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <main+0x428>)
 800106a:	701a      	strb	r2, [r3, #0]
				}
				printf("%d\r\n", adcAvg);
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <main+0x428>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4619      	mov	r1, r3
 8001072:	4815      	ldr	r0, [pc, #84]	; (80010c8 <main+0x41c>)
 8001074:	f00a ff50 	bl	800bf18 <iprintf>
				break;
 8001078:	e019      	b.n	80010ae <main+0x402>
			case 9:
				if (num == 1) {
 800107a:	88bb      	ldrh	r3, [r7, #4]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d107      	bne.n	8001090 <main+0x3e4>
					printf("%d\r\n", fineFocus());
 8001080:	f7ff fbb0 	bl	80007e4 <fineFocus>
 8001084:	4603      	mov	r3, r0
 8001086:	4619      	mov	r1, r3
 8001088:	480f      	ldr	r0, [pc, #60]	; (80010c8 <main+0x41c>)
 800108a:	f00a ff45 	bl	800bf18 <iprintf>
				} else if (num == 2) {
					printf("%d\r\n", coarseFocus());
				} else {
					printf("Bad input\r\n");
				}
				break;
 800108e:	e00d      	b.n	80010ac <main+0x400>
				} else if (num == 2) {
 8001090:	88bb      	ldrh	r3, [r7, #4]
 8001092:	2b02      	cmp	r3, #2
 8001094:	d107      	bne.n	80010a6 <main+0x3fa>
					printf("%d\r\n", coarseFocus());
 8001096:	f7ff fc75 	bl	8000984 <coarseFocus>
 800109a:	4603      	mov	r3, r0
 800109c:	4619      	mov	r1, r3
 800109e:	480a      	ldr	r0, [pc, #40]	; (80010c8 <main+0x41c>)
 80010a0:	f00a ff3a 	bl	800bf18 <iprintf>
				break;
 80010a4:	e002      	b.n	80010ac <main+0x400>
					printf("Bad input\r\n");
 80010a6:	480c      	ldr	r0, [pc, #48]	; (80010d8 <main+0x42c>)
 80010a8:	f00a ffbc 	bl	800c024 <puts>
				break;
 80010ac:	bf00      	nop
		  }

		  newReceived = false;
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <main+0x430>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_Delay(100); //100ms polling delay
 80010b4:	2064      	movs	r0, #100	; 0x64
 80010b6:	f000 fe4b 	bl	8001d50 <HAL_Delay>
  {
 80010ba:	e63f      	b.n	8000d3c <main+0x90>
 80010bc:	20000464 	.word	0x20000464
 80010c0:	20000328 	.word	0x20000328
 80010c4:	200003a0 	.word	0x200003a0
 80010c8:	0800d2d4 	.word	0x0800d2d4
 80010cc:	2000000c 	.word	0x2000000c
 80010d0:	20000300 	.word	0x20000300
 80010d4:	2000000a 	.word	0x2000000a
 80010d8:	0800d3a0 	.word	0x0800d3a0
 80010dc:	200004b0 	.word	0x200004b0

080010e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b094      	sub	sp, #80	; 0x50
 80010e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e6:	f107 0318 	add.w	r3, r7, #24
 80010ea:	2238      	movs	r2, #56	; 0x38
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f00a ff0a 	bl	800bf08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001102:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001106:	f004 fee1 	bl	8005ecc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800110a:	2301      	movs	r3, #1
 800110c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800110e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001112:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001114:	2302      	movs	r3, #2
 8001116:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001118:	2303      	movs	r3, #3
 800111a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800111c:	2302      	movs	r3, #2
 800111e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 23;
 8001120:	2317      	movs	r3, #23
 8001122:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001124:	2302      	movs	r3, #2
 8001126:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8001128:	2306      	movs	r3, #6
 800112a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800112c:	2302      	movs	r3, #2
 800112e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001130:	f107 0318 	add.w	r3, r7, #24
 8001134:	4618      	mov	r0, r3
 8001136:	f004 ff6d 	bl	8006014 <HAL_RCC_OscConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001140:	f000 fae8 	bl	8001714 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001144:	230f      	movs	r3, #15
 8001146:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001148:	2303      	movs	r3, #3
 800114a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	2104      	movs	r1, #4
 800115c:	4618      	mov	r0, r3
 800115e:	f005 fa71 	bl	8006644 <HAL_RCC_ClockConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001168:	f000 fad4 	bl	8001714 <Error_Handler>
  }
}
 800116c:	bf00      	nop
 800116e:	3750      	adds	r7, #80	; 0x50
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08c      	sub	sp, #48	; 0x30
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800117a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2220      	movs	r2, #32
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f00a febb 	bl	800bf08 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001192:	4b32      	ldr	r3, [pc, #200]	; (800125c <MX_ADC1_Init+0xe8>)
 8001194:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001198:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800119a:	4b30      	ldr	r3, [pc, #192]	; (800125c <MX_ADC1_Init+0xe8>)
 800119c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011a2:	4b2e      	ldr	r3, [pc, #184]	; (800125c <MX_ADC1_Init+0xe8>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011a8:	4b2c      	ldr	r3, [pc, #176]	; (800125c <MX_ADC1_Init+0xe8>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80011ae:	4b2b      	ldr	r3, [pc, #172]	; (800125c <MX_ADC1_Init+0xe8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011b4:	4b29      	ldr	r3, [pc, #164]	; (800125c <MX_ADC1_Init+0xe8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ba:	4b28      	ldr	r3, [pc, #160]	; (800125c <MX_ADC1_Init+0xe8>)
 80011bc:	2204      	movs	r2, #4
 80011be:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011c0:	4b26      	ldr	r3, [pc, #152]	; (800125c <MX_ADC1_Init+0xe8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011c6:	4b25      	ldr	r3, [pc, #148]	; (800125c <MX_ADC1_Init+0xe8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80011cc:	4b23      	ldr	r3, [pc, #140]	; (800125c <MX_ADC1_Init+0xe8>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <MX_ADC1_Init+0xe8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <MX_ADC1_Init+0xe8>)
 80011dc:	2200      	movs	r2, #0
 80011de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011e0:	4b1e      	ldr	r3, [pc, #120]	; (800125c <MX_ADC1_Init+0xe8>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011e6:	4b1d      	ldr	r3, [pc, #116]	; (800125c <MX_ADC1_Init+0xe8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <MX_ADC1_Init+0xe8>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <MX_ADC1_Init+0xe8>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011fc:	4817      	ldr	r0, [pc, #92]	; (800125c <MX_ADC1_Init+0xe8>)
 80011fe:	f001 f847 	bl	8002290 <HAL_ADC_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001208:	f000 fa84 	bl	8001714 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800120c:	2300      	movs	r3, #0
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001214:	4619      	mov	r1, r3
 8001216:	4811      	ldr	r0, [pc, #68]	; (800125c <MX_ADC1_Init+0xe8>)
 8001218:	f002 fa0c 	bl	8003634 <HAL_ADCEx_MultiModeConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001222:	f000 fa77 	bl	8001714 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_ADC1_Init+0xec>)
 8001228:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800122a:	2306      	movs	r3, #6
 800122c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001232:	237f      	movs	r3, #127	; 0x7f
 8001234:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001236:	2304      	movs	r3, #4
 8001238:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	4619      	mov	r1, r3
 8001242:	4806      	ldr	r0, [pc, #24]	; (800125c <MX_ADC1_Init+0xe8>)
 8001244:	f001 fc12 	bl	8002a6c <HAL_ADC_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800124e:	f000 fa61 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	3730      	adds	r7, #48	; 0x30
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000214 	.word	0x20000214
 8001260:	b6902000 	.word	0xb6902000

08001264 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800126a:	463b      	mov	r3, r7
 800126c:	2220      	movs	r2, #32
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f00a fe49 	bl	800bf08 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8001276:	4b2b      	ldr	r3, [pc, #172]	; (8001324 <MX_ADC5_Init+0xc0>)
 8001278:	4a2b      	ldr	r2, [pc, #172]	; (8001328 <MX_ADC5_Init+0xc4>)
 800127a:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800127c:	4b29      	ldr	r3, [pc, #164]	; (8001324 <MX_ADC5_Init+0xc0>)
 800127e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001282:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001284:	4b27      	ldr	r3, [pc, #156]	; (8001324 <MX_ADC5_Init+0xc0>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800128a:	4b26      	ldr	r3, [pc, #152]	; (8001324 <MX_ADC5_Init+0xc0>)
 800128c:	2200      	movs	r2, #0
 800128e:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8001290:	4b24      	ldr	r3, [pc, #144]	; (8001324 <MX_ADC5_Init+0xc0>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001296:	4b23      	ldr	r3, [pc, #140]	; (8001324 <MX_ADC5_Init+0xc0>)
 8001298:	2200      	movs	r2, #0
 800129a:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800129c:	4b21      	ldr	r3, [pc, #132]	; (8001324 <MX_ADC5_Init+0xc0>)
 800129e:	2204      	movs	r2, #4
 80012a0:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80012a2:	4b20      	ldr	r3, [pc, #128]	; (8001324 <MX_ADC5_Init+0xc0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 80012a8:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <MX_ADC5_Init+0xc0>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 80012ae:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <MX_ADC5_Init+0xc0>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <MX_ADC5_Init+0xc0>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012bc:	4b19      	ldr	r3, [pc, #100]	; (8001324 <MX_ADC5_Init+0xc0>)
 80012be:	2200      	movs	r2, #0
 80012c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012c2:	4b18      	ldr	r3, [pc, #96]	; (8001324 <MX_ADC5_Init+0xc0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 80012c8:	4b16      	ldr	r3, [pc, #88]	; (8001324 <MX_ADC5_Init+0xc0>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012d0:	4b14      	ldr	r3, [pc, #80]	; (8001324 <MX_ADC5_Init+0xc0>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 80012d6:	4b13      	ldr	r3, [pc, #76]	; (8001324 <MX_ADC5_Init+0xc0>)
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80012de:	4811      	ldr	r0, [pc, #68]	; (8001324 <MX_ADC5_Init+0xc0>)
 80012e0:	f000 ffd6 	bl	8002290 <HAL_ADC_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 80012ea:	f000 fa13 	bl	8001714 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP4;
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <MX_ADC5_Init+0xc8>)
 80012f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012f2:	2306      	movs	r3, #6
 80012f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012fa:	237f      	movs	r3, #127	; 0x7f
 80012fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012fe:	2304      	movs	r3, #4
 8001300:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001306:	463b      	mov	r3, r7
 8001308:	4619      	mov	r1, r3
 800130a:	4806      	ldr	r0, [pc, #24]	; (8001324 <MX_ADC5_Init+0xc0>)
 800130c:	f001 fbae 	bl	8002a6c <HAL_ADC_ConfigChannel>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8001316:	f000 f9fd 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	3720      	adds	r7, #32
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000280 	.word	0x20000280
 8001328:	50000600 	.word	0x50000600
 800132c:	94f00020 	.word	0x94f00020

08001330 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08c      	sub	sp, #48	; 0x30
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001336:	463b      	mov	r3, r7
 8001338:	2230      	movs	r2, #48	; 0x30
 800133a:	2100      	movs	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f00a fde3 	bl	800bf08 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001342:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <MX_DAC1_Init+0x80>)
 8001344:	4a1b      	ldr	r2, [pc, #108]	; (80013b4 <MX_DAC1_Init+0x84>)
 8001346:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001348:	4819      	ldr	r0, [pc, #100]	; (80013b0 <MX_DAC1_Init+0x80>)
 800134a:	f002 fb8a 	bl	8003a62 <HAL_DAC_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001354:	f000 f9de 	bl	8001714 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001358:	2302      	movs	r3, #2
 800135a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800136c:	2300      	movs	r3, #0
 800136e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001374:	2301      	movs	r3, #1
 8001376:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800137c:	463b      	mov	r3, r7
 800137e:	2200      	movs	r2, #0
 8001380:	4619      	mov	r1, r3
 8001382:	480b      	ldr	r0, [pc, #44]	; (80013b0 <MX_DAC1_Init+0x80>)
 8001384:	f002 fc0a 	bl	8003b9c <HAL_DAC_ConfigChannel>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800138e:	f000 f9c1 	bl	8001714 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001392:	463b      	mov	r3, r7
 8001394:	2210      	movs	r2, #16
 8001396:	4619      	mov	r1, r3
 8001398:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_DAC1_Init+0x80>)
 800139a:	f002 fbff 	bl	8003b9c <HAL_DAC_ConfigChannel>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 80013a4:	f000 f9b6 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	3730      	adds	r7, #48	; 0x30
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200002ec 	.word	0x200002ec
 80013b4:	50000800 	.word	0x50000800

080013b8 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08c      	sub	sp, #48	; 0x30
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80013be:	463b      	mov	r3, r7
 80013c0:	2230      	movs	r2, #48	; 0x30
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f00a fd9f 	bl	800bf08 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 80013ca:	4b16      	ldr	r3, [pc, #88]	; (8001424 <MX_DAC2_Init+0x6c>)
 80013cc:	4a16      	ldr	r2, [pc, #88]	; (8001428 <MX_DAC2_Init+0x70>)
 80013ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80013d0:	4814      	ldr	r0, [pc, #80]	; (8001424 <MX_DAC2_Init+0x6c>)
 80013d2:	f002 fb46 	bl	8003a62 <HAL_DAC_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80013dc:	f000 f99a 	bl	8001714 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80013e0:	2302      	movs	r3, #2
 80013e2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80013fc:	2301      	movs	r3, #1
 80013fe:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001404:	463b      	mov	r3, r7
 8001406:	2200      	movs	r2, #0
 8001408:	4619      	mov	r1, r3
 800140a:	4806      	ldr	r0, [pc, #24]	; (8001424 <MX_DAC2_Init+0x6c>)
 800140c:	f002 fbc6 	bl	8003b9c <HAL_DAC_ConfigChannel>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8001416:	f000 f97d 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	3730      	adds	r7, #48	; 0x30
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000300 	.word	0x20000300
 8001428:	50000c00 	.word	0x50000c00

0800142c <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08c      	sub	sp, #48	; 0x30
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001432:	463b      	mov	r3, r7
 8001434:	2230      	movs	r2, #48	; 0x30
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f00a fd65 	bl	800bf08 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 800143e:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <MX_DAC3_Init+0x80>)
 8001440:	4a1b      	ldr	r2, [pc, #108]	; (80014b0 <MX_DAC3_Init+0x84>)
 8001442:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8001444:	4819      	ldr	r0, [pc, #100]	; (80014ac <MX_DAC3_Init+0x80>)
 8001446:	f002 fb0c 	bl	8003a62 <HAL_DAC_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8001450:	f000 f960 	bl	8001714 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001454:	2302      	movs	r3, #2
 8001456:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800145c:	2300      	movs	r3, #0
 800145e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001468:	2300      	movs	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800146c:	2302      	movs	r3, #2
 800146e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001470:	2302      	movs	r3, #2
 8001472:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001478:	463b      	mov	r3, r7
 800147a:	2200      	movs	r2, #0
 800147c:	4619      	mov	r1, r3
 800147e:	480b      	ldr	r0, [pc, #44]	; (80014ac <MX_DAC3_Init+0x80>)
 8001480:	f002 fb8c 	bl	8003b9c <HAL_DAC_ConfigChannel>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 800148a:	f000 f943 	bl	8001714 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800148e:	463b      	mov	r3, r7
 8001490:	2210      	movs	r2, #16
 8001492:	4619      	mov	r1, r3
 8001494:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_DAC3_Init+0x80>)
 8001496:	f002 fb81 	bl	8003b9c <HAL_DAC_ConfigChannel>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_DAC3_Init+0x78>
  {
    Error_Handler();
 80014a0:	f000 f938 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	3730      	adds	r7, #48	; 0x30
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000314 	.word	0x20000314
 80014b0:	50001000 	.word	0x50001000

080014b4 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 80014b8:	4b13      	ldr	r3, [pc, #76]	; (8001508 <MX_OPAMP1_Init+0x54>)
 80014ba:	4a14      	ldr	r2, [pc, #80]	; (800150c <MX_OPAMP1_Init+0x58>)
 80014bc:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <MX_OPAMP1_Init+0x54>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 80014c4:	4b10      	ldr	r3, [pc, #64]	; (8001508 <MX_OPAMP1_Init+0x54>)
 80014c6:	2240      	movs	r2, #64	; 0x40
 80014c8:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <MX_OPAMP1_Init+0x54>)
 80014cc:	2208      	movs	r2, #8
 80014ce:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 80014d0:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <MX_OPAMP1_Init+0x54>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <MX_OPAMP1_Init+0x54>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80014dc:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <MX_OPAMP1_Init+0x54>)
 80014de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014e2:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = pgaGain;
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <MX_OPAMP1_Init+0x5c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b07      	ldr	r3, [pc, #28]	; (8001508 <MX_OPAMP1_Init+0x54>)
 80014ec:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <MX_OPAMP1_Init+0x54>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80014f4:	4804      	ldr	r0, [pc, #16]	; (8001508 <MX_OPAMP1_Init+0x54>)
 80014f6:	f002 fe7b 	bl	80041f0 <HAL_OPAMP_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_OPAMP1_Init+0x50>
  {
    Error_Handler();
 8001500:	f000 f908 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000328 	.word	0x20000328
 800150c:	40010300 	.word	0x40010300
 8001510:	20000464 	.word	0x20000464

08001514 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8001518:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <MX_OPAMP3_Init+0x44>)
 800151a:	4a10      	ldr	r2, [pc, #64]	; (800155c <MX_OPAMP3_Init+0x48>)
 800151c:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <MX_OPAMP3_Init+0x44>)
 8001520:	2200      	movs	r2, #0
 8001522:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <MX_OPAMP3_Init+0x44>)
 8001526:	2260      	movs	r2, #96	; 0x60
 8001528:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <MX_OPAMP3_Init+0x44>)
 800152c:	220c      	movs	r2, #12
 800152e:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <MX_OPAMP3_Init+0x44>)
 8001532:	2200      	movs	r2, #0
 8001534:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001536:	4b08      	ldr	r3, [pc, #32]	; (8001558 <MX_OPAMP3_Init+0x44>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <MX_OPAMP3_Init+0x44>)
 800153e:	2200      	movs	r2, #0
 8001540:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001542:	4805      	ldr	r0, [pc, #20]	; (8001558 <MX_OPAMP3_Init+0x44>)
 8001544:	f002 fe54 	bl	80041f0 <HAL_OPAMP_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 800154e:	f000 f8e1 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000364 	.word	0x20000364
 800155c:	40010308 	.word	0x40010308

08001560 <MX_OPAMP4_Init>:
  * @brief OPAMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP4_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP4_Init 0 */

  /* USER CODE BEGIN OPAMP4_Init 1 */

  /* USER CODE END OPAMP4_Init 1 */
  hopamp4.Instance = OPAMP4;
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <MX_OPAMP4_Init+0x54>)
 8001566:	4a14      	ldr	r2, [pc, #80]	; (80015b8 <MX_OPAMP4_Init+0x58>)
 8001568:	601a      	str	r2, [r3, #0]
  hopamp4.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <MX_OPAMP4_Init+0x54>)
 800156c:	2200      	movs	r2, #0
 800156e:	605a      	str	r2, [r3, #4]
  hopamp4.Init.Mode = OPAMP_PGA_MODE;
 8001570:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <MX_OPAMP4_Init+0x54>)
 8001572:	2240      	movs	r2, #64	; 0x40
 8001574:	609a      	str	r2, [r3, #8]
  hopamp4.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <MX_OPAMP4_Init+0x54>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  hopamp4.Init.InternalOutput = ENABLE;
 800157c:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <MX_OPAMP4_Init+0x54>)
 800157e:	2201      	movs	r2, #1
 8001580:	751a      	strb	r2, [r3, #20]
  hopamp4.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <MX_OPAMP4_Init+0x54>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  hopamp4.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8001588:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <MX_OPAMP4_Init+0x54>)
 800158a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800158e:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp4.Init.PgaGain = pgaGain;
 8001590:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <MX_OPAMP4_Init+0x5c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	461a      	mov	r2, r3
 8001596:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <MX_OPAMP4_Init+0x54>)
 8001598:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp4.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <MX_OPAMP4_Init+0x54>)
 800159c:	2200      	movs	r2, #0
 800159e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 80015a0:	4804      	ldr	r0, [pc, #16]	; (80015b4 <MX_OPAMP4_Init+0x54>)
 80015a2:	f002 fe25 	bl	80041f0 <HAL_OPAMP_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_OPAMP4_Init+0x50>
  {
    Error_Handler();
 80015ac:	f000 f8b2 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP4_Init 2 */

  /* USER CODE END OPAMP4_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	200003a0 	.word	0x200003a0
 80015b8:	4001030c 	.word	0x4001030c
 80015bc:	20000464 	.word	0x20000464

080015c0 <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <MX_OPAMP6_Init+0x44>)
 80015c6:	4a10      	ldr	r2, [pc, #64]	; (8001608 <MX_OPAMP6_Init+0x48>)
 80015c8:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <MX_OPAMP6_Init+0x44>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_FOLLOWER_MODE;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <MX_OPAMP6_Init+0x44>)
 80015d2:	2260      	movs	r2, #96	; 0x60
 80015d4:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <MX_OPAMP6_Init+0x44>)
 80015d8:	220c      	movs	r2, #12
 80015da:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = DISABLE;
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <MX_OPAMP6_Init+0x44>)
 80015de:	2200      	movs	r2, #0
 80015e0:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <MX_OPAMP6_Init+0x44>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_OPAMP6_Init+0x44>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 80015ee:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_OPAMP6_Init+0x44>)
 80015f0:	f002 fdfe 	bl	80041f0 <HAL_OPAMP_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_OPAMP6_Init+0x3e>
  {
    Error_Handler();
 80015fa:	f000 f88b 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200003dc 	.word	0x200003dc
 8001608:	40010314 	.word	0x40010314

0800160c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001612:	f107 0310 	add.w	r3, r7, #16
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800162a:	4b20      	ldr	r3, [pc, #128]	; (80016ac <MX_TIM1_Init+0xa0>)
 800162c:	4a20      	ldr	r2, [pc, #128]	; (80016b0 <MX_TIM1_Init+0xa4>)
 800162e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 143.75-1;
 8001630:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <MX_TIM1_Init+0xa0>)
 8001632:	228e      	movs	r2, #142	; 0x8e
 8001634:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001636:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <MX_TIM1_Init+0xa0>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <MX_TIM1_Init+0xa0>)
 800163e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001642:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001644:	4b19      	ldr	r3, [pc, #100]	; (80016ac <MX_TIM1_Init+0xa0>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800164a:	4b18      	ldr	r3, [pc, #96]	; (80016ac <MX_TIM1_Init+0xa0>)
 800164c:	2200      	movs	r2, #0
 800164e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001650:	4b16      	ldr	r3, [pc, #88]	; (80016ac <MX_TIM1_Init+0xa0>)
 8001652:	2200      	movs	r2, #0
 8001654:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001656:	4815      	ldr	r0, [pc, #84]	; (80016ac <MX_TIM1_Init+0xa0>)
 8001658:	f005 fc32 	bl	8006ec0 <HAL_TIM_Base_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001662:	f000 f857 	bl	8001714 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800166a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800166c:	f107 0310 	add.w	r3, r7, #16
 8001670:	4619      	mov	r1, r3
 8001672:	480e      	ldr	r0, [pc, #56]	; (80016ac <MX_TIM1_Init+0xa0>)
 8001674:	f005 fcec 	bl	8007050 <HAL_TIM_ConfigClockSource>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800167e:	f000 f849 	bl	8001714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	4619      	mov	r1, r3
 8001692:	4806      	ldr	r0, [pc, #24]	; (80016ac <MX_TIM1_Init+0xa0>)
 8001694:	f005 ff2c 	bl	80074f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800169e:	f000 f839 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	3720      	adds	r7, #32
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000418 	.word	0x20000418
 80016b0:	40012c00 	.word	0x40012c00

080016b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <MX_GPIO_Init+0x5c>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	4a14      	ldr	r2, [pc, #80]	; (8001710 <MX_GPIO_Init+0x5c>)
 80016c0:	f043 0320 	orr.w	r3, r3, #32
 80016c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <MX_GPIO_Init+0x5c>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	f003 0320 	and.w	r3, r3, #32
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <MX_GPIO_Init+0x5c>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <MX_GPIO_Init+0x5c>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <MX_GPIO_Init+0x5c>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_GPIO_Init+0x5c>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ee:	4a08      	ldr	r2, [pc, #32]	; (8001710 <MX_GPIO_Init+0x5c>)
 80016f0:	f043 0302 	orr.w	r3, r3, #2
 80016f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_GPIO_Init+0x5c>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]

}
 8001702:	bf00      	nop
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000

08001714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001718:	b672      	cpsid	i
}
 800171a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800171c:	e7fe      	b.n	800171c <Error_Handler+0x8>
	...

08001720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001726:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <HAL_MspInit+0x44>)
 8001728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172a:	4a0e      	ldr	r2, [pc, #56]	; (8001764 <HAL_MspInit+0x44>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6613      	str	r3, [r2, #96]	; 0x60
 8001732:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <HAL_MspInit+0x44>)
 8001734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <HAL_MspInit+0x44>)
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	4a08      	ldr	r2, [pc, #32]	; (8001764 <HAL_MspInit+0x44>)
 8001744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001748:	6593      	str	r3, [r2, #88]	; 0x58
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_MspInit+0x44>)
 800174c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	40021000 	.word	0x40021000

08001768 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b09a      	sub	sp, #104	; 0x68
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	2254      	movs	r2, #84	; 0x54
 8001776:	2100      	movs	r1, #0
 8001778:	4618      	mov	r0, r3
 800177a:	f00a fbc5 	bl	800bf08 <memset>
  if(hadc->Instance==ADC1)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001786:	d11c      	bne.n	80017c2 <HAL_ADC_MspInit+0x5a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001788:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800178c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800178e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001792:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4618      	mov	r0, r3
 800179a:	f005 f943 	bl	8006a24 <HAL_RCCEx_PeriphCLKConfig>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 80017a4:	f7ff ffb6 	bl	8001714 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80017a8:	4b18      	ldr	r3, [pc, #96]	; (800180c <HAL_ADC_MspInit+0xa4>)
 80017aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ac:	4a17      	ldr	r2, [pc, #92]	; (800180c <HAL_ADC_MspInit+0xa4>)
 80017ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b4:	4b15      	ldr	r3, [pc, #84]	; (800180c <HAL_ADC_MspInit+0xa4>)
 80017b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 80017c0:	e020      	b.n	8001804 <HAL_ADC_MspInit+0x9c>
  else if(hadc->Instance==ADC5)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a12      	ldr	r2, [pc, #72]	; (8001810 <HAL_ADC_MspInit+0xa8>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d11b      	bne.n	8001804 <HAL_ADC_MspInit+0x9c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80017cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017d0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80017d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80017d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4618      	mov	r0, r3
 80017de:	f005 f921 	bl	8006a24 <HAL_RCCEx_PeriphCLKConfig>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <HAL_ADC_MspInit+0x84>
      Error_Handler();
 80017e8:	f7ff ff94 	bl	8001714 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80017ec:	4b07      	ldr	r3, [pc, #28]	; (800180c <HAL_ADC_MspInit+0xa4>)
 80017ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f0:	4a06      	ldr	r2, [pc, #24]	; (800180c <HAL_ADC_MspInit+0xa4>)
 80017f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <HAL_ADC_MspInit+0xa4>)
 80017fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	68fb      	ldr	r3, [r7, #12]
}
 8001804:	bf00      	nop
 8001806:	3768      	adds	r7, #104	; 0x68
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40021000 	.word	0x40021000
 8001810:	50000600 	.word	0x50000600

08001814 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08c      	sub	sp, #48	; 0x30
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 031c 	add.w	r3, r7, #28
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a34      	ldr	r2, [pc, #208]	; (8001904 <HAL_DAC_MspInit+0xf0>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d125      	bne.n	8001882 <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001836:	4b34      	ldr	r3, [pc, #208]	; (8001908 <HAL_DAC_MspInit+0xf4>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	4a33      	ldr	r2, [pc, #204]	; (8001908 <HAL_DAC_MspInit+0xf4>)
 800183c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001842:	4b31      	ldr	r3, [pc, #196]	; (8001908 <HAL_DAC_MspInit+0xf4>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184a:	61bb      	str	r3, [r7, #24]
 800184c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	4b2e      	ldr	r3, [pc, #184]	; (8001908 <HAL_DAC_MspInit+0xf4>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	4a2d      	ldr	r2, [pc, #180]	; (8001908 <HAL_DAC_MspInit+0xf4>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800185a:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <HAL_DAC_MspInit+0xf4>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001866:	2330      	movs	r3, #48	; 0x30
 8001868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800186a:	2303      	movs	r3, #3
 800186c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001872:	f107 031c 	add.w	r3, r7, #28
 8001876:	4619      	mov	r1, r3
 8001878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187c:	f002 fb36 	bl	8003eec <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 8001880:	e03b      	b.n	80018fa <HAL_DAC_MspInit+0xe6>
  else if(hdac->Instance==DAC2)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a21      	ldr	r2, [pc, #132]	; (800190c <HAL_DAC_MspInit+0xf8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d125      	bne.n	80018d8 <HAL_DAC_MspInit+0xc4>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800188c:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <HAL_DAC_MspInit+0xf4>)
 800188e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001890:	4a1d      	ldr	r2, [pc, #116]	; (8001908 <HAL_DAC_MspInit+0xf4>)
 8001892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001896:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <HAL_DAC_MspInit+0xf4>)
 800189a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a4:	4b18      	ldr	r3, [pc, #96]	; (8001908 <HAL_DAC_MspInit+0xf4>)
 80018a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a8:	4a17      	ldr	r2, [pc, #92]	; (8001908 <HAL_DAC_MspInit+0xf4>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b0:	4b15      	ldr	r3, [pc, #84]	; (8001908 <HAL_DAC_MspInit+0xf4>)
 80018b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018bc:	2340      	movs	r3, #64	; 0x40
 80018be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c0:	2303      	movs	r3, #3
 80018c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c8:	f107 031c 	add.w	r3, r7, #28
 80018cc:	4619      	mov	r1, r3
 80018ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d2:	f002 fb0b 	bl	8003eec <HAL_GPIO_Init>
}
 80018d6:	e010      	b.n	80018fa <HAL_DAC_MspInit+0xe6>
  else if(hdac->Instance==DAC3)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0c      	ldr	r2, [pc, #48]	; (8001910 <HAL_DAC_MspInit+0xfc>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d10b      	bne.n	80018fa <HAL_DAC_MspInit+0xe6>
    __HAL_RCC_DAC3_CLK_ENABLE();
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_DAC_MspInit+0xf4>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	4a08      	ldr	r2, [pc, #32]	; (8001908 <HAL_DAC_MspInit+0xf4>)
 80018e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_DAC_MspInit+0xf4>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
}
 80018fa:	bf00      	nop
 80018fc:	3730      	adds	r7, #48	; 0x30
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	50000800 	.word	0x50000800
 8001908:	40021000 	.word	0x40021000
 800190c:	50000c00 	.word	0x50000c00
 8001910:	50001000 	.word	0x50001000

08001914 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08c      	sub	sp, #48	; 0x30
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 031c 	add.w	r3, r7, #28
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a3d      	ldr	r2, [pc, #244]	; (8001a28 <HAL_OPAMP_MspInit+0x114>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d119      	bne.n	800196a <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	4b3d      	ldr	r3, [pc, #244]	; (8001a2c <HAL_OPAMP_MspInit+0x118>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	4a3c      	ldr	r2, [pc, #240]	; (8001a2c <HAL_OPAMP_MspInit+0x118>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001942:	4b3a      	ldr	r3, [pc, #232]	; (8001a2c <HAL_OPAMP_MspInit+0x118>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	61bb      	str	r3, [r7, #24]
 800194c:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PA3     ------> OPAMP1_VINM0
    PA7     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 800194e:	2388      	movs	r3, #136	; 0x88
 8001950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001952:	2303      	movs	r3, #3
 8001954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195a:	f107 031c 	add.w	r3, r7, #28
 800195e:	4619      	mov	r1, r3
 8001960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001964:	f002 fac2 	bl	8003eec <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 8001968:	e05a      	b.n	8001a20 <HAL_OPAMP_MspInit+0x10c>
  else if(hopamp->Instance==OPAMP3)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a30      	ldr	r2, [pc, #192]	; (8001a30 <HAL_OPAMP_MspInit+0x11c>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d118      	bne.n	80019a6 <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001974:	4b2d      	ldr	r3, [pc, #180]	; (8001a2c <HAL_OPAMP_MspInit+0x118>)
 8001976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001978:	4a2c      	ldr	r2, [pc, #176]	; (8001a2c <HAL_OPAMP_MspInit+0x118>)
 800197a:	f043 0302 	orr.w	r3, r3, #2
 800197e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001980:	4b2a      	ldr	r3, [pc, #168]	; (8001a2c <HAL_OPAMP_MspInit+0x118>)
 8001982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800198c:	2302      	movs	r3, #2
 800198e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001990:	2303      	movs	r3, #3
 8001992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001998:	f107 031c 	add.w	r3, r7, #28
 800199c:	4619      	mov	r1, r3
 800199e:	4825      	ldr	r0, [pc, #148]	; (8001a34 <HAL_OPAMP_MspInit+0x120>)
 80019a0:	f002 faa4 	bl	8003eec <HAL_GPIO_Init>
}
 80019a4:	e03c      	b.n	8001a20 <HAL_OPAMP_MspInit+0x10c>
  else if(hopamp->Instance==OPAMP4)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a23      	ldr	r2, [pc, #140]	; (8001a38 <HAL_OPAMP_MspInit+0x124>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d119      	bne.n	80019e4 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b0:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <HAL_OPAMP_MspInit+0x118>)
 80019b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b4:	4a1d      	ldr	r2, [pc, #116]	; (8001a2c <HAL_OPAMP_MspInit+0x118>)
 80019b6:	f043 0302 	orr.w	r3, r3, #2
 80019ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019bc:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <HAL_OPAMP_MspInit+0x118>)
 80019be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13;
 80019c8:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80019cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ce:	2303      	movs	r3, #3
 80019d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	4619      	mov	r1, r3
 80019dc:	4815      	ldr	r0, [pc, #84]	; (8001a34 <HAL_OPAMP_MspInit+0x120>)
 80019de:	f002 fa85 	bl	8003eec <HAL_GPIO_Init>
}
 80019e2:	e01d      	b.n	8001a20 <HAL_OPAMP_MspInit+0x10c>
  else if(hopamp->Instance==OPAMP6)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a14      	ldr	r2, [pc, #80]	; (8001a3c <HAL_OPAMP_MspInit+0x128>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d118      	bne.n	8001a20 <HAL_OPAMP_MspInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ee:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <HAL_OPAMP_MspInit+0x118>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f2:	4a0e      	ldr	r2, [pc, #56]	; (8001a2c <HAL_OPAMP_MspInit+0x118>)
 80019f4:	f043 0302 	orr.w	r3, r3, #2
 80019f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019fa:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <HAL_OPAMP_MspInit+0x118>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4806      	ldr	r0, [pc, #24]	; (8001a34 <HAL_OPAMP_MspInit+0x120>)
 8001a1c:	f002 fa66 	bl	8003eec <HAL_GPIO_Init>
}
 8001a20:	bf00      	nop
 8001a22:	3730      	adds	r7, #48	; 0x30
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40010300 	.word	0x40010300
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40010308 	.word	0x40010308
 8001a34:	48000400 	.word	0x48000400
 8001a38:	4001030c 	.word	0x4001030c
 8001a3c:	40010314 	.word	0x40010314

08001a40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <HAL_TIM_Base_MspInit+0x38>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d10b      	bne.n	8001a6a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_TIM_Base_MspInit+0x3c>)
 8001a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a56:	4a09      	ldr	r2, [pc, #36]	; (8001a7c <HAL_TIM_Base_MspInit+0x3c>)
 8001a58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a5c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a5e:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <HAL_TIM_Base_MspInit+0x3c>)
 8001a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40012c00 	.word	0x40012c00
 8001a7c:	40021000 	.word	0x40021000

08001a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <NMI_Handler+0x4>

08001a86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a8a:	e7fe      	b.n	8001a8a <HardFault_Handler+0x4>

08001a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a90:	e7fe      	b.n	8001a90 <MemManage_Handler+0x4>

08001a92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a96:	e7fe      	b.n	8001a96 <BusFault_Handler+0x4>

08001a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a9c:	e7fe      	b.n	8001a9c <UsageFault_Handler+0x4>

08001a9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001acc:	f000 f922 	bl	8001d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001ad8:	4802      	ldr	r0, [pc, #8]	; (8001ae4 <USB_LP_IRQHandler+0x10>)
 8001ada:	f002 fdcb 	bl	8004674 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20001990 	.word	0x20001990

08001ae8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	e00a      	b.n	8001b10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001afa:	f3af 8000 	nop.w
 8001afe:	4601      	mov	r1, r0
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	60ba      	str	r2, [r7, #8]
 8001b06:	b2ca      	uxtb	r2, r1
 8001b08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	dbf0      	blt.n	8001afa <_read+0x12>
  }

  return len;
 8001b18:	687b      	ldr	r3, [r7, #4]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b4a:	605a      	str	r2, [r3, #4]
  return 0;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <_isatty>:

int _isatty(int file)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b62:	2301      	movs	r3, #1
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b94:	4a14      	ldr	r2, [pc, #80]	; (8001be8 <_sbrk+0x5c>)
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <_sbrk+0x60>)
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ba0:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <_sbrk+0x64>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d102      	bne.n	8001bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <_sbrk+0x64>)
 8001baa:	4a12      	ldr	r2, [pc, #72]	; (8001bf4 <_sbrk+0x68>)
 8001bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bae:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <_sbrk+0x64>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d207      	bcs.n	8001bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bbc:	f00a f96c 	bl	800be98 <__errno>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	220c      	movs	r2, #12
 8001bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bca:	e009      	b.n	8001be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <_sbrk+0x64>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bd2:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <_sbrk+0x64>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	4a05      	ldr	r2, [pc, #20]	; (8001bf0 <_sbrk+0x64>)
 8001bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bde:	68fb      	ldr	r3, [r7, #12]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20020000 	.word	0x20020000
 8001bec:	00000400 	.word	0x00000400
 8001bf0:	200004b4 	.word	0x200004b4
 8001bf4:	20001eb8 	.word	0x20001eb8

08001bf8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <SystemInit+0x20>)
 8001bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c02:	4a05      	ldr	r2, [pc, #20]	; (8001c18 <SystemInit+0x20>)
 8001c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c1c:	480d      	ldr	r0, [pc, #52]	; (8001c54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c20:	480d      	ldr	r0, [pc, #52]	; (8001c58 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c22:	490e      	ldr	r1, [pc, #56]	; (8001c5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c24:	4a0e      	ldr	r2, [pc, #56]	; (8001c60 <LoopForever+0xe>)
  movs r3, #0
 8001c26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c28:	e002      	b.n	8001c30 <LoopCopyDataInit>

08001c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c2e:	3304      	adds	r3, #4

08001c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c34:	d3f9      	bcc.n	8001c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c36:	4a0b      	ldr	r2, [pc, #44]	; (8001c64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c38:	4c0b      	ldr	r4, [pc, #44]	; (8001c68 <LoopForever+0x16>)
  movs r3, #0
 8001c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c3c:	e001      	b.n	8001c42 <LoopFillZerobss>

08001c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c40:	3204      	adds	r2, #4

08001c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c44:	d3fb      	bcc.n	8001c3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c46:	f7ff ffd7 	bl	8001bf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c4a:	f00a f92b 	bl	800bea4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c4e:	f7ff f82d 	bl	8000cac <main>

08001c52 <LoopForever>:

LoopForever:
    b LoopForever
 8001c52:	e7fe      	b.n	8001c52 <LoopForever>
  ldr   r0, =_estack
 8001c54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c5c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8001c60:	0800d5a8 	.word	0x0800d5a8
  ldr r2, =_sbss
 8001c64:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001c68:	20001eb4 	.word	0x20001eb4

08001c6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c6c:	e7fe      	b.n	8001c6c <ADC1_2_IRQHandler>

08001c6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c78:	2003      	movs	r0, #3
 8001c7a:	f001 feb3 	bl	80039e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c7e:	200f      	movs	r0, #15
 8001c80:	f000 f80e 	bl	8001ca0 <HAL_InitTick>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d002      	beq.n	8001c90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	71fb      	strb	r3, [r7, #7]
 8001c8e:	e001      	b.n	8001c94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c90:	f7ff fd46 	bl	8001720 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c94:	79fb      	ldrb	r3, [r7, #7]

}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001cac:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <HAL_InitTick+0x68>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d022      	beq.n	8001cfa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001cb4:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <HAL_InitTick+0x6c>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <HAL_InitTick+0x68>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f001 febe 	bl	8003a4a <HAL_SYSTICK_Config>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10f      	bne.n	8001cf4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b0f      	cmp	r3, #15
 8001cd8:	d809      	bhi.n	8001cee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce2:	f001 fe8a 	bl	80039fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <HAL_InitTick+0x70>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	e007      	b.n	8001cfe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	73fb      	strb	r3, [r7, #15]
 8001cf2:	e004      	b.n	8001cfe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	73fb      	strb	r3, [r7, #15]
 8001cf8:	e001      	b.n	8001cfe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000018 	.word	0x20000018
 8001d0c:	20000010 	.word	0x20000010
 8001d10:	20000014 	.word	0x20000014

08001d14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <HAL_IncTick+0x1c>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <HAL_IncTick+0x20>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4413      	add	r3, r2
 8001d22:	4a03      	ldr	r2, [pc, #12]	; (8001d30 <HAL_IncTick+0x1c>)
 8001d24:	6013      	str	r3, [r2, #0]
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	200004b8 	.word	0x200004b8
 8001d34:	20000018 	.word	0x20000018

08001d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d3c:	4b03      	ldr	r3, [pc, #12]	; (8001d4c <HAL_GetTick+0x14>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	200004b8 	.word	0x200004b8

08001d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d58:	f7ff ffee 	bl	8001d38 <HAL_GetTick>
 8001d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d68:	d004      	beq.n	8001d74 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_Delay+0x40>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	4413      	add	r3, r2
 8001d72:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d74:	bf00      	nop
 8001d76:	f7ff ffdf 	bl	8001d38 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d8f7      	bhi.n	8001d76 <HAL_Delay+0x26>
  {
  }
}
 8001d86:	bf00      	nop
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000018 	.word	0x20000018

08001d94 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	431a      	orrs	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	609a      	str	r2, [r3, #8]
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	3360      	adds	r3, #96	; 0x60
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <LL_ADC_SetOffset+0x44>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e34:	bf00      	nop
 8001e36:	371c      	adds	r7, #28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	03fff000 	.word	0x03fff000

08001e44 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3360      	adds	r3, #96	; 0x60
 8001e52:	461a      	mov	r2, r3
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b087      	sub	sp, #28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	3360      	adds	r3, #96	; 0x60
 8001e80:	461a      	mov	r2, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	431a      	orrs	r2, r3
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e9a:	bf00      	nop
 8001e9c:	371c      	adds	r7, #28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b087      	sub	sp, #28
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	3360      	adds	r3, #96	; 0x60
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001ed0:	bf00      	nop
 8001ed2:	371c      	adds	r7, #28
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b087      	sub	sp, #28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	3360      	adds	r3, #96	; 0x60
 8001eec:	461a      	mov	r2, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	431a      	orrs	r2, r3
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001f06:	bf00      	nop
 8001f08:	371c      	adds	r7, #28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	615a      	str	r2, [r3, #20]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b087      	sub	sp, #28
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	60f8      	str	r0, [r7, #12]
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	3330      	adds	r3, #48	; 0x30
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	0a1b      	lsrs	r3, r3, #8
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	4413      	add	r3, r2
 8001f7c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	f003 031f 	and.w	r3, r3, #31
 8001f88:	211f      	movs	r1, #31
 8001f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	401a      	ands	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	0e9b      	lsrs	r3, r3, #26
 8001f96:	f003 011f 	and.w	r1, r3, #31
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	f003 031f 	and.w	r3, r3, #31
 8001fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001faa:	bf00      	nop
 8001fac:	371c      	adds	r7, #28
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b087      	sub	sp, #28
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	3314      	adds	r3, #20
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	0e5b      	lsrs	r3, r3, #25
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	4413      	add	r3, r2
 8001fd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	0d1b      	lsrs	r3, r3, #20
 8001fde:	f003 031f 	and.w	r3, r3, #31
 8001fe2:	2107      	movs	r1, #7
 8001fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	401a      	ands	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	0d1b      	lsrs	r3, r3, #20
 8001ff0:	f003 031f 	and.w	r3, r3, #31
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002000:	bf00      	nop
 8002002:	371c      	adds	r7, #28
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a0f      	ldr	r2, [pc, #60]	; (8002058 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d10a      	bne.n	8002036 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800202c:	431a      	orrs	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002034:	e00a      	b.n	800204c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002042:	43db      	mvns	r3, r3
 8002044:	401a      	ands	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800204c:	bf00      	nop
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	407f0000 	.word	0x407f0000

0800205c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 031f 	and.w	r3, r3, #31
}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80020a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6093      	str	r3, [r2, #8]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020cc:	d101      	bne.n	80020d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80020f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002118:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800211c:	d101      	bne.n	8002122 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002140:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002144:	f043 0201 	orr.w	r2, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002168:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800216c:	f043 0202 	orr.w	r2, r3, #2
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <LL_ADC_IsEnabled+0x18>
 8002194:	2301      	movs	r3, #1
 8002196:	e000      	b.n	800219a <LL_ADC_IsEnabled+0x1a>
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d101      	bne.n	80021be <LL_ADC_IsDisableOngoing+0x18>
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <LL_ADC_IsDisableOngoing+0x1a>
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021e0:	f043 0204 	orr.w	r2, r3, #4
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002204:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002208:	f043 0210 	orr.w	r2, r3, #16
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b04      	cmp	r3, #4
 800222e:	d101      	bne.n	8002234 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002230:	2301      	movs	r3, #1
 8002232:	e000      	b.n	8002236 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002252:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002256:	f043 0220 	orr.w	r2, r3, #32
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b08      	cmp	r3, #8
 800227c:	d101      	bne.n	8002282 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002290:	b590      	push	{r4, r7, lr}
 8002292:	b089      	sub	sp, #36	; 0x24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002298:	2300      	movs	r3, #0
 800229a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800229c:	2300      	movs	r3, #0
 800229e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e1af      	b.n	800260a <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d109      	bne.n	80022cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff fa55 	bl	8001768 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fef1 	bl	80020b8 <LL_ADC_IsDeepPowerDownEnabled>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d004      	beq.n	80022e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fed7 	bl	8002094 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff ff0c 	bl	8002108 <LL_ADC_IsInternalRegulatorEnabled>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d115      	bne.n	8002322 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff fef0 	bl	80020e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002300:	4b9f      	ldr	r3, [pc, #636]	; (8002580 <HAL_ADC_Init+0x2f0>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	099b      	lsrs	r3, r3, #6
 8002306:	4a9f      	ldr	r2, [pc, #636]	; (8002584 <HAL_ADC_Init+0x2f4>)
 8002308:	fba2 2303 	umull	r2, r3, r2, r3
 800230c:	099b      	lsrs	r3, r3, #6
 800230e:	3301      	adds	r3, #1
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002314:	e002      	b.n	800231c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	3b01      	subs	r3, #1
 800231a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f9      	bne.n	8002316 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff feee 	bl	8002108 <LL_ADC_IsInternalRegulatorEnabled>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10d      	bne.n	800234e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002336:	f043 0210 	orr.w	r2, r3, #16
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002342:	f043 0201 	orr.w	r2, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff ff62 	bl	800221c <LL_ADC_REG_IsConversionOngoing>
 8002358:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235e:	f003 0310 	and.w	r3, r3, #16
 8002362:	2b00      	cmp	r3, #0
 8002364:	f040 8148 	bne.w	80025f8 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2b00      	cmp	r3, #0
 800236c:	f040 8144 	bne.w	80025f8 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002374:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002378:	f043 0202 	orr.w	r2, r3, #2
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fefb 	bl	8002180 <LL_ADC_IsEnabled>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d141      	bne.n	8002414 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002398:	d004      	beq.n	80023a4 <HAL_ADC_Init+0x114>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a7a      	ldr	r2, [pc, #488]	; (8002588 <HAL_ADC_Init+0x2f8>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d10f      	bne.n	80023c4 <HAL_ADC_Init+0x134>
 80023a4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80023a8:	f7ff feea 	bl	8002180 <LL_ADC_IsEnabled>
 80023ac:	4604      	mov	r4, r0
 80023ae:	4876      	ldr	r0, [pc, #472]	; (8002588 <HAL_ADC_Init+0x2f8>)
 80023b0:	f7ff fee6 	bl	8002180 <LL_ADC_IsEnabled>
 80023b4:	4603      	mov	r3, r0
 80023b6:	4323      	orrs	r3, r4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bf0c      	ite	eq
 80023bc:	2301      	moveq	r3, #1
 80023be:	2300      	movne	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	e012      	b.n	80023ea <HAL_ADC_Init+0x15a>
 80023c4:	4871      	ldr	r0, [pc, #452]	; (800258c <HAL_ADC_Init+0x2fc>)
 80023c6:	f7ff fedb 	bl	8002180 <LL_ADC_IsEnabled>
 80023ca:	4604      	mov	r4, r0
 80023cc:	4870      	ldr	r0, [pc, #448]	; (8002590 <HAL_ADC_Init+0x300>)
 80023ce:	f7ff fed7 	bl	8002180 <LL_ADC_IsEnabled>
 80023d2:	4603      	mov	r3, r0
 80023d4:	431c      	orrs	r4, r3
 80023d6:	486f      	ldr	r0, [pc, #444]	; (8002594 <HAL_ADC_Init+0x304>)
 80023d8:	f7ff fed2 	bl	8002180 <LL_ADC_IsEnabled>
 80023dc:	4603      	mov	r3, r0
 80023de:	4323      	orrs	r3, r4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	bf0c      	ite	eq
 80023e4:	2301      	moveq	r3, #1
 80023e6:	2300      	movne	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d012      	beq.n	8002414 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023f6:	d004      	beq.n	8002402 <HAL_ADC_Init+0x172>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a62      	ldr	r2, [pc, #392]	; (8002588 <HAL_ADC_Init+0x2f8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d101      	bne.n	8002406 <HAL_ADC_Init+0x176>
 8002402:	4a65      	ldr	r2, [pc, #404]	; (8002598 <HAL_ADC_Init+0x308>)
 8002404:	e000      	b.n	8002408 <HAL_ADC_Init+0x178>
 8002406:	4a65      	ldr	r2, [pc, #404]	; (800259c <HAL_ADC_Init+0x30c>)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	4619      	mov	r1, r3
 800240e:	4610      	mov	r0, r2
 8002410:	f7ff fcc0 	bl	8001d94 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	7f5b      	ldrb	r3, [r3, #29]
 8002418:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800241e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002424:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800242a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002432:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800243e:	2b01      	cmp	r3, #1
 8002440:	d106      	bne.n	8002450 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002446:	3b01      	subs	r3, #1
 8002448:	045b      	lsls	r3, r3, #17
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002454:	2b00      	cmp	r3, #0
 8002456:	d009      	beq.n	800246c <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	4b4b      	ldr	r3, [pc, #300]	; (80025a0 <HAL_ADC_Init+0x310>)
 8002474:	4013      	ands	r3, r2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	69b9      	ldr	r1, [r7, #24]
 800247c:	430b      	orrs	r3, r1
 800247e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff febe 	bl	800221c <LL_ADC_REG_IsConversionOngoing>
 80024a0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fedf 	bl	800226a <LL_ADC_INJ_IsConversionOngoing>
 80024ac:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d17f      	bne.n	80025b4 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d17c      	bne.n	80025b4 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80024be:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024c6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024d6:	f023 0302 	bic.w	r3, r3, #2
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6812      	ldr	r2, [r2, #0]
 80024de:	69b9      	ldr	r1, [r7, #24]
 80024e0:	430b      	orrs	r3, r1
 80024e2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d017      	beq.n	800251c <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691a      	ldr	r2, [r3, #16]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80024fa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002504:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002508:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6911      	ldr	r1, [r2, #16]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	430b      	orrs	r3, r1
 8002516:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800251a:	e013      	b.n	8002544 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	691a      	ldr	r2, [r3, #16]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800252a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800253c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002540:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800254a:	2b01      	cmp	r3, #1
 800254c:	d12a      	bne.n	80025a4 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002558:	f023 0304 	bic.w	r3, r3, #4
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002564:	4311      	orrs	r1, r2
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800256a:	4311      	orrs	r1, r2
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002570:	430a      	orrs	r2, r1
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f042 0201 	orr.w	r2, r2, #1
 800257c:	611a      	str	r2, [r3, #16]
 800257e:	e019      	b.n	80025b4 <HAL_ADC_Init+0x324>
 8002580:	20000010 	.word	0x20000010
 8002584:	053e2d63 	.word	0x053e2d63
 8002588:	50000100 	.word	0x50000100
 800258c:	50000400 	.word	0x50000400
 8002590:	50000500 	.word	0x50000500
 8002594:	50000600 	.word	0x50000600
 8002598:	50000300 	.word	0x50000300
 800259c:	50000700 	.word	0x50000700
 80025a0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691a      	ldr	r2, [r3, #16]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0201 	bic.w	r2, r2, #1
 80025b2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d10c      	bne.n	80025d6 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	f023 010f 	bic.w	r1, r3, #15
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	1e5a      	subs	r2, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	631a      	str	r2, [r3, #48]	; 0x30
 80025d4:	e007      	b.n	80025e6 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 020f 	bic.w	r2, r2, #15
 80025e4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ea:	f023 0303 	bic.w	r3, r3, #3
 80025ee:	f043 0201 	orr.w	r2, r3, #1
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80025f6:	e007      	b.n	8002608 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fc:	f043 0210 	orr.w	r2, r3, #16
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002608:	7ffb      	ldrb	r3, [r7, #31]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3724      	adds	r7, #36	; 0x24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd90      	pop	{r4, r7, pc}
 8002612:	bf00      	nop

08002614 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002624:	d004      	beq.n	8002630 <HAL_ADC_Start+0x1c>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a67      	ldr	r2, [pc, #412]	; (80027c8 <HAL_ADC_Start+0x1b4>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d101      	bne.n	8002634 <HAL_ADC_Start+0x20>
 8002630:	4b66      	ldr	r3, [pc, #408]	; (80027cc <HAL_ADC_Start+0x1b8>)
 8002632:	e000      	b.n	8002636 <HAL_ADC_Start+0x22>
 8002634:	4b66      	ldr	r3, [pc, #408]	; (80027d0 <HAL_ADC_Start+0x1bc>)
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fd10 	bl	800205c <LL_ADC_GetMultimode>
 800263c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff fdea 	bl	800221c <LL_ADC_REG_IsConversionOngoing>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	f040 80b4 	bne.w	80027b8 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <HAL_ADC_Start+0x4a>
 800265a:	2302      	movs	r3, #2
 800265c:	e0af      	b.n	80027be <HAL_ADC_Start+0x1aa>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 fefc 	bl	8003464 <ADC_Enable>
 800266c:	4603      	mov	r3, r0
 800266e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002670:	7dfb      	ldrb	r3, [r7, #23]
 8002672:	2b00      	cmp	r3, #0
 8002674:	f040 809b 	bne.w	80027ae <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002680:	f023 0301 	bic.w	r3, r3, #1
 8002684:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a4d      	ldr	r2, [pc, #308]	; (80027c8 <HAL_ADC_Start+0x1b4>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d009      	beq.n	80026aa <HAL_ADC_Start+0x96>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a4e      	ldr	r2, [pc, #312]	; (80027d4 <HAL_ADC_Start+0x1c0>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d002      	beq.n	80026a6 <HAL_ADC_Start+0x92>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	e003      	b.n	80026ae <HAL_ADC_Start+0x9a>
 80026a6:	4b4c      	ldr	r3, [pc, #304]	; (80027d8 <HAL_ADC_Start+0x1c4>)
 80026a8:	e001      	b.n	80026ae <HAL_ADC_Start+0x9a>
 80026aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d002      	beq.n	80026bc <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d105      	bne.n	80026c8 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d4:	d106      	bne.n	80026e4 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026da:	f023 0206 	bic.w	r2, r3, #6
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	661a      	str	r2, [r3, #96]	; 0x60
 80026e2:	e002      	b.n	80026ea <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	221c      	movs	r2, #28
 80026f0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a32      	ldr	r2, [pc, #200]	; (80027c8 <HAL_ADC_Start+0x1b4>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d009      	beq.n	8002718 <HAL_ADC_Start+0x104>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a32      	ldr	r2, [pc, #200]	; (80027d4 <HAL_ADC_Start+0x1c0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d002      	beq.n	8002714 <HAL_ADC_Start+0x100>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	e003      	b.n	800271c <HAL_ADC_Start+0x108>
 8002714:	4b30      	ldr	r3, [pc, #192]	; (80027d8 <HAL_ADC_Start+0x1c4>)
 8002716:	e001      	b.n	800271c <HAL_ADC_Start+0x108>
 8002718:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6812      	ldr	r2, [r2, #0]
 8002720:	4293      	cmp	r3, r2
 8002722:	d008      	beq.n	8002736 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d005      	beq.n	8002736 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	2b05      	cmp	r3, #5
 800272e:	d002      	beq.n	8002736 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	2b09      	cmp	r3, #9
 8002734:	d114      	bne.n	8002760 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d007      	beq.n	8002754 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002748:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800274c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fd37 	bl	80021cc <LL_ADC_REG_StartConversion>
 800275e:	e02d      	b.n	80027bc <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002764:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a15      	ldr	r2, [pc, #84]	; (80027c8 <HAL_ADC_Start+0x1b4>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d009      	beq.n	800278a <HAL_ADC_Start+0x176>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a16      	ldr	r2, [pc, #88]	; (80027d4 <HAL_ADC_Start+0x1c0>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d002      	beq.n	8002786 <HAL_ADC_Start+0x172>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	e003      	b.n	800278e <HAL_ADC_Start+0x17a>
 8002786:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <HAL_ADC_Start+0x1c4>)
 8002788:	e001      	b.n	800278e <HAL_ADC_Start+0x17a>
 800278a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800278e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00f      	beq.n	80027bc <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80027ac:	e006      	b.n	80027bc <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80027b6:	e001      	b.n	80027bc <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80027b8:	2302      	movs	r3, #2
 80027ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80027bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	50000100 	.word	0x50000100
 80027cc:	50000300 	.word	0x50000300
 80027d0:	50000700 	.word	0x50000700
 80027d4:	50000500 	.word	0x50000500
 80027d8:	50000400 	.word	0x50000400

080027dc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_ADC_Stop+0x16>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e023      	b.n	800283a <HAL_ADC_Stop+0x5e>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80027fa:	2103      	movs	r1, #3
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 fd75 	bl	80032ec <ADC_ConversionStop>
 8002802:	4603      	mov	r3, r0
 8002804:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002806:	7bfb      	ldrb	r3, [r7, #15]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d111      	bne.n	8002830 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 fe8b 	bl	8003528 <ADC_Disable>
 8002812:	4603      	mov	r3, r0
 8002814:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002816:	7bfb      	ldrb	r3, [r7, #15]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d109      	bne.n	8002830 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002820:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002824:	f023 0301 	bic.w	r3, r3, #1
 8002828:	f043 0201 	orr.w	r2, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002838:	7bfb      	ldrb	r3, [r7, #15]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002856:	d004      	beq.n	8002862 <HAL_ADC_PollForConversion+0x1e>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a77      	ldr	r2, [pc, #476]	; (8002a3c <HAL_ADC_PollForConversion+0x1f8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d101      	bne.n	8002866 <HAL_ADC_PollForConversion+0x22>
 8002862:	4b77      	ldr	r3, [pc, #476]	; (8002a40 <HAL_ADC_PollForConversion+0x1fc>)
 8002864:	e000      	b.n	8002868 <HAL_ADC_PollForConversion+0x24>
 8002866:	4b77      	ldr	r3, [pc, #476]	; (8002a44 <HAL_ADC_PollForConversion+0x200>)
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fbf7 	bl	800205c <LL_ADC_GetMultimode>
 800286e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	2b08      	cmp	r3, #8
 8002876:	d102      	bne.n	800287e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002878:	2308      	movs	r3, #8
 800287a:	61fb      	str	r3, [r7, #28]
 800287c:	e037      	b.n	80028ee <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	2b05      	cmp	r3, #5
 8002888:	d002      	beq.n	8002890 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2b09      	cmp	r3, #9
 800288e:	d111      	bne.n	80028b4 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d007      	beq.n	80028ae <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a2:	f043 0220 	orr.w	r2, r3, #32
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e0c1      	b.n	8002a32 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80028ae:	2304      	movs	r3, #4
 80028b0:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80028b2:	e01c      	b.n	80028ee <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028bc:	d004      	beq.n	80028c8 <HAL_ADC_PollForConversion+0x84>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a5e      	ldr	r2, [pc, #376]	; (8002a3c <HAL_ADC_PollForConversion+0x1f8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d101      	bne.n	80028cc <HAL_ADC_PollForConversion+0x88>
 80028c8:	4b5d      	ldr	r3, [pc, #372]	; (8002a40 <HAL_ADC_PollForConversion+0x1fc>)
 80028ca:	e000      	b.n	80028ce <HAL_ADC_PollForConversion+0x8a>
 80028cc:	4b5d      	ldr	r3, [pc, #372]	; (8002a44 <HAL_ADC_PollForConversion+0x200>)
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff fbd2 	bl	8002078 <LL_ADC_GetMultiDMATransfer>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d007      	beq.n	80028ea <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028de:	f043 0220 	orr.w	r2, r3, #32
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e0a3      	b.n	8002a32 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80028ea:	2304      	movs	r3, #4
 80028ec:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80028ee:	f7ff fa23 	bl	8001d38 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028f4:	e021      	b.n	800293a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fc:	d01d      	beq.n	800293a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80028fe:	f7ff fa1b 	bl	8001d38 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d302      	bcc.n	8002914 <HAL_ADC_PollForConversion+0xd0>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d112      	bne.n	800293a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	4013      	ands	r3, r2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10b      	bne.n	800293a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002926:	f043 0204 	orr.w	r2, r3, #4
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e07b      	b.n	8002a32 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0d6      	beq.n	80028f6 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff faed 	bl	8001f38 <LL_ADC_REG_IsTriggerSourceSWStart>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d01c      	beq.n	800299e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	7f5b      	ldrb	r3, [r3, #29]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d118      	bne.n	800299e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b08      	cmp	r3, #8
 8002978:	d111      	bne.n	800299e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d105      	bne.n	800299e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002996:	f043 0201 	orr.w	r2, r3, #1
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a26      	ldr	r2, [pc, #152]	; (8002a3c <HAL_ADC_PollForConversion+0x1f8>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d009      	beq.n	80029bc <HAL_ADC_PollForConversion+0x178>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a26      	ldr	r2, [pc, #152]	; (8002a48 <HAL_ADC_PollForConversion+0x204>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d002      	beq.n	80029b8 <HAL_ADC_PollForConversion+0x174>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	e003      	b.n	80029c0 <HAL_ADC_PollForConversion+0x17c>
 80029b8:	4b24      	ldr	r3, [pc, #144]	; (8002a4c <HAL_ADC_PollForConversion+0x208>)
 80029ba:	e001      	b.n	80029c0 <HAL_ADC_PollForConversion+0x17c>
 80029bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d008      	beq.n	80029da <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2b05      	cmp	r3, #5
 80029d2:	d002      	beq.n	80029da <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	2b09      	cmp	r3, #9
 80029d8:	d104      	bne.n	80029e4 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	e014      	b.n	8002a0e <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a14      	ldr	r2, [pc, #80]	; (8002a3c <HAL_ADC_PollForConversion+0x1f8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d009      	beq.n	8002a02 <HAL_ADC_PollForConversion+0x1be>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a15      	ldr	r2, [pc, #84]	; (8002a48 <HAL_ADC_PollForConversion+0x204>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d002      	beq.n	80029fe <HAL_ADC_PollForConversion+0x1ba>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	e003      	b.n	8002a06 <HAL_ADC_PollForConversion+0x1c2>
 80029fe:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <HAL_ADC_PollForConversion+0x208>)
 8002a00:	e001      	b.n	8002a06 <HAL_ADC_PollForConversion+0x1c2>
 8002a02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a06:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d104      	bne.n	8002a1e <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2208      	movs	r2, #8
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	e008      	b.n	8002a30 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d103      	bne.n	8002a30 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	220c      	movs	r2, #12
 8002a2e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3720      	adds	r7, #32
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	50000100 	.word	0x50000100
 8002a40:	50000300 	.word	0x50000300
 8002a44:	50000700 	.word	0x50000700
 8002a48:	50000500 	.word	0x50000500
 8002a4c:	50000400 	.word	0x50000400

08002a50 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
	...

08002a6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b0b6      	sub	sp, #216	; 0xd8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a76:	2300      	movs	r3, #0
 8002a78:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d102      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x24>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	f000 bc13 	b.w	80032b6 <HAL_ADC_ConfigChannel+0x84a>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff fbbd 	bl	800221c <LL_ADC_REG_IsConversionOngoing>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f040 83f3 	bne.w	8003290 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6818      	ldr	r0, [r3, #0]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	6859      	ldr	r1, [r3, #4]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	f7ff fa51 	bl	8001f5e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fbab 	bl	800221c <LL_ADC_REG_IsConversionOngoing>
 8002ac6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fbcb 	bl	800226a <LL_ADC_INJ_IsConversionOngoing>
 8002ad4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ad8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f040 81d9 	bne.w	8002e94 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ae2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f040 81d4 	bne.w	8002e94 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002af4:	d10f      	bne.n	8002b16 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2200      	movs	r2, #0
 8002b00:	4619      	mov	r1, r3
 8002b02:	f7ff fa58 	bl	8001fb6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff f9ff 	bl	8001f12 <LL_ADC_SetSamplingTimeCommonConfig>
 8002b14:	e00e      	b.n	8002b34 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	6819      	ldr	r1, [r3, #0]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	461a      	mov	r2, r3
 8002b24:	f7ff fa47 	bl	8001fb6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff f9ef 	bl	8001f12 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	695a      	ldr	r2, [r3, #20]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	08db      	lsrs	r3, r3, #3
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d022      	beq.n	8002b9c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6818      	ldr	r0, [r3, #0]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	6919      	ldr	r1, [r3, #16]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b66:	f7ff f949 	bl	8001dfc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	6919      	ldr	r1, [r3, #16]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	461a      	mov	r2, r3
 8002b78:	f7ff f995 	bl	8001ea6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6818      	ldr	r0, [r3, #0]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	6919      	ldr	r1, [r3, #16]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	7f1b      	ldrb	r3, [r3, #28]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d102      	bne.n	8002b92 <HAL_ADC_ConfigChannel+0x126>
 8002b8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b90:	e000      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x128>
 8002b92:	2300      	movs	r3, #0
 8002b94:	461a      	mov	r2, r3
 8002b96:	f7ff f9a1 	bl	8001edc <LL_ADC_SetOffsetSaturation>
 8002b9a:	e17b      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff f94e 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10a      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x15c>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff f943 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	0e9b      	lsrs	r3, r3, #26
 8002bc2:	f003 021f 	and.w	r2, r3, #31
 8002bc6:	e01e      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x19a>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff f938 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002be6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002bea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002bf6:	2320      	movs	r3, #32
 8002bf8:	e004      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002bfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bfe:	fab3 f383 	clz	r3, r3
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d105      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x1b2>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	0e9b      	lsrs	r3, r3, #26
 8002c18:	f003 031f 	and.w	r3, r3, #31
 8002c1c:	e018      	b.n	8002c50 <HAL_ADC_ConfigChannel+0x1e4>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002c32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002c3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002c42:	2320      	movs	r3, #32
 8002c44:	e004      	b.n	8002c50 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002c46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c4a:	fab3 f383 	clz	r3, r3
 8002c4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d106      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff f907 	bl	8001e70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2101      	movs	r1, #1
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff f8eb 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10a      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x222>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff f8e0 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 8002c84:	4603      	mov	r3, r0
 8002c86:	0e9b      	lsrs	r3, r3, #26
 8002c88:	f003 021f 	and.w	r2, r3, #31
 8002c8c:	e01e      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x260>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2101      	movs	r1, #1
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff f8d5 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ca4:	fa93 f3a3 	rbit	r3, r3
 8002ca8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002cac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002cb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002cbc:	2320      	movs	r3, #32
 8002cbe:	e004      	b.n	8002cca <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002cc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cc4:	fab3 f383 	clz	r3, r3
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d105      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x278>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	0e9b      	lsrs	r3, r3, #26
 8002cde:	f003 031f 	and.w	r3, r3, #31
 8002ce2:	e018      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x2aa>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cf0:	fa93 f3a3 	rbit	r3, r3
 8002cf4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002cf8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002cfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002d00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002d08:	2320      	movs	r3, #32
 8002d0a:	e004      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002d0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d10:	fab3 f383 	clz	r3, r3
 8002d14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d106      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	2101      	movs	r1, #1
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff f8a4 	bl	8001e70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2102      	movs	r1, #2
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff f888 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 8002d34:	4603      	mov	r3, r0
 8002d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10a      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x2e8>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2102      	movs	r1, #2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff f87d 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	0e9b      	lsrs	r3, r3, #26
 8002d4e:	f003 021f 	and.w	r2, r3, #31
 8002d52:	e01e      	b.n	8002d92 <HAL_ADC_ConfigChannel+0x326>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2102      	movs	r1, #2
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff f872 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 8002d60:	4603      	mov	r3, r0
 8002d62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d6a:	fa93 f3a3 	rbit	r3, r3
 8002d6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002d72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002d7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002d82:	2320      	movs	r3, #32
 8002d84:	e004      	b.n	8002d90 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002d86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d8a:	fab3 f383 	clz	r3, r3
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d105      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x33e>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	0e9b      	lsrs	r3, r3, #26
 8002da4:	f003 031f 	and.w	r3, r3, #31
 8002da8:	e016      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x36c>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002db6:	fa93 f3a3 	rbit	r3, r3
 8002dba:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002dbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002dc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002dca:	2320      	movs	r3, #32
 8002dcc:	e004      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002dce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dd2:	fab3 f383 	clz	r3, r3
 8002dd6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d106      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2200      	movs	r2, #0
 8002de2:	2102      	movs	r1, #2
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff f843 	bl	8001e70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2103      	movs	r1, #3
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff f827 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10a      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x3aa>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2103      	movs	r1, #3
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff f81c 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	0e9b      	lsrs	r3, r3, #26
 8002e10:	f003 021f 	and.w	r2, r3, #31
 8002e14:	e017      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x3da>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2103      	movs	r1, #3
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff f811 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 8002e22:	4603      	mov	r3, r0
 8002e24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e28:	fa93 f3a3 	rbit	r3, r3
 8002e2c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002e2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e30:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002e32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002e38:	2320      	movs	r3, #32
 8002e3a:	e003      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002e3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e3e:	fab3 f383 	clz	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d105      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x3f2>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	0e9b      	lsrs	r3, r3, #26
 8002e58:	f003 031f 	and.w	r3, r3, #31
 8002e5c:	e011      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x416>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e66:	fa93 f3a3 	rbit	r3, r3
 8002e6a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002e6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e6e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002e76:	2320      	movs	r3, #32
 8002e78:	e003      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e7c:	fab3 f383 	clz	r3, r3
 8002e80:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d106      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2103      	movs	r1, #3
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fe ffee 	bl	8001e70 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff f971 	bl	8002180 <LL_ADC_IsEnabled>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f040 813d 	bne.w	8003120 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6818      	ldr	r0, [r3, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	6819      	ldr	r1, [r3, #0]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	f7ff f8aa 	bl	800200c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	4aa2      	ldr	r2, [pc, #648]	; (8003148 <HAL_ADC_ConfigChannel+0x6dc>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	f040 812e 	bne.w	8003120 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10b      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x480>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	0e9b      	lsrs	r3, r3, #26
 8002eda:	3301      	adds	r3, #1
 8002edc:	f003 031f 	and.w	r3, r3, #31
 8002ee0:	2b09      	cmp	r3, #9
 8002ee2:	bf94      	ite	ls
 8002ee4:	2301      	movls	r3, #1
 8002ee6:	2300      	movhi	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	e019      	b.n	8002f20 <HAL_ADC_ConfigChannel+0x4b4>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ef4:	fa93 f3a3 	rbit	r3, r3
 8002ef8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002efa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002efc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002efe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002f04:	2320      	movs	r3, #32
 8002f06:	e003      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002f08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f0a:	fab3 f383 	clz	r3, r3
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	3301      	adds	r3, #1
 8002f12:	f003 031f 	and.w	r3, r3, #31
 8002f16:	2b09      	cmp	r3, #9
 8002f18:	bf94      	ite	ls
 8002f1a:	2301      	movls	r3, #1
 8002f1c:	2300      	movhi	r3, #0
 8002f1e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d079      	beq.n	8003018 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d107      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x4d4>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	0e9b      	lsrs	r3, r3, #26
 8002f36:	3301      	adds	r3, #1
 8002f38:	069b      	lsls	r3, r3, #26
 8002f3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f3e:	e015      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x500>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f48:	fa93 f3a3 	rbit	r3, r3
 8002f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f50:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002f58:	2320      	movs	r3, #32
 8002f5a:	e003      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f5e:	fab3 f383 	clz	r3, r3
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	3301      	adds	r3, #1
 8002f66:	069b      	lsls	r3, r3, #26
 8002f68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d109      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x520>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	0e9b      	lsrs	r3, r3, #26
 8002f7e:	3301      	adds	r3, #1
 8002f80:	f003 031f 	and.w	r3, r3, #31
 8002f84:	2101      	movs	r1, #1
 8002f86:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8a:	e017      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x550>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f94:	fa93 f3a3 	rbit	r3, r3
 8002f98:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f9c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002fa4:	2320      	movs	r3, #32
 8002fa6:	e003      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002faa:	fab3 f383 	clz	r3, r3
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	f003 031f 	and.w	r3, r3, #31
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbc:	ea42 0103 	orr.w	r1, r2, r3
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10a      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x576>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	0e9b      	lsrs	r3, r3, #26
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	f003 021f 	and.w	r2, r3, #31
 8002fd8:	4613      	mov	r3, r2
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	4413      	add	r3, r2
 8002fde:	051b      	lsls	r3, r3, #20
 8002fe0:	e018      	b.n	8003014 <HAL_ADC_ConfigChannel+0x5a8>
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fea:	fa93 f3a3 	rbit	r3, r3
 8002fee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002ffa:	2320      	movs	r3, #32
 8002ffc:	e003      	b.n	8003006 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003000:	fab3 f383 	clz	r3, r3
 8003004:	b2db      	uxtb	r3, r3
 8003006:	3301      	adds	r3, #1
 8003008:	f003 021f 	and.w	r2, r3, #31
 800300c:	4613      	mov	r3, r2
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	4413      	add	r3, r2
 8003012:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003014:	430b      	orrs	r3, r1
 8003016:	e07e      	b.n	8003116 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003020:	2b00      	cmp	r3, #0
 8003022:	d107      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x5c8>
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	0e9b      	lsrs	r3, r3, #26
 800302a:	3301      	adds	r3, #1
 800302c:	069b      	lsls	r3, r3, #26
 800302e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003032:	e015      	b.n	8003060 <HAL_ADC_ConfigChannel+0x5f4>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303c:	fa93 f3a3 	rbit	r3, r3
 8003040:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003044:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800304c:	2320      	movs	r3, #32
 800304e:	e003      	b.n	8003058 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003052:	fab3 f383 	clz	r3, r3
 8003056:	b2db      	uxtb	r3, r3
 8003058:	3301      	adds	r3, #1
 800305a:	069b      	lsls	r3, r3, #26
 800305c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003068:	2b00      	cmp	r3, #0
 800306a:	d109      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x614>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	0e9b      	lsrs	r3, r3, #26
 8003072:	3301      	adds	r3, #1
 8003074:	f003 031f 	and.w	r3, r3, #31
 8003078:	2101      	movs	r1, #1
 800307a:	fa01 f303 	lsl.w	r3, r1, r3
 800307e:	e017      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x644>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	fa93 f3a3 	rbit	r3, r3
 800308c:	61fb      	str	r3, [r7, #28]
  return result;
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003098:	2320      	movs	r3, #32
 800309a:	e003      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	3301      	adds	r3, #1
 80030a6:	f003 031f 	and.w	r3, r3, #31
 80030aa:	2101      	movs	r1, #1
 80030ac:	fa01 f303 	lsl.w	r3, r1, r3
 80030b0:	ea42 0103 	orr.w	r1, r2, r3
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10d      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x670>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	0e9b      	lsrs	r3, r3, #26
 80030c6:	3301      	adds	r3, #1
 80030c8:	f003 021f 	and.w	r2, r3, #31
 80030cc:	4613      	mov	r3, r2
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	4413      	add	r3, r2
 80030d2:	3b1e      	subs	r3, #30
 80030d4:	051b      	lsls	r3, r3, #20
 80030d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030da:	e01b      	b.n	8003114 <HAL_ADC_ConfigChannel+0x6a8>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	fa93 f3a3 	rbit	r3, r3
 80030e8:	613b      	str	r3, [r7, #16]
  return result;
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80030f4:	2320      	movs	r3, #32
 80030f6:	e003      	b.n	8003100 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	fab3 f383 	clz	r3, r3
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	3301      	adds	r3, #1
 8003102:	f003 021f 	and.w	r2, r3, #31
 8003106:	4613      	mov	r3, r2
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	4413      	add	r3, r2
 800310c:	3b1e      	subs	r3, #30
 800310e:	051b      	lsls	r3, r3, #20
 8003110:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003114:	430b      	orrs	r3, r1
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	6892      	ldr	r2, [r2, #8]
 800311a:	4619      	mov	r1, r3
 800311c:	f7fe ff4b 	bl	8001fb6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	4b09      	ldr	r3, [pc, #36]	; (800314c <HAL_ADC_ConfigChannel+0x6e0>)
 8003126:	4013      	ands	r3, r2
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 80be 	beq.w	80032aa <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003136:	d004      	beq.n	8003142 <HAL_ADC_ConfigChannel+0x6d6>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a04      	ldr	r2, [pc, #16]	; (8003150 <HAL_ADC_ConfigChannel+0x6e4>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d10a      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x6ec>
 8003142:	4b04      	ldr	r3, [pc, #16]	; (8003154 <HAL_ADC_ConfigChannel+0x6e8>)
 8003144:	e009      	b.n	800315a <HAL_ADC_ConfigChannel+0x6ee>
 8003146:	bf00      	nop
 8003148:	407f0000 	.word	0x407f0000
 800314c:	80080000 	.word	0x80080000
 8003150:	50000100 	.word	0x50000100
 8003154:	50000300 	.word	0x50000300
 8003158:	4b59      	ldr	r3, [pc, #356]	; (80032c0 <HAL_ADC_ConfigChannel+0x854>)
 800315a:	4618      	mov	r0, r3
 800315c:	f7fe fe40 	bl	8001de0 <LL_ADC_GetCommonPathInternalCh>
 8003160:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a56      	ldr	r2, [pc, #344]	; (80032c4 <HAL_ADC_ConfigChannel+0x858>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d004      	beq.n	8003178 <HAL_ADC_ConfigChannel+0x70c>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a55      	ldr	r2, [pc, #340]	; (80032c8 <HAL_ADC_ConfigChannel+0x85c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d13a      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003178:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800317c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d134      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800318c:	d005      	beq.n	800319a <HAL_ADC_ConfigChannel+0x72e>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a4e      	ldr	r2, [pc, #312]	; (80032cc <HAL_ADC_ConfigChannel+0x860>)
 8003194:	4293      	cmp	r3, r2
 8003196:	f040 8085 	bne.w	80032a4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031a2:	d004      	beq.n	80031ae <HAL_ADC_ConfigChannel+0x742>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a49      	ldr	r2, [pc, #292]	; (80032d0 <HAL_ADC_ConfigChannel+0x864>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d101      	bne.n	80031b2 <HAL_ADC_ConfigChannel+0x746>
 80031ae:	4a49      	ldr	r2, [pc, #292]	; (80032d4 <HAL_ADC_ConfigChannel+0x868>)
 80031b0:	e000      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x748>
 80031b2:	4a43      	ldr	r2, [pc, #268]	; (80032c0 <HAL_ADC_ConfigChannel+0x854>)
 80031b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031bc:	4619      	mov	r1, r3
 80031be:	4610      	mov	r0, r2
 80031c0:	f7fe fdfb 	bl	8001dba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031c4:	4b44      	ldr	r3, [pc, #272]	; (80032d8 <HAL_ADC_ConfigChannel+0x86c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	099b      	lsrs	r3, r3, #6
 80031ca:	4a44      	ldr	r2, [pc, #272]	; (80032dc <HAL_ADC_ConfigChannel+0x870>)
 80031cc:	fba2 2303 	umull	r2, r3, r2, r3
 80031d0:	099b      	lsrs	r3, r3, #6
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	4613      	mov	r3, r2
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4413      	add	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031de:	e002      	b.n	80031e6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1f9      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031ec:	e05a      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a3b      	ldr	r2, [pc, #236]	; (80032e0 <HAL_ADC_ConfigChannel+0x874>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d125      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x7d8>
 80031f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d11f      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a31      	ldr	r2, [pc, #196]	; (80032d0 <HAL_ADC_ConfigChannel+0x864>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d104      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x7ac>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a34      	ldr	r2, [pc, #208]	; (80032e4 <HAL_ADC_ConfigChannel+0x878>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d047      	beq.n	80032a8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003220:	d004      	beq.n	800322c <HAL_ADC_ConfigChannel+0x7c0>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a2a      	ldr	r2, [pc, #168]	; (80032d0 <HAL_ADC_ConfigChannel+0x864>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d101      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x7c4>
 800322c:	4a29      	ldr	r2, [pc, #164]	; (80032d4 <HAL_ADC_ConfigChannel+0x868>)
 800322e:	e000      	b.n	8003232 <HAL_ADC_ConfigChannel+0x7c6>
 8003230:	4a23      	ldr	r2, [pc, #140]	; (80032c0 <HAL_ADC_ConfigChannel+0x854>)
 8003232:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003236:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800323a:	4619      	mov	r1, r3
 800323c:	4610      	mov	r0, r2
 800323e:	f7fe fdbc 	bl	8001dba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003242:	e031      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a27      	ldr	r2, [pc, #156]	; (80032e8 <HAL_ADC_ConfigChannel+0x87c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d12d      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800324e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d127      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a1c      	ldr	r2, [pc, #112]	; (80032d0 <HAL_ADC_ConfigChannel+0x864>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d022      	beq.n	80032aa <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800326c:	d004      	beq.n	8003278 <HAL_ADC_ConfigChannel+0x80c>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a17      	ldr	r2, [pc, #92]	; (80032d0 <HAL_ADC_ConfigChannel+0x864>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d101      	bne.n	800327c <HAL_ADC_ConfigChannel+0x810>
 8003278:	4a16      	ldr	r2, [pc, #88]	; (80032d4 <HAL_ADC_ConfigChannel+0x868>)
 800327a:	e000      	b.n	800327e <HAL_ADC_ConfigChannel+0x812>
 800327c:	4a10      	ldr	r2, [pc, #64]	; (80032c0 <HAL_ADC_ConfigChannel+0x854>)
 800327e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003282:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003286:	4619      	mov	r1, r3
 8003288:	4610      	mov	r0, r2
 800328a:	f7fe fd96 	bl	8001dba <LL_ADC_SetCommonPathInternalCh>
 800328e:	e00c      	b.n	80032aa <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003294:	f043 0220 	orr.w	r2, r3, #32
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80032a2:	e002      	b.n	80032aa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032a4:	bf00      	nop
 80032a6:	e000      	b.n	80032aa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80032b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	37d8      	adds	r7, #216	; 0xd8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	50000700 	.word	0x50000700
 80032c4:	c3210000 	.word	0xc3210000
 80032c8:	90c00010 	.word	0x90c00010
 80032cc:	50000600 	.word	0x50000600
 80032d0:	50000100 	.word	0x50000100
 80032d4:	50000300 	.word	0x50000300
 80032d8:	20000010 	.word	0x20000010
 80032dc:	053e2d63 	.word	0x053e2d63
 80032e0:	c7520000 	.word	0xc7520000
 80032e4:	50000500 	.word	0x50000500
 80032e8:	cb840000 	.word	0xcb840000

080032ec <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80032f6:	2300      	movs	r3, #0
 80032f8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7fe ff8a 	bl	800221c <LL_ADC_REG_IsConversionOngoing>
 8003308:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f7fe ffab 	bl	800226a <LL_ADC_INJ_IsConversionOngoing>
 8003314:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d103      	bne.n	8003324 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 8098 	beq.w	8003454 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d02a      	beq.n	8003388 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	7f5b      	ldrb	r3, [r3, #29]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d126      	bne.n	8003388 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	7f1b      	ldrb	r3, [r3, #28]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d122      	bne.n	8003388 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003342:	2301      	movs	r3, #1
 8003344:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003346:	e014      	b.n	8003372 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	4a45      	ldr	r2, [pc, #276]	; (8003460 <ADC_ConversionStop+0x174>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d90d      	bls.n	800336c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003354:	f043 0210 	orr.w	r2, r3, #16
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003360:	f043 0201 	orr.w	r2, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e074      	b.n	8003456 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	3301      	adds	r3, #1
 8003370:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800337c:	2b40      	cmp	r3, #64	; 0x40
 800337e:	d1e3      	bne.n	8003348 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2240      	movs	r2, #64	; 0x40
 8003386:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d014      	beq.n	80033b8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f7fe ff42 	bl	800221c <LL_ADC_REG_IsConversionOngoing>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00c      	beq.n	80033b8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fe feff 	bl	80021a6 <LL_ADC_IsDisableOngoing>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d104      	bne.n	80033b8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fe ff1e 	bl	80021f4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d014      	beq.n	80033e8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fe ff51 	bl	800226a <LL_ADC_INJ_IsConversionOngoing>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00c      	beq.n	80033e8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fe fee7 	bl	80021a6 <LL_ADC_IsDisableOngoing>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d104      	bne.n	80033e8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fe ff2d 	bl	8002242 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d005      	beq.n	80033fa <ADC_ConversionStop+0x10e>
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d105      	bne.n	8003400 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80033f4:	230c      	movs	r3, #12
 80033f6:	617b      	str	r3, [r7, #20]
        break;
 80033f8:	e005      	b.n	8003406 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80033fa:	2308      	movs	r3, #8
 80033fc:	617b      	str	r3, [r7, #20]
        break;
 80033fe:	e002      	b.n	8003406 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003400:	2304      	movs	r3, #4
 8003402:	617b      	str	r3, [r7, #20]
        break;
 8003404:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003406:	f7fe fc97 	bl	8001d38 <HAL_GetTick>
 800340a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800340c:	e01b      	b.n	8003446 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800340e:	f7fe fc93 	bl	8001d38 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b05      	cmp	r3, #5
 800341a:	d914      	bls.n	8003446 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	4013      	ands	r3, r2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00d      	beq.n	8003446 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342e:	f043 0210 	orr.w	r2, r3, #16
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343a:	f043 0201 	orr.w	r2, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e007      	b.n	8003456 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	4013      	ands	r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1dc      	bne.n	800340e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	a33fffff 	.word	0xa33fffff

08003464 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f7fe fe85 	bl	8002180 <LL_ADC_IsEnabled>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d14d      	bne.n	8003518 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	4b28      	ldr	r3, [pc, #160]	; (8003524 <ADC_Enable+0xc0>)
 8003484:	4013      	ands	r3, r2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00d      	beq.n	80034a6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348e:	f043 0210 	orr.w	r2, r3, #16
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800349a:	f043 0201 	orr.w	r2, r3, #1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e039      	b.n	800351a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fe fe40 	bl	8002130 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80034b0:	f7fe fc42 	bl	8001d38 <HAL_GetTick>
 80034b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034b6:	e028      	b.n	800350a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fe fe5f 	bl	8002180 <LL_ADC_IsEnabled>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d104      	bne.n	80034d2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fe fe2f 	bl	8002130 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034d2:	f7fe fc31 	bl	8001d38 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d914      	bls.n	800350a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d00d      	beq.n	800350a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f2:	f043 0210 	orr.w	r2, r3, #16
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034fe:	f043 0201 	orr.w	r2, r3, #1
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e007      	b.n	800351a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b01      	cmp	r3, #1
 8003516:	d1cf      	bne.n	80034b8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	8000003f 	.word	0x8000003f

08003528 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f7fe fe36 	bl	80021a6 <LL_ADC_IsDisableOngoing>
 800353a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f7fe fe1d 	bl	8002180 <LL_ADC_IsEnabled>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d047      	beq.n	80035dc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d144      	bne.n	80035dc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 030d 	and.w	r3, r3, #13
 800355c:	2b01      	cmp	r3, #1
 800355e:	d10c      	bne.n	800357a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f7fe fdf7 	bl	8002158 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2203      	movs	r2, #3
 8003570:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003572:	f7fe fbe1 	bl	8001d38 <HAL_GetTick>
 8003576:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003578:	e029      	b.n	80035ce <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357e:	f043 0210 	orr.w	r2, r3, #16
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800358a:	f043 0201 	orr.w	r2, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e023      	b.n	80035de <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003596:	f7fe fbcf 	bl	8001d38 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d914      	bls.n	80035ce <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00d      	beq.n	80035ce <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b6:	f043 0210 	orr.w	r2, r3, #16
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c2:	f043 0201 	orr.w	r2, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e007      	b.n	80035de <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1dc      	bne.n	8003596 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <LL_ADC_IsEnabled>:
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d101      	bne.n	80035fe <LL_ADC_IsEnabled+0x18>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <LL_ADC_IsEnabled+0x1a>
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <LL_ADC_REG_IsConversionOngoing>:
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b04      	cmp	r3, #4
 800361e:	d101      	bne.n	8003624 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003620:	2301      	movs	r3, #1
 8003622:	e000      	b.n	8003626 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
	...

08003634 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003634:	b590      	push	{r4, r7, lr}
 8003636:	b0a1      	sub	sp, #132	; 0x84
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800364e:	2302      	movs	r3, #2
 8003650:	e0e7      	b.n	8003822 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800365a:	2300      	movs	r3, #0
 800365c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800365e:	2300      	movs	r3, #0
 8003660:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800366a:	d102      	bne.n	8003672 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800366c:	4b6f      	ldr	r3, [pc, #444]	; (800382c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800366e:	60bb      	str	r3, [r7, #8]
 8003670:	e009      	b.n	8003686 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a6e      	ldr	r2, [pc, #440]	; (8003830 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d102      	bne.n	8003682 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800367c:	4b6d      	ldr	r3, [pc, #436]	; (8003834 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800367e:	60bb      	str	r3, [r7, #8]
 8003680:	e001      	b.n	8003686 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003682:	2300      	movs	r3, #0
 8003684:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10b      	bne.n	80036a4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003690:	f043 0220 	orr.w	r2, r3, #32
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0be      	b.n	8003822 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff ffb0 	bl	800360c <LL_ADC_REG_IsConversionOngoing>
 80036ac:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff ffaa 	bl	800360c <LL_ADC_REG_IsConversionOngoing>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f040 80a0 	bne.w	8003800 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80036c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f040 809c 	bne.w	8003800 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036d0:	d004      	beq.n	80036dc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a55      	ldr	r2, [pc, #340]	; (800382c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d101      	bne.n	80036e0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80036dc:	4b56      	ldr	r3, [pc, #344]	; (8003838 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80036de:	e000      	b.n	80036e2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80036e0:	4b56      	ldr	r3, [pc, #344]	; (800383c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80036e2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d04b      	beq.n	8003784 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80036ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	6859      	ldr	r1, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036fe:	035b      	lsls	r3, r3, #13
 8003700:	430b      	orrs	r3, r1
 8003702:	431a      	orrs	r2, r3
 8003704:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003706:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003710:	d004      	beq.n	800371c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a45      	ldr	r2, [pc, #276]	; (800382c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d10f      	bne.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800371c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003720:	f7ff ff61 	bl	80035e6 <LL_ADC_IsEnabled>
 8003724:	4604      	mov	r4, r0
 8003726:	4841      	ldr	r0, [pc, #260]	; (800382c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003728:	f7ff ff5d 	bl	80035e6 <LL_ADC_IsEnabled>
 800372c:	4603      	mov	r3, r0
 800372e:	4323      	orrs	r3, r4
 8003730:	2b00      	cmp	r3, #0
 8003732:	bf0c      	ite	eq
 8003734:	2301      	moveq	r3, #1
 8003736:	2300      	movne	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	e012      	b.n	8003762 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800373c:	483c      	ldr	r0, [pc, #240]	; (8003830 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800373e:	f7ff ff52 	bl	80035e6 <LL_ADC_IsEnabled>
 8003742:	4604      	mov	r4, r0
 8003744:	483b      	ldr	r0, [pc, #236]	; (8003834 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003746:	f7ff ff4e 	bl	80035e6 <LL_ADC_IsEnabled>
 800374a:	4603      	mov	r3, r0
 800374c:	431c      	orrs	r4, r3
 800374e:	483c      	ldr	r0, [pc, #240]	; (8003840 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003750:	f7ff ff49 	bl	80035e6 <LL_ADC_IsEnabled>
 8003754:	4603      	mov	r3, r0
 8003756:	4323      	orrs	r3, r4
 8003758:	2b00      	cmp	r3, #0
 800375a:	bf0c      	ite	eq
 800375c:	2301      	moveq	r3, #1
 800375e:	2300      	movne	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d056      	beq.n	8003814 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800376e:	f023 030f 	bic.w	r3, r3, #15
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	6811      	ldr	r1, [r2, #0]
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	6892      	ldr	r2, [r2, #8]
 800377a:	430a      	orrs	r2, r1
 800377c:	431a      	orrs	r2, r3
 800377e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003780:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003782:	e047      	b.n	8003814 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003784:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800378c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800378e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003798:	d004      	beq.n	80037a4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a23      	ldr	r2, [pc, #140]	; (800382c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d10f      	bne.n	80037c4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80037a4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80037a8:	f7ff ff1d 	bl	80035e6 <LL_ADC_IsEnabled>
 80037ac:	4604      	mov	r4, r0
 80037ae:	481f      	ldr	r0, [pc, #124]	; (800382c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80037b0:	f7ff ff19 	bl	80035e6 <LL_ADC_IsEnabled>
 80037b4:	4603      	mov	r3, r0
 80037b6:	4323      	orrs	r3, r4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	bf0c      	ite	eq
 80037bc:	2301      	moveq	r3, #1
 80037be:	2300      	movne	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	e012      	b.n	80037ea <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80037c4:	481a      	ldr	r0, [pc, #104]	; (8003830 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80037c6:	f7ff ff0e 	bl	80035e6 <LL_ADC_IsEnabled>
 80037ca:	4604      	mov	r4, r0
 80037cc:	4819      	ldr	r0, [pc, #100]	; (8003834 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80037ce:	f7ff ff0a 	bl	80035e6 <LL_ADC_IsEnabled>
 80037d2:	4603      	mov	r3, r0
 80037d4:	431c      	orrs	r4, r3
 80037d6:	481a      	ldr	r0, [pc, #104]	; (8003840 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80037d8:	f7ff ff05 	bl	80035e6 <LL_ADC_IsEnabled>
 80037dc:	4603      	mov	r3, r0
 80037de:	4323      	orrs	r3, r4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	bf0c      	ite	eq
 80037e4:	2301      	moveq	r3, #1
 80037e6:	2300      	movne	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d012      	beq.n	8003814 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80037ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80037f6:	f023 030f 	bic.w	r3, r3, #15
 80037fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80037fc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037fe:	e009      	b.n	8003814 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003804:	f043 0220 	orr.w	r2, r3, #32
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003812:	e000      	b.n	8003816 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003814:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800381e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003822:	4618      	mov	r0, r3
 8003824:	3784      	adds	r7, #132	; 0x84
 8003826:	46bd      	mov	sp, r7
 8003828:	bd90      	pop	{r4, r7, pc}
 800382a:	bf00      	nop
 800382c:	50000100 	.word	0x50000100
 8003830:	50000400 	.word	0x50000400
 8003834:	50000500 	.word	0x50000500
 8003838:	50000300 	.word	0x50000300
 800383c:	50000700 	.word	0x50000700
 8003840:	50000600 	.word	0x50000600

08003844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003854:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <__NVIC_SetPriorityGrouping+0x44>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003860:	4013      	ands	r3, r2
 8003862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800386c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003876:	4a04      	ldr	r2, [pc, #16]	; (8003888 <__NVIC_SetPriorityGrouping+0x44>)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	60d3      	str	r3, [r2, #12]
}
 800387c:	bf00      	nop
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	e000ed00 	.word	0xe000ed00

0800388c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003890:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	0a1b      	lsrs	r3, r3, #8
 8003896:	f003 0307 	and.w	r3, r3, #7
}
 800389a:	4618      	mov	r0, r3
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	e000ed00 	.word	0xe000ed00

080038a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	db0b      	blt.n	80038d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	f003 021f 	and.w	r2, r3, #31
 80038c0:	4907      	ldr	r1, [pc, #28]	; (80038e0 <__NVIC_EnableIRQ+0x38>)
 80038c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	2001      	movs	r0, #1
 80038ca:	fa00 f202 	lsl.w	r2, r0, r2
 80038ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	e000e100 	.word	0xe000e100

080038e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	4603      	mov	r3, r0
 80038ec:	6039      	str	r1, [r7, #0]
 80038ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	db0a      	blt.n	800390e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	490c      	ldr	r1, [pc, #48]	; (8003930 <__NVIC_SetPriority+0x4c>)
 80038fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003902:	0112      	lsls	r2, r2, #4
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	440b      	add	r3, r1
 8003908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800390c:	e00a      	b.n	8003924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	b2da      	uxtb	r2, r3
 8003912:	4908      	ldr	r1, [pc, #32]	; (8003934 <__NVIC_SetPriority+0x50>)
 8003914:	79fb      	ldrb	r3, [r7, #7]
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	3b04      	subs	r3, #4
 800391c:	0112      	lsls	r2, r2, #4
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	440b      	add	r3, r1
 8003922:	761a      	strb	r2, [r3, #24]
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	e000e100 	.word	0xe000e100
 8003934:	e000ed00 	.word	0xe000ed00

08003938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003938:	b480      	push	{r7}
 800393a:	b089      	sub	sp, #36	; 0x24
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f1c3 0307 	rsb	r3, r3, #7
 8003952:	2b04      	cmp	r3, #4
 8003954:	bf28      	it	cs
 8003956:	2304      	movcs	r3, #4
 8003958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	3304      	adds	r3, #4
 800395e:	2b06      	cmp	r3, #6
 8003960:	d902      	bls.n	8003968 <NVIC_EncodePriority+0x30>
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	3b03      	subs	r3, #3
 8003966:	e000      	b.n	800396a <NVIC_EncodePriority+0x32>
 8003968:	2300      	movs	r3, #0
 800396a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800396c:	f04f 32ff 	mov.w	r2, #4294967295
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	43da      	mvns	r2, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	401a      	ands	r2, r3
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003980:	f04f 31ff 	mov.w	r1, #4294967295
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	fa01 f303 	lsl.w	r3, r1, r3
 800398a:	43d9      	mvns	r1, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003990:	4313      	orrs	r3, r2
         );
}
 8003992:	4618      	mov	r0, r3
 8003994:	3724      	adds	r7, #36	; 0x24
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
	...

080039a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039b0:	d301      	bcc.n	80039b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039b2:	2301      	movs	r3, #1
 80039b4:	e00f      	b.n	80039d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039b6:	4a0a      	ldr	r2, [pc, #40]	; (80039e0 <SysTick_Config+0x40>)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039be:	210f      	movs	r1, #15
 80039c0:	f04f 30ff 	mov.w	r0, #4294967295
 80039c4:	f7ff ff8e 	bl	80038e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039c8:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <SysTick_Config+0x40>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ce:	4b04      	ldr	r3, [pc, #16]	; (80039e0 <SysTick_Config+0x40>)
 80039d0:	2207      	movs	r2, #7
 80039d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	e000e010 	.word	0xe000e010

080039e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff ff29 	bl	8003844 <__NVIC_SetPriorityGrouping>
}
 80039f2:	bf00      	nop
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b086      	sub	sp, #24
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	4603      	mov	r3, r0
 8003a02:	60b9      	str	r1, [r7, #8]
 8003a04:	607a      	str	r2, [r7, #4]
 8003a06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a08:	f7ff ff40 	bl	800388c <__NVIC_GetPriorityGrouping>
 8003a0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	68b9      	ldr	r1, [r7, #8]
 8003a12:	6978      	ldr	r0, [r7, #20]
 8003a14:	f7ff ff90 	bl	8003938 <NVIC_EncodePriority>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a1e:	4611      	mov	r1, r2
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff ff5f 	bl	80038e4 <__NVIC_SetPriority>
}
 8003a26:	bf00      	nop
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b082      	sub	sp, #8
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	4603      	mov	r3, r0
 8003a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff ff33 	bl	80038a8 <__NVIC_EnableIRQ>
}
 8003a42:	bf00      	nop
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b082      	sub	sp, #8
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff ffa4 	bl	80039a0 <SysTick_Config>
 8003a58:	4603      	mov	r3, r0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b082      	sub	sp, #8
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e014      	b.n	8003a9e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	791b      	ldrb	r3, [r3, #4]
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d105      	bne.n	8003a8a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7fd fec5 	bl	8001814 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	795b      	ldrb	r3, [r3, #5]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_DAC_Start+0x16>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e043      	b.n	8003b44 <HAL_DAC_Start+0x9e>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6819      	ldr	r1, [r3, #0]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	f003 0310 	and.w	r3, r3, #16
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	409a      	lsls	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8003ae0:	2001      	movs	r0, #1
 8003ae2:	f7fe f935 	bl	8001d50 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10f      	bne.n	8003b0c <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d11d      	bne.n	8003b36 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f042 0201 	orr.w	r2, r2, #1
 8003b08:	605a      	str	r2, [r3, #4]
 8003b0a:	e014      	b.n	8003b36 <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	f003 0310 	and.w	r3, r3, #16
 8003b1c:	2102      	movs	r1, #2
 8003b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d107      	bne.n	8003b36 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0202 	orr.w	r2, r2, #2
 8003b34:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
 8003b58:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d105      	bne.n	8003b7c <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4413      	add	r3, r2
 8003b76:	3308      	adds	r3, #8
 8003b78:	617b      	str	r3, [r7, #20]
 8003b7a:	e004      	b.n	8003b86 <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4413      	add	r3, r2
 8003b82:	3314      	adds	r3, #20
 8003b84:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	371c      	adds	r7, #28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08a      	sub	sp, #40	; 0x28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	795b      	ldrb	r3, [r3, #5]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <HAL_DAC_ConfigChannel+0x18>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e192      	b.n	8003eda <HAL_DAC_ConfigChannel+0x33e>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d174      	bne.n	8003cb2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003bc8:	f7fe f8b6 	bl	8001d38 <HAL_GetTick>
 8003bcc:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d134      	bne.n	8003c3e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003bd4:	e011      	b.n	8003bfa <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003bd6:	f7fe f8af 	bl	8001d38 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d90a      	bls.n	8003bfa <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	f043 0208 	orr.w	r2, r3, #8
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2203      	movs	r2, #3
 8003bf4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e16f      	b.n	8003eda <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1e6      	bne.n	8003bd6 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003c08:	2001      	movs	r0, #1
 8003c0a:	f7fe f8a1 	bl	8001d50 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c16:	641a      	str	r2, [r3, #64]	; 0x40
 8003c18:	e01e      	b.n	8003c58 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003c1a:	f7fe f88d 	bl	8001d38 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d90a      	bls.n	8003c3e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	f043 0208 	orr.w	r2, r3, #8
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2203      	movs	r2, #3
 8003c38:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e14d      	b.n	8003eda <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	dbe8      	blt.n	8003c1a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003c48:	2001      	movs	r0, #1
 8003c4a:	f7fe f881 	bl	8001d50 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c56:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f003 0310 	and.w	r3, r3, #16
 8003c64:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003c68:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	ea02 0103 	and.w	r1, r2, r3
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f003 0310 	and.w	r3, r3, #16
 8003c7c:	409a      	lsls	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f003 0310 	and.w	r3, r3, #16
 8003c92:	21ff      	movs	r1, #255	; 0xff
 8003c94:	fa01 f303 	lsl.w	r3, r1, r3
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	ea02 0103 	and.w	r1, r2, r3
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f003 0310 	and.w	r3, r3, #16
 8003ca8:	409a      	lsls	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d11d      	bne.n	8003cf6 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	221f      	movs	r2, #31
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	43db      	mvns	r3, r3
 8003cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f003 0310 	and.w	r3, r3, #16
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cea:	4313      	orrs	r3, r2
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f003 0310 	and.w	r3, r3, #16
 8003d04:	2207      	movs	r2, #7
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d0e:	4013      	ands	r3, r2
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d102      	bne.n	8003d20 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	623b      	str	r3, [r7, #32]
 8003d1e:	e00f      	b.n	8003d40 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d102      	bne.n	8003d2e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	623b      	str	r3, [r7, #32]
 8003d2c:	e008      	b.n	8003d40 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d102      	bne.n	8003d3c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003d36:	2301      	movs	r3, #1
 8003d38:	623b      	str	r3, [r7, #32]
 8003d3a:	e001      	b.n	8003d40 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	6a3a      	ldr	r2, [r7, #32]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f003 0310 	and.w	r3, r3, #16
 8003d56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d62:	4013      	ands	r3, r2
 8003d64:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	791b      	ldrb	r3, [r3, #4]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d102      	bne.n	8003d74 <HAL_DAC_ConfigChannel+0x1d8>
 8003d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d72:	e000      	b.n	8003d76 <HAL_DAC_ConfigChannel+0x1da>
 8003d74:	2300      	movs	r3, #0
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f003 0310 	and.w	r3, r3, #16
 8003d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	43db      	mvns	r3, r3
 8003d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d8e:	4013      	ands	r3, r2
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	795b      	ldrb	r3, [r3, #5]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d102      	bne.n	8003da0 <HAL_DAC_ConfigChannel+0x204>
 8003d9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d9e:	e000      	b.n	8003da2 <HAL_DAC_ConfigChannel+0x206>
 8003da0:	2300      	movs	r3, #0
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003dae:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d114      	bne.n	8003de2 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003db8:	f002 fde2 	bl	8006980 <HAL_RCC_GetHCLKFreq>
 8003dbc:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	4a48      	ldr	r2, [pc, #288]	; (8003ee4 <HAL_DAC_ConfigChannel+0x348>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d904      	bls.n	8003dd0 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8003dce:	e00f      	b.n	8003df0 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	4a45      	ldr	r2, [pc, #276]	; (8003ee8 <HAL_DAC_ConfigChannel+0x34c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d90a      	bls.n	8003dee <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dde:	627b      	str	r3, [r7, #36]	; 0x24
 8003de0:	e006      	b.n	8003df0 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de8:	4313      	orrs	r3, r2
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
 8003dec:	e000      	b.n	8003df0 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003dee:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f003 0310 	and.w	r3, r3, #16
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6819      	ldr	r1, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f003 0310 	and.w	r3, r3, #16
 8003e16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	43da      	mvns	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	400a      	ands	r2, r1
 8003e26:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f003 0310 	and.w	r3, r3, #16
 8003e36:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e42:	4013      	ands	r3, r2
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f003 0310 	and.w	r3, r3, #16
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e64:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6819      	ldr	r1, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f003 0310 	and.w	r3, r3, #16
 8003e72:	22c0      	movs	r2, #192	; 0xc0
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	43da      	mvns	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	400a      	ands	r2, r1
 8003e80:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	089b      	lsrs	r3, r3, #2
 8003e88:	f003 030f 	and.w	r3, r3, #15
 8003e8c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	089b      	lsrs	r3, r3, #2
 8003e94:	021b      	lsls	r3, r3, #8
 8003e96:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	ea02 0103 	and.w	r1, r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f003 0310 	and.w	r3, r3, #16
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	409a      	lsls	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3728      	adds	r7, #40	; 0x28
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	09896800 	.word	0x09896800
 8003ee8:	04c4b400 	.word	0x04c4b400

08003eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003efa:	e15a      	b.n	80041b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	2101      	movs	r1, #1
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	fa01 f303 	lsl.w	r3, r1, r3
 8003f08:	4013      	ands	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 814c 	beq.w	80041ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f003 0303 	and.w	r3, r3, #3
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d005      	beq.n	8003f2c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d130      	bne.n	8003f8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	2203      	movs	r2, #3
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4013      	ands	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f62:	2201      	movs	r2, #1
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	091b      	lsrs	r3, r3, #4
 8003f78:	f003 0201 	and.w	r2, r3, #1
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	2b03      	cmp	r3, #3
 8003f98:	d017      	beq.n	8003fca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	2203      	movs	r2, #3
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	43db      	mvns	r3, r3
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d123      	bne.n	800401e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	08da      	lsrs	r2, r3, #3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	3208      	adds	r2, #8
 8003fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	220f      	movs	r2, #15
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	691a      	ldr	r2, [r3, #16]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4313      	orrs	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	08da      	lsrs	r2, r3, #3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3208      	adds	r2, #8
 8004018:	6939      	ldr	r1, [r7, #16]
 800401a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	2203      	movs	r2, #3
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	43db      	mvns	r3, r3
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4013      	ands	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f003 0203 	and.w	r2, r3, #3
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 80a6 	beq.w	80041ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004060:	4b5b      	ldr	r3, [pc, #364]	; (80041d0 <HAL_GPIO_Init+0x2e4>)
 8004062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004064:	4a5a      	ldr	r2, [pc, #360]	; (80041d0 <HAL_GPIO_Init+0x2e4>)
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	6613      	str	r3, [r2, #96]	; 0x60
 800406c:	4b58      	ldr	r3, [pc, #352]	; (80041d0 <HAL_GPIO_Init+0x2e4>)
 800406e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004078:	4a56      	ldr	r2, [pc, #344]	; (80041d4 <HAL_GPIO_Init+0x2e8>)
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	089b      	lsrs	r3, r3, #2
 800407e:	3302      	adds	r3, #2
 8004080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004084:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f003 0303 	and.w	r3, r3, #3
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	220f      	movs	r2, #15
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	43db      	mvns	r3, r3
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	4013      	ands	r3, r2
 800409a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80040a2:	d01f      	beq.n	80040e4 <HAL_GPIO_Init+0x1f8>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a4c      	ldr	r2, [pc, #304]	; (80041d8 <HAL_GPIO_Init+0x2ec>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d019      	beq.n	80040e0 <HAL_GPIO_Init+0x1f4>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a4b      	ldr	r2, [pc, #300]	; (80041dc <HAL_GPIO_Init+0x2f0>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d013      	beq.n	80040dc <HAL_GPIO_Init+0x1f0>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a4a      	ldr	r2, [pc, #296]	; (80041e0 <HAL_GPIO_Init+0x2f4>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d00d      	beq.n	80040d8 <HAL_GPIO_Init+0x1ec>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a49      	ldr	r2, [pc, #292]	; (80041e4 <HAL_GPIO_Init+0x2f8>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d007      	beq.n	80040d4 <HAL_GPIO_Init+0x1e8>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a48      	ldr	r2, [pc, #288]	; (80041e8 <HAL_GPIO_Init+0x2fc>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d101      	bne.n	80040d0 <HAL_GPIO_Init+0x1e4>
 80040cc:	2305      	movs	r3, #5
 80040ce:	e00a      	b.n	80040e6 <HAL_GPIO_Init+0x1fa>
 80040d0:	2306      	movs	r3, #6
 80040d2:	e008      	b.n	80040e6 <HAL_GPIO_Init+0x1fa>
 80040d4:	2304      	movs	r3, #4
 80040d6:	e006      	b.n	80040e6 <HAL_GPIO_Init+0x1fa>
 80040d8:	2303      	movs	r3, #3
 80040da:	e004      	b.n	80040e6 <HAL_GPIO_Init+0x1fa>
 80040dc:	2302      	movs	r3, #2
 80040de:	e002      	b.n	80040e6 <HAL_GPIO_Init+0x1fa>
 80040e0:	2301      	movs	r3, #1
 80040e2:	e000      	b.n	80040e6 <HAL_GPIO_Init+0x1fa>
 80040e4:	2300      	movs	r3, #0
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	f002 0203 	and.w	r2, r2, #3
 80040ec:	0092      	lsls	r2, r2, #2
 80040ee:	4093      	lsls	r3, r2
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040f6:	4937      	ldr	r1, [pc, #220]	; (80041d4 <HAL_GPIO_Init+0x2e8>)
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	089b      	lsrs	r3, r3, #2
 80040fc:	3302      	adds	r3, #2
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004104:	4b39      	ldr	r3, [pc, #228]	; (80041ec <HAL_GPIO_Init+0x300>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	43db      	mvns	r3, r3
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4013      	ands	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004128:	4a30      	ldr	r2, [pc, #192]	; (80041ec <HAL_GPIO_Init+0x300>)
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800412e:	4b2f      	ldr	r3, [pc, #188]	; (80041ec <HAL_GPIO_Init+0x300>)
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	43db      	mvns	r3, r3
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	4013      	ands	r3, r2
 800413c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4313      	orrs	r3, r2
 8004150:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004152:	4a26      	ldr	r2, [pc, #152]	; (80041ec <HAL_GPIO_Init+0x300>)
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004158:	4b24      	ldr	r3, [pc, #144]	; (80041ec <HAL_GPIO_Init+0x300>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	43db      	mvns	r3, r3
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	4013      	ands	r3, r2
 8004166:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800417c:	4a1b      	ldr	r2, [pc, #108]	; (80041ec <HAL_GPIO_Init+0x300>)
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004182:	4b1a      	ldr	r3, [pc, #104]	; (80041ec <HAL_GPIO_Init+0x300>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	43db      	mvns	r3, r3
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	4013      	ands	r3, r2
 8004190:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80041a6:	4a11      	ldr	r2, [pc, #68]	; (80041ec <HAL_GPIO_Init+0x300>)
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	3301      	adds	r3, #1
 80041b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	fa22 f303 	lsr.w	r3, r2, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f47f ae9d 	bne.w	8003efc <HAL_GPIO_Init+0x10>
  }
}
 80041c2:	bf00      	nop
 80041c4:	bf00      	nop
 80041c6:	371c      	adds	r7, #28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	40021000 	.word	0x40021000
 80041d4:	40010000 	.word	0x40010000
 80041d8:	48000400 	.word	0x48000400
 80041dc:	48000800 	.word	0x48000800
 80041e0:	48000c00 	.word	0x48000c00
 80041e4:	48001000 	.word	0x48001000
 80041e8:	48001400 	.word	0x48001400
 80041ec:	40010400 	.word	0x40010400

080041f0 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e0bb      	b.n	800437e <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b05      	cmp	r3, #5
 8004210:	d101      	bne.n	8004216 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e0b3      	b.n	800437e <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d101      	bne.n	8004226 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e0ab      	b.n	800437e <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004226:	4b58      	ldr	r3, [pc, #352]	; (8004388 <HAL_OPAMP_Init+0x198>)
 8004228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800422a:	4a57      	ldr	r2, [pc, #348]	; (8004388 <HAL_OPAMP_Init+0x198>)
 800422c:	f043 0301 	orr.w	r3, r3, #1
 8004230:	6613      	str	r3, [r2, #96]	; 0x60
 8004232:	4b55      	ldr	r3, [pc, #340]	; (8004388 <HAL_OPAMP_Init+0x198>)
 8004234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	60bb      	str	r3, [r7, #8]
 800423c:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d103      	bne.n	8004252 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7fd fb5e 	bl	8001914 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2b40      	cmp	r3, #64	; 0x40
 800425e:	d003      	beq.n	8004268 <HAL_OPAMP_Init+0x78>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	2b60      	cmp	r3, #96	; 0x60
 8004266:	d133      	bne.n	80042d0 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f023 0110 	bic.w	r1, r3, #16
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	4b41      	ldr	r3, [pc, #260]	; (800438c <HAL_OPAMP_Init+0x19c>)
 8004286:	4013      	ands	r3, r2
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6851      	ldr	r1, [r2, #4]
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6892      	ldr	r2, [r2, #8]
 8004290:	4311      	orrs	r1, r2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6912      	ldr	r2, [r2, #16]
 8004296:	430a      	orrs	r2, r1
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	7d09      	ldrb	r1, [r1, #20]
 800429c:	2901      	cmp	r1, #1
 800429e:	d102      	bne.n	80042a6 <HAL_OPAMP_Init+0xb6>
 80042a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042a4:	e000      	b.n	80042a8 <HAL_OPAMP_Init+0xb8>
 80042a6:	2100      	movs	r1, #0
 80042a8:	4311      	orrs	r1, r2
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042ae:	4311      	orrs	r1, r2
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80042b4:	4311      	orrs	r1, r2
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80042ba:	04d2      	lsls	r2, r2, #19
 80042bc:	4311      	orrs	r1, r2
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042c2:	0612      	lsls	r2, r2, #24
 80042c4:	4311      	orrs	r1, r2
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6812      	ldr	r2, [r2, #0]
 80042ca:	430b      	orrs	r3, r1
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	e035      	b.n	800433c <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f023 0110 	bic.w	r1, r3, #16
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	4b27      	ldr	r3, [pc, #156]	; (800438c <HAL_OPAMP_Init+0x19c>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6851      	ldr	r1, [r2, #4]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6892      	ldr	r2, [r2, #8]
 80042f8:	4311      	orrs	r1, r2
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	68d2      	ldr	r2, [r2, #12]
 80042fe:	4311      	orrs	r1, r2
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6912      	ldr	r2, [r2, #16]
 8004304:	430a      	orrs	r2, r1
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	7d09      	ldrb	r1, [r1, #20]
 800430a:	2901      	cmp	r1, #1
 800430c:	d102      	bne.n	8004314 <HAL_OPAMP_Init+0x124>
 800430e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004312:	e000      	b.n	8004316 <HAL_OPAMP_Init+0x126>
 8004314:	2100      	movs	r1, #0
 8004316:	4311      	orrs	r1, r2
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800431c:	4311      	orrs	r1, r2
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004322:	4311      	orrs	r1, r2
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004328:	04d2      	lsls	r2, r2, #19
 800432a:	4311      	orrs	r1, r2
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004330:	0612      	lsls	r2, r2, #24
 8004332:	4311      	orrs	r1, r2
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6812      	ldr	r2, [r2, #0]
 8004338:	430b      	orrs	r3, r1
 800433a:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	2b00      	cmp	r3, #0
 8004344:	db10      	blt.n	8004368 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	699a      	ldr	r2, [r3, #24]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d103      	bne.n	800437c <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 800437c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40021000 	.word	0x40021000
 800438c:	e0003e11 	.word	0xe0003e11

08004390 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004398:	2300      	movs	r3, #0
 800439a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d102      	bne.n	80043a8 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	73fb      	strb	r3, [r7, #15]
 80043a6:	e01d      	b.n	80043e4 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b05      	cmp	r3, #5
 80043b2:	d102      	bne.n	80043ba <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	73fb      	strb	r3, [r7, #15]
 80043b8:	e014      	b.n	80043e4 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d10c      	bne.n	80043e0 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f042 0201 	orr.w	r2, r2, #1
 80043d4:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2204      	movs	r2, #4
 80043da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80043de:	e001      	b.n	80043e4 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <HAL_OPAMP_Stop>:
  * @brief  Stop the opamp
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Stop(OPAMP_HandleTypeDef *hopamp)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b085      	sub	sp, #20
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  /* Check if OPAMP calibration ongoing */
  if (hopamp == NULL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d102      	bne.n	800440a <HAL_OPAMP_Stop+0x18>
  {
    status = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	73fb      	strb	r3, [r7, #15]
 8004408:	e026      	b.n	8004458 <HAL_OPAMP_Stop+0x66>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b05      	cmp	r3, #5
 8004414:	d102      	bne.n	800441c <HAL_OPAMP_Stop+0x2a>
  {
    status = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	73fb      	strb	r3, [r7, #15]
 800441a:	e01d      	b.n	8004458 <HAL_OPAMP_Stop+0x66>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d102      	bne.n	800442e <HAL_OPAMP_Stop+0x3c>
  {
    status = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	73fb      	strb	r3, [r7, #15]
 800442c:	e014      	b.n	8004458 <HAL_OPAMP_Stop+0x66>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_BUSY)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b04      	cmp	r3, #4
 8004438:	d10c      	bne.n	8004454 <HAL_OPAMP_Stop+0x62>
    {
      /* Disable the selected opamp */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 0201 	bic.w	r2, r2, #1
 8004448:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From  HAL_OPAMP_STATE_BUSY to HAL_OPAMP_STATE_READY*/
      hopamp->State = HAL_OPAMP_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004452:	e001      	b.n	8004458 <HAL_OPAMP_Stop+0x66>
    }
    else
    {
      status = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8004458:	7bfb      	ldrb	r3, [r7, #15]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004466:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004468:	b08b      	sub	sp, #44	; 0x2c
 800446a:	af06      	add	r7, sp, #24
 800446c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e0d7      	b.n	8004628 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d106      	bne.n	8004492 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f007 f9fd 	bl	800b88c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2203      	movs	r2, #3
 8004496:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f003 f8d3 	bl	800764a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044a4:	2300      	movs	r3, #0
 80044a6:	73fb      	strb	r3, [r7, #15]
 80044a8:	e04c      	b.n	8004544 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80044aa:	7bfb      	ldrb	r3, [r7, #15]
 80044ac:	6879      	ldr	r1, [r7, #4]
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	4613      	mov	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	440b      	add	r3, r1
 80044ba:	3301      	adds	r3, #1
 80044bc:	2201      	movs	r2, #1
 80044be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	1c5a      	adds	r2, r3, #1
 80044c6:	4613      	mov	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	440b      	add	r3, r1
 80044d0:	7bfa      	ldrb	r2, [r7, #15]
 80044d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80044d4:	7bfa      	ldrb	r2, [r7, #15]
 80044d6:	7bfb      	ldrb	r3, [r7, #15]
 80044d8:	b298      	uxth	r0, r3
 80044da:	6879      	ldr	r1, [r7, #4]
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	440b      	add	r3, r1
 80044e6:	3336      	adds	r3, #54	; 0x36
 80044e8:	4602      	mov	r2, r0
 80044ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	4613      	mov	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	440b      	add	r3, r1
 80044fc:	3303      	adds	r3, #3
 80044fe:	2200      	movs	r2, #0
 8004500:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004502:	7bfa      	ldrb	r2, [r7, #15]
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	4613      	mov	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	440b      	add	r3, r1
 8004510:	3338      	adds	r3, #56	; 0x38
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004516:	7bfa      	ldrb	r2, [r7, #15]
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	4613      	mov	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	440b      	add	r3, r1
 8004524:	333c      	adds	r3, #60	; 0x3c
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800452a:	7bfa      	ldrb	r2, [r7, #15]
 800452c:	6879      	ldr	r1, [r7, #4]
 800452e:	4613      	mov	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	440b      	add	r3, r1
 8004538:	3340      	adds	r3, #64	; 0x40
 800453a:	2200      	movs	r2, #0
 800453c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800453e:	7bfb      	ldrb	r3, [r7, #15]
 8004540:	3301      	adds	r3, #1
 8004542:	73fb      	strb	r3, [r7, #15]
 8004544:	7bfa      	ldrb	r2, [r7, #15]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	429a      	cmp	r2, r3
 800454c:	d3ad      	bcc.n	80044aa <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800454e:	2300      	movs	r3, #0
 8004550:	73fb      	strb	r3, [r7, #15]
 8004552:	e044      	b.n	80045de <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004554:	7bfa      	ldrb	r2, [r7, #15]
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	4613      	mov	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	440b      	add	r3, r1
 8004562:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004566:	2200      	movs	r2, #0
 8004568:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800456a:	7bfa      	ldrb	r2, [r7, #15]
 800456c:	6879      	ldr	r1, [r7, #4]
 800456e:	4613      	mov	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	440b      	add	r3, r1
 8004578:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800457c:	7bfa      	ldrb	r2, [r7, #15]
 800457e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004580:	7bfa      	ldrb	r2, [r7, #15]
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	4613      	mov	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	440b      	add	r3, r1
 800458e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004592:	2200      	movs	r2, #0
 8004594:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004596:	7bfa      	ldrb	r2, [r7, #15]
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	00db      	lsls	r3, r3, #3
 80045a2:	440b      	add	r3, r1
 80045a4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045ac:	7bfa      	ldrb	r2, [r7, #15]
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	4613      	mov	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	440b      	add	r3, r1
 80045ba:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80045be:	2200      	movs	r2, #0
 80045c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80045c2:	7bfa      	ldrb	r2, [r7, #15]
 80045c4:	6879      	ldr	r1, [r7, #4]
 80045c6:	4613      	mov	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	440b      	add	r3, r1
 80045d0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
 80045da:	3301      	adds	r3, #1
 80045dc:	73fb      	strb	r3, [r7, #15]
 80045de:	7bfa      	ldrb	r2, [r7, #15]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d3b5      	bcc.n	8004554 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	603b      	str	r3, [r7, #0]
 80045ee:	687e      	ldr	r6, [r7, #4]
 80045f0:	466d      	mov	r5, sp
 80045f2:	f106 0410 	add.w	r4, r6, #16
 80045f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045fa:	6823      	ldr	r3, [r4, #0]
 80045fc:	602b      	str	r3, [r5, #0]
 80045fe:	1d33      	adds	r3, r6, #4
 8004600:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004602:	6838      	ldr	r0, [r7, #0]
 8004604:	f003 f83c 	bl	8007680 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d102      	bne.n	8004626 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f001 fc29 	bl	8005e78 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004630 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <HAL_PCD_Start+0x16>
 8004642:	2302      	movs	r3, #2
 8004644:	e012      	b.n	800466c <HAL_PCD_Start+0x3c>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f002 ffe2 	bl	800761c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4618      	mov	r0, r3
 800465e:	f005 f9fb 	bl	8009a58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4618      	mov	r0, r3
 8004682:	f005 fa00 	bl	8009a86 <USB_ReadInterrupts>
 8004686:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 fb26 	bl	8004ce4 <PCD_EP_ISR_Handler>

    return;
 8004698:	e110      	b.n	80048bc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d013      	beq.n	80046cc <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b6:	b292      	uxth	r2, r2
 80046b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f007 f976 	bl	800b9ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80046c2:	2100      	movs	r1, #0
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f8fc 	bl	80048c2 <HAL_PCD_SetAddress>

    return;
 80046ca:	e0f7      	b.n	80048bc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00c      	beq.n	80046f0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046de:	b29a      	uxth	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046e8:	b292      	uxth	r2, r2
 80046ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80046ee:	e0e5      	b.n	80048bc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00c      	beq.n	8004714 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004702:	b29a      	uxth	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800470c:	b292      	uxth	r2, r2
 800470e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004712:	e0d3      	b.n	80048bc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d034      	beq.n	8004788 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004726:	b29a      	uxth	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 0204 	bic.w	r2, r2, #4
 8004730:	b292      	uxth	r2, r2
 8004732:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800473e:	b29a      	uxth	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0208 	bic.w	r2, r2, #8
 8004748:	b292      	uxth	r2, r2
 800474a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8004754:	2b01      	cmp	r3, #1
 8004756:	d107      	bne.n	8004768 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004760:	2100      	movs	r1, #0
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f007 fb18 	bl	800bd98 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f007 f959 	bl	800ba20 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004776:	b29a      	uxth	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004780:	b292      	uxth	r2, r2
 8004782:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004786:	e099      	b.n	80048bc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800478e:	2b00      	cmp	r3, #0
 8004790:	d027      	beq.n	80047e2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800479a:	b29a      	uxth	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f042 0208 	orr.w	r2, r2, #8
 80047a4:	b292      	uxth	r2, r2
 80047a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047bc:	b292      	uxth	r2, r2
 80047be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f042 0204 	orr.w	r2, r2, #4
 80047d4:	b292      	uxth	r2, r2
 80047d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f007 f906 	bl	800b9ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80047e0:	e06c      	b.n	80048bc <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d040      	beq.n	800486e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047fe:	b292      	uxth	r2, r2
 8004800:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d12b      	bne.n	8004866 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004816:	b29a      	uxth	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f042 0204 	orr.w	r2, r2, #4
 8004820:	b292      	uxth	r2, r2
 8004822:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800482e:	b29a      	uxth	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f042 0208 	orr.w	r2, r2, #8
 8004838:	b292      	uxth	r2, r2
 800483a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800484e:	b29b      	uxth	r3, r3
 8004850:	089b      	lsrs	r3, r3, #2
 8004852:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800485c:	2101      	movs	r1, #1
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f007 fa9a 	bl	800bd98 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004864:	e02a      	b.n	80048bc <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f007 f8c0 	bl	800b9ec <HAL_PCD_SuspendCallback>
    return;
 800486c:	e026      	b.n	80048bc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00f      	beq.n	8004898 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004880:	b29a      	uxth	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800488a:	b292      	uxth	r2, r2
 800488c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f007 f87e 	bl	800b992 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004896:	e011      	b.n	80048bc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00c      	beq.n	80048bc <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048b4:	b292      	uxth	r2, r2
 80048b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80048ba:	bf00      	nop
  }
}
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b082      	sub	sp, #8
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	460b      	mov	r3, r1
 80048cc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_PCD_SetAddress+0x1a>
 80048d8:	2302      	movs	r3, #2
 80048da:	e013      	b.n	8004904 <HAL_PCD_SetAddress+0x42>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	78fa      	ldrb	r2, [r7, #3]
 80048e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	78fa      	ldrb	r2, [r7, #3]
 80048f2:	4611      	mov	r1, r2
 80048f4:	4618      	mov	r0, r3
 80048f6:	f005 f89b 	bl	8009a30 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	4608      	mov	r0, r1
 8004916:	4611      	mov	r1, r2
 8004918:	461a      	mov	r2, r3
 800491a:	4603      	mov	r3, r0
 800491c:	70fb      	strb	r3, [r7, #3]
 800491e:	460b      	mov	r3, r1
 8004920:	803b      	strh	r3, [r7, #0]
 8004922:	4613      	mov	r3, r2
 8004924:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800492a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800492e:	2b00      	cmp	r3, #0
 8004930:	da0e      	bge.n	8004950 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004932:	78fb      	ldrb	r3, [r7, #3]
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	1c5a      	adds	r2, r3, #1
 800493a:	4613      	mov	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	4413      	add	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2201      	movs	r2, #1
 800494c:	705a      	strb	r2, [r3, #1]
 800494e:	e00e      	b.n	800496e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	f003 0207 	and.w	r2, r3, #7
 8004956:	4613      	mov	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4413      	add	r3, r2
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	4413      	add	r3, r2
 8004966:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800496e:	78fb      	ldrb	r3, [r7, #3]
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	b2da      	uxtb	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800497a:	883a      	ldrh	r2, [r7, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	78ba      	ldrb	r2, [r7, #2]
 8004984:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	785b      	ldrb	r3, [r3, #1]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d004      	beq.n	8004998 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	b29a      	uxth	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004998:	78bb      	ldrb	r3, [r7, #2]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d102      	bne.n	80049a4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d101      	bne.n	80049b2 <HAL_PCD_EP_Open+0xa6>
 80049ae:	2302      	movs	r3, #2
 80049b0:	e00e      	b.n	80049d0 <HAL_PCD_EP_Open+0xc4>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68f9      	ldr	r1, [r7, #12]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f002 fe7f 	bl	80076c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80049ce:	7afb      	ldrb	r3, [r7, #11]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	460b      	mov	r3, r1
 80049e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	da0e      	bge.n	8004a0a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049ec:	78fb      	ldrb	r3, [r7, #3]
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	4613      	mov	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	4413      	add	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2201      	movs	r2, #1
 8004a06:	705a      	strb	r2, [r3, #1]
 8004a08:	e00e      	b.n	8004a28 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a0a:	78fb      	ldrb	r3, [r7, #3]
 8004a0c:	f003 0207 	and.w	r2, r3, #7
 8004a10:	4613      	mov	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	4413      	add	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004a28:	78fb      	ldrb	r3, [r7, #3]
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d101      	bne.n	8004a42 <HAL_PCD_EP_Close+0x6a>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	e00e      	b.n	8004a60 <HAL_PCD_EP_Close+0x88>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68f9      	ldr	r1, [r7, #12]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f003 f9cb 	bl	8007dec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	607a      	str	r2, [r7, #4]
 8004a72:	603b      	str	r3, [r7, #0]
 8004a74:	460b      	mov	r3, r1
 8004a76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a78:	7afb      	ldrb	r3, [r7, #11]
 8004a7a:	f003 0207 	and.w	r2, r3, #7
 8004a7e:	4613      	mov	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	00db      	lsls	r3, r3, #3
 8004a86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004aa8:	7afb      	ldrb	r3, [r7, #11]
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ab4:	7afb      	ldrb	r3, [r7, #11]
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d106      	bne.n	8004acc <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6979      	ldr	r1, [r7, #20]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f003 fb7e 	bl	80081c6 <USB_EPStartXfer>
 8004aca:	e005      	b.n	8004ad8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6979      	ldr	r1, [r7, #20]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f003 fb77 	bl	80081c6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	460b      	mov	r3, r1
 8004aec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004aee:	78fb      	ldrb	r3, [r7, #3]
 8004af0:	f003 0207 	and.w	r2, r3, #7
 8004af4:	6879      	ldr	r1, [r7, #4]
 8004af6:	4613      	mov	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	440b      	add	r3, r1
 8004b00:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004b04:	681b      	ldr	r3, [r3, #0]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b086      	sub	sp, #24
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	60f8      	str	r0, [r7, #12]
 8004b1a:	607a      	str	r2, [r7, #4]
 8004b1c:	603b      	str	r3, [r7, #0]
 8004b1e:	460b      	mov	r3, r1
 8004b20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b22:	7afb      	ldrb	r3, [r7, #11]
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4413      	add	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2200      	movs	r2, #0
 8004b56:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b5e:	7afb      	ldrb	r3, [r7, #11]
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b6a:	7afb      	ldrb	r3, [r7, #11]
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d106      	bne.n	8004b82 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6979      	ldr	r1, [r7, #20]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f003 fb23 	bl	80081c6 <USB_EPStartXfer>
 8004b80:	e005      	b.n	8004b8e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6979      	ldr	r1, [r7, #20]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f003 fb1c 	bl	80081c6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004ba4:	78fb      	ldrb	r3, [r7, #3]
 8004ba6:	f003 0207 	and.w	r2, r3, #7
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d901      	bls.n	8004bb6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e03e      	b.n	8004c34 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004bb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	da0e      	bge.n	8004bdc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bbe:	78fb      	ldrb	r3, [r7, #3]
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	705a      	strb	r2, [r3, #1]
 8004bda:	e00c      	b.n	8004bf6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004bdc:	78fa      	ldrb	r2, [r7, #3]
 8004bde:	4613      	mov	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	4413      	add	r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bfc:	78fb      	ldrb	r3, [r7, #3]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	b2da      	uxtb	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d101      	bne.n	8004c16 <HAL_PCD_EP_SetStall+0x7e>
 8004c12:	2302      	movs	r3, #2
 8004c14:	e00e      	b.n	8004c34 <HAL_PCD_EP_SetStall+0x9c>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68f9      	ldr	r1, [r7, #12]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f004 fe04 	bl	8009832 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	460b      	mov	r3, r1
 8004c46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c48:	78fb      	ldrb	r3, [r7, #3]
 8004c4a:	f003 020f 	and.w	r2, r3, #15
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d901      	bls.n	8004c5a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e040      	b.n	8004cdc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	da0e      	bge.n	8004c80 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c62:	78fb      	ldrb	r3, [r7, #3]
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	1c5a      	adds	r2, r3, #1
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	4413      	add	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	705a      	strb	r2, [r3, #1]
 8004c7e:	e00e      	b.n	8004c9e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c80:	78fb      	ldrb	r3, [r7, #3]
 8004c82:	f003 0207 	and.w	r2, r3, #7
 8004c86:	4613      	mov	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	4413      	add	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ca4:	78fb      	ldrb	r3, [r7, #3]
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d101      	bne.n	8004cbe <HAL_PCD_EP_ClrStall+0x82>
 8004cba:	2302      	movs	r3, #2
 8004cbc:	e00e      	b.n	8004cdc <HAL_PCD_EP_ClrStall+0xa0>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68f9      	ldr	r1, [r7, #12]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f004 fe01 	bl	80098d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b096      	sub	sp, #88	; 0x58
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004cec:	e39c      	b.n	8005428 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004cf6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004cfa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	f003 030f 	and.w	r3, r3, #15
 8004d04:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8004d08:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f040 815e 	bne.w	8004fce <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004d12:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004d16:	f003 0310 	and.w	r3, r3, #16
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d150      	bne.n	8004dc0 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	881b      	ldrh	r3, [r3, #0]
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2e:	81fb      	strh	r3, [r7, #14]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	89fb      	ldrh	r3, [r7, #14]
 8004d36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	3328      	adds	r3, #40	; 0x28
 8004d46:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	461a      	mov	r2, r3
 8004d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	4413      	add	r3, r2
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	6812      	ldr	r2, [r2, #0]
 8004d60:	4413      	add	r3, r2
 8004d62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d6e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d72:	695a      	ldr	r2, [r3, #20]
 8004d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	441a      	add	r2, r3
 8004d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d7c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004d7e:	2100      	movs	r1, #0
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f006 fdec 	bl	800b95e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f000 834a 	beq.w	8005428 <PCD_EP_ISR_Handler+0x744>
 8004d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f040 8345 	bne.w	8005428 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	b292      	uxth	r2, r2
 8004db2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004dbe:	e333      	b.n	8005428 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004dd2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d032      	beq.n	8004e44 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	461a      	mov	r2, r3
 8004dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	4413      	add	r3, r2
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6812      	ldr	r2, [r2, #0]
 8004df6:	4413      	add	r3, r2
 8004df8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e04:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6818      	ldr	r0, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e12:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e16:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	f004 fe86 	bl	8009b2a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	823b      	strh	r3, [r7, #16]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	8a3a      	ldrh	r2, [r7, #16]
 8004e34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e38:	b292      	uxth	r2, r2
 8004e3a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f006 fd61 	bl	800b904 <HAL_PCD_SetupStageCallback>
 8004e42:	e2f1      	b.n	8005428 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004e44:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f280 82ed 	bge.w	8005428 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	83fb      	strh	r3, [r7, #30]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	8bfa      	ldrh	r2, [r7, #30]
 8004e64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e68:	b292      	uxth	r2, r2
 8004e6a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	461a      	mov	r2, r3
 8004e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	00db      	lsls	r3, r3, #3
 8004e7e:	4413      	add	r3, r2
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6812      	ldr	r2, [r2, #0]
 8004e84:	4413      	add	r3, r2
 8004e86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e92:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d019      	beq.n	8004ed0 <PCD_EP_ISR_Handler+0x1ec>
 8004e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d015      	beq.n	8004ed0 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6818      	ldr	r0, [r3, #0]
 8004ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eaa:	6959      	ldr	r1, [r3, #20]
 8004eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eae:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eb2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	f004 fe38 	bl	8009b2a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ebc:	695a      	ldr	r2, [r3, #20]
 8004ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	441a      	add	r2, r3
 8004ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ec6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004ec8:	2100      	movs	r1, #0
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f006 fd2c 	bl	800b928 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f040 82a3 	bne.w	8005428 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	61bb      	str	r3, [r7, #24]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	61bb      	str	r3, [r7, #24]
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	2b3e      	cmp	r3, #62	; 0x3e
 8004f08:	d918      	bls.n	8004f3c <PCD_EP_ISR_Handler+0x258>
 8004f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	095b      	lsrs	r3, r3, #5
 8004f10:	647b      	str	r3, [r7, #68]	; 0x44
 8004f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 031f 	and.w	r3, r3, #31
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d102      	bne.n	8004f24 <PCD_EP_ISR_Handler+0x240>
 8004f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f20:	3b01      	subs	r3, #1
 8004f22:	647b      	str	r3, [r7, #68]	; 0x44
 8004f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	029b      	lsls	r3, r3, #10
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	801a      	strh	r2, [r3, #0]
 8004f3a:	e029      	b.n	8004f90 <PCD_EP_ISR_Handler+0x2ac>
 8004f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d112      	bne.n	8004f6a <PCD_EP_ISR_Handler+0x286>
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	801a      	strh	r2, [r3, #0]
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	881b      	ldrh	r3, [r3, #0]
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	801a      	strh	r2, [r3, #0]
 8004f68:	e012      	b.n	8004f90 <PCD_EP_ISR_Handler+0x2ac>
 8004f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	085b      	lsrs	r3, r3, #1
 8004f70:	647b      	str	r3, [r7, #68]	; 0x44
 8004f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d002      	beq.n	8004f84 <PCD_EP_ISR_Handler+0x2a0>
 8004f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f80:	3301      	adds	r3, #1
 8004f82:	647b      	str	r3, [r7, #68]	; 0x44
 8004f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	029b      	lsls	r3, r3, #10
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa0:	827b      	strh	r3, [r7, #18]
 8004fa2:	8a7b      	ldrh	r3, [r7, #18]
 8004fa4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004fa8:	827b      	strh	r3, [r7, #18]
 8004faa:	8a7b      	ldrh	r3, [r7, #18]
 8004fac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004fb0:	827b      	strh	r3, [r7, #18]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	8a7b      	ldrh	r3, [r7, #18]
 8004fb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	8013      	strh	r3, [r2, #0]
 8004fcc:	e22c      	b.n	8005428 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004fe2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f280 80f6 	bge.w	80051d8 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005002:	4013      	ands	r3, r2
 8005004:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	461a      	mov	r2, r3
 800500e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800501a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800501e:	b292      	uxth	r2, r2
 8005020:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005022:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8005026:	4613      	mov	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4413      	add	r3, r2
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	4413      	add	r3, r2
 8005036:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800503a:	7b1b      	ldrb	r3, [r3, #12]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d123      	bne.n	8005088 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005048:	b29b      	uxth	r3, r3
 800504a:	461a      	mov	r2, r3
 800504c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	4413      	add	r3, r2
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6812      	ldr	r2, [r2, #0]
 8005058:	4413      	add	r3, r2
 800505a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005064:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8005068:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 808e 	beq.w	800518e <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6818      	ldr	r0, [r3, #0]
 8005076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005078:	6959      	ldr	r1, [r3, #20]
 800507a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800507c:	88da      	ldrh	r2, [r3, #6]
 800507e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005082:	f004 fd52 	bl	8009b2a <USB_ReadPMA>
 8005086:	e082      	b.n	800518e <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800508a:	78db      	ldrb	r3, [r3, #3]
 800508c:	2b02      	cmp	r3, #2
 800508e:	d10a      	bne.n	80050a6 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005090:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005094:	461a      	mov	r2, r3
 8005096:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f9d3 	bl	8005444 <HAL_PCD_EP_DB_Receive>
 800509e:	4603      	mov	r3, r0
 80050a0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80050a4:	e073      	b.n	800518e <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	461a      	mov	r2, r3
 80050ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	461a      	mov	r2, r3
 80050ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	441a      	add	r2, r3
 80050d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80050d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	461a      	mov	r2, r3
 80050f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d022      	beq.n	800514a <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800510c:	b29b      	uxth	r3, r3
 800510e:	461a      	mov	r2, r3
 8005110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	00db      	lsls	r3, r3, #3
 8005116:	4413      	add	r3, r2
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	6812      	ldr	r2, [r2, #0]
 800511c:	4413      	add	r3, r2
 800511e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005128:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800512c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005130:	2b00      	cmp	r3, #0
 8005132:	d02c      	beq.n	800518e <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6818      	ldr	r0, [r3, #0]
 8005138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800513a:	6959      	ldr	r1, [r3, #20]
 800513c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800513e:	891a      	ldrh	r2, [r3, #8]
 8005140:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005144:	f004 fcf1 	bl	8009b2a <USB_ReadPMA>
 8005148:	e021      	b.n	800518e <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005152:	b29b      	uxth	r3, r3
 8005154:	461a      	mov	r2, r3
 8005156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	4413      	add	r3, r2
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	6812      	ldr	r2, [r2, #0]
 8005162:	4413      	add	r3, r2
 8005164:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800516e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8005172:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005176:	2b00      	cmp	r3, #0
 8005178:	d009      	beq.n	800518e <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6818      	ldr	r0, [r3, #0]
 800517e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005180:	6959      	ldr	r1, [r3, #20]
 8005182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005184:	895a      	ldrh	r2, [r3, #10]
 8005186:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800518a:	f004 fcce 	bl	8009b2a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800518e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005190:	69da      	ldr	r2, [r3, #28]
 8005192:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005196:	441a      	add	r2, r3
 8005198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800519a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800519c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800519e:	695a      	ldr	r2, [r3, #20]
 80051a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80051a4:	441a      	add	r2, r3
 80051a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051a8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80051aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d005      	beq.n	80051be <PCD_EP_ISR_Handler+0x4da>
 80051b2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80051b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d206      	bcs.n	80051cc <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80051be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	4619      	mov	r1, r3
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f006 fbaf 	bl	800b928 <HAL_PCD_DataOutStageCallback>
 80051ca:	e005      	b.n	80051d8 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80051d2:	4618      	mov	r0, r3
 80051d4:	f002 fff7 	bl	80081c6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80051d8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80051dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 8121 	beq.w	8005428 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 80051e6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	4613      	mov	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	4413      	add	r3, r2
 80051f8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	461a      	mov	r2, r3
 8005200:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	b29b      	uxth	r3, r3
 800520c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005214:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	461a      	mov	r2, r3
 800521e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	441a      	add	r2, r3
 8005226:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800522a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800522e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005232:	b29b      	uxth	r3, r3
 8005234:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8005236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005238:	78db      	ldrb	r3, [r3, #3]
 800523a:	2b02      	cmp	r3, #2
 800523c:	f000 80a2 	beq.w	8005384 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8005240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005242:	2200      	movs	r2, #0
 8005244:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005248:	7b1b      	ldrb	r3, [r3, #12]
 800524a:	2b00      	cmp	r3, #0
 800524c:	f000 8093 	beq.w	8005376 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005250:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005258:	2b00      	cmp	r3, #0
 800525a:	d046      	beq.n	80052ea <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800525c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800525e:	785b      	ldrb	r3, [r3, #1]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d126      	bne.n	80052b2 <PCD_EP_ISR_Handler+0x5ce>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	627b      	str	r3, [r7, #36]	; 0x24
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005272:	b29b      	uxth	r3, r3
 8005274:	461a      	mov	r2, r3
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	4413      	add	r3, r2
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
 800527c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	00da      	lsls	r2, r3, #3
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	4413      	add	r3, r2
 8005286:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800528a:	623b      	str	r3, [r7, #32]
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	b29b      	uxth	r3, r3
 8005292:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005296:	b29a      	uxth	r2, r3
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	801a      	strh	r2, [r3, #0]
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	881b      	ldrh	r3, [r3, #0]
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	801a      	strh	r2, [r3, #0]
 80052b0:	e061      	b.n	8005376 <PCD_EP_ISR_Handler+0x692>
 80052b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b4:	785b      	ldrb	r3, [r3, #1]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d15d      	bne.n	8005376 <PCD_EP_ISR_Handler+0x692>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	461a      	mov	r2, r3
 80052cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ce:	4413      	add	r3, r2
 80052d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	00da      	lsls	r2, r3, #3
 80052d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052da:	4413      	add	r3, r2
 80052dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80052e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e4:	2200      	movs	r2, #0
 80052e6:	801a      	strh	r2, [r3, #0]
 80052e8:	e045      	b.n	8005376 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f2:	785b      	ldrb	r3, [r3, #1]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d126      	bne.n	8005346 <PCD_EP_ISR_Handler+0x662>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	637b      	str	r3, [r7, #52]	; 0x34
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005306:	b29b      	uxth	r3, r3
 8005308:	461a      	mov	r2, r3
 800530a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530c:	4413      	add	r3, r2
 800530e:	637b      	str	r3, [r7, #52]	; 0x34
 8005310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	00da      	lsls	r2, r3, #3
 8005316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005318:	4413      	add	r3, r2
 800531a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800531e:	633b      	str	r3, [r7, #48]	; 0x30
 8005320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005322:	881b      	ldrh	r3, [r3, #0]
 8005324:	b29b      	uxth	r3, r3
 8005326:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800532a:	b29a      	uxth	r2, r3
 800532c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532e:	801a      	strh	r2, [r3, #0]
 8005330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	b29b      	uxth	r3, r3
 8005336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800533a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800533e:	b29a      	uxth	r2, r3
 8005340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005342:	801a      	strh	r2, [r3, #0]
 8005344:	e017      	b.n	8005376 <PCD_EP_ISR_Handler+0x692>
 8005346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005348:	785b      	ldrb	r3, [r3, #1]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d113      	bne.n	8005376 <PCD_EP_ISR_Handler+0x692>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005356:	b29b      	uxth	r3, r3
 8005358:	461a      	mov	r2, r3
 800535a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800535c:	4413      	add	r3, r2
 800535e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	00da      	lsls	r2, r3, #3
 8005366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005368:	4413      	add	r3, r2
 800536a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800536e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005372:	2200      	movs	r2, #0
 8005374:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	4619      	mov	r1, r3
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f006 faee 	bl	800b95e <HAL_PCD_DataInStageCallback>
 8005382:	e051      	b.n	8005428 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005384:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538c:	2b00      	cmp	r3, #0
 800538e:	d144      	bne.n	800541a <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005398:	b29b      	uxth	r3, r3
 800539a:	461a      	mov	r2, r3
 800539c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	4413      	add	r3, r2
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6812      	ldr	r2, [r2, #0]
 80053a8:	4413      	add	r3, r2
 80053aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053b4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80053b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ba:	699a      	ldr	r2, [r3, #24]
 80053bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d907      	bls.n	80053d4 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 80053c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c6:	699a      	ldr	r2, [r3, #24]
 80053c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80053cc:	1ad2      	subs	r2, r2, r3
 80053ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053d0:	619a      	str	r2, [r3, #24]
 80053d2:	e002      	b.n	80053da <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 80053d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053d6:	2200      	movs	r2, #0
 80053d8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80053da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d106      	bne.n	80053f0 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80053e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	4619      	mov	r1, r3
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f006 fab8 	bl	800b95e <HAL_PCD_DataInStageCallback>
 80053ee:	e01b      	b.n	8005428 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80053f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f2:	695a      	ldr	r2, [r3, #20]
 80053f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80053f8:	441a      	add	r2, r3
 80053fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053fc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80053fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005400:	69da      	ldr	r2, [r3, #28]
 8005402:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005406:	441a      	add	r2, r3
 8005408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800540a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005412:	4618      	mov	r0, r3
 8005414:	f002 fed7 	bl	80081c6 <USB_EPStartXfer>
 8005418:	e006      	b.n	8005428 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800541a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800541e:	461a      	mov	r2, r3
 8005420:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f917 	bl	8005656 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005430:	b29b      	uxth	r3, r3
 8005432:	b21b      	sxth	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	f6ff ac5a 	blt.w	8004cee <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3758      	adds	r7, #88	; 0x58
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b088      	sub	sp, #32
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	4613      	mov	r3, r2
 8005450:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005452:	88fb      	ldrh	r3, [r7, #6]
 8005454:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d07c      	beq.n	8005556 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005464:	b29b      	uxth	r3, r3
 8005466:	461a      	mov	r2, r3
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	4413      	add	r3, r2
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	6812      	ldr	r2, [r2, #0]
 8005474:	4413      	add	r3, r2
 8005476:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800547a:	881b      	ldrh	r3, [r3, #0]
 800547c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005480:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	699a      	ldr	r2, [r3, #24]
 8005486:	8b7b      	ldrh	r3, [r7, #26]
 8005488:	429a      	cmp	r2, r3
 800548a:	d306      	bcc.n	800549a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	699a      	ldr	r2, [r3, #24]
 8005490:	8b7b      	ldrh	r3, [r7, #26]
 8005492:	1ad2      	subs	r2, r2, r3
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	619a      	str	r2, [r3, #24]
 8005498:	e002      	b.n	80054a0 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2200      	movs	r2, #0
 800549e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d123      	bne.n	80054f0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	461a      	mov	r2, r3
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c2:	833b      	strh	r3, [r7, #24]
 80054c4:	8b3b      	ldrh	r3, [r7, #24]
 80054c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80054ca:	833b      	strh	r3, [r7, #24]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	461a      	mov	r2, r3
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	441a      	add	r2, r3
 80054da:	8b3b      	ldrh	r3, [r7, #24]
 80054dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80054f0:	88fb      	ldrh	r3, [r7, #6]
 80054f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d01f      	beq.n	800553a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4413      	add	r3, r2
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	b29b      	uxth	r3, r3
 800550c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005514:	82fb      	strh	r3, [r7, #22]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	461a      	mov	r2, r3
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	441a      	add	r2, r3
 8005524:	8afb      	ldrh	r3, [r7, #22]
 8005526:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800552a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800552e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005532:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005536:	b29b      	uxth	r3, r3
 8005538:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800553a:	8b7b      	ldrh	r3, [r7, #26]
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 8085 	beq.w	800564c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6818      	ldr	r0, [r3, #0]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	6959      	ldr	r1, [r3, #20]
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	891a      	ldrh	r2, [r3, #8]
 800554e:	8b7b      	ldrh	r3, [r7, #26]
 8005550:	f004 faeb 	bl	8009b2a <USB_ReadPMA>
 8005554:	e07a      	b.n	800564c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800555e:	b29b      	uxth	r3, r3
 8005560:	461a      	mov	r2, r3
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	4413      	add	r3, r2
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	6812      	ldr	r2, [r2, #0]
 800556e:	4413      	add	r3, r2
 8005570:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800557a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	699a      	ldr	r2, [r3, #24]
 8005580:	8b7b      	ldrh	r3, [r7, #26]
 8005582:	429a      	cmp	r2, r3
 8005584:	d306      	bcc.n	8005594 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	699a      	ldr	r2, [r3, #24]
 800558a:	8b7b      	ldrh	r3, [r7, #26]
 800558c:	1ad2      	subs	r2, r2, r3
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	619a      	str	r2, [r3, #24]
 8005592:	e002      	b.n	800559a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2200      	movs	r2, #0
 8005598:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d123      	bne.n	80055ea <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	461a      	mov	r2, r3
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055bc:	83fb      	strh	r3, [r7, #30]
 80055be:	8bfb      	ldrh	r3, [r7, #30]
 80055c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80055c4:	83fb      	strh	r3, [r7, #30]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	461a      	mov	r2, r3
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	441a      	add	r2, r3
 80055d4:	8bfb      	ldrh	r3, [r7, #30]
 80055d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80055ea:	88fb      	ldrh	r3, [r7, #6]
 80055ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d11f      	bne.n	8005634 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	461a      	mov	r2, r3
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	881b      	ldrh	r3, [r3, #0]
 8005604:	b29b      	uxth	r3, r3
 8005606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800560a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560e:	83bb      	strh	r3, [r7, #28]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	461a      	mov	r2, r3
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	441a      	add	r2, r3
 800561e:	8bbb      	ldrh	r3, [r7, #28]
 8005620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800562c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005630:	b29b      	uxth	r3, r3
 8005632:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005634:	8b7b      	ldrh	r3, [r7, #26]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d008      	beq.n	800564c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6818      	ldr	r0, [r3, #0]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	6959      	ldr	r1, [r3, #20]
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	895a      	ldrh	r2, [r3, #10]
 8005646:	8b7b      	ldrh	r3, [r7, #26]
 8005648:	f004 fa6f 	bl	8009b2a <USB_ReadPMA>
    }
  }

  return count;
 800564c:	8b7b      	ldrh	r3, [r7, #26]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3720      	adds	r7, #32
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b0a2      	sub	sp, #136	; 0x88
 800565a:	af00      	add	r7, sp, #0
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	4613      	mov	r3, r2
 8005662:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005664:	88fb      	ldrh	r3, [r7, #6]
 8005666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 81c5 	beq.w	80059fa <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005678:	b29b      	uxth	r3, r3
 800567a:	461a      	mov	r2, r3
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	4413      	add	r3, r2
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	6812      	ldr	r2, [r2, #0]
 8005688:	4413      	add	r3, r2
 800568a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005694:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	699a      	ldr	r2, [r3, #24]
 800569c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d907      	bls.n	80056b4 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	699a      	ldr	r2, [r3, #24]
 80056a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80056ac:	1ad2      	subs	r2, r2, r3
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	619a      	str	r2, [r3, #24]
 80056b2:	e002      	b.n	80056ba <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2200      	movs	r2, #0
 80056b8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f040 80b9 	bne.w	8005836 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	785b      	ldrb	r3, [r3, #1]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d126      	bne.n	800571a <HAL_PCD_EP_DB_Transmit+0xc4>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056da:	b29b      	uxth	r3, r3
 80056dc:	461a      	mov	r2, r3
 80056de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e0:	4413      	add	r3, r2
 80056e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	00da      	lsls	r2, r3, #3
 80056ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ec:	4413      	add	r3, r2
 80056ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80056f2:	627b      	str	r3, [r7, #36]	; 0x24
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056fe:	b29a      	uxth	r2, r3
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	801a      	strh	r2, [r3, #0]
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	881b      	ldrh	r3, [r3, #0]
 8005708:	b29b      	uxth	r3, r3
 800570a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800570e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005712:	b29a      	uxth	r2, r3
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	801a      	strh	r2, [r3, #0]
 8005718:	e01a      	b.n	8005750 <HAL_PCD_EP_DB_Transmit+0xfa>
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	785b      	ldrb	r3, [r3, #1]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d116      	bne.n	8005750 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	633b      	str	r3, [r7, #48]	; 0x30
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005730:	b29b      	uxth	r3, r3
 8005732:	461a      	mov	r2, r3
 8005734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005736:	4413      	add	r3, r2
 8005738:	633b      	str	r3, [r7, #48]	; 0x30
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	00da      	lsls	r2, r3, #3
 8005740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005742:	4413      	add	r3, r2
 8005744:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005748:	62fb      	str	r3, [r7, #44]	; 0x2c
 800574a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574c:	2200      	movs	r2, #0
 800574e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	623b      	str	r3, [r7, #32]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	785b      	ldrb	r3, [r3, #1]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d126      	bne.n	80057ac <HAL_PCD_EP_DB_Transmit+0x156>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	61bb      	str	r3, [r7, #24]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800576c:	b29b      	uxth	r3, r3
 800576e:	461a      	mov	r2, r3
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	4413      	add	r3, r2
 8005774:	61bb      	str	r3, [r7, #24]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	00da      	lsls	r2, r3, #3
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	4413      	add	r3, r2
 8005780:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005784:	617b      	str	r3, [r7, #20]
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	881b      	ldrh	r3, [r3, #0]
 800578a:	b29b      	uxth	r3, r3
 800578c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005790:	b29a      	uxth	r2, r3
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	801a      	strh	r2, [r3, #0]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	881b      	ldrh	r3, [r3, #0]
 800579a:	b29b      	uxth	r3, r3
 800579c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	801a      	strh	r2, [r3, #0]
 80057aa:	e017      	b.n	80057dc <HAL_PCD_EP_DB_Transmit+0x186>
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	785b      	ldrb	r3, [r3, #1]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d113      	bne.n	80057dc <HAL_PCD_EP_DB_Transmit+0x186>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057bc:	b29b      	uxth	r3, r3
 80057be:	461a      	mov	r2, r3
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	4413      	add	r3, r2
 80057c4:	623b      	str	r3, [r7, #32]
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	00da      	lsls	r2, r3, #3
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	4413      	add	r3, r2
 80057d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057d4:	61fb      	str	r3, [r7, #28]
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	2200      	movs	r2, #0
 80057da:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	4619      	mov	r1, r3
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f006 f8bb 	bl	800b95e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80057e8:	88fb      	ldrh	r3, [r7, #6]
 80057ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f000 82d2 	beq.w	8005d98 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	461a      	mov	r2, r3
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	881b      	ldrh	r3, [r3, #0]
 8005804:	b29b      	uxth	r3, r3
 8005806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800580a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580e:	827b      	strh	r3, [r7, #18]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	461a      	mov	r2, r3
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	441a      	add	r2, r3
 800581e:	8a7b      	ldrh	r3, [r7, #18]
 8005820:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005824:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005828:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800582c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005830:	b29b      	uxth	r3, r3
 8005832:	8013      	strh	r3, [r2, #0]
 8005834:	e2b0      	b.n	8005d98 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005836:	88fb      	ldrh	r3, [r7, #6]
 8005838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d021      	beq.n	8005884 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	461a      	mov	r2, r3
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	881b      	ldrh	r3, [r3, #0]
 8005850:	b29b      	uxth	r3, r3
 8005852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	461a      	mov	r2, r3
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	441a      	add	r2, r3
 800586c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005870:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005874:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005878:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800587c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005880:	b29b      	uxth	r3, r3
 8005882:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800588a:	2b01      	cmp	r3, #1
 800588c:	f040 8284 	bne.w	8005d98 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	695a      	ldr	r2, [r3, #20]
 8005894:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005898:	441a      	add	r2, r3
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	69da      	ldr	r2, [r3, #28]
 80058a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80058a6:	441a      	add	r2, r3
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	6a1a      	ldr	r2, [r3, #32]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d309      	bcc.n	80058cc <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	6a1a      	ldr	r2, [r3, #32]
 80058c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058c4:	1ad2      	subs	r2, r2, r3
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	621a      	str	r2, [r3, #32]
 80058ca:	e015      	b.n	80058f8 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d107      	bne.n	80058e4 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80058d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80058d8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80058e2:	e009      	b.n	80058f8 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2200      	movs	r2, #0
 80058f6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	785b      	ldrb	r3, [r3, #1]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d155      	bne.n	80059ac <HAL_PCD_EP_DB_Transmit+0x356>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	63bb      	str	r3, [r7, #56]	; 0x38
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800590e:	b29b      	uxth	r3, r3
 8005910:	461a      	mov	r2, r3
 8005912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005914:	4413      	add	r3, r2
 8005916:	63bb      	str	r3, [r7, #56]	; 0x38
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	00da      	lsls	r2, r3, #3
 800591e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005920:	4413      	add	r3, r2
 8005922:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005926:	637b      	str	r3, [r7, #52]	; 0x34
 8005928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800592a:	2b3e      	cmp	r3, #62	; 0x3e
 800592c:	d916      	bls.n	800595c <HAL_PCD_EP_DB_Transmit+0x306>
 800592e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005930:	095b      	lsrs	r3, r3, #5
 8005932:	64bb      	str	r3, [r7, #72]	; 0x48
 8005934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005936:	f003 031f 	and.w	r3, r3, #31
 800593a:	2b00      	cmp	r3, #0
 800593c:	d102      	bne.n	8005944 <HAL_PCD_EP_DB_Transmit+0x2ee>
 800593e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005940:	3b01      	subs	r3, #1
 8005942:	64bb      	str	r3, [r7, #72]	; 0x48
 8005944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005946:	b29b      	uxth	r3, r3
 8005948:	029b      	lsls	r3, r3, #10
 800594a:	b29b      	uxth	r3, r3
 800594c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005954:	b29a      	uxth	r2, r3
 8005956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005958:	801a      	strh	r2, [r3, #0]
 800595a:	e043      	b.n	80059e4 <HAL_PCD_EP_DB_Transmit+0x38e>
 800595c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800595e:	2b00      	cmp	r3, #0
 8005960:	d112      	bne.n	8005988 <HAL_PCD_EP_DB_Transmit+0x332>
 8005962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	b29b      	uxth	r3, r3
 8005968:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800596c:	b29a      	uxth	r2, r3
 800596e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005970:	801a      	strh	r2, [r3, #0]
 8005972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	b29b      	uxth	r3, r3
 8005978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800597c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005980:	b29a      	uxth	r2, r3
 8005982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005984:	801a      	strh	r2, [r3, #0]
 8005986:	e02d      	b.n	80059e4 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800598a:	085b      	lsrs	r3, r3, #1
 800598c:	64bb      	str	r3, [r7, #72]	; 0x48
 800598e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <HAL_PCD_EP_DB_Transmit+0x348>
 8005998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800599a:	3301      	adds	r3, #1
 800599c:	64bb      	str	r3, [r7, #72]	; 0x48
 800599e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	029b      	lsls	r3, r3, #10
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a8:	801a      	strh	r2, [r3, #0]
 80059aa:	e01b      	b.n	80059e4 <HAL_PCD_EP_DB_Transmit+0x38e>
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	785b      	ldrb	r3, [r3, #1]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d117      	bne.n	80059e4 <HAL_PCD_EP_DB_Transmit+0x38e>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	643b      	str	r3, [r7, #64]	; 0x40
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	461a      	mov	r2, r3
 80059c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059c8:	4413      	add	r3, r2
 80059ca:	643b      	str	r3, [r7, #64]	; 0x40
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	00da      	lsls	r2, r3, #3
 80059d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059d4:	4413      	add	r3, r2
 80059d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059de:	b29a      	uxth	r2, r3
 80059e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059e2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6818      	ldr	r0, [r3, #0]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	6959      	ldr	r1, [r3, #20]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	891a      	ldrh	r2, [r3, #8]
 80059f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	f004 f857 	bl	8009aa6 <USB_WritePMA>
 80059f8:	e1ce      	b.n	8005d98 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	461a      	mov	r2, r3
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	4413      	add	r3, r2
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	6812      	ldr	r2, [r2, #0]
 8005a12:	4413      	add	r3, r2
 8005a14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	699a      	ldr	r2, [r3, #24]
 8005a26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d307      	bcc.n	8005a3e <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	699a      	ldr	r2, [r3, #24]
 8005a32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005a36:	1ad2      	subs	r2, r2, r3
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	619a      	str	r2, [r3, #24]
 8005a3c:	e002      	b.n	8005a44 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	2200      	movs	r2, #0
 8005a42:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f040 80c4 	bne.w	8005bd6 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	785b      	ldrb	r3, [r3, #1]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d126      	bne.n	8005aa4 <HAL_PCD_EP_DB_Transmit+0x44e>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	461a      	mov	r2, r3
 8005a68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a6a:	4413      	add	r3, r2
 8005a6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	00da      	lsls	r2, r3, #3
 8005a74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a76:	4413      	add	r3, r2
 8005a78:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a7c:	667b      	str	r3, [r7, #100]	; 0x64
 8005a7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a8c:	801a      	strh	r2, [r3, #0]
 8005a8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005aa0:	801a      	strh	r2, [r3, #0]
 8005aa2:	e01a      	b.n	8005ada <HAL_PCD_EP_DB_Transmit+0x484>
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	785b      	ldrb	r3, [r3, #1]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d116      	bne.n	8005ada <HAL_PCD_EP_DB_Transmit+0x484>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	673b      	str	r3, [r7, #112]	; 0x70
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	461a      	mov	r2, r3
 8005abe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ac0:	4413      	add	r3, r2
 8005ac2:	673b      	str	r3, [r7, #112]	; 0x70
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	00da      	lsls	r2, r3, #3
 8005aca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005acc:	4413      	add	r3, r2
 8005ace:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ad2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	785b      	ldrb	r3, [r3, #1]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d12f      	bne.n	8005b48 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	461a      	mov	r2, r3
 8005afc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b00:	4413      	add	r3, r2
 8005b02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	00da      	lsls	r2, r3, #3
 8005b0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b10:	4413      	add	r3, r2
 8005b12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b2c:	801a      	strh	r2, [r3, #0]
 8005b2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b32:	881b      	ldrh	r3, [r3, #0]
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b44:	801a      	strh	r2, [r3, #0]
 8005b46:	e017      	b.n	8005b78 <HAL_PCD_EP_DB_Transmit+0x522>
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	785b      	ldrb	r3, [r3, #1]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d113      	bne.n	8005b78 <HAL_PCD_EP_DB_Transmit+0x522>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b5e:	4413      	add	r3, r2
 8005b60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	00da      	lsls	r2, r3, #3
 8005b68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b70:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b74:	2200      	movs	r2, #0
 8005b76:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f005 feed 	bl	800b95e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005b84:	88fb      	ldrh	r3, [r7, #6]
 8005b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f040 8104 	bne.w	8005d98 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	461a      	mov	r2, r3
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	881b      	ldrh	r3, [r3, #0]
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005baa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	441a      	add	r2, r3
 8005bbc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005bc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	8013      	strh	r3, [r2, #0]
 8005bd4:	e0e0      	b.n	8005d98 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005bd6:	88fb      	ldrh	r3, [r7, #6]
 8005bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d121      	bne.n	8005c24 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	461a      	mov	r2, r3
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bfa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	461a      	mov	r2, r3
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	441a      	add	r2, r3
 8005c0c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005c10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	f040 80b4 	bne.w	8005d98 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	695a      	ldr	r2, [r3, #20]
 8005c34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005c38:	441a      	add	r2, r3
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	69da      	ldr	r2, [r3, #28]
 8005c42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005c46:	441a      	add	r2, r3
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	6a1a      	ldr	r2, [r3, #32]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d309      	bcc.n	8005c6c <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	6a1a      	ldr	r2, [r3, #32]
 8005c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c64:	1ad2      	subs	r2, r2, r3
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	621a      	str	r2, [r3, #32]
 8005c6a:	e015      	b.n	8005c98 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d107      	bne.n	8005c84 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8005c74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005c78:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005c82:	e009      	b.n	8005c98 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	6a1b      	ldr	r3, [r3, #32]
 8005c88:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	663b      	str	r3, [r7, #96]	; 0x60
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	785b      	ldrb	r3, [r3, #1]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d155      	bne.n	8005d52 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cba:	4413      	add	r3, r2
 8005cbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	00da      	lsls	r2, r3, #3
 8005cc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ccc:	657b      	str	r3, [r7, #84]	; 0x54
 8005cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cd0:	2b3e      	cmp	r3, #62	; 0x3e
 8005cd2:	d916      	bls.n	8005d02 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005cd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cd6:	095b      	lsrs	r3, r3, #5
 8005cd8:	677b      	str	r3, [r7, #116]	; 0x74
 8005cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cdc:	f003 031f 	and.w	r3, r3, #31
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d102      	bne.n	8005cea <HAL_PCD_EP_DB_Transmit+0x694>
 8005ce4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	677b      	str	r3, [r7, #116]	; 0x74
 8005cea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	029b      	lsls	r3, r3, #10
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cfe:	801a      	strh	r2, [r3, #0]
 8005d00:	e040      	b.n	8005d84 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d112      	bne.n	8005d2e <HAL_PCD_EP_DB_Transmit+0x6d8>
 8005d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d16:	801a      	strh	r2, [r3, #0]
 8005d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d1a:	881b      	ldrh	r3, [r3, #0]
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d2a:	801a      	strh	r2, [r3, #0]
 8005d2c:	e02a      	b.n	8005d84 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d30:	085b      	lsrs	r3, r3, #1
 8005d32:	677b      	str	r3, [r7, #116]	; 0x74
 8005d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d002      	beq.n	8005d44 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8005d3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d40:	3301      	adds	r3, #1
 8005d42:	677b      	str	r3, [r7, #116]	; 0x74
 8005d44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	029b      	lsls	r3, r3, #10
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d4e:	801a      	strh	r2, [r3, #0]
 8005d50:	e018      	b.n	8005d84 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	785b      	ldrb	r3, [r3, #1]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d114      	bne.n	8005d84 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	461a      	mov	r2, r3
 8005d66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d68:	4413      	add	r3, r2
 8005d6a:	663b      	str	r3, [r7, #96]	; 0x60
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	00da      	lsls	r2, r3, #3
 8005d72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d74:	4413      	add	r3, r2
 8005d76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d82:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6818      	ldr	r0, [r3, #0]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	6959      	ldr	r1, [r3, #20]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	895a      	ldrh	r2, [r3, #10]
 8005d90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	f003 fe87 	bl	8009aa6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	881b      	ldrh	r3, [r3, #0]
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005db2:	823b      	strh	r3, [r7, #16]
 8005db4:	8a3b      	ldrh	r3, [r7, #16]
 8005db6:	f083 0310 	eor.w	r3, r3, #16
 8005dba:	823b      	strh	r3, [r7, #16]
 8005dbc:	8a3b      	ldrh	r3, [r7, #16]
 8005dbe:	f083 0320 	eor.w	r3, r3, #32
 8005dc2:	823b      	strh	r3, [r7, #16]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	461a      	mov	r2, r3
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	441a      	add	r2, r3
 8005dd2:	8a3b      	ldrh	r3, [r7, #16]
 8005dd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3788      	adds	r7, #136	; 0x88
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b087      	sub	sp, #28
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	60f8      	str	r0, [r7, #12]
 8005dfa:	607b      	str	r3, [r7, #4]
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	817b      	strh	r3, [r7, #10]
 8005e00:	4613      	mov	r3, r2
 8005e02:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005e04:	897b      	ldrh	r3, [r7, #10]
 8005e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00b      	beq.n	8005e28 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e10:	897b      	ldrh	r3, [r7, #10]
 8005e12:	f003 0307 	and.w	r3, r3, #7
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	4613      	mov	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	4413      	add	r3, r2
 8005e24:	617b      	str	r3, [r7, #20]
 8005e26:	e009      	b.n	8005e3c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e28:	897a      	ldrh	r2, [r7, #10]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4413      	add	r3, r2
 8005e30:	00db      	lsls	r3, r3, #3
 8005e32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	4413      	add	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005e3c:	893b      	ldrh	r3, [r7, #8]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d107      	bne.n	8005e52 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	2200      	movs	r2, #0
 8005e46:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	80da      	strh	r2, [r3, #6]
 8005e50:	e00b      	b.n	8005e6a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2201      	movs	r2, #1
 8005e56:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	0c1b      	lsrs	r3, r3, #16
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	371c      	adds	r7, #28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	f043 0301 	orr.w	r3, r3, #1
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	f043 0302 	orr.w	r3, r3, #2
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d141      	bne.n	8005f5e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005eda:	4b4b      	ldr	r3, [pc, #300]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ee6:	d131      	bne.n	8005f4c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ee8:	4b47      	ldr	r3, [pc, #284]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eee:	4a46      	ldr	r2, [pc, #280]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ef4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ef8:	4b43      	ldr	r3, [pc, #268]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f00:	4a41      	ldr	r2, [pc, #260]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f08:	4b40      	ldr	r3, [pc, #256]	; (800600c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2232      	movs	r2, #50	; 0x32
 8005f0e:	fb02 f303 	mul.w	r3, r2, r3
 8005f12:	4a3f      	ldr	r2, [pc, #252]	; (8006010 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005f14:	fba2 2303 	umull	r2, r3, r2, r3
 8005f18:	0c9b      	lsrs	r3, r3, #18
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f1e:	e002      	b.n	8005f26 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f26:	4b38      	ldr	r3, [pc, #224]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f32:	d102      	bne.n	8005f3a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1f2      	bne.n	8005f20 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f3a:	4b33      	ldr	r3, [pc, #204]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f46:	d158      	bne.n	8005ffa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e057      	b.n	8005ffc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f4c:	4b2e      	ldr	r3, [pc, #184]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f52:	4a2d      	ldr	r2, [pc, #180]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005f5c:	e04d      	b.n	8005ffa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f64:	d141      	bne.n	8005fea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f66:	4b28      	ldr	r3, [pc, #160]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f72:	d131      	bne.n	8005fd8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f74:	4b24      	ldr	r3, [pc, #144]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f7a:	4a23      	ldr	r2, [pc, #140]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f84:	4b20      	ldr	r3, [pc, #128]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f8c:	4a1e      	ldr	r2, [pc, #120]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f94:	4b1d      	ldr	r3, [pc, #116]	; (800600c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2232      	movs	r2, #50	; 0x32
 8005f9a:	fb02 f303 	mul.w	r3, r2, r3
 8005f9e:	4a1c      	ldr	r2, [pc, #112]	; (8006010 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa4:	0c9b      	lsrs	r3, r3, #18
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005faa:	e002      	b.n	8005fb2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fb2:	4b15      	ldr	r3, [pc, #84]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fbe:	d102      	bne.n	8005fc6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1f2      	bne.n	8005fac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005fc6:	4b10      	ldr	r3, [pc, #64]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fd2:	d112      	bne.n	8005ffa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e011      	b.n	8005ffc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005fd8:	4b0b      	ldr	r3, [pc, #44]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fde:	4a0a      	ldr	r2, [pc, #40]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fe4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005fe8:	e007      	b.n	8005ffa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005fea:	4b07      	ldr	r3, [pc, #28]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005ff2:	4a05      	ldr	r2, [pc, #20]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ff4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ff8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3714      	adds	r7, #20
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	40007000 	.word	0x40007000
 800600c:	20000010 	.word	0x20000010
 8006010:	431bde83 	.word	0x431bde83

08006014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b088      	sub	sp, #32
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e306      	b.n	8006634 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0301 	and.w	r3, r3, #1
 800602e:	2b00      	cmp	r3, #0
 8006030:	d075      	beq.n	800611e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006032:	4b97      	ldr	r3, [pc, #604]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f003 030c 	and.w	r3, r3, #12
 800603a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800603c:	4b94      	ldr	r3, [pc, #592]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f003 0303 	and.w	r3, r3, #3
 8006044:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	2b0c      	cmp	r3, #12
 800604a:	d102      	bne.n	8006052 <HAL_RCC_OscConfig+0x3e>
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	2b03      	cmp	r3, #3
 8006050:	d002      	beq.n	8006058 <HAL_RCC_OscConfig+0x44>
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	2b08      	cmp	r3, #8
 8006056:	d10b      	bne.n	8006070 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006058:	4b8d      	ldr	r3, [pc, #564]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d05b      	beq.n	800611c <HAL_RCC_OscConfig+0x108>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d157      	bne.n	800611c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e2e1      	b.n	8006634 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006078:	d106      	bne.n	8006088 <HAL_RCC_OscConfig+0x74>
 800607a:	4b85      	ldr	r3, [pc, #532]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a84      	ldr	r2, [pc, #528]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 8006080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006084:	6013      	str	r3, [r2, #0]
 8006086:	e01d      	b.n	80060c4 <HAL_RCC_OscConfig+0xb0>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006090:	d10c      	bne.n	80060ac <HAL_RCC_OscConfig+0x98>
 8006092:	4b7f      	ldr	r3, [pc, #508]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a7e      	ldr	r2, [pc, #504]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 8006098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800609c:	6013      	str	r3, [r2, #0]
 800609e:	4b7c      	ldr	r3, [pc, #496]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a7b      	ldr	r2, [pc, #492]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 80060a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060a8:	6013      	str	r3, [r2, #0]
 80060aa:	e00b      	b.n	80060c4 <HAL_RCC_OscConfig+0xb0>
 80060ac:	4b78      	ldr	r3, [pc, #480]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a77      	ldr	r2, [pc, #476]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 80060b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060b6:	6013      	str	r3, [r2, #0]
 80060b8:	4b75      	ldr	r3, [pc, #468]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a74      	ldr	r2, [pc, #464]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 80060be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d013      	beq.n	80060f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060cc:	f7fb fe34 	bl	8001d38 <HAL_GetTick>
 80060d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060d2:	e008      	b.n	80060e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060d4:	f7fb fe30 	bl	8001d38 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	2b64      	cmp	r3, #100	; 0x64
 80060e0:	d901      	bls.n	80060e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e2a6      	b.n	8006634 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060e6:	4b6a      	ldr	r3, [pc, #424]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d0f0      	beq.n	80060d4 <HAL_RCC_OscConfig+0xc0>
 80060f2:	e014      	b.n	800611e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f4:	f7fb fe20 	bl	8001d38 <HAL_GetTick>
 80060f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060fa:	e008      	b.n	800610e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060fc:	f7fb fe1c 	bl	8001d38 <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b64      	cmp	r3, #100	; 0x64
 8006108:	d901      	bls.n	800610e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e292      	b.n	8006634 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800610e:	4b60      	ldr	r3, [pc, #384]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1f0      	bne.n	80060fc <HAL_RCC_OscConfig+0xe8>
 800611a:	e000      	b.n	800611e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800611c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d075      	beq.n	8006216 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800612a:	4b59      	ldr	r3, [pc, #356]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f003 030c 	and.w	r3, r3, #12
 8006132:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006134:	4b56      	ldr	r3, [pc, #344]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	f003 0303 	and.w	r3, r3, #3
 800613c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	2b0c      	cmp	r3, #12
 8006142:	d102      	bne.n	800614a <HAL_RCC_OscConfig+0x136>
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	2b02      	cmp	r3, #2
 8006148:	d002      	beq.n	8006150 <HAL_RCC_OscConfig+0x13c>
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	2b04      	cmp	r3, #4
 800614e:	d11f      	bne.n	8006190 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006150:	4b4f      	ldr	r3, [pc, #316]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006158:	2b00      	cmp	r3, #0
 800615a:	d005      	beq.n	8006168 <HAL_RCC_OscConfig+0x154>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e265      	b.n	8006634 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006168:	4b49      	ldr	r3, [pc, #292]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	061b      	lsls	r3, r3, #24
 8006176:	4946      	ldr	r1, [pc, #280]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 8006178:	4313      	orrs	r3, r2
 800617a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800617c:	4b45      	ldr	r3, [pc, #276]	; (8006294 <HAL_RCC_OscConfig+0x280>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4618      	mov	r0, r3
 8006182:	f7fb fd8d 	bl	8001ca0 <HAL_InitTick>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d043      	beq.n	8006214 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e251      	b.n	8006634 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d023      	beq.n	80061e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006198:	4b3d      	ldr	r3, [pc, #244]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a3c      	ldr	r2, [pc, #240]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 800619e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a4:	f7fb fdc8 	bl	8001d38 <HAL_GetTick>
 80061a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80061aa:	e008      	b.n	80061be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061ac:	f7fb fdc4 	bl	8001d38 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e23a      	b.n	8006634 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80061be:	4b34      	ldr	r3, [pc, #208]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d0f0      	beq.n	80061ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061ca:	4b31      	ldr	r3, [pc, #196]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	061b      	lsls	r3, r3, #24
 80061d8:	492d      	ldr	r1, [pc, #180]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	604b      	str	r3, [r1, #4]
 80061de:	e01a      	b.n	8006216 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061e0:	4b2b      	ldr	r3, [pc, #172]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a2a      	ldr	r2, [pc, #168]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 80061e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ec:	f7fb fda4 	bl	8001d38 <HAL_GetTick>
 80061f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80061f2:	e008      	b.n	8006206 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061f4:	f7fb fda0 	bl	8001d38 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d901      	bls.n	8006206 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e216      	b.n	8006634 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006206:	4b22      	ldr	r3, [pc, #136]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1f0      	bne.n	80061f4 <HAL_RCC_OscConfig+0x1e0>
 8006212:	e000      	b.n	8006216 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006214:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0308 	and.w	r3, r3, #8
 800621e:	2b00      	cmp	r3, #0
 8006220:	d041      	beq.n	80062a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d01c      	beq.n	8006264 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800622a:	4b19      	ldr	r3, [pc, #100]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 800622c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006230:	4a17      	ldr	r2, [pc, #92]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 8006232:	f043 0301 	orr.w	r3, r3, #1
 8006236:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800623a:	f7fb fd7d 	bl	8001d38 <HAL_GetTick>
 800623e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006240:	e008      	b.n	8006254 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006242:	f7fb fd79 	bl	8001d38 <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	2b02      	cmp	r3, #2
 800624e:	d901      	bls.n	8006254 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e1ef      	b.n	8006634 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006254:	4b0e      	ldr	r3, [pc, #56]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 8006256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b00      	cmp	r3, #0
 8006260:	d0ef      	beq.n	8006242 <HAL_RCC_OscConfig+0x22e>
 8006262:	e020      	b.n	80062a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006264:	4b0a      	ldr	r3, [pc, #40]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 8006266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800626a:	4a09      	ldr	r2, [pc, #36]	; (8006290 <HAL_RCC_OscConfig+0x27c>)
 800626c:	f023 0301 	bic.w	r3, r3, #1
 8006270:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006274:	f7fb fd60 	bl	8001d38 <HAL_GetTick>
 8006278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800627a:	e00d      	b.n	8006298 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800627c:	f7fb fd5c 	bl	8001d38 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	2b02      	cmp	r3, #2
 8006288:	d906      	bls.n	8006298 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e1d2      	b.n	8006634 <HAL_RCC_OscConfig+0x620>
 800628e:	bf00      	nop
 8006290:	40021000 	.word	0x40021000
 8006294:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006298:	4b8c      	ldr	r3, [pc, #560]	; (80064cc <HAL_RCC_OscConfig+0x4b8>)
 800629a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1ea      	bne.n	800627c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0304 	and.w	r3, r3, #4
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f000 80a6 	beq.w	8006400 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062b4:	2300      	movs	r3, #0
 80062b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80062b8:	4b84      	ldr	r3, [pc, #528]	; (80064cc <HAL_RCC_OscConfig+0x4b8>)
 80062ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <HAL_RCC_OscConfig+0x2b4>
 80062c4:	2301      	movs	r3, #1
 80062c6:	e000      	b.n	80062ca <HAL_RCC_OscConfig+0x2b6>
 80062c8:	2300      	movs	r3, #0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00d      	beq.n	80062ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062ce:	4b7f      	ldr	r3, [pc, #508]	; (80064cc <HAL_RCC_OscConfig+0x4b8>)
 80062d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d2:	4a7e      	ldr	r2, [pc, #504]	; (80064cc <HAL_RCC_OscConfig+0x4b8>)
 80062d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062d8:	6593      	str	r3, [r2, #88]	; 0x58
 80062da:	4b7c      	ldr	r3, [pc, #496]	; (80064cc <HAL_RCC_OscConfig+0x4b8>)
 80062dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80062e6:	2301      	movs	r3, #1
 80062e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062ea:	4b79      	ldr	r3, [pc, #484]	; (80064d0 <HAL_RCC_OscConfig+0x4bc>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d118      	bne.n	8006328 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062f6:	4b76      	ldr	r3, [pc, #472]	; (80064d0 <HAL_RCC_OscConfig+0x4bc>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a75      	ldr	r2, [pc, #468]	; (80064d0 <HAL_RCC_OscConfig+0x4bc>)
 80062fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006302:	f7fb fd19 	bl	8001d38 <HAL_GetTick>
 8006306:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006308:	e008      	b.n	800631c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800630a:	f7fb fd15 	bl	8001d38 <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	2b02      	cmp	r3, #2
 8006316:	d901      	bls.n	800631c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e18b      	b.n	8006634 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800631c:	4b6c      	ldr	r3, [pc, #432]	; (80064d0 <HAL_RCC_OscConfig+0x4bc>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006324:	2b00      	cmp	r3, #0
 8006326:	d0f0      	beq.n	800630a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d108      	bne.n	8006342 <HAL_RCC_OscConfig+0x32e>
 8006330:	4b66      	ldr	r3, [pc, #408]	; (80064cc <HAL_RCC_OscConfig+0x4b8>)
 8006332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006336:	4a65      	ldr	r2, [pc, #404]	; (80064cc <HAL_RCC_OscConfig+0x4b8>)
 8006338:	f043 0301 	orr.w	r3, r3, #1
 800633c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006340:	e024      	b.n	800638c <HAL_RCC_OscConfig+0x378>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	2b05      	cmp	r3, #5
 8006348:	d110      	bne.n	800636c <HAL_RCC_OscConfig+0x358>
 800634a:	4b60      	ldr	r3, [pc, #384]	; (80064cc <HAL_RCC_OscConfig+0x4b8>)
 800634c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006350:	4a5e      	ldr	r2, [pc, #376]	; (80064cc <HAL_RCC_OscConfig+0x4b8>)
 8006352:	f043 0304 	orr.w	r3, r3, #4
 8006356:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800635a:	4b5c      	ldr	r3, [pc, #368]	; (80064cc <HAL_RCC_OscConfig+0x4b8>)
 800635c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006360:	4a5a      	ldr	r2, [pc, #360]	; (80064cc <HAL_RCC_OscConfig+0x4b8>)
 8006362:	f043 0301 	orr.w	r3, r3, #1
 8006366:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800636a:	e00f      	b.n	800638c <HAL_RCC_OscConfig+0x378>
 800636c:	4b57      	ldr	r3, [pc, #348]	; (80064cc <HAL_RCC_OscConfig+0x4b8>)
 800636e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006372:	4a56      	ldr	r2, [pc, #344]	; (80064cc <HAL_RCC_OscConfig+0x4b8>)
 8006374:	f023 0301 	bic.w	r3, r3, #1
 8006378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800637c:	4b53      	ldr	r3, [pc, #332]	; (80064cc <HAL_RCC_OscConfig+0x4b8>)
 800637e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006382:	4a52      	ldr	r2, [pc, #328]	; (80064cc <HAL_RCC_OscConfig+0x4b8>)
 8006384:	f023 0304 	bic.w	r3, r3, #4
 8006388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d016      	beq.n	80063c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006394:	f7fb fcd0 	bl	8001d38 <HAL_GetTick>
 8006398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800639a:	e00a      	b.n	80063b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800639c:	f7fb fccc 	bl	8001d38 <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d901      	bls.n	80063b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e140      	b.n	8006634 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063b2:	4b46      	ldr	r3, [pc, #280]	; (80064cc <HAL_RCC_OscConfig+0x4b8>)
 80063b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063b8:	f003 0302 	and.w	r3, r3, #2
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d0ed      	beq.n	800639c <HAL_RCC_OscConfig+0x388>
 80063c0:	e015      	b.n	80063ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063c2:	f7fb fcb9 	bl	8001d38 <HAL_GetTick>
 80063c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80063c8:	e00a      	b.n	80063e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063ca:	f7fb fcb5 	bl	8001d38 <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80063d8:	4293      	cmp	r3, r2
 80063da:	d901      	bls.n	80063e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e129      	b.n	8006634 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80063e0:	4b3a      	ldr	r3, [pc, #232]	; (80064cc <HAL_RCC_OscConfig+0x4b8>)
 80063e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e6:	f003 0302 	and.w	r3, r3, #2
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1ed      	bne.n	80063ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80063ee:	7ffb      	ldrb	r3, [r7, #31]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d105      	bne.n	8006400 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063f4:	4b35      	ldr	r3, [pc, #212]	; (80064cc <HAL_RCC_OscConfig+0x4b8>)
 80063f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f8:	4a34      	ldr	r2, [pc, #208]	; (80064cc <HAL_RCC_OscConfig+0x4b8>)
 80063fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0320 	and.w	r3, r3, #32
 8006408:	2b00      	cmp	r3, #0
 800640a:	d03c      	beq.n	8006486 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d01c      	beq.n	800644e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006414:	4b2d      	ldr	r3, [pc, #180]	; (80064cc <HAL_RCC_OscConfig+0x4b8>)
 8006416:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800641a:	4a2c      	ldr	r2, [pc, #176]	; (80064cc <HAL_RCC_OscConfig+0x4b8>)
 800641c:	f043 0301 	orr.w	r3, r3, #1
 8006420:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006424:	f7fb fc88 	bl	8001d38 <HAL_GetTick>
 8006428:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800642a:	e008      	b.n	800643e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800642c:	f7fb fc84 	bl	8001d38 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	2b02      	cmp	r3, #2
 8006438:	d901      	bls.n	800643e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e0fa      	b.n	8006634 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800643e:	4b23      	ldr	r3, [pc, #140]	; (80064cc <HAL_RCC_OscConfig+0x4b8>)
 8006440:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006444:	f003 0302 	and.w	r3, r3, #2
 8006448:	2b00      	cmp	r3, #0
 800644a:	d0ef      	beq.n	800642c <HAL_RCC_OscConfig+0x418>
 800644c:	e01b      	b.n	8006486 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800644e:	4b1f      	ldr	r3, [pc, #124]	; (80064cc <HAL_RCC_OscConfig+0x4b8>)
 8006450:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006454:	4a1d      	ldr	r2, [pc, #116]	; (80064cc <HAL_RCC_OscConfig+0x4b8>)
 8006456:	f023 0301 	bic.w	r3, r3, #1
 800645a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800645e:	f7fb fc6b 	bl	8001d38 <HAL_GetTick>
 8006462:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006464:	e008      	b.n	8006478 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006466:	f7fb fc67 	bl	8001d38 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	2b02      	cmp	r3, #2
 8006472:	d901      	bls.n	8006478 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e0dd      	b.n	8006634 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006478:	4b14      	ldr	r3, [pc, #80]	; (80064cc <HAL_RCC_OscConfig+0x4b8>)
 800647a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1ef      	bne.n	8006466 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	2b00      	cmp	r3, #0
 800648c:	f000 80d1 	beq.w	8006632 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006490:	4b0e      	ldr	r3, [pc, #56]	; (80064cc <HAL_RCC_OscConfig+0x4b8>)
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f003 030c 	and.w	r3, r3, #12
 8006498:	2b0c      	cmp	r3, #12
 800649a:	f000 808b 	beq.w	80065b4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d15e      	bne.n	8006564 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064a6:	4b09      	ldr	r3, [pc, #36]	; (80064cc <HAL_RCC_OscConfig+0x4b8>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a08      	ldr	r2, [pc, #32]	; (80064cc <HAL_RCC_OscConfig+0x4b8>)
 80064ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b2:	f7fb fc41 	bl	8001d38 <HAL_GetTick>
 80064b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064b8:	e00c      	b.n	80064d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064ba:	f7fb fc3d 	bl	8001d38 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d905      	bls.n	80064d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e0b3      	b.n	8006634 <HAL_RCC_OscConfig+0x620>
 80064cc:	40021000 	.word	0x40021000
 80064d0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064d4:	4b59      	ldr	r3, [pc, #356]	; (800663c <HAL_RCC_OscConfig+0x628>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1ec      	bne.n	80064ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064e0:	4b56      	ldr	r3, [pc, #344]	; (800663c <HAL_RCC_OscConfig+0x628>)
 80064e2:	68da      	ldr	r2, [r3, #12]
 80064e4:	4b56      	ldr	r3, [pc, #344]	; (8006640 <HAL_RCC_OscConfig+0x62c>)
 80064e6:	4013      	ands	r3, r2
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	6a11      	ldr	r1, [r2, #32]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80064f0:	3a01      	subs	r2, #1
 80064f2:	0112      	lsls	r2, r2, #4
 80064f4:	4311      	orrs	r1, r2
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80064fa:	0212      	lsls	r2, r2, #8
 80064fc:	4311      	orrs	r1, r2
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006502:	0852      	lsrs	r2, r2, #1
 8006504:	3a01      	subs	r2, #1
 8006506:	0552      	lsls	r2, r2, #21
 8006508:	4311      	orrs	r1, r2
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800650e:	0852      	lsrs	r2, r2, #1
 8006510:	3a01      	subs	r2, #1
 8006512:	0652      	lsls	r2, r2, #25
 8006514:	4311      	orrs	r1, r2
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800651a:	06d2      	lsls	r2, r2, #27
 800651c:	430a      	orrs	r2, r1
 800651e:	4947      	ldr	r1, [pc, #284]	; (800663c <HAL_RCC_OscConfig+0x628>)
 8006520:	4313      	orrs	r3, r2
 8006522:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006524:	4b45      	ldr	r3, [pc, #276]	; (800663c <HAL_RCC_OscConfig+0x628>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a44      	ldr	r2, [pc, #272]	; (800663c <HAL_RCC_OscConfig+0x628>)
 800652a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800652e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006530:	4b42      	ldr	r3, [pc, #264]	; (800663c <HAL_RCC_OscConfig+0x628>)
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	4a41      	ldr	r2, [pc, #260]	; (800663c <HAL_RCC_OscConfig+0x628>)
 8006536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800653a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800653c:	f7fb fbfc 	bl	8001d38 <HAL_GetTick>
 8006540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006542:	e008      	b.n	8006556 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006544:	f7fb fbf8 	bl	8001d38 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	2b02      	cmp	r3, #2
 8006550:	d901      	bls.n	8006556 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e06e      	b.n	8006634 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006556:	4b39      	ldr	r3, [pc, #228]	; (800663c <HAL_RCC_OscConfig+0x628>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d0f0      	beq.n	8006544 <HAL_RCC_OscConfig+0x530>
 8006562:	e066      	b.n	8006632 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006564:	4b35      	ldr	r3, [pc, #212]	; (800663c <HAL_RCC_OscConfig+0x628>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a34      	ldr	r2, [pc, #208]	; (800663c <HAL_RCC_OscConfig+0x628>)
 800656a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800656e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006570:	4b32      	ldr	r3, [pc, #200]	; (800663c <HAL_RCC_OscConfig+0x628>)
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	4a31      	ldr	r2, [pc, #196]	; (800663c <HAL_RCC_OscConfig+0x628>)
 8006576:	f023 0303 	bic.w	r3, r3, #3
 800657a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800657c:	4b2f      	ldr	r3, [pc, #188]	; (800663c <HAL_RCC_OscConfig+0x628>)
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	4a2e      	ldr	r2, [pc, #184]	; (800663c <HAL_RCC_OscConfig+0x628>)
 8006582:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800658a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800658c:	f7fb fbd4 	bl	8001d38 <HAL_GetTick>
 8006590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006592:	e008      	b.n	80065a6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006594:	f7fb fbd0 	bl	8001d38 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e046      	b.n	8006634 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065a6:	4b25      	ldr	r3, [pc, #148]	; (800663c <HAL_RCC_OscConfig+0x628>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1f0      	bne.n	8006594 <HAL_RCC_OscConfig+0x580>
 80065b2:	e03e      	b.n	8006632 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	69db      	ldr	r3, [r3, #28]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d101      	bne.n	80065c0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e039      	b.n	8006634 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80065c0:	4b1e      	ldr	r3, [pc, #120]	; (800663c <HAL_RCC_OscConfig+0x628>)
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f003 0203 	and.w	r2, r3, #3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d12c      	bne.n	800662e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065de:	3b01      	subs	r3, #1
 80065e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d123      	bne.n	800662e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d11b      	bne.n	800662e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006600:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006602:	429a      	cmp	r2, r3
 8006604:	d113      	bne.n	800662e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006610:	085b      	lsrs	r3, r3, #1
 8006612:	3b01      	subs	r3, #1
 8006614:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006616:	429a      	cmp	r2, r3
 8006618:	d109      	bne.n	800662e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006624:	085b      	lsrs	r3, r3, #1
 8006626:	3b01      	subs	r3, #1
 8006628:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800662a:	429a      	cmp	r2, r3
 800662c:	d001      	beq.n	8006632 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e000      	b.n	8006634 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3720      	adds	r7, #32
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	40021000 	.word	0x40021000
 8006640:	019f800c 	.word	0x019f800c

08006644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800664e:	2300      	movs	r3, #0
 8006650:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d101      	bne.n	800665c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e11e      	b.n	800689a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800665c:	4b91      	ldr	r3, [pc, #580]	; (80068a4 <HAL_RCC_ClockConfig+0x260>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 030f 	and.w	r3, r3, #15
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	429a      	cmp	r2, r3
 8006668:	d910      	bls.n	800668c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800666a:	4b8e      	ldr	r3, [pc, #568]	; (80068a4 <HAL_RCC_ClockConfig+0x260>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f023 020f 	bic.w	r2, r3, #15
 8006672:	498c      	ldr	r1, [pc, #560]	; (80068a4 <HAL_RCC_ClockConfig+0x260>)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	4313      	orrs	r3, r2
 8006678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800667a:	4b8a      	ldr	r3, [pc, #552]	; (80068a4 <HAL_RCC_ClockConfig+0x260>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 030f 	and.w	r3, r3, #15
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	429a      	cmp	r2, r3
 8006686:	d001      	beq.n	800668c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e106      	b.n	800689a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	2b00      	cmp	r3, #0
 8006696:	d073      	beq.n	8006780 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	2b03      	cmp	r3, #3
 800669e:	d129      	bne.n	80066f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066a0:	4b81      	ldr	r3, [pc, #516]	; (80068a8 <HAL_RCC_ClockConfig+0x264>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d101      	bne.n	80066b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e0f4      	b.n	800689a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80066b0:	f000 f972 	bl	8006998 <RCC_GetSysClockFreqFromPLLSource>
 80066b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	4a7c      	ldr	r2, [pc, #496]	; (80068ac <HAL_RCC_ClockConfig+0x268>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d93f      	bls.n	800673e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80066be:	4b7a      	ldr	r3, [pc, #488]	; (80068a8 <HAL_RCC_ClockConfig+0x264>)
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d009      	beq.n	80066de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d033      	beq.n	800673e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d12f      	bne.n	800673e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80066de:	4b72      	ldr	r3, [pc, #456]	; (80068a8 <HAL_RCC_ClockConfig+0x264>)
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066e6:	4a70      	ldr	r2, [pc, #448]	; (80068a8 <HAL_RCC_ClockConfig+0x264>)
 80066e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80066ee:	2380      	movs	r3, #128	; 0x80
 80066f0:	617b      	str	r3, [r7, #20]
 80066f2:	e024      	b.n	800673e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d107      	bne.n	800670c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066fc:	4b6a      	ldr	r3, [pc, #424]	; (80068a8 <HAL_RCC_ClockConfig+0x264>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d109      	bne.n	800671c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e0c6      	b.n	800689a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800670c:	4b66      	ldr	r3, [pc, #408]	; (80068a8 <HAL_RCC_ClockConfig+0x264>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e0be      	b.n	800689a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800671c:	f000 f8ce 	bl	80068bc <HAL_RCC_GetSysClockFreq>
 8006720:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	4a61      	ldr	r2, [pc, #388]	; (80068ac <HAL_RCC_ClockConfig+0x268>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d909      	bls.n	800673e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800672a:	4b5f      	ldr	r3, [pc, #380]	; (80068a8 <HAL_RCC_ClockConfig+0x264>)
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006732:	4a5d      	ldr	r2, [pc, #372]	; (80068a8 <HAL_RCC_ClockConfig+0x264>)
 8006734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006738:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800673a:	2380      	movs	r3, #128	; 0x80
 800673c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800673e:	4b5a      	ldr	r3, [pc, #360]	; (80068a8 <HAL_RCC_ClockConfig+0x264>)
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f023 0203 	bic.w	r2, r3, #3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	4957      	ldr	r1, [pc, #348]	; (80068a8 <HAL_RCC_ClockConfig+0x264>)
 800674c:	4313      	orrs	r3, r2
 800674e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006750:	f7fb faf2 	bl	8001d38 <HAL_GetTick>
 8006754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006756:	e00a      	b.n	800676e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006758:	f7fb faee 	bl	8001d38 <HAL_GetTick>
 800675c:	4602      	mov	r2, r0
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	f241 3288 	movw	r2, #5000	; 0x1388
 8006766:	4293      	cmp	r3, r2
 8006768:	d901      	bls.n	800676e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e095      	b.n	800689a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800676e:	4b4e      	ldr	r3, [pc, #312]	; (80068a8 <HAL_RCC_ClockConfig+0x264>)
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f003 020c 	and.w	r2, r3, #12
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	429a      	cmp	r2, r3
 800677e:	d1eb      	bne.n	8006758 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0302 	and.w	r3, r3, #2
 8006788:	2b00      	cmp	r3, #0
 800678a:	d023      	beq.n	80067d4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0304 	and.w	r3, r3, #4
 8006794:	2b00      	cmp	r3, #0
 8006796:	d005      	beq.n	80067a4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006798:	4b43      	ldr	r3, [pc, #268]	; (80068a8 <HAL_RCC_ClockConfig+0x264>)
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	4a42      	ldr	r2, [pc, #264]	; (80068a8 <HAL_RCC_ClockConfig+0x264>)
 800679e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80067a2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0308 	and.w	r3, r3, #8
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d007      	beq.n	80067c0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80067b0:	4b3d      	ldr	r3, [pc, #244]	; (80068a8 <HAL_RCC_ClockConfig+0x264>)
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80067b8:	4a3b      	ldr	r2, [pc, #236]	; (80068a8 <HAL_RCC_ClockConfig+0x264>)
 80067ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80067be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067c0:	4b39      	ldr	r3, [pc, #228]	; (80068a8 <HAL_RCC_ClockConfig+0x264>)
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	4936      	ldr	r1, [pc, #216]	; (80068a8 <HAL_RCC_ClockConfig+0x264>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	608b      	str	r3, [r1, #8]
 80067d2:	e008      	b.n	80067e6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	2b80      	cmp	r3, #128	; 0x80
 80067d8:	d105      	bne.n	80067e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80067da:	4b33      	ldr	r3, [pc, #204]	; (80068a8 <HAL_RCC_ClockConfig+0x264>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	4a32      	ldr	r2, [pc, #200]	; (80068a8 <HAL_RCC_ClockConfig+0x264>)
 80067e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067e4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067e6:	4b2f      	ldr	r3, [pc, #188]	; (80068a4 <HAL_RCC_ClockConfig+0x260>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 030f 	and.w	r3, r3, #15
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d21d      	bcs.n	8006830 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067f4:	4b2b      	ldr	r3, [pc, #172]	; (80068a4 <HAL_RCC_ClockConfig+0x260>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f023 020f 	bic.w	r2, r3, #15
 80067fc:	4929      	ldr	r1, [pc, #164]	; (80068a4 <HAL_RCC_ClockConfig+0x260>)
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	4313      	orrs	r3, r2
 8006802:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006804:	f7fb fa98 	bl	8001d38 <HAL_GetTick>
 8006808:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800680a:	e00a      	b.n	8006822 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800680c:	f7fb fa94 	bl	8001d38 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	f241 3288 	movw	r2, #5000	; 0x1388
 800681a:	4293      	cmp	r3, r2
 800681c:	d901      	bls.n	8006822 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e03b      	b.n	800689a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006822:	4b20      	ldr	r3, [pc, #128]	; (80068a4 <HAL_RCC_ClockConfig+0x260>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 030f 	and.w	r3, r3, #15
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	429a      	cmp	r2, r3
 800682e:	d1ed      	bne.n	800680c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0304 	and.w	r3, r3, #4
 8006838:	2b00      	cmp	r3, #0
 800683a:	d008      	beq.n	800684e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800683c:	4b1a      	ldr	r3, [pc, #104]	; (80068a8 <HAL_RCC_ClockConfig+0x264>)
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	4917      	ldr	r1, [pc, #92]	; (80068a8 <HAL_RCC_ClockConfig+0x264>)
 800684a:	4313      	orrs	r3, r2
 800684c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0308 	and.w	r3, r3, #8
 8006856:	2b00      	cmp	r3, #0
 8006858:	d009      	beq.n	800686e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800685a:	4b13      	ldr	r3, [pc, #76]	; (80068a8 <HAL_RCC_ClockConfig+0x264>)
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	00db      	lsls	r3, r3, #3
 8006868:	490f      	ldr	r1, [pc, #60]	; (80068a8 <HAL_RCC_ClockConfig+0x264>)
 800686a:	4313      	orrs	r3, r2
 800686c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800686e:	f000 f825 	bl	80068bc <HAL_RCC_GetSysClockFreq>
 8006872:	4602      	mov	r2, r0
 8006874:	4b0c      	ldr	r3, [pc, #48]	; (80068a8 <HAL_RCC_ClockConfig+0x264>)
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	091b      	lsrs	r3, r3, #4
 800687a:	f003 030f 	and.w	r3, r3, #15
 800687e:	490c      	ldr	r1, [pc, #48]	; (80068b0 <HAL_RCC_ClockConfig+0x26c>)
 8006880:	5ccb      	ldrb	r3, [r1, r3]
 8006882:	f003 031f 	and.w	r3, r3, #31
 8006886:	fa22 f303 	lsr.w	r3, r2, r3
 800688a:	4a0a      	ldr	r2, [pc, #40]	; (80068b4 <HAL_RCC_ClockConfig+0x270>)
 800688c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800688e:	4b0a      	ldr	r3, [pc, #40]	; (80068b8 <HAL_RCC_ClockConfig+0x274>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4618      	mov	r0, r3
 8006894:	f7fb fa04 	bl	8001ca0 <HAL_InitTick>
 8006898:	4603      	mov	r3, r0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3718      	adds	r7, #24
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	40022000 	.word	0x40022000
 80068a8:	40021000 	.word	0x40021000
 80068ac:	04c4b400 	.word	0x04c4b400
 80068b0:	0800d3f4 	.word	0x0800d3f4
 80068b4:	20000010 	.word	0x20000010
 80068b8:	20000014 	.word	0x20000014

080068bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80068c2:	4b2c      	ldr	r3, [pc, #176]	; (8006974 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f003 030c 	and.w	r3, r3, #12
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	d102      	bne.n	80068d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80068ce:	4b2a      	ldr	r3, [pc, #168]	; (8006978 <HAL_RCC_GetSysClockFreq+0xbc>)
 80068d0:	613b      	str	r3, [r7, #16]
 80068d2:	e047      	b.n	8006964 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80068d4:	4b27      	ldr	r3, [pc, #156]	; (8006974 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f003 030c 	and.w	r3, r3, #12
 80068dc:	2b08      	cmp	r3, #8
 80068de:	d102      	bne.n	80068e6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80068e0:	4b26      	ldr	r3, [pc, #152]	; (800697c <HAL_RCC_GetSysClockFreq+0xc0>)
 80068e2:	613b      	str	r3, [r7, #16]
 80068e4:	e03e      	b.n	8006964 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80068e6:	4b23      	ldr	r3, [pc, #140]	; (8006974 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f003 030c 	and.w	r3, r3, #12
 80068ee:	2b0c      	cmp	r3, #12
 80068f0:	d136      	bne.n	8006960 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80068f2:	4b20      	ldr	r3, [pc, #128]	; (8006974 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	f003 0303 	and.w	r3, r3, #3
 80068fa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80068fc:	4b1d      	ldr	r3, [pc, #116]	; (8006974 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	091b      	lsrs	r3, r3, #4
 8006902:	f003 030f 	and.w	r3, r3, #15
 8006906:	3301      	adds	r3, #1
 8006908:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2b03      	cmp	r3, #3
 800690e:	d10c      	bne.n	800692a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006910:	4a1a      	ldr	r2, [pc, #104]	; (800697c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	fbb2 f3f3 	udiv	r3, r2, r3
 8006918:	4a16      	ldr	r2, [pc, #88]	; (8006974 <HAL_RCC_GetSysClockFreq+0xb8>)
 800691a:	68d2      	ldr	r2, [r2, #12]
 800691c:	0a12      	lsrs	r2, r2, #8
 800691e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006922:	fb02 f303 	mul.w	r3, r2, r3
 8006926:	617b      	str	r3, [r7, #20]
      break;
 8006928:	e00c      	b.n	8006944 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800692a:	4a13      	ldr	r2, [pc, #76]	; (8006978 <HAL_RCC_GetSysClockFreq+0xbc>)
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006932:	4a10      	ldr	r2, [pc, #64]	; (8006974 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006934:	68d2      	ldr	r2, [r2, #12]
 8006936:	0a12      	lsrs	r2, r2, #8
 8006938:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800693c:	fb02 f303 	mul.w	r3, r2, r3
 8006940:	617b      	str	r3, [r7, #20]
      break;
 8006942:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006944:	4b0b      	ldr	r3, [pc, #44]	; (8006974 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	0e5b      	lsrs	r3, r3, #25
 800694a:	f003 0303 	and.w	r3, r3, #3
 800694e:	3301      	adds	r3, #1
 8006950:	005b      	lsls	r3, r3, #1
 8006952:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	fbb2 f3f3 	udiv	r3, r2, r3
 800695c:	613b      	str	r3, [r7, #16]
 800695e:	e001      	b.n	8006964 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006960:	2300      	movs	r3, #0
 8006962:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006964:	693b      	ldr	r3, [r7, #16]
}
 8006966:	4618      	mov	r0, r3
 8006968:	371c      	adds	r7, #28
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	40021000 	.word	0x40021000
 8006978:	00f42400 	.word	0x00f42400
 800697c:	017d7840 	.word	0x017d7840

08006980 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006980:	b480      	push	{r7}
 8006982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006984:	4b03      	ldr	r3, [pc, #12]	; (8006994 <HAL_RCC_GetHCLKFreq+0x14>)
 8006986:	681b      	ldr	r3, [r3, #0]
}
 8006988:	4618      	mov	r0, r3
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	20000010 	.word	0x20000010

08006998 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006998:	b480      	push	{r7}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800699e:	4b1e      	ldr	r3, [pc, #120]	; (8006a18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	f003 0303 	and.w	r3, r3, #3
 80069a6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80069a8:	4b1b      	ldr	r3, [pc, #108]	; (8006a18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	091b      	lsrs	r3, r3, #4
 80069ae:	f003 030f 	and.w	r3, r3, #15
 80069b2:	3301      	adds	r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	2b03      	cmp	r3, #3
 80069ba:	d10c      	bne.n	80069d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069bc:	4a17      	ldr	r2, [pc, #92]	; (8006a1c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c4:	4a14      	ldr	r2, [pc, #80]	; (8006a18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069c6:	68d2      	ldr	r2, [r2, #12]
 80069c8:	0a12      	lsrs	r2, r2, #8
 80069ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80069ce:	fb02 f303 	mul.w	r3, r2, r3
 80069d2:	617b      	str	r3, [r7, #20]
    break;
 80069d4:	e00c      	b.n	80069f0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069d6:	4a12      	ldr	r2, [pc, #72]	; (8006a20 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	fbb2 f3f3 	udiv	r3, r2, r3
 80069de:	4a0e      	ldr	r2, [pc, #56]	; (8006a18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069e0:	68d2      	ldr	r2, [r2, #12]
 80069e2:	0a12      	lsrs	r2, r2, #8
 80069e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80069e8:	fb02 f303 	mul.w	r3, r2, r3
 80069ec:	617b      	str	r3, [r7, #20]
    break;
 80069ee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80069f0:	4b09      	ldr	r3, [pc, #36]	; (8006a18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	0e5b      	lsrs	r3, r3, #25
 80069f6:	f003 0303 	and.w	r3, r3, #3
 80069fa:	3301      	adds	r3, #1
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a08:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006a0a:	687b      	ldr	r3, [r7, #4]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	371c      	adds	r7, #28
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr
 8006a18:	40021000 	.word	0x40021000
 8006a1c:	017d7840 	.word	0x017d7840
 8006a20:	00f42400 	.word	0x00f42400

08006a24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a30:	2300      	movs	r3, #0
 8006a32:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 8098 	beq.w	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a42:	2300      	movs	r3, #0
 8006a44:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a46:	4b43      	ldr	r3, [pc, #268]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10d      	bne.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a52:	4b40      	ldr	r3, [pc, #256]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a56:	4a3f      	ldr	r2, [pc, #252]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a5c:	6593      	str	r3, [r2, #88]	; 0x58
 8006a5e:	4b3d      	ldr	r3, [pc, #244]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a66:	60bb      	str	r3, [r7, #8]
 8006a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a6e:	4b3a      	ldr	r3, [pc, #232]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a39      	ldr	r2, [pc, #228]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a7a:	f7fb f95d 	bl	8001d38 <HAL_GetTick>
 8006a7e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a80:	e009      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a82:	f7fb f959 	bl	8001d38 <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d902      	bls.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	74fb      	strb	r3, [r7, #19]
        break;
 8006a94:	e005      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a96:	4b30      	ldr	r3, [pc, #192]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0ef      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006aa2:	7cfb      	ldrb	r3, [r7, #19]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d159      	bne.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006aa8:	4b2a      	ldr	r3, [pc, #168]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ab2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d01e      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d019      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006ac4:	4b23      	ldr	r3, [pc, #140]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ace:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ad0:	4b20      	ldr	r3, [pc, #128]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ad6:	4a1f      	ldr	r2, [pc, #124]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ae0:	4b1c      	ldr	r3, [pc, #112]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ae6:	4a1b      	ldr	r2, [pc, #108]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006af0:	4a18      	ldr	r2, [pc, #96]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d016      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b02:	f7fb f919 	bl	8001d38 <HAL_GetTick>
 8006b06:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b08:	e00b      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b0a:	f7fb f915 	bl	8001d38 <HAL_GetTick>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d902      	bls.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	74fb      	strb	r3, [r7, #19]
            break;
 8006b20:	e006      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b22:	4b0c      	ldr	r3, [pc, #48]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d0ec      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006b30:	7cfb      	ldrb	r3, [r7, #19]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10b      	bne.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b36:	4b07      	ldr	r3, [pc, #28]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b44:	4903      	ldr	r1, [pc, #12]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006b4c:	e008      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b4e:	7cfb      	ldrb	r3, [r7, #19]
 8006b50:	74bb      	strb	r3, [r7, #18]
 8006b52:	e005      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006b54:	40021000 	.word	0x40021000
 8006b58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b5c:	7cfb      	ldrb	r3, [r7, #19]
 8006b5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b60:	7c7b      	ldrb	r3, [r7, #17]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d105      	bne.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b66:	4ba7      	ldr	r3, [pc, #668]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b6a:	4aa6      	ldr	r2, [pc, #664]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b70:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00a      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b7e:	4ba1      	ldr	r3, [pc, #644]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b84:	f023 0203 	bic.w	r2, r3, #3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	499d      	ldr	r1, [pc, #628]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0302 	and.w	r3, r3, #2
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00a      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ba0:	4b98      	ldr	r3, [pc, #608]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ba6:	f023 020c 	bic.w	r2, r3, #12
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	4995      	ldr	r1, [pc, #596]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0304 	and.w	r3, r3, #4
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00a      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006bc2:	4b90      	ldr	r3, [pc, #576]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	498c      	ldr	r1, [pc, #560]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0308 	and.w	r3, r3, #8
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00a      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006be4:	4b87      	ldr	r3, [pc, #540]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	4984      	ldr	r1, [pc, #528]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0310 	and.w	r3, r3, #16
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00a      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006c06:	4b7f      	ldr	r3, [pc, #508]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	497b      	ldr	r1, [pc, #492]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0320 	and.w	r3, r3, #32
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00a      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c28:	4b76      	ldr	r3, [pc, #472]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	4973      	ldr	r1, [pc, #460]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00a      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c4a:	4b6e      	ldr	r3, [pc, #440]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	69db      	ldr	r3, [r3, #28]
 8006c58:	496a      	ldr	r1, [pc, #424]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00a      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c6c:	4b65      	ldr	r3, [pc, #404]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c72:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	4962      	ldr	r1, [pc, #392]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00a      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c8e:	4b5d      	ldr	r3, [pc, #372]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9c:	4959      	ldr	r1, [pc, #356]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00a      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006cb0:	4b54      	ldr	r3, [pc, #336]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006cb6:	f023 0203 	bic.w	r2, r3, #3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cbe:	4951      	ldr	r1, [pc, #324]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00a      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cd2:	4b4c      	ldr	r3, [pc, #304]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce0:	4948      	ldr	r1, [pc, #288]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d015      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006cf4:	4b43      	ldr	r3, [pc, #268]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d02:	4940      	ldr	r1, [pc, #256]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d12:	d105      	bne.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d14:	4b3b      	ldr	r3, [pc, #236]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	4a3a      	ldr	r2, [pc, #232]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d1e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d015      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006d2c:	4b35      	ldr	r3, [pc, #212]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d3a:	4932      	ldr	r1, [pc, #200]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d4a:	d105      	bne.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d4c:	4b2d      	ldr	r3, [pc, #180]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	4a2c      	ldr	r2, [pc, #176]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d56:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d015      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006d64:	4b27      	ldr	r3, [pc, #156]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d6a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d72:	4924      	ldr	r1, [pc, #144]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d82:	d105      	bne.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d84:	4b1f      	ldr	r3, [pc, #124]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	4a1e      	ldr	r2, [pc, #120]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d8e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d015      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d9c:	4b19      	ldr	r3, [pc, #100]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006da2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006daa:	4916      	ldr	r1, [pc, #88]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dac:	4313      	orrs	r3, r2
 8006dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dba:	d105      	bne.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006dbc:	4b11      	ldr	r3, [pc, #68]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	4a10      	ldr	r2, [pc, #64]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006dc6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d019      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006dd4:	4b0b      	ldr	r3, [pc, #44]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de2:	4908      	ldr	r1, [pc, #32]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006df2:	d109      	bne.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006df4:	4b03      	ldr	r3, [pc, #12]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	4a02      	ldr	r2, [pc, #8]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006dfe:	60d3      	str	r3, [r2, #12]
 8006e00:	e002      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006e02:	bf00      	nop
 8006e04:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d015      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006e14:	4b29      	ldr	r3, [pc, #164]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e22:	4926      	ldr	r1, [pc, #152]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e32:	d105      	bne.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006e34:	4b21      	ldr	r3, [pc, #132]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	4a20      	ldr	r2, [pc, #128]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e3e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d015      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006e4c:	4b1b      	ldr	r3, [pc, #108]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e52:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e5a:	4918      	ldr	r1, [pc, #96]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e6a:	d105      	bne.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006e6c:	4b13      	ldr	r3, [pc, #76]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	4a12      	ldr	r2, [pc, #72]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e76:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d015      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006e84:	4b0d      	ldr	r3, [pc, #52]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e92:	490a      	ldr	r1, [pc, #40]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ea2:	d105      	bne.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ea4:	4b05      	ldr	r3, [pc, #20]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	4a04      	ldr	r2, [pc, #16]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006eaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006eae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006eb0:	7cbb      	ldrb	r3, [r7, #18]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3718      	adds	r7, #24
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	40021000 	.word	0x40021000

08006ec0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e049      	b.n	8006f66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d106      	bne.n	8006eec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7fa fdaa 	bl	8001a40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2202      	movs	r2, #2
 8006ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	3304      	adds	r3, #4
 8006efc:	4619      	mov	r1, r3
 8006efe:	4610      	mov	r0, r2
 8006f00:	f000 f9b2 	bl	8007268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
	...

08006f70 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d001      	beq.n	8006f88 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e04c      	b.n	8007022 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a26      	ldr	r2, [pc, #152]	; (8007030 <HAL_TIM_Base_Start+0xc0>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d022      	beq.n	8006fe0 <HAL_TIM_Base_Start+0x70>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fa2:	d01d      	beq.n	8006fe0 <HAL_TIM_Base_Start+0x70>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a22      	ldr	r2, [pc, #136]	; (8007034 <HAL_TIM_Base_Start+0xc4>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d018      	beq.n	8006fe0 <HAL_TIM_Base_Start+0x70>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a21      	ldr	r2, [pc, #132]	; (8007038 <HAL_TIM_Base_Start+0xc8>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d013      	beq.n	8006fe0 <HAL_TIM_Base_Start+0x70>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a1f      	ldr	r2, [pc, #124]	; (800703c <HAL_TIM_Base_Start+0xcc>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d00e      	beq.n	8006fe0 <HAL_TIM_Base_Start+0x70>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a1e      	ldr	r2, [pc, #120]	; (8007040 <HAL_TIM_Base_Start+0xd0>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d009      	beq.n	8006fe0 <HAL_TIM_Base_Start+0x70>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a1c      	ldr	r2, [pc, #112]	; (8007044 <HAL_TIM_Base_Start+0xd4>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d004      	beq.n	8006fe0 <HAL_TIM_Base_Start+0x70>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a1b      	ldr	r2, [pc, #108]	; (8007048 <HAL_TIM_Base_Start+0xd8>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d115      	bne.n	800700c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689a      	ldr	r2, [r3, #8]
 8006fe6:	4b19      	ldr	r3, [pc, #100]	; (800704c <HAL_TIM_Base_Start+0xdc>)
 8006fe8:	4013      	ands	r3, r2
 8006fea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2b06      	cmp	r3, #6
 8006ff0:	d015      	beq.n	800701e <HAL_TIM_Base_Start+0xae>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ff8:	d011      	beq.n	800701e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f042 0201 	orr.w	r2, r2, #1
 8007008:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800700a:	e008      	b.n	800701e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f042 0201 	orr.w	r2, r2, #1
 800701a:	601a      	str	r2, [r3, #0]
 800701c:	e000      	b.n	8007020 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800701e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	40012c00 	.word	0x40012c00
 8007034:	40000400 	.word	0x40000400
 8007038:	40000800 	.word	0x40000800
 800703c:	40000c00 	.word	0x40000c00
 8007040:	40013400 	.word	0x40013400
 8007044:	40014000 	.word	0x40014000
 8007048:	40015000 	.word	0x40015000
 800704c:	00010007 	.word	0x00010007

08007050 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800705a:	2300      	movs	r3, #0
 800705c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007064:	2b01      	cmp	r3, #1
 8007066:	d101      	bne.n	800706c <HAL_TIM_ConfigClockSource+0x1c>
 8007068:	2302      	movs	r3, #2
 800706a:	e0ee      	b.n	800724a <HAL_TIM_ConfigClockSource+0x1fa>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800708a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800708e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007096:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a6b      	ldr	r2, [pc, #428]	; (8007254 <HAL_TIM_ConfigClockSource+0x204>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	f000 80b9 	beq.w	800721e <HAL_TIM_ConfigClockSource+0x1ce>
 80070ac:	4a69      	ldr	r2, [pc, #420]	; (8007254 <HAL_TIM_ConfigClockSource+0x204>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	f200 80be 	bhi.w	8007230 <HAL_TIM_ConfigClockSource+0x1e0>
 80070b4:	4a68      	ldr	r2, [pc, #416]	; (8007258 <HAL_TIM_ConfigClockSource+0x208>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	f000 80b1 	beq.w	800721e <HAL_TIM_ConfigClockSource+0x1ce>
 80070bc:	4a66      	ldr	r2, [pc, #408]	; (8007258 <HAL_TIM_ConfigClockSource+0x208>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	f200 80b6 	bhi.w	8007230 <HAL_TIM_ConfigClockSource+0x1e0>
 80070c4:	4a65      	ldr	r2, [pc, #404]	; (800725c <HAL_TIM_ConfigClockSource+0x20c>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	f000 80a9 	beq.w	800721e <HAL_TIM_ConfigClockSource+0x1ce>
 80070cc:	4a63      	ldr	r2, [pc, #396]	; (800725c <HAL_TIM_ConfigClockSource+0x20c>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	f200 80ae 	bhi.w	8007230 <HAL_TIM_ConfigClockSource+0x1e0>
 80070d4:	4a62      	ldr	r2, [pc, #392]	; (8007260 <HAL_TIM_ConfigClockSource+0x210>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	f000 80a1 	beq.w	800721e <HAL_TIM_ConfigClockSource+0x1ce>
 80070dc:	4a60      	ldr	r2, [pc, #384]	; (8007260 <HAL_TIM_ConfigClockSource+0x210>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	f200 80a6 	bhi.w	8007230 <HAL_TIM_ConfigClockSource+0x1e0>
 80070e4:	4a5f      	ldr	r2, [pc, #380]	; (8007264 <HAL_TIM_ConfigClockSource+0x214>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	f000 8099 	beq.w	800721e <HAL_TIM_ConfigClockSource+0x1ce>
 80070ec:	4a5d      	ldr	r2, [pc, #372]	; (8007264 <HAL_TIM_ConfigClockSource+0x214>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	f200 809e 	bhi.w	8007230 <HAL_TIM_ConfigClockSource+0x1e0>
 80070f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80070f8:	f000 8091 	beq.w	800721e <HAL_TIM_ConfigClockSource+0x1ce>
 80070fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007100:	f200 8096 	bhi.w	8007230 <HAL_TIM_ConfigClockSource+0x1e0>
 8007104:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007108:	f000 8089 	beq.w	800721e <HAL_TIM_ConfigClockSource+0x1ce>
 800710c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007110:	f200 808e 	bhi.w	8007230 <HAL_TIM_ConfigClockSource+0x1e0>
 8007114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007118:	d03e      	beq.n	8007198 <HAL_TIM_ConfigClockSource+0x148>
 800711a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800711e:	f200 8087 	bhi.w	8007230 <HAL_TIM_ConfigClockSource+0x1e0>
 8007122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007126:	f000 8086 	beq.w	8007236 <HAL_TIM_ConfigClockSource+0x1e6>
 800712a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800712e:	d87f      	bhi.n	8007230 <HAL_TIM_ConfigClockSource+0x1e0>
 8007130:	2b70      	cmp	r3, #112	; 0x70
 8007132:	d01a      	beq.n	800716a <HAL_TIM_ConfigClockSource+0x11a>
 8007134:	2b70      	cmp	r3, #112	; 0x70
 8007136:	d87b      	bhi.n	8007230 <HAL_TIM_ConfigClockSource+0x1e0>
 8007138:	2b60      	cmp	r3, #96	; 0x60
 800713a:	d050      	beq.n	80071de <HAL_TIM_ConfigClockSource+0x18e>
 800713c:	2b60      	cmp	r3, #96	; 0x60
 800713e:	d877      	bhi.n	8007230 <HAL_TIM_ConfigClockSource+0x1e0>
 8007140:	2b50      	cmp	r3, #80	; 0x50
 8007142:	d03c      	beq.n	80071be <HAL_TIM_ConfigClockSource+0x16e>
 8007144:	2b50      	cmp	r3, #80	; 0x50
 8007146:	d873      	bhi.n	8007230 <HAL_TIM_ConfigClockSource+0x1e0>
 8007148:	2b40      	cmp	r3, #64	; 0x40
 800714a:	d058      	beq.n	80071fe <HAL_TIM_ConfigClockSource+0x1ae>
 800714c:	2b40      	cmp	r3, #64	; 0x40
 800714e:	d86f      	bhi.n	8007230 <HAL_TIM_ConfigClockSource+0x1e0>
 8007150:	2b30      	cmp	r3, #48	; 0x30
 8007152:	d064      	beq.n	800721e <HAL_TIM_ConfigClockSource+0x1ce>
 8007154:	2b30      	cmp	r3, #48	; 0x30
 8007156:	d86b      	bhi.n	8007230 <HAL_TIM_ConfigClockSource+0x1e0>
 8007158:	2b20      	cmp	r3, #32
 800715a:	d060      	beq.n	800721e <HAL_TIM_ConfigClockSource+0x1ce>
 800715c:	2b20      	cmp	r3, #32
 800715e:	d867      	bhi.n	8007230 <HAL_TIM_ConfigClockSource+0x1e0>
 8007160:	2b00      	cmp	r3, #0
 8007162:	d05c      	beq.n	800721e <HAL_TIM_ConfigClockSource+0x1ce>
 8007164:	2b10      	cmp	r3, #16
 8007166:	d05a      	beq.n	800721e <HAL_TIM_ConfigClockSource+0x1ce>
 8007168:	e062      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6818      	ldr	r0, [r3, #0]
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	6899      	ldr	r1, [r3, #8]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	f000 f999 	bl	80074b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800718c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	609a      	str	r2, [r3, #8]
      break;
 8007196:	e04f      	b.n	8007238 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6818      	ldr	r0, [r3, #0]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	6899      	ldr	r1, [r3, #8]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	f000 f982 	bl	80074b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	689a      	ldr	r2, [r3, #8]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071ba:	609a      	str	r2, [r3, #8]
      break;
 80071bc:	e03c      	b.n	8007238 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6818      	ldr	r0, [r3, #0]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	6859      	ldr	r1, [r3, #4]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	461a      	mov	r2, r3
 80071cc:	f000 f8f4 	bl	80073b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2150      	movs	r1, #80	; 0x50
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 f94d 	bl	8007476 <TIM_ITRx_SetConfig>
      break;
 80071dc:	e02c      	b.n	8007238 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6818      	ldr	r0, [r3, #0]
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	6859      	ldr	r1, [r3, #4]
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	461a      	mov	r2, r3
 80071ec:	f000 f913 	bl	8007416 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2160      	movs	r1, #96	; 0x60
 80071f6:	4618      	mov	r0, r3
 80071f8:	f000 f93d 	bl	8007476 <TIM_ITRx_SetConfig>
      break;
 80071fc:	e01c      	b.n	8007238 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6818      	ldr	r0, [r3, #0]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	6859      	ldr	r1, [r3, #4]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	461a      	mov	r2, r3
 800720c:	f000 f8d4 	bl	80073b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2140      	movs	r1, #64	; 0x40
 8007216:	4618      	mov	r0, r3
 8007218:	f000 f92d 	bl	8007476 <TIM_ITRx_SetConfig>
      break;
 800721c:	e00c      	b.n	8007238 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4619      	mov	r1, r3
 8007228:	4610      	mov	r0, r2
 800722a:	f000 f924 	bl	8007476 <TIM_ITRx_SetConfig>
      break;
 800722e:	e003      	b.n	8007238 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	73fb      	strb	r3, [r7, #15]
      break;
 8007234:	e000      	b.n	8007238 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8007236:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007248:	7bfb      	ldrb	r3, [r7, #15]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	00100070 	.word	0x00100070
 8007258:	00100050 	.word	0x00100050
 800725c:	00100040 	.word	0x00100040
 8007260:	00100030 	.word	0x00100030
 8007264:	00100020 	.word	0x00100020

08007268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a46      	ldr	r2, [pc, #280]	; (8007394 <TIM_Base_SetConfig+0x12c>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d017      	beq.n	80072b0 <TIM_Base_SetConfig+0x48>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007286:	d013      	beq.n	80072b0 <TIM_Base_SetConfig+0x48>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a43      	ldr	r2, [pc, #268]	; (8007398 <TIM_Base_SetConfig+0x130>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d00f      	beq.n	80072b0 <TIM_Base_SetConfig+0x48>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a42      	ldr	r2, [pc, #264]	; (800739c <TIM_Base_SetConfig+0x134>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d00b      	beq.n	80072b0 <TIM_Base_SetConfig+0x48>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a41      	ldr	r2, [pc, #260]	; (80073a0 <TIM_Base_SetConfig+0x138>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d007      	beq.n	80072b0 <TIM_Base_SetConfig+0x48>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a40      	ldr	r2, [pc, #256]	; (80073a4 <TIM_Base_SetConfig+0x13c>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d003      	beq.n	80072b0 <TIM_Base_SetConfig+0x48>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a3f      	ldr	r2, [pc, #252]	; (80073a8 <TIM_Base_SetConfig+0x140>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d108      	bne.n	80072c2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	4313      	orrs	r3, r2
 80072c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a33      	ldr	r2, [pc, #204]	; (8007394 <TIM_Base_SetConfig+0x12c>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d023      	beq.n	8007312 <TIM_Base_SetConfig+0xaa>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072d0:	d01f      	beq.n	8007312 <TIM_Base_SetConfig+0xaa>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a30      	ldr	r2, [pc, #192]	; (8007398 <TIM_Base_SetConfig+0x130>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d01b      	beq.n	8007312 <TIM_Base_SetConfig+0xaa>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a2f      	ldr	r2, [pc, #188]	; (800739c <TIM_Base_SetConfig+0x134>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d017      	beq.n	8007312 <TIM_Base_SetConfig+0xaa>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a2e      	ldr	r2, [pc, #184]	; (80073a0 <TIM_Base_SetConfig+0x138>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d013      	beq.n	8007312 <TIM_Base_SetConfig+0xaa>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a2d      	ldr	r2, [pc, #180]	; (80073a4 <TIM_Base_SetConfig+0x13c>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d00f      	beq.n	8007312 <TIM_Base_SetConfig+0xaa>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a2d      	ldr	r2, [pc, #180]	; (80073ac <TIM_Base_SetConfig+0x144>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d00b      	beq.n	8007312 <TIM_Base_SetConfig+0xaa>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a2c      	ldr	r2, [pc, #176]	; (80073b0 <TIM_Base_SetConfig+0x148>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d007      	beq.n	8007312 <TIM_Base_SetConfig+0xaa>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a2b      	ldr	r2, [pc, #172]	; (80073b4 <TIM_Base_SetConfig+0x14c>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d003      	beq.n	8007312 <TIM_Base_SetConfig+0xaa>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a26      	ldr	r2, [pc, #152]	; (80073a8 <TIM_Base_SetConfig+0x140>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d108      	bne.n	8007324 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	4313      	orrs	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	4313      	orrs	r3, r2
 8007330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	689a      	ldr	r2, [r3, #8]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a12      	ldr	r2, [pc, #72]	; (8007394 <TIM_Base_SetConfig+0x12c>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d013      	beq.n	8007378 <TIM_Base_SetConfig+0x110>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a14      	ldr	r2, [pc, #80]	; (80073a4 <TIM_Base_SetConfig+0x13c>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d00f      	beq.n	8007378 <TIM_Base_SetConfig+0x110>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a14      	ldr	r2, [pc, #80]	; (80073ac <TIM_Base_SetConfig+0x144>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d00b      	beq.n	8007378 <TIM_Base_SetConfig+0x110>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a13      	ldr	r2, [pc, #76]	; (80073b0 <TIM_Base_SetConfig+0x148>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d007      	beq.n	8007378 <TIM_Base_SetConfig+0x110>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a12      	ldr	r2, [pc, #72]	; (80073b4 <TIM_Base_SetConfig+0x14c>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d003      	beq.n	8007378 <TIM_Base_SetConfig+0x110>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a0d      	ldr	r2, [pc, #52]	; (80073a8 <TIM_Base_SetConfig+0x140>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d103      	bne.n	8007380 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	691a      	ldr	r2, [r3, #16]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	615a      	str	r2, [r3, #20]
}
 8007386:	bf00      	nop
 8007388:	3714      	adds	r7, #20
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	40012c00 	.word	0x40012c00
 8007398:	40000400 	.word	0x40000400
 800739c:	40000800 	.word	0x40000800
 80073a0:	40000c00 	.word	0x40000c00
 80073a4:	40013400 	.word	0x40013400
 80073a8:	40015000 	.word	0x40015000
 80073ac:	40014000 	.word	0x40014000
 80073b0:	40014400 	.word	0x40014400
 80073b4:	40014800 	.word	0x40014800

080073b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b087      	sub	sp, #28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6a1b      	ldr	r3, [r3, #32]
 80073c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	f023 0201 	bic.w	r2, r3, #1
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	011b      	lsls	r3, r3, #4
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f023 030a 	bic.w	r3, r3, #10
 80073f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	697a      	ldr	r2, [r7, #20]
 8007408:	621a      	str	r2, [r3, #32]
}
 800740a:	bf00      	nop
 800740c:	371c      	adds	r7, #28
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007416:	b480      	push	{r7}
 8007418:	b087      	sub	sp, #28
 800741a:	af00      	add	r7, sp, #0
 800741c:	60f8      	str	r0, [r7, #12]
 800741e:	60b9      	str	r1, [r7, #8]
 8007420:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	f023 0210 	bic.w	r2, r3, #16
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6a1b      	ldr	r3, [r3, #32]
 8007438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007440:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	031b      	lsls	r3, r3, #12
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	4313      	orrs	r3, r2
 800744a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007452:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	011b      	lsls	r3, r3, #4
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	4313      	orrs	r3, r2
 800745c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	621a      	str	r2, [r3, #32]
}
 800746a:	bf00      	nop
 800746c:	371c      	adds	r7, #28
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007476:	b480      	push	{r7}
 8007478:	b085      	sub	sp, #20
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800748c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007490:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	4313      	orrs	r3, r2
 8007498:	f043 0307 	orr.w	r3, r3, #7
 800749c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	609a      	str	r2, [r3, #8]
}
 80074a4:	bf00      	nop
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b087      	sub	sp, #28
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
 80074bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	021a      	lsls	r2, r3, #8
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	431a      	orrs	r2, r3
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	4313      	orrs	r3, r2
 80074dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	697a      	ldr	r2, [r7, #20]
 80074e2:	609a      	str	r2, [r3, #8]
}
 80074e4:	bf00      	nop
 80074e6:	371c      	adds	r7, #28
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007500:	2b01      	cmp	r3, #1
 8007502:	d101      	bne.n	8007508 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007504:	2302      	movs	r3, #2
 8007506:	e074      	b.n	80075f2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2202      	movs	r2, #2
 8007514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a34      	ldr	r2, [pc, #208]	; (8007600 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d009      	beq.n	8007546 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a33      	ldr	r2, [pc, #204]	; (8007604 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d004      	beq.n	8007546 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a31      	ldr	r2, [pc, #196]	; (8007608 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d108      	bne.n	8007558 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800754c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	4313      	orrs	r3, r2
 8007556:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800755e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007562:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	4313      	orrs	r3, r2
 800756c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a21      	ldr	r2, [pc, #132]	; (8007600 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d022      	beq.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007588:	d01d      	beq.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a1f      	ldr	r2, [pc, #124]	; (800760c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d018      	beq.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a1d      	ldr	r2, [pc, #116]	; (8007610 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d013      	beq.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a1c      	ldr	r2, [pc, #112]	; (8007614 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d00e      	beq.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a15      	ldr	r2, [pc, #84]	; (8007604 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d009      	beq.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a18      	ldr	r2, [pc, #96]	; (8007618 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d004      	beq.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a11      	ldr	r2, [pc, #68]	; (8007608 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d10c      	bne.n	80075e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3714      	adds	r7, #20
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	40012c00 	.word	0x40012c00
 8007604:	40013400 	.word	0x40013400
 8007608:	40015000 	.word	0x40015000
 800760c:	40000400 	.word	0x40000400
 8007610:	40000800 	.word	0x40000800
 8007614:	40000c00 	.word	0x40000c00
 8007618:	40014000 	.word	0x40014000

0800761c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800762c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007630:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	b29a      	uxth	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800764a:	b480      	push	{r7}
 800764c:	b085      	sub	sp, #20
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007652:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007656:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800765e:	b29a      	uxth	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	b29b      	uxth	r3, r3
 8007664:	43db      	mvns	r3, r3
 8007666:	b29b      	uxth	r3, r3
 8007668:	4013      	ands	r3, r2
 800766a:	b29a      	uxth	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007680:	b084      	sub	sp, #16
 8007682:	b480      	push	{r7}
 8007684:	b083      	sub	sp, #12
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	f107 0014 	add.w	r0, r7, #20
 800768e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2201      	movs	r2, #1
 8007696:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	b004      	add	sp, #16
 80076c0:	4770      	bx	lr
	...

080076c4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b09d      	sub	sp, #116	; 0x74
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	881b      	ldrh	r3, [r3, #0]
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80076e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ea:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	78db      	ldrb	r3, [r3, #3]
 80076f2:	2b03      	cmp	r3, #3
 80076f4:	d81f      	bhi.n	8007736 <USB_ActivateEndpoint+0x72>
 80076f6:	a201      	add	r2, pc, #4	; (adr r2, 80076fc <USB_ActivateEndpoint+0x38>)
 80076f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fc:	0800770d 	.word	0x0800770d
 8007700:	08007729 	.word	0x08007729
 8007704:	0800773f 	.word	0x0800773f
 8007708:	0800771b 	.word	0x0800771b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800770c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007710:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007714:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007718:	e012      	b.n	8007740 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800771a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800771e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007722:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007726:	e00b      	b.n	8007740 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007728:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800772c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007730:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007734:	e004      	b.n	8007740 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800773c:	e000      	b.n	8007740 <USB_ActivateEndpoint+0x7c>
      break;
 800773e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	441a      	add	r2, r3
 800774a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800774e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007752:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800775a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800775e:	b29b      	uxth	r3, r3
 8007760:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	4413      	add	r3, r2
 800776c:	881b      	ldrh	r3, [r3, #0]
 800776e:	b29b      	uxth	r3, r3
 8007770:	b21b      	sxth	r3, r3
 8007772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800777a:	b21a      	sxth	r2, r3
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	b21b      	sxth	r3, r3
 8007782:	4313      	orrs	r3, r2
 8007784:	b21b      	sxth	r3, r3
 8007786:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	441a      	add	r2, r3
 8007794:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800779c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	7b1b      	ldrb	r3, [r3, #12]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f040 8149 	bne.w	8007a48 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	785b      	ldrb	r3, [r3, #1]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f000 8084 	beq.w	80078c8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	61bb      	str	r3, [r7, #24]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	461a      	mov	r2, r3
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	4413      	add	r3, r2
 80077d2:	61bb      	str	r3, [r7, #24]
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	00da      	lsls	r2, r3, #3
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	4413      	add	r3, r2
 80077de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077e2:	617b      	str	r3, [r7, #20]
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	88db      	ldrh	r3, [r3, #6]
 80077e8:	085b      	lsrs	r3, r3, #1
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	005b      	lsls	r3, r3, #1
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4413      	add	r3, r2
 80077fe:	881b      	ldrh	r3, [r3, #0]
 8007800:	827b      	strh	r3, [r7, #18]
 8007802:	8a7b      	ldrh	r3, [r7, #18]
 8007804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007808:	2b00      	cmp	r3, #0
 800780a:	d01b      	beq.n	8007844 <USB_ActivateEndpoint+0x180>
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4413      	add	r3, r2
 8007816:	881b      	ldrh	r3, [r3, #0]
 8007818:	b29b      	uxth	r3, r3
 800781a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800781e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007822:	823b      	strh	r3, [r7, #16]
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	441a      	add	r2, r3
 800782e:	8a3b      	ldrh	r3, [r7, #16]
 8007830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800783c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007840:	b29b      	uxth	r3, r3
 8007842:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	78db      	ldrb	r3, [r3, #3]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d020      	beq.n	800788e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4413      	add	r3, r2
 8007856:	881b      	ldrh	r3, [r3, #0]
 8007858:	b29b      	uxth	r3, r3
 800785a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800785e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007862:	81bb      	strh	r3, [r7, #12]
 8007864:	89bb      	ldrh	r3, [r7, #12]
 8007866:	f083 0320 	eor.w	r3, r3, #32
 800786a:	81bb      	strh	r3, [r7, #12]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	441a      	add	r2, r3
 8007876:	89bb      	ldrh	r3, [r7, #12]
 8007878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800787c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007888:	b29b      	uxth	r3, r3
 800788a:	8013      	strh	r3, [r2, #0]
 800788c:	e2a6      	b.n	8007ddc <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4413      	add	r3, r2
 8007898:	881b      	ldrh	r3, [r3, #0]
 800789a:	b29b      	uxth	r3, r3
 800789c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078a4:	81fb      	strh	r3, [r7, #14]
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	441a      	add	r2, r3
 80078b0:	89fb      	ldrh	r3, [r7, #14]
 80078b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	8013      	strh	r3, [r2, #0]
 80078c6:	e289      	b.n	8007ddc <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	633b      	str	r3, [r7, #48]	; 0x30
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	461a      	mov	r2, r3
 80078d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d8:	4413      	add	r3, r2
 80078da:	633b      	str	r3, [r7, #48]	; 0x30
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	00da      	lsls	r2, r3, #3
 80078e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e4:	4413      	add	r3, r2
 80078e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	88db      	ldrh	r3, [r3, #6]
 80078f0:	085b      	lsrs	r3, r3, #1
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	005b      	lsls	r3, r3, #1
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007906:	b29b      	uxth	r3, r3
 8007908:	461a      	mov	r2, r3
 800790a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790c:	4413      	add	r3, r2
 800790e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	00da      	lsls	r2, r3, #3
 8007916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007918:	4413      	add	r3, r2
 800791a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800791e:	627b      	str	r3, [r7, #36]	; 0x24
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	2b3e      	cmp	r3, #62	; 0x3e
 8007926:	d918      	bls.n	800795a <USB_ActivateEndpoint+0x296>
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	095b      	lsrs	r3, r3, #5
 800792e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	f003 031f 	and.w	r3, r3, #31
 8007938:	2b00      	cmp	r3, #0
 800793a:	d102      	bne.n	8007942 <USB_ActivateEndpoint+0x27e>
 800793c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800793e:	3b01      	subs	r3, #1
 8007940:	66bb      	str	r3, [r7, #104]	; 0x68
 8007942:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007944:	b29b      	uxth	r3, r3
 8007946:	029b      	lsls	r3, r3, #10
 8007948:	b29b      	uxth	r3, r3
 800794a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800794e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007952:	b29a      	uxth	r2, r3
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	801a      	strh	r2, [r3, #0]
 8007958:	e029      	b.n	80079ae <USB_ActivateEndpoint+0x2ea>
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d112      	bne.n	8007988 <USB_ActivateEndpoint+0x2c4>
 8007962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007964:	881b      	ldrh	r3, [r3, #0]
 8007966:	b29b      	uxth	r3, r3
 8007968:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800796c:	b29a      	uxth	r2, r3
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	801a      	strh	r2, [r3, #0]
 8007972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007974:	881b      	ldrh	r3, [r3, #0]
 8007976:	b29b      	uxth	r3, r3
 8007978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800797c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007980:	b29a      	uxth	r2, r3
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	801a      	strh	r2, [r3, #0]
 8007986:	e012      	b.n	80079ae <USB_ActivateEndpoint+0x2ea>
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	085b      	lsrs	r3, r3, #1
 800798e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	2b00      	cmp	r3, #0
 800799a:	d002      	beq.n	80079a2 <USB_ActivateEndpoint+0x2de>
 800799c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800799e:	3301      	adds	r3, #1
 80079a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80079a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	029b      	lsls	r3, r3, #10
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4413      	add	r3, r2
 80079b8:	881b      	ldrh	r3, [r3, #0]
 80079ba:	847b      	strh	r3, [r7, #34]	; 0x22
 80079bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80079be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d01b      	beq.n	80079fe <USB_ActivateEndpoint+0x33a>
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4413      	add	r3, r2
 80079d0:	881b      	ldrh	r3, [r3, #0]
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079dc:	843b      	strh	r3, [r7, #32]
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	441a      	add	r2, r3
 80079e8:	8c3b      	ldrh	r3, [r7, #32]
 80079ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a14:	83fb      	strh	r3, [r7, #30]
 8007a16:	8bfb      	ldrh	r3, [r7, #30]
 8007a18:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a1c:	83fb      	strh	r3, [r7, #30]
 8007a1e:	8bfb      	ldrh	r3, [r7, #30]
 8007a20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a24:	83fb      	strh	r3, [r7, #30]
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	441a      	add	r2, r3
 8007a30:	8bfb      	ldrh	r3, [r7, #30]
 8007a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	8013      	strh	r3, [r2, #0]
 8007a46:	e1c9      	b.n	8007ddc <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	78db      	ldrb	r3, [r3, #3]
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d11e      	bne.n	8007a8e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a66:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	441a      	add	r2, r3
 8007a74:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007a78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a80:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	8013      	strh	r3, [r2, #0]
 8007a8c:	e01d      	b.n	8007aca <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4413      	add	r3, r2
 8007a98:	881b      	ldrh	r3, [r3, #0]
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aa4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	441a      	add	r2, r3
 8007ab2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ada:	4413      	add	r3, r2
 8007adc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	00da      	lsls	r2, r3, #3
 8007ae4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007aec:	65bb      	str	r3, [r7, #88]	; 0x58
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	891b      	ldrh	r3, [r3, #8]
 8007af2:	085b      	lsrs	r3, r3, #1
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	005b      	lsls	r3, r3, #1
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007afc:	801a      	strh	r2, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	657b      	str	r3, [r7, #84]	; 0x54
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b0e:	4413      	add	r3, r2
 8007b10:	657b      	str	r3, [r7, #84]	; 0x54
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	00da      	lsls	r2, r3, #3
 8007b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b1a:	4413      	add	r3, r2
 8007b1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b20:	653b      	str	r3, [r7, #80]	; 0x50
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	895b      	ldrh	r3, [r3, #10]
 8007b26:	085b      	lsrs	r3, r3, #1
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	005b      	lsls	r3, r3, #1
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b30:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	785b      	ldrb	r3, [r3, #1]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f040 8093 	bne.w	8007c62 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	881b      	ldrh	r3, [r3, #0]
 8007b48:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007b4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007b50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d01b      	beq.n	8007b90 <USB_ActivateEndpoint+0x4cc>
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	4413      	add	r3, r2
 8007b62:	881b      	ldrh	r3, [r3, #0]
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b6e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	441a      	add	r2, r3
 8007b7a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	4413      	add	r3, r2
 8007b9a:	881b      	ldrh	r3, [r3, #0]
 8007b9c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007b9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d01b      	beq.n	8007be0 <USB_ActivateEndpoint+0x51c>
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	4413      	add	r3, r2
 8007bb2:	881b      	ldrh	r3, [r3, #0]
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bbe:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	441a      	add	r2, r3
 8007bca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	4413      	add	r3, r2
 8007bea:	881b      	ldrh	r3, [r3, #0]
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bf6:	873b      	strh	r3, [r7, #56]	; 0x38
 8007bf8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007bfa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007bfe:	873b      	strh	r3, [r7, #56]	; 0x38
 8007c00:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007c02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007c06:	873b      	strh	r3, [r7, #56]	; 0x38
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	441a      	add	r2, r3
 8007c12:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4413      	add	r3, r2
 8007c32:	881b      	ldrh	r3, [r3, #0]
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c3e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	441a      	add	r2, r3
 8007c4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	8013      	strh	r3, [r2, #0]
 8007c60:	e0bc      	b.n	8007ddc <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4413      	add	r3, r2
 8007c6c:	881b      	ldrh	r3, [r3, #0]
 8007c6e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007c72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d01d      	beq.n	8007cba <USB_ActivateEndpoint+0x5f6>
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	4413      	add	r3, r2
 8007c88:	881b      	ldrh	r3, [r3, #0]
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c94:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	441a      	add	r2, r3
 8007ca2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4413      	add	r3, r2
 8007cc4:	881b      	ldrh	r3, [r3, #0]
 8007cc6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007cca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d01d      	beq.n	8007d12 <USB_ActivateEndpoint+0x64e>
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	4413      	add	r3, r2
 8007ce0:	881b      	ldrh	r3, [r3, #0]
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cec:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	441a      	add	r2, r3
 8007cfa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007cfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	78db      	ldrb	r3, [r3, #3]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d024      	beq.n	8007d64 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4413      	add	r3, r2
 8007d24:	881b      	ldrh	r3, [r3, #0]
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d30:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007d34:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007d38:	f083 0320 	eor.w	r3, r3, #32
 8007d3c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	441a      	add	r2, r3
 8007d4a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	8013      	strh	r3, [r2, #0]
 8007d62:	e01d      	b.n	8007da0 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	4413      	add	r3, r2
 8007d6e:	881b      	ldrh	r3, [r3, #0]
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d7a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	441a      	add	r2, r3
 8007d88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007d8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	4413      	add	r3, r2
 8007daa:	881b      	ldrh	r3, [r3, #0]
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	441a      	add	r2, r3
 8007dc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007dc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007ddc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3774      	adds	r7, #116	; 0x74
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b08d      	sub	sp, #52	; 0x34
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	7b1b      	ldrb	r3, [r3, #12]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f040 808e 	bne.w	8007f1c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	785b      	ldrb	r3, [r3, #1]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d044      	beq.n	8007e92 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4413      	add	r3, r2
 8007e12:	881b      	ldrh	r3, [r3, #0]
 8007e14:	81bb      	strh	r3, [r7, #12]
 8007e16:	89bb      	ldrh	r3, [r7, #12]
 8007e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d01b      	beq.n	8007e58 <USB_DeactivateEndpoint+0x6c>
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	4413      	add	r3, r2
 8007e2a:	881b      	ldrh	r3, [r3, #0]
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e36:	817b      	strh	r3, [r7, #10]
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	441a      	add	r2, r3
 8007e42:	897b      	ldrh	r3, [r7, #10]
 8007e44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	4413      	add	r3, r2
 8007e62:	881b      	ldrh	r3, [r3, #0]
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e6e:	813b      	strh	r3, [r7, #8]
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	441a      	add	r2, r3
 8007e7a:	893b      	ldrh	r3, [r7, #8]
 8007e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	8013      	strh	r3, [r2, #0]
 8007e90:	e192      	b.n	80081b8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	4413      	add	r3, r2
 8007e9c:	881b      	ldrh	r3, [r3, #0]
 8007e9e:	827b      	strh	r3, [r7, #18]
 8007ea0:	8a7b      	ldrh	r3, [r7, #18]
 8007ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d01b      	beq.n	8007ee2 <USB_DeactivateEndpoint+0xf6>
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4413      	add	r3, r2
 8007eb4:	881b      	ldrh	r3, [r3, #0]
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ec0:	823b      	strh	r3, [r7, #16]
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	441a      	add	r2, r3
 8007ecc:	8a3b      	ldrh	r3, [r7, #16]
 8007ece:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ed2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ed6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	4413      	add	r3, r2
 8007eec:	881b      	ldrh	r3, [r3, #0]
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ef8:	81fb      	strh	r3, [r7, #14]
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	441a      	add	r2, r3
 8007f04:	89fb      	ldrh	r3, [r7, #14]
 8007f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	8013      	strh	r3, [r2, #0]
 8007f1a:	e14d      	b.n	80081b8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	785b      	ldrb	r3, [r3, #1]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f040 80a5 	bne.w	8008070 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4413      	add	r3, r2
 8007f30:	881b      	ldrh	r3, [r3, #0]
 8007f32:	843b      	strh	r3, [r7, #32]
 8007f34:	8c3b      	ldrh	r3, [r7, #32]
 8007f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d01b      	beq.n	8007f76 <USB_DeactivateEndpoint+0x18a>
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4413      	add	r3, r2
 8007f48:	881b      	ldrh	r3, [r3, #0]
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f54:	83fb      	strh	r3, [r7, #30]
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	441a      	add	r2, r3
 8007f60:	8bfb      	ldrh	r3, [r7, #30]
 8007f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4413      	add	r3, r2
 8007f80:	881b      	ldrh	r3, [r3, #0]
 8007f82:	83bb      	strh	r3, [r7, #28]
 8007f84:	8bbb      	ldrh	r3, [r7, #28]
 8007f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d01b      	beq.n	8007fc6 <USB_DeactivateEndpoint+0x1da>
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4413      	add	r3, r2
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fa4:	837b      	strh	r3, [r7, #26]
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	441a      	add	r2, r3
 8007fb0:	8b7b      	ldrh	r3, [r7, #26]
 8007fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	4413      	add	r3, r2
 8007fd0:	881b      	ldrh	r3, [r3, #0]
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fdc:	833b      	strh	r3, [r7, #24]
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	441a      	add	r2, r3
 8007fe8:	8b3b      	ldrh	r3, [r7, #24]
 8007fea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ff6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	4413      	add	r3, r2
 8008008:	881b      	ldrh	r3, [r3, #0]
 800800a:	b29b      	uxth	r3, r3
 800800c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008014:	82fb      	strh	r3, [r7, #22]
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	441a      	add	r2, r3
 8008020:	8afb      	ldrh	r3, [r7, #22]
 8008022:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008026:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800802a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800802e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008032:	b29b      	uxth	r3, r3
 8008034:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4413      	add	r3, r2
 8008040:	881b      	ldrh	r3, [r3, #0]
 8008042:	b29b      	uxth	r3, r3
 8008044:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008048:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800804c:	82bb      	strh	r3, [r7, #20]
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	441a      	add	r2, r3
 8008058:	8abb      	ldrh	r3, [r7, #20]
 800805a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800805e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800806a:	b29b      	uxth	r3, r3
 800806c:	8013      	strh	r3, [r2, #0]
 800806e:	e0a3      	b.n	80081b8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4413      	add	r3, r2
 800807a:	881b      	ldrh	r3, [r3, #0]
 800807c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800807e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008084:	2b00      	cmp	r3, #0
 8008086:	d01b      	beq.n	80080c0 <USB_DeactivateEndpoint+0x2d4>
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	4413      	add	r3, r2
 8008092:	881b      	ldrh	r3, [r3, #0]
 8008094:	b29b      	uxth	r3, r3
 8008096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800809a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800809e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	441a      	add	r2, r3
 80080aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80080ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080bc:	b29b      	uxth	r3, r3
 80080be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4413      	add	r3, r2
 80080ca:	881b      	ldrh	r3, [r3, #0]
 80080cc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80080ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80080d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d01b      	beq.n	8008110 <USB_DeactivateEndpoint+0x324>
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	4413      	add	r3, r2
 80080e2:	881b      	ldrh	r3, [r3, #0]
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ee:	853b      	strh	r3, [r7, #40]	; 0x28
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	441a      	add	r2, r3
 80080fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80080fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008100:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008108:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800810c:	b29b      	uxth	r3, r3
 800810e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4413      	add	r3, r2
 800811a:	881b      	ldrh	r3, [r3, #0]
 800811c:	b29b      	uxth	r3, r3
 800811e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008126:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	441a      	add	r2, r3
 8008132:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800813c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008144:	b29b      	uxth	r3, r3
 8008146:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4413      	add	r3, r2
 8008152:	881b      	ldrh	r3, [r3, #0]
 8008154:	b29b      	uxth	r3, r3
 8008156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800815a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800815e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	441a      	add	r2, r3
 800816a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800816c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008170:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800817c:	b29b      	uxth	r3, r3
 800817e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	881b      	ldrh	r3, [r3, #0]
 800818c:	b29b      	uxth	r3, r3
 800818e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008196:	847b      	strh	r3, [r7, #34]	; 0x22
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	441a      	add	r2, r3
 80081a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80081a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3734      	adds	r7, #52	; 0x34
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b0c2      	sub	sp, #264	; 0x108
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081d4:	6018      	str	r0, [r3, #0]
 80081d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081de:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80081e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	785b      	ldrb	r3, [r3, #1]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	f040 867b 	bne.w	8008ee8 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80081f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	699a      	ldr	r2, [r3, #24]
 80081fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008202:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	429a      	cmp	r2, r3
 800820c:	d908      	bls.n	8008220 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800820e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008212:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800821e:	e007      	b.n	8008230 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008234:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	7b1b      	ldrb	r3, [r3, #12]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d13a      	bne.n	80082b6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	6959      	ldr	r1, [r3, #20]
 800824c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008250:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	88da      	ldrh	r2, [r3, #6]
 8008258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800825c:	b29b      	uxth	r3, r3
 800825e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008262:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008266:	6800      	ldr	r0, [r0, #0]
 8008268:	f001 fc1d 	bl	8009aa6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800826c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008270:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	613b      	str	r3, [r7, #16]
 8008278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800827c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008286:	b29b      	uxth	r3, r3
 8008288:	461a      	mov	r2, r3
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	4413      	add	r3, r2
 800828e:	613b      	str	r3, [r7, #16]
 8008290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	00da      	lsls	r2, r3, #3
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	4413      	add	r3, r2
 80082a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80082a6:	60fb      	str	r3, [r7, #12]
 80082a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	801a      	strh	r2, [r3, #0]
 80082b2:	f000 bde3 	b.w	8008e7c <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80082b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	78db      	ldrb	r3, [r3, #3]
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	f040 843a 	bne.w	8008b3c <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80082c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	6a1a      	ldr	r2, [r3, #32]
 80082d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	f240 83b7 	bls.w	8008a54 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80082e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	4413      	add	r3, r2
 8008300:	881b      	ldrh	r3, [r3, #0]
 8008302:	b29b      	uxth	r3, r3
 8008304:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800830c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008314:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800831e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	441a      	add	r2, r3
 800832a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800832e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008336:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800833a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800833e:	b29b      	uxth	r3, r3
 8008340:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6a1a      	ldr	r2, [r3, #32]
 800834e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008352:	1ad2      	subs	r2, r2, r3
 8008354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008364:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800836e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4413      	add	r3, r2
 800837a:	881b      	ldrh	r3, [r3, #0]
 800837c:	b29b      	uxth	r3, r3
 800837e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008382:	2b00      	cmp	r3, #0
 8008384:	f000 81b3 	beq.w	80086ee <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800838c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	633b      	str	r3, [r7, #48]	; 0x30
 8008394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	785b      	ldrb	r3, [r3, #1]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d16d      	bne.n	8008480 <USB_EPStartXfer+0x2ba>
 80083a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80083b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083be:	b29b      	uxth	r3, r3
 80083c0:	461a      	mov	r2, r3
 80083c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c4:	4413      	add	r3, r2
 80083c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80083c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	00da      	lsls	r2, r3, #3
 80083d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d8:	4413      	add	r3, r2
 80083da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80083de:	627b      	str	r3, [r7, #36]	; 0x24
 80083e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083e4:	2b3e      	cmp	r3, #62	; 0x3e
 80083e6:	d91c      	bls.n	8008422 <USB_EPStartXfer+0x25c>
 80083e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083ec:	095b      	lsrs	r3, r3, #5
 80083ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80083f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083f6:	f003 031f 	and.w	r3, r3, #31
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d104      	bne.n	8008408 <USB_EPStartXfer+0x242>
 80083fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008402:	3b01      	subs	r3, #1
 8008404:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008408:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800840c:	b29b      	uxth	r3, r3
 800840e:	029b      	lsls	r3, r3, #10
 8008410:	b29b      	uxth	r3, r3
 8008412:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008416:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800841a:	b29a      	uxth	r2, r3
 800841c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841e:	801a      	strh	r2, [r3, #0]
 8008420:	e053      	b.n	80084ca <USB_EPStartXfer+0x304>
 8008422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008426:	2b00      	cmp	r3, #0
 8008428:	d112      	bne.n	8008450 <USB_EPStartXfer+0x28a>
 800842a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842c:	881b      	ldrh	r3, [r3, #0]
 800842e:	b29b      	uxth	r3, r3
 8008430:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008434:	b29a      	uxth	r2, r3
 8008436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008438:	801a      	strh	r2, [r3, #0]
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843c:	881b      	ldrh	r3, [r3, #0]
 800843e:	b29b      	uxth	r3, r3
 8008440:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008444:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008448:	b29a      	uxth	r2, r3
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	801a      	strh	r2, [r3, #0]
 800844e:	e03c      	b.n	80084ca <USB_EPStartXfer+0x304>
 8008450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008454:	085b      	lsrs	r3, r3, #1
 8008456:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800845a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800845e:	f003 0301 	and.w	r3, r3, #1
 8008462:	2b00      	cmp	r3, #0
 8008464:	d004      	beq.n	8008470 <USB_EPStartXfer+0x2aa>
 8008466:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800846a:	3301      	adds	r3, #1
 800846c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008470:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008474:	b29b      	uxth	r3, r3
 8008476:	029b      	lsls	r3, r3, #10
 8008478:	b29a      	uxth	r2, r3
 800847a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847c:	801a      	strh	r2, [r3, #0]
 800847e:	e024      	b.n	80084ca <USB_EPStartXfer+0x304>
 8008480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	785b      	ldrb	r3, [r3, #1]
 800848c:	2b01      	cmp	r3, #1
 800848e:	d11c      	bne.n	80084ca <USB_EPStartXfer+0x304>
 8008490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008494:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800849e:	b29b      	uxth	r3, r3
 80084a0:	461a      	mov	r2, r3
 80084a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a4:	4413      	add	r3, r2
 80084a6:	633b      	str	r3, [r7, #48]	; 0x30
 80084a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	00da      	lsls	r2, r3, #3
 80084b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b8:	4413      	add	r3, r2
 80084ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80084be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80084ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	895b      	ldrh	r3, [r3, #10]
 80084d6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80084da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6959      	ldr	r1, [r3, #20]
 80084e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80084f0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80084f4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80084f8:	6800      	ldr	r0, [r0, #0]
 80084fa:	f001 fad4 	bl	8009aa6 <USB_WritePMA>
            ep->xfer_buff += len;
 80084fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	695a      	ldr	r2, [r3, #20]
 800850a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800850e:	441a      	add	r2, r3
 8008510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800851c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	6a1a      	ldr	r2, [r3, #32]
 8008528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800852c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	429a      	cmp	r2, r3
 8008536:	d90f      	bls.n	8008558 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8008538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800853c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	6a1a      	ldr	r2, [r3, #32]
 8008544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008548:	1ad2      	subs	r2, r2, r3
 800854a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800854e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	621a      	str	r2, [r3, #32]
 8008556:	e00e      	b.n	8008576 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8008558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800855c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	6a1b      	ldr	r3, [r3, #32]
 8008564:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800856c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2200      	movs	r2, #0
 8008574:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800857a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	785b      	ldrb	r3, [r3, #1]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d16d      	bne.n	8008662 <USB_EPStartXfer+0x49c>
 8008586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800858a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	61bb      	str	r3, [r7, #24]
 8008592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008596:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	461a      	mov	r2, r3
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	4413      	add	r3, r2
 80085a8:	61bb      	str	r3, [r7, #24]
 80085aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	00da      	lsls	r2, r3, #3
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	4413      	add	r3, r2
 80085bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80085c0:	617b      	str	r3, [r7, #20]
 80085c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085c6:	2b3e      	cmp	r3, #62	; 0x3e
 80085c8:	d91c      	bls.n	8008604 <USB_EPStartXfer+0x43e>
 80085ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085ce:	095b      	lsrs	r3, r3, #5
 80085d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80085d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085d8:	f003 031f 	and.w	r3, r3, #31
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d104      	bne.n	80085ea <USB_EPStartXfer+0x424>
 80085e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085e4:	3b01      	subs	r3, #1
 80085e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80085ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	029b      	lsls	r3, r3, #10
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	801a      	strh	r2, [r3, #0]
 8008602:	e059      	b.n	80086b8 <USB_EPStartXfer+0x4f2>
 8008604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008608:	2b00      	cmp	r3, #0
 800860a:	d112      	bne.n	8008632 <USB_EPStartXfer+0x46c>
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	881b      	ldrh	r3, [r3, #0]
 8008610:	b29b      	uxth	r3, r3
 8008612:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008616:	b29a      	uxth	r2, r3
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	801a      	strh	r2, [r3, #0]
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	881b      	ldrh	r3, [r3, #0]
 8008620:	b29b      	uxth	r3, r3
 8008622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800862a:	b29a      	uxth	r2, r3
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	801a      	strh	r2, [r3, #0]
 8008630:	e042      	b.n	80086b8 <USB_EPStartXfer+0x4f2>
 8008632:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008636:	085b      	lsrs	r3, r3, #1
 8008638:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800863c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008640:	f003 0301 	and.w	r3, r3, #1
 8008644:	2b00      	cmp	r3, #0
 8008646:	d004      	beq.n	8008652 <USB_EPStartXfer+0x48c>
 8008648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800864c:	3301      	adds	r3, #1
 800864e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008656:	b29b      	uxth	r3, r3
 8008658:	029b      	lsls	r3, r3, #10
 800865a:	b29a      	uxth	r2, r3
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	801a      	strh	r2, [r3, #0]
 8008660:	e02a      	b.n	80086b8 <USB_EPStartXfer+0x4f2>
 8008662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008666:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	785b      	ldrb	r3, [r3, #1]
 800866e:	2b01      	cmp	r3, #1
 8008670:	d122      	bne.n	80086b8 <USB_EPStartXfer+0x4f2>
 8008672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008676:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	623b      	str	r3, [r7, #32]
 800867e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008682:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800868c:	b29b      	uxth	r3, r3
 800868e:	461a      	mov	r2, r3
 8008690:	6a3b      	ldr	r3, [r7, #32]
 8008692:	4413      	add	r3, r2
 8008694:	623b      	str	r3, [r7, #32]
 8008696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800869a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	00da      	lsls	r2, r3, #3
 80086a4:	6a3b      	ldr	r3, [r7, #32]
 80086a6:	4413      	add	r3, r2
 80086a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80086ac:	61fb      	str	r3, [r7, #28]
 80086ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80086b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	891b      	ldrh	r3, [r3, #8]
 80086c4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	6959      	ldr	r1, [r3, #20]
 80086d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086d8:	b29b      	uxth	r3, r3
 80086da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80086de:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80086e2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80086e6:	6800      	ldr	r0, [r0, #0]
 80086e8:	f001 f9dd 	bl	8009aa6 <USB_WritePMA>
 80086ec:	e3c6      	b.n	8008e7c <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80086ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	785b      	ldrb	r3, [r3, #1]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d16d      	bne.n	80087da <USB_EPStartXfer+0x614>
 80086fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008702:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	64bb      	str	r3, [r7, #72]	; 0x48
 800870a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800870e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008718:	b29b      	uxth	r3, r3
 800871a:	461a      	mov	r2, r3
 800871c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800871e:	4413      	add	r3, r2
 8008720:	64bb      	str	r3, [r7, #72]	; 0x48
 8008722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	00da      	lsls	r2, r3, #3
 8008730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008732:	4413      	add	r3, r2
 8008734:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008738:	647b      	str	r3, [r7, #68]	; 0x44
 800873a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800873e:	2b3e      	cmp	r3, #62	; 0x3e
 8008740:	d91c      	bls.n	800877c <USB_EPStartXfer+0x5b6>
 8008742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008746:	095b      	lsrs	r3, r3, #5
 8008748:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800874c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008750:	f003 031f 	and.w	r3, r3, #31
 8008754:	2b00      	cmp	r3, #0
 8008756:	d104      	bne.n	8008762 <USB_EPStartXfer+0x59c>
 8008758:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800875c:	3b01      	subs	r3, #1
 800875e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008762:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008766:	b29b      	uxth	r3, r3
 8008768:	029b      	lsls	r3, r3, #10
 800876a:	b29b      	uxth	r3, r3
 800876c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008774:	b29a      	uxth	r2, r3
 8008776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008778:	801a      	strh	r2, [r3, #0]
 800877a:	e059      	b.n	8008830 <USB_EPStartXfer+0x66a>
 800877c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008780:	2b00      	cmp	r3, #0
 8008782:	d112      	bne.n	80087aa <USB_EPStartXfer+0x5e4>
 8008784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008786:	881b      	ldrh	r3, [r3, #0]
 8008788:	b29b      	uxth	r3, r3
 800878a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800878e:	b29a      	uxth	r2, r3
 8008790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008792:	801a      	strh	r2, [r3, #0]
 8008794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008796:	881b      	ldrh	r3, [r3, #0]
 8008798:	b29b      	uxth	r3, r3
 800879a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800879e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087a6:	801a      	strh	r2, [r3, #0]
 80087a8:	e042      	b.n	8008830 <USB_EPStartXfer+0x66a>
 80087aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087ae:	085b      	lsrs	r3, r3, #1
 80087b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80087b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087b8:	f003 0301 	and.w	r3, r3, #1
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d004      	beq.n	80087ca <USB_EPStartXfer+0x604>
 80087c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80087c4:	3301      	adds	r3, #1
 80087c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80087ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	029b      	lsls	r3, r3, #10
 80087d2:	b29a      	uxth	r2, r3
 80087d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087d6:	801a      	strh	r2, [r3, #0]
 80087d8:	e02a      	b.n	8008830 <USB_EPStartXfer+0x66a>
 80087da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	785b      	ldrb	r3, [r3, #1]
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d122      	bne.n	8008830 <USB_EPStartXfer+0x66a>
 80087ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	653b      	str	r3, [r7, #80]	; 0x50
 80087f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008804:	b29b      	uxth	r3, r3
 8008806:	461a      	mov	r2, r3
 8008808:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800880a:	4413      	add	r3, r2
 800880c:	653b      	str	r3, [r7, #80]	; 0x50
 800880e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	00da      	lsls	r2, r3, #3
 800881c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800881e:	4413      	add	r3, r2
 8008820:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008824:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008826:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800882a:	b29a      	uxth	r2, r3
 800882c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800882e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	891b      	ldrh	r3, [r3, #8]
 800883c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	6959      	ldr	r1, [r3, #20]
 800884c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008850:	b29b      	uxth	r3, r3
 8008852:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008856:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800885a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800885e:	6800      	ldr	r0, [r0, #0]
 8008860:	f001 f921 	bl	8009aa6 <USB_WritePMA>
            ep->xfer_buff += len;
 8008864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	695a      	ldr	r2, [r3, #20]
 8008870:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008874:	441a      	add	r2, r3
 8008876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800887a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008886:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	6a1a      	ldr	r2, [r3, #32]
 800888e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	429a      	cmp	r2, r3
 800889c:	d90f      	bls.n	80088be <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800889e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	6a1a      	ldr	r2, [r3, #32]
 80088aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088ae:	1ad2      	subs	r2, r2, r3
 80088b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	621a      	str	r2, [r3, #32]
 80088bc:	e00e      	b.n	80088dc <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 80088be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	6a1b      	ldr	r3, [r3, #32]
 80088ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80088ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2200      	movs	r2, #0
 80088da:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80088dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	643b      	str	r3, [r7, #64]	; 0x40
 80088e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	785b      	ldrb	r3, [r3, #1]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d16d      	bne.n	80089d4 <USB_EPStartXfer+0x80e>
 80088f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	63bb      	str	r3, [r7, #56]	; 0x38
 8008904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008908:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008912:	b29b      	uxth	r3, r3
 8008914:	461a      	mov	r2, r3
 8008916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008918:	4413      	add	r3, r2
 800891a:	63bb      	str	r3, [r7, #56]	; 0x38
 800891c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	00da      	lsls	r2, r3, #3
 800892a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892c:	4413      	add	r3, r2
 800892e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008932:	637b      	str	r3, [r7, #52]	; 0x34
 8008934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008938:	2b3e      	cmp	r3, #62	; 0x3e
 800893a:	d91c      	bls.n	8008976 <USB_EPStartXfer+0x7b0>
 800893c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008940:	095b      	lsrs	r3, r3, #5
 8008942:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800894a:	f003 031f 	and.w	r3, r3, #31
 800894e:	2b00      	cmp	r3, #0
 8008950:	d104      	bne.n	800895c <USB_EPStartXfer+0x796>
 8008952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008956:	3b01      	subs	r3, #1
 8008958:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800895c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008960:	b29b      	uxth	r3, r3
 8008962:	029b      	lsls	r3, r3, #10
 8008964:	b29b      	uxth	r3, r3
 8008966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800896a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800896e:	b29a      	uxth	r2, r3
 8008970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008972:	801a      	strh	r2, [r3, #0]
 8008974:	e053      	b.n	8008a1e <USB_EPStartXfer+0x858>
 8008976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800897a:	2b00      	cmp	r3, #0
 800897c:	d112      	bne.n	80089a4 <USB_EPStartXfer+0x7de>
 800897e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008980:	881b      	ldrh	r3, [r3, #0]
 8008982:	b29b      	uxth	r3, r3
 8008984:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008988:	b29a      	uxth	r2, r3
 800898a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800898c:	801a      	strh	r2, [r3, #0]
 800898e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008990:	881b      	ldrh	r3, [r3, #0]
 8008992:	b29b      	uxth	r3, r3
 8008994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800899c:	b29a      	uxth	r2, r3
 800899e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a0:	801a      	strh	r2, [r3, #0]
 80089a2:	e03c      	b.n	8008a1e <USB_EPStartXfer+0x858>
 80089a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089a8:	085b      	lsrs	r3, r3, #1
 80089aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80089ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089b2:	f003 0301 	and.w	r3, r3, #1
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d004      	beq.n	80089c4 <USB_EPStartXfer+0x7fe>
 80089ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089be:	3301      	adds	r3, #1
 80089c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80089c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	029b      	lsls	r3, r3, #10
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d0:	801a      	strh	r2, [r3, #0]
 80089d2:	e024      	b.n	8008a1e <USB_EPStartXfer+0x858>
 80089d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	785b      	ldrb	r3, [r3, #1]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d11c      	bne.n	8008a1e <USB_EPStartXfer+0x858>
 80089e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	461a      	mov	r2, r3
 80089f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089f8:	4413      	add	r3, r2
 80089fa:	643b      	str	r3, [r7, #64]	; 0x40
 80089fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	00da      	lsls	r2, r3, #3
 8008a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008a12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a1c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	895b      	ldrh	r3, [r3, #10]
 8008a2a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	6959      	ldr	r1, [r3, #20]
 8008a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008a44:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008a48:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008a4c:	6800      	ldr	r0, [r0, #0]
 8008a4e:	f001 f82a 	bl	8009aa6 <USB_WritePMA>
 8008a52:	e213      	b.n	8008e7c <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	6a1b      	ldr	r3, [r3, #32]
 8008a60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	4413      	add	r3, r2
 8008a7e:	881b      	ldrh	r3, [r3, #0]
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a8a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	441a      	add	r2, r3
 8008aa8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ac4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ad0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	461a      	mov	r2, r3
 8008ade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ae0:	4413      	add	r3, r2
 8008ae2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	00da      	lsls	r2, r3, #3
 8008af2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008af4:	4413      	add	r3, r2
 8008af6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008afa:	65bb      	str	r3, [r7, #88]	; 0x58
 8008afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b00:	b29a      	uxth	r2, r3
 8008b02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b04:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	891b      	ldrh	r3, [r3, #8]
 8008b12:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	6959      	ldr	r1, [r3, #20]
 8008b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008b2c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008b30:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008b34:	6800      	ldr	r0, [r0, #0]
 8008b36:	f000 ffb6 	bl	8009aa6 <USB_WritePMA>
 8008b3a:	e19f      	b.n	8008e7c <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	6a1a      	ldr	r2, [r3, #32]
 8008b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b4c:	1ad2      	subs	r2, r2, r3
 8008b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	4413      	add	r3, r2
 8008b74:	881b      	ldrh	r3, [r3, #0]
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f000 80bc 	beq.w	8008cfa <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	673b      	str	r3, [r7, #112]	; 0x70
 8008b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	785b      	ldrb	r3, [r3, #1]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d16d      	bne.n	8008c7a <USB_EPStartXfer+0xab4>
 8008b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ba2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	66bb      	str	r3, [r7, #104]	; 0x68
 8008baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	461a      	mov	r2, r3
 8008bbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008bbe:	4413      	add	r3, r2
 8008bc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8008bc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	00da      	lsls	r2, r3, #3
 8008bd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008bd2:	4413      	add	r3, r2
 8008bd4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008bd8:	667b      	str	r3, [r7, #100]	; 0x64
 8008bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bde:	2b3e      	cmp	r3, #62	; 0x3e
 8008be0:	d91c      	bls.n	8008c1c <USB_EPStartXfer+0xa56>
 8008be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008be6:	095b      	lsrs	r3, r3, #5
 8008be8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bf0:	f003 031f 	and.w	r3, r3, #31
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d104      	bne.n	8008c02 <USB_EPStartXfer+0xa3c>
 8008bf8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008c02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	029b      	lsls	r3, r3, #10
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c18:	801a      	strh	r2, [r3, #0]
 8008c1a:	e053      	b.n	8008cc4 <USB_EPStartXfer+0xafe>
 8008c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d112      	bne.n	8008c4a <USB_EPStartXfer+0xa84>
 8008c24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c26:	881b      	ldrh	r3, [r3, #0]
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c32:	801a      	strh	r2, [r3, #0]
 8008c34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c36:	881b      	ldrh	r3, [r3, #0]
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c42:	b29a      	uxth	r2, r3
 8008c44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c46:	801a      	strh	r2, [r3, #0]
 8008c48:	e03c      	b.n	8008cc4 <USB_EPStartXfer+0xafe>
 8008c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c4e:	085b      	lsrs	r3, r3, #1
 8008c50:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c58:	f003 0301 	and.w	r3, r3, #1
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d004      	beq.n	8008c6a <USB_EPStartXfer+0xaa4>
 8008c60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008c64:	3301      	adds	r3, #1
 8008c66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008c6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	029b      	lsls	r3, r3, #10
 8008c72:	b29a      	uxth	r2, r3
 8008c74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c76:	801a      	strh	r2, [r3, #0]
 8008c78:	e024      	b.n	8008cc4 <USB_EPStartXfer+0xafe>
 8008c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	785b      	ldrb	r3, [r3, #1]
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d11c      	bne.n	8008cc4 <USB_EPStartXfer+0xafe>
 8008c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c9e:	4413      	add	r3, r2
 8008ca0:	673b      	str	r3, [r7, #112]	; 0x70
 8008ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ca6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	00da      	lsls	r2, r3, #3
 8008cb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008cb2:	4413      	add	r3, r2
 8008cb4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008cb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cc2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	895b      	ldrh	r3, [r3, #10]
 8008cd0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	6959      	ldr	r1, [r3, #20]
 8008ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008cea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008cee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008cf2:	6800      	ldr	r0, [r0, #0]
 8008cf4:	f000 fed7 	bl	8009aa6 <USB_WritePMA>
 8008cf8:	e0c0      	b.n	8008e7c <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	785b      	ldrb	r3, [r3, #1]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d16d      	bne.n	8008de6 <USB_EPStartXfer+0xc20>
 8008d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	461a      	mov	r2, r3
 8008d28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d2a:	4413      	add	r3, r2
 8008d2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	00da      	lsls	r2, r3, #3
 8008d3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d3e:	4413      	add	r3, r2
 8008d40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008d44:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d4a:	2b3e      	cmp	r3, #62	; 0x3e
 8008d4c:	d91c      	bls.n	8008d88 <USB_EPStartXfer+0xbc2>
 8008d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d52:	095b      	lsrs	r3, r3, #5
 8008d54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d5c:	f003 031f 	and.w	r3, r3, #31
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d104      	bne.n	8008d6e <USB_EPStartXfer+0xba8>
 8008d64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008d6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	029b      	lsls	r3, r3, #10
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d84:	801a      	strh	r2, [r3, #0]
 8008d86:	e05f      	b.n	8008e48 <USB_EPStartXfer+0xc82>
 8008d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d112      	bne.n	8008db6 <USB_EPStartXfer+0xbf0>
 8008d90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d92:	881b      	ldrh	r3, [r3, #0]
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d9a:	b29a      	uxth	r2, r3
 8008d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d9e:	801a      	strh	r2, [r3, #0]
 8008da0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008da2:	881b      	ldrh	r3, [r3, #0]
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dae:	b29a      	uxth	r2, r3
 8008db0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008db2:	801a      	strh	r2, [r3, #0]
 8008db4:	e048      	b.n	8008e48 <USB_EPStartXfer+0xc82>
 8008db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dba:	085b      	lsrs	r3, r3, #1
 8008dbc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dc4:	f003 0301 	and.w	r3, r3, #1
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d004      	beq.n	8008dd6 <USB_EPStartXfer+0xc10>
 8008dcc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008dd6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	029b      	lsls	r3, r3, #10
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008de2:	801a      	strh	r2, [r3, #0]
 8008de4:	e030      	b.n	8008e48 <USB_EPStartXfer+0xc82>
 8008de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	785b      	ldrb	r3, [r3, #1]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d128      	bne.n	8008e48 <USB_EPStartXfer+0xc82>
 8008df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	461a      	mov	r2, r3
 8008e16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e1a:	4413      	add	r3, r2
 8008e1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	00da      	lsls	r2, r3, #3
 8008e2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e32:	4413      	add	r3, r2
 8008e34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008e38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008e46:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	891b      	ldrh	r3, [r3, #8]
 8008e54:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	6959      	ldr	r1, [r3, #20]
 8008e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008e6e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008e72:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008e76:	6800      	ldr	r0, [r0, #0]
 8008e78:	f000 fe15 	bl	8009aa6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	4413      	add	r3, r2
 8008e96:	881b      	ldrh	r3, [r3, #0]
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ea2:	817b      	strh	r3, [r7, #10]
 8008ea4:	897b      	ldrh	r3, [r7, #10]
 8008ea6:	f083 0310 	eor.w	r3, r3, #16
 8008eaa:	817b      	strh	r3, [r7, #10]
 8008eac:	897b      	ldrh	r3, [r7, #10]
 8008eae:	f083 0320 	eor.w	r3, r3, #32
 8008eb2:	817b      	strh	r3, [r7, #10]
 8008eb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	441a      	add	r2, r3
 8008ece:	897b      	ldrh	r3, [r7, #10]
 8008ed0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ed4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	8013      	strh	r3, [r2, #0]
 8008ee4:	f000 bc9f 	b.w	8009826 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	7b1b      	ldrb	r3, [r3, #12]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	f040 80ae 	bne.w	8009056 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008efe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	699a      	ldr	r2, [r3, #24]
 8008f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d917      	bls.n	8008f46 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8008f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	699a      	ldr	r2, [r3, #24]
 8008f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f36:	1ad2      	subs	r2, r2, r3
 8008f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	619a      	str	r2, [r3, #24]
 8008f44:	e00e      	b.n	8008f64 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8008f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	699b      	ldr	r3, [r3, #24]
 8008f52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2200      	movs	r2, #0
 8008f62:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	461a      	mov	r2, r3
 8008f84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008f88:	4413      	add	r3, r2
 8008f8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	00da      	lsls	r2, r3, #3
 8008f9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008fa0:	4413      	add	r3, r2
 8008fa2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008fa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fae:	2b3e      	cmp	r3, #62	; 0x3e
 8008fb0:	d91d      	bls.n	8008fee <USB_EPStartXfer+0xe28>
 8008fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fb6:	095b      	lsrs	r3, r3, #5
 8008fb8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fc0:	f003 031f 	and.w	r3, r3, #31
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d104      	bne.n	8008fd2 <USB_EPStartXfer+0xe0c>
 8008fc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008fd2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	029b      	lsls	r3, r3, #10
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fe4:	b29a      	uxth	r2, r3
 8008fe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fea:	801a      	strh	r2, [r3, #0]
 8008fec:	e3e1      	b.n	80097b2 <USB_EPStartXfer+0x15ec>
 8008fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d116      	bne.n	8009024 <USB_EPStartXfer+0xe5e>
 8008ff6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ffa:	881b      	ldrh	r3, [r3, #0]
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009002:	b29a      	uxth	r2, r3
 8009004:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009008:	801a      	strh	r2, [r3, #0]
 800900a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800900e:	881b      	ldrh	r3, [r3, #0]
 8009010:	b29b      	uxth	r3, r3
 8009012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800901a:	b29a      	uxth	r2, r3
 800901c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009020:	801a      	strh	r2, [r3, #0]
 8009022:	e3c6      	b.n	80097b2 <USB_EPStartXfer+0x15ec>
 8009024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009028:	085b      	lsrs	r3, r3, #1
 800902a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800902e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009032:	f003 0301 	and.w	r3, r3, #1
 8009036:	2b00      	cmp	r3, #0
 8009038:	d004      	beq.n	8009044 <USB_EPStartXfer+0xe7e>
 800903a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800903e:	3301      	adds	r3, #1
 8009040:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009044:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009048:	b29b      	uxth	r3, r3
 800904a:	029b      	lsls	r3, r3, #10
 800904c:	b29a      	uxth	r2, r3
 800904e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009052:	801a      	strh	r2, [r3, #0]
 8009054:	e3ad      	b.n	80097b2 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800905a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	78db      	ldrb	r3, [r3, #3]
 8009062:	2b02      	cmp	r3, #2
 8009064:	f040 8200 	bne.w	8009468 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800906c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	785b      	ldrb	r3, [r3, #1]
 8009074:	2b00      	cmp	r3, #0
 8009076:	f040 8091 	bne.w	800919c <USB_EPStartXfer+0xfd6>
 800907a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800907e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800908c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009096:	b29b      	uxth	r3, r3
 8009098:	461a      	mov	r2, r3
 800909a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800909e:	4413      	add	r3, r2
 80090a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80090a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	00da      	lsls	r2, r3, #3
 80090b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80090b6:	4413      	add	r3, r2
 80090b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80090bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80090c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	691b      	ldr	r3, [r3, #16]
 80090cc:	2b3e      	cmp	r3, #62	; 0x3e
 80090ce:	d925      	bls.n	800911c <USB_EPStartXfer+0xf56>
 80090d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	691b      	ldr	r3, [r3, #16]
 80090dc:	095b      	lsrs	r3, r3, #5
 80090de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80090e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	f003 031f 	and.w	r3, r3, #31
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d104      	bne.n	8009100 <USB_EPStartXfer+0xf3a>
 80090f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090fa:	3b01      	subs	r3, #1
 80090fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009104:	b29b      	uxth	r3, r3
 8009106:	029b      	lsls	r3, r3, #10
 8009108:	b29b      	uxth	r3, r3
 800910a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800910e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009112:	b29a      	uxth	r2, r3
 8009114:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009118:	801a      	strh	r2, [r3, #0]
 800911a:	e074      	b.n	8009206 <USB_EPStartXfer+0x1040>
 800911c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d116      	bne.n	800915a <USB_EPStartXfer+0xf94>
 800912c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009130:	881b      	ldrh	r3, [r3, #0]
 8009132:	b29b      	uxth	r3, r3
 8009134:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009138:	b29a      	uxth	r2, r3
 800913a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800913e:	801a      	strh	r2, [r3, #0]
 8009140:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009144:	881b      	ldrh	r3, [r3, #0]
 8009146:	b29b      	uxth	r3, r3
 8009148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800914c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009150:	b29a      	uxth	r2, r3
 8009152:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009156:	801a      	strh	r2, [r3, #0]
 8009158:	e055      	b.n	8009206 <USB_EPStartXfer+0x1040>
 800915a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800915e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	085b      	lsrs	r3, r3, #1
 8009168:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800916c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	691b      	ldr	r3, [r3, #16]
 8009178:	f003 0301 	and.w	r3, r3, #1
 800917c:	2b00      	cmp	r3, #0
 800917e:	d004      	beq.n	800918a <USB_EPStartXfer+0xfc4>
 8009180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009184:	3301      	adds	r3, #1
 8009186:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800918a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800918e:	b29b      	uxth	r3, r3
 8009190:	029b      	lsls	r3, r3, #10
 8009192:	b29a      	uxth	r2, r3
 8009194:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009198:	801a      	strh	r2, [r3, #0]
 800919a:	e034      	b.n	8009206 <USB_EPStartXfer+0x1040>
 800919c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	785b      	ldrb	r3, [r3, #1]
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d12c      	bne.n	8009206 <USB_EPStartXfer+0x1040>
 80091ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80091ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	461a      	mov	r2, r3
 80091cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80091d0:	4413      	add	r3, r2
 80091d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80091d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	00da      	lsls	r2, r3, #3
 80091e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80091e8:	4413      	add	r3, r2
 80091ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80091ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80091f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	b29a      	uxth	r2, r3
 8009200:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009204:	801a      	strh	r2, [r3, #0]
 8009206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800920a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009218:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	785b      	ldrb	r3, [r3, #1]
 8009220:	2b00      	cmp	r3, #0
 8009222:	f040 8091 	bne.w	8009348 <USB_EPStartXfer+0x1182>
 8009226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800922a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009238:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009242:	b29b      	uxth	r3, r3
 8009244:	461a      	mov	r2, r3
 8009246:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800924a:	4413      	add	r3, r2
 800924c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009254:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	00da      	lsls	r2, r3, #3
 800925e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009262:	4413      	add	r3, r2
 8009264:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009268:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800926c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	2b3e      	cmp	r3, #62	; 0x3e
 800927a:	d925      	bls.n	80092c8 <USB_EPStartXfer+0x1102>
 800927c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009280:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	691b      	ldr	r3, [r3, #16]
 8009288:	095b      	lsrs	r3, r3, #5
 800928a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800928e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	f003 031f 	and.w	r3, r3, #31
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d104      	bne.n	80092ac <USB_EPStartXfer+0x10e6>
 80092a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092a6:	3b01      	subs	r3, #1
 80092a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80092ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	029b      	lsls	r3, r3, #10
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092be:	b29a      	uxth	r2, r3
 80092c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092c4:	801a      	strh	r2, [r3, #0]
 80092c6:	e06d      	b.n	80093a4 <USB_EPStartXfer+0x11de>
 80092c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d116      	bne.n	8009306 <USB_EPStartXfer+0x1140>
 80092d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092dc:	881b      	ldrh	r3, [r3, #0]
 80092de:	b29b      	uxth	r3, r3
 80092e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092ea:	801a      	strh	r2, [r3, #0]
 80092ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092f0:	881b      	ldrh	r3, [r3, #0]
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009302:	801a      	strh	r2, [r3, #0]
 8009304:	e04e      	b.n	80093a4 <USB_EPStartXfer+0x11de>
 8009306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800930a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	085b      	lsrs	r3, r3, #1
 8009314:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800931c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	691b      	ldr	r3, [r3, #16]
 8009324:	f003 0301 	and.w	r3, r3, #1
 8009328:	2b00      	cmp	r3, #0
 800932a:	d004      	beq.n	8009336 <USB_EPStartXfer+0x1170>
 800932c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009330:	3301      	adds	r3, #1
 8009332:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800933a:	b29b      	uxth	r3, r3
 800933c:	029b      	lsls	r3, r3, #10
 800933e:	b29a      	uxth	r2, r3
 8009340:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009344:	801a      	strh	r2, [r3, #0]
 8009346:	e02d      	b.n	80093a4 <USB_EPStartXfer+0x11de>
 8009348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800934c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	785b      	ldrb	r3, [r3, #1]
 8009354:	2b01      	cmp	r3, #1
 8009356:	d125      	bne.n	80093a4 <USB_EPStartXfer+0x11de>
 8009358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800935c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009366:	b29b      	uxth	r3, r3
 8009368:	461a      	mov	r2, r3
 800936a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800936e:	4413      	add	r3, r2
 8009370:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009378:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	00da      	lsls	r2, r3, #3
 8009382:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009386:	4413      	add	r3, r2
 8009388:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800938c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	b29a      	uxth	r2, r3
 800939e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80093a2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80093a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	69db      	ldr	r3, [r3, #28]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f000 81fe 	beq.w	80097b2 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80093b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	4413      	add	r3, r2
 80093d0:	881b      	ldrh	r3, [r3, #0]
 80093d2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80093d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80093da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d005      	beq.n	80093ee <USB_EPStartXfer+0x1228>
 80093e2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80093e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d10d      	bne.n	800940a <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80093ee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80093f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f040 81db 	bne.w	80097b2 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80093fc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009404:	2b00      	cmp	r3, #0
 8009406:	f040 81d4 	bne.w	80097b2 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800940a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800940e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4413      	add	r3, r2
 8009424:	881b      	ldrh	r3, [r3, #0]
 8009426:	b29b      	uxth	r3, r3
 8009428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800942c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009430:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009438:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	441a      	add	r2, r3
 800944e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800945a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800945e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009462:	b29b      	uxth	r3, r3
 8009464:	8013      	strh	r3, [r2, #0]
 8009466:	e1a4      	b.n	80097b2 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800946c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	78db      	ldrb	r3, [r3, #3]
 8009474:	2b01      	cmp	r3, #1
 8009476:	f040 819a 	bne.w	80097ae <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800947a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800947e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	699a      	ldr	r2, [r3, #24]
 8009486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800948a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	429a      	cmp	r2, r3
 8009494:	d917      	bls.n	80094c6 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8009496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800949a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80094a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	699a      	ldr	r2, [r3, #24]
 80094b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094b6:	1ad2      	subs	r2, r2, r3
 80094b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	619a      	str	r2, [r3, #24]
 80094c4:	e00e      	b.n	80094e4 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 80094c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	699b      	ldr	r3, [r3, #24]
 80094d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80094d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2200      	movs	r2, #0
 80094e2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80094e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	785b      	ldrb	r3, [r3, #1]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d178      	bne.n	80095e6 <USB_EPStartXfer+0x1420>
 80094f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009506:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009510:	b29b      	uxth	r3, r3
 8009512:	461a      	mov	r2, r3
 8009514:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009518:	4413      	add	r3, r2
 800951a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800951e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009522:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	00da      	lsls	r2, r3, #3
 800952c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009530:	4413      	add	r3, r2
 8009532:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009536:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800953a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800953e:	2b3e      	cmp	r3, #62	; 0x3e
 8009540:	d91d      	bls.n	800957e <USB_EPStartXfer+0x13b8>
 8009542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009546:	095b      	lsrs	r3, r3, #5
 8009548:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800954c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009550:	f003 031f 	and.w	r3, r3, #31
 8009554:	2b00      	cmp	r3, #0
 8009556:	d104      	bne.n	8009562 <USB_EPStartXfer+0x139c>
 8009558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800955c:	3b01      	subs	r3, #1
 800955e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009566:	b29b      	uxth	r3, r3
 8009568:	029b      	lsls	r3, r3, #10
 800956a:	b29b      	uxth	r3, r3
 800956c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009574:	b29a      	uxth	r2, r3
 8009576:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800957a:	801a      	strh	r2, [r3, #0]
 800957c:	e064      	b.n	8009648 <USB_EPStartXfer+0x1482>
 800957e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009582:	2b00      	cmp	r3, #0
 8009584:	d116      	bne.n	80095b4 <USB_EPStartXfer+0x13ee>
 8009586:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800958a:	881b      	ldrh	r3, [r3, #0]
 800958c:	b29b      	uxth	r3, r3
 800958e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009592:	b29a      	uxth	r2, r3
 8009594:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009598:	801a      	strh	r2, [r3, #0]
 800959a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800959e:	881b      	ldrh	r3, [r3, #0]
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095aa:	b29a      	uxth	r2, r3
 80095ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095b0:	801a      	strh	r2, [r3, #0]
 80095b2:	e049      	b.n	8009648 <USB_EPStartXfer+0x1482>
 80095b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095b8:	085b      	lsrs	r3, r3, #1
 80095ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80095be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095c2:	f003 0301 	and.w	r3, r3, #1
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d004      	beq.n	80095d4 <USB_EPStartXfer+0x140e>
 80095ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095ce:	3301      	adds	r3, #1
 80095d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80095d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095d8:	b29b      	uxth	r3, r3
 80095da:	029b      	lsls	r3, r3, #10
 80095dc:	b29a      	uxth	r2, r3
 80095de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095e2:	801a      	strh	r2, [r3, #0]
 80095e4:	e030      	b.n	8009648 <USB_EPStartXfer+0x1482>
 80095e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	785b      	ldrb	r3, [r3, #1]
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d128      	bne.n	8009648 <USB_EPStartXfer+0x1482>
 80095f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009608:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009612:	b29b      	uxth	r3, r3
 8009614:	461a      	mov	r2, r3
 8009616:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800961a:	4413      	add	r3, r2
 800961c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	00da      	lsls	r2, r3, #3
 800962e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009632:	4413      	add	r3, r2
 8009634:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009638:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800963c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009640:	b29a      	uxth	r2, r3
 8009642:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009646:	801a      	strh	r2, [r3, #0]
 8009648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800964c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800965a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	785b      	ldrb	r3, [r3, #1]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d178      	bne.n	8009758 <USB_EPStartXfer+0x1592>
 8009666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800966a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009678:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009682:	b29b      	uxth	r3, r3
 8009684:	461a      	mov	r2, r3
 8009686:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800968a:	4413      	add	r3, r2
 800968c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	00da      	lsls	r2, r3, #3
 800969e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80096a2:	4413      	add	r3, r2
 80096a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80096a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80096ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096b0:	2b3e      	cmp	r3, #62	; 0x3e
 80096b2:	d91d      	bls.n	80096f0 <USB_EPStartXfer+0x152a>
 80096b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096b8:	095b      	lsrs	r3, r3, #5
 80096ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80096be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096c2:	f003 031f 	and.w	r3, r3, #31
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d104      	bne.n	80096d4 <USB_EPStartXfer+0x150e>
 80096ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096ce:	3b01      	subs	r3, #1
 80096d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80096d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096d8:	b29b      	uxth	r3, r3
 80096da:	029b      	lsls	r3, r3, #10
 80096dc:	b29b      	uxth	r3, r3
 80096de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096ec:	801a      	strh	r2, [r3, #0]
 80096ee:	e060      	b.n	80097b2 <USB_EPStartXfer+0x15ec>
 80096f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d116      	bne.n	8009726 <USB_EPStartXfer+0x1560>
 80096f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096fc:	881b      	ldrh	r3, [r3, #0]
 80096fe:	b29b      	uxth	r3, r3
 8009700:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009704:	b29a      	uxth	r2, r3
 8009706:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800970a:	801a      	strh	r2, [r3, #0]
 800970c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009710:	881b      	ldrh	r3, [r3, #0]
 8009712:	b29b      	uxth	r3, r3
 8009714:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009718:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800971c:	b29a      	uxth	r2, r3
 800971e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009722:	801a      	strh	r2, [r3, #0]
 8009724:	e045      	b.n	80097b2 <USB_EPStartXfer+0x15ec>
 8009726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800972a:	085b      	lsrs	r3, r3, #1
 800972c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009734:	f003 0301 	and.w	r3, r3, #1
 8009738:	2b00      	cmp	r3, #0
 800973a:	d004      	beq.n	8009746 <USB_EPStartXfer+0x1580>
 800973c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009740:	3301      	adds	r3, #1
 8009742:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009746:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800974a:	b29b      	uxth	r3, r3
 800974c:	029b      	lsls	r3, r3, #10
 800974e:	b29a      	uxth	r2, r3
 8009750:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009754:	801a      	strh	r2, [r3, #0]
 8009756:	e02c      	b.n	80097b2 <USB_EPStartXfer+0x15ec>
 8009758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800975c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	785b      	ldrb	r3, [r3, #1]
 8009764:	2b01      	cmp	r3, #1
 8009766:	d124      	bne.n	80097b2 <USB_EPStartXfer+0x15ec>
 8009768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800976c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009776:	b29b      	uxth	r3, r3
 8009778:	461a      	mov	r2, r3
 800977a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800977e:	4413      	add	r3, r2
 8009780:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	00da      	lsls	r2, r3, #3
 8009792:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009796:	4413      	add	r3, r2
 8009798:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800979c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80097a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097a4:	b29a      	uxth	r2, r3
 80097a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80097aa:	801a      	strh	r2, [r3, #0]
 80097ac:	e001      	b.n	80097b2 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	e03a      	b.n	8009828 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80097b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	4413      	add	r3, r2
 80097cc:	881b      	ldrh	r3, [r3, #0]
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097d8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80097dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80097e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80097e4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80097e8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80097ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80097f0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80097f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	441a      	add	r2, r3
 800980e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800981a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800981e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009822:	b29b      	uxth	r3, r3
 8009824:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}

08009832 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009832:	b480      	push	{r7}
 8009834:	b085      	sub	sp, #20
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
 800983a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	785b      	ldrb	r3, [r3, #1]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d020      	beq.n	8009886 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	4413      	add	r3, r2
 800984e:	881b      	ldrh	r3, [r3, #0]
 8009850:	b29b      	uxth	r3, r3
 8009852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009856:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800985a:	81bb      	strh	r3, [r7, #12]
 800985c:	89bb      	ldrh	r3, [r7, #12]
 800985e:	f083 0310 	eor.w	r3, r3, #16
 8009862:	81bb      	strh	r3, [r7, #12]
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	441a      	add	r2, r3
 800986e:	89bb      	ldrh	r3, [r7, #12]
 8009870:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009874:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009878:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800987c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009880:	b29b      	uxth	r3, r3
 8009882:	8013      	strh	r3, [r2, #0]
 8009884:	e01f      	b.n	80098c6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	4413      	add	r3, r2
 8009890:	881b      	ldrh	r3, [r3, #0]
 8009892:	b29b      	uxth	r3, r3
 8009894:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800989c:	81fb      	strh	r3, [r7, #14]
 800989e:	89fb      	ldrh	r3, [r7, #14]
 80098a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80098a4:	81fb      	strh	r3, [r7, #14]
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	441a      	add	r2, r3
 80098b0:	89fb      	ldrh	r3, [r7, #14]
 80098b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3714      	adds	r7, #20
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b087      	sub	sp, #28
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	7b1b      	ldrb	r3, [r3, #12]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	f040 809d 	bne.w	8009a22 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	785b      	ldrb	r3, [r3, #1]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d04c      	beq.n	800998a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	4413      	add	r3, r2
 80098fa:	881b      	ldrh	r3, [r3, #0]
 80098fc:	823b      	strh	r3, [r7, #16]
 80098fe:	8a3b      	ldrh	r3, [r7, #16]
 8009900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009904:	2b00      	cmp	r3, #0
 8009906:	d01b      	beq.n	8009940 <USB_EPClearStall+0x6c>
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	4413      	add	r3, r2
 8009912:	881b      	ldrh	r3, [r3, #0]
 8009914:	b29b      	uxth	r3, r3
 8009916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800991a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800991e:	81fb      	strh	r3, [r7, #14]
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	441a      	add	r2, r3
 800992a:	89fb      	ldrh	r3, [r7, #14]
 800992c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009930:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009934:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009938:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800993c:	b29b      	uxth	r3, r3
 800993e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	78db      	ldrb	r3, [r3, #3]
 8009944:	2b01      	cmp	r3, #1
 8009946:	d06c      	beq.n	8009a22 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	4413      	add	r3, r2
 8009952:	881b      	ldrh	r3, [r3, #0]
 8009954:	b29b      	uxth	r3, r3
 8009956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800995a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800995e:	81bb      	strh	r3, [r7, #12]
 8009960:	89bb      	ldrh	r3, [r7, #12]
 8009962:	f083 0320 	eor.w	r3, r3, #32
 8009966:	81bb      	strh	r3, [r7, #12]
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	441a      	add	r2, r3
 8009972:	89bb      	ldrh	r3, [r7, #12]
 8009974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800997c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009984:	b29b      	uxth	r3, r3
 8009986:	8013      	strh	r3, [r2, #0]
 8009988:	e04b      	b.n	8009a22 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	4413      	add	r3, r2
 8009994:	881b      	ldrh	r3, [r3, #0]
 8009996:	82fb      	strh	r3, [r7, #22]
 8009998:	8afb      	ldrh	r3, [r7, #22]
 800999a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d01b      	beq.n	80099da <USB_EPClearStall+0x106>
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	4413      	add	r3, r2
 80099ac:	881b      	ldrh	r3, [r3, #0]
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099b8:	82bb      	strh	r3, [r7, #20]
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	441a      	add	r2, r3
 80099c4:	8abb      	ldrh	r3, [r7, #20]
 80099c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80099d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	4413      	add	r3, r2
 80099e4:	881b      	ldrh	r3, [r3, #0]
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099f0:	827b      	strh	r3, [r7, #18]
 80099f2:	8a7b      	ldrh	r3, [r7, #18]
 80099f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80099f8:	827b      	strh	r3, [r7, #18]
 80099fa:	8a7b      	ldrh	r3, [r7, #18]
 80099fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009a00:	827b      	strh	r3, [r7, #18]
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	441a      	add	r2, r3
 8009a0c:	8a7b      	ldrh	r3, [r7, #18]
 8009a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009a22:	2300      	movs	r3, #0
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	371c      	adds	r7, #28
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	460b      	mov	r3, r1
 8009a3a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009a3c:	78fb      	ldrb	r3, [r7, #3]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d103      	bne.n	8009a4a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2280      	movs	r2, #128	; 0x80
 8009a46:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	370c      	adds	r7, #12
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a70:	b29a      	uxth	r2, r3
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	370c      	adds	r7, #12
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr

08009a86 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009a86:	b480      	push	{r7}
 8009a88:	b085      	sub	sp, #20
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009a98:	68fb      	ldr	r3, [r7, #12]
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3714      	adds	r7, #20
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr

08009aa6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009aa6:	b480      	push	{r7}
 8009aa8:	b08d      	sub	sp, #52	; 0x34
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	60f8      	str	r0, [r7, #12]
 8009aae:	60b9      	str	r1, [r7, #8]
 8009ab0:	4611      	mov	r1, r2
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	80fb      	strh	r3, [r7, #6]
 8009ab8:	4613      	mov	r3, r2
 8009aba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009abc:	88bb      	ldrh	r3, [r7, #4]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	085b      	lsrs	r3, r3, #1
 8009ac2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009acc:	88fa      	ldrh	r2, [r7, #6]
 8009ace:	69fb      	ldr	r3, [r7, #28]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ad6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009ad8:	6a3b      	ldr	r3, [r7, #32]
 8009ada:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009adc:	e01b      	b.n	8009b16 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8009ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	021b      	lsls	r3, r3, #8
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	461a      	mov	r2, r3
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	4313      	orrs	r3, r2
 8009afa:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	b29a      	uxth	r2, r3
 8009b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b02:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b06:	3302      	adds	r3, #2
 8009b08:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b12:	3b01      	subs	r3, #1
 8009b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1e0      	bne.n	8009ade <USB_WritePMA+0x38>
  }
}
 8009b1c:	bf00      	nop
 8009b1e:	bf00      	nop
 8009b20:	3734      	adds	r7, #52	; 0x34
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr

08009b2a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009b2a:	b480      	push	{r7}
 8009b2c:	b08b      	sub	sp, #44	; 0x2c
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	60f8      	str	r0, [r7, #12]
 8009b32:	60b9      	str	r1, [r7, #8]
 8009b34:	4611      	mov	r1, r2
 8009b36:	461a      	mov	r2, r3
 8009b38:	460b      	mov	r3, r1
 8009b3a:	80fb      	strh	r3, [r7, #6]
 8009b3c:	4613      	mov	r3, r2
 8009b3e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009b40:	88bb      	ldrh	r3, [r7, #4]
 8009b42:	085b      	lsrs	r3, r3, #1
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009b50:	88fa      	ldrh	r2, [r7, #6]
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	4413      	add	r3, r2
 8009b56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b5a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009b5c:	69bb      	ldr	r3, [r7, #24]
 8009b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8009b60:	e018      	b.n	8009b94 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009b62:	6a3b      	ldr	r3, [r7, #32]
 8009b64:	881b      	ldrh	r3, [r3, #0]
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009b6a:	6a3b      	ldr	r3, [r7, #32]
 8009b6c:	3302      	adds	r3, #2
 8009b6e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	b2da      	uxtb	r2, r3
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	0a1b      	lsrs	r3, r3, #8
 8009b82:	b2da      	uxtb	r2, r3
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009b88:	69fb      	ldr	r3, [r7, #28]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8009b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b90:	3b01      	subs	r3, #1
 8009b92:	627b      	str	r3, [r7, #36]	; 0x24
 8009b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d1e3      	bne.n	8009b62 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009b9a:	88bb      	ldrh	r3, [r7, #4]
 8009b9c:	f003 0301 	and.w	r3, r3, #1
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d007      	beq.n	8009bb6 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8009ba6:	6a3b      	ldr	r3, [r7, #32]
 8009ba8:	881b      	ldrh	r3, [r3, #0]
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	b2da      	uxtb	r2, r3
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	701a      	strb	r2, [r3, #0]
  }
}
 8009bb6:	bf00      	nop
 8009bb8:	372c      	adds	r7, #44	; 0x2c
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr

08009bc2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b084      	sub	sp, #16
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	460b      	mov	r3, r1
 8009bcc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009bce:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009bd2:	f002 f917 	bl	800be04 <USBD_static_malloc>
 8009bd6:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d105      	bne.n	8009bea <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009be6:	2302      	movs	r3, #2
 8009be8:	e066      	b.n	8009cb8 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	7c1b      	ldrb	r3, [r3, #16]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d119      	bne.n	8009c2e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009bfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bfe:	2202      	movs	r2, #2
 8009c00:	2181      	movs	r1, #129	; 0x81
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f001 ffa3 	bl	800bb4e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009c0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c12:	2202      	movs	r2, #2
 8009c14:	2101      	movs	r1, #1
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f001 ff99 	bl	800bb4e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2210      	movs	r2, #16
 8009c28:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009c2c:	e016      	b.n	8009c5c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009c2e:	2340      	movs	r3, #64	; 0x40
 8009c30:	2202      	movs	r2, #2
 8009c32:	2181      	movs	r1, #129	; 0x81
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f001 ff8a 	bl	800bb4e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009c40:	2340      	movs	r3, #64	; 0x40
 8009c42:	2202      	movs	r2, #2
 8009c44:	2101      	movs	r1, #1
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f001 ff81 	bl	800bb4e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2210      	movs	r2, #16
 8009c58:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009c5c:	2308      	movs	r3, #8
 8009c5e:	2203      	movs	r2, #3
 8009c60:	2182      	movs	r1, #130	; 0x82
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f001 ff73 	bl	800bb4e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2200      	movs	r2, #0
 8009c86:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	7c1b      	ldrb	r3, [r3, #16]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d109      	bne.n	8009ca6 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c9c:	2101      	movs	r1, #1
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f002 f845 	bl	800bd2e <USBD_LL_PrepareReceive>
 8009ca4:	e007      	b.n	8009cb6 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009cac:	2340      	movs	r3, #64	; 0x40
 8009cae:	2101      	movs	r1, #1
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f002 f83c 	bl	800bd2e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3710      	adds	r7, #16
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	460b      	mov	r3, r1
 8009cca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009ccc:	2181      	movs	r1, #129	; 0x81
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f001 ff63 	bl	800bb9a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009cda:	2101      	movs	r1, #1
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f001 ff5c 	bl	800bb9a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009cea:	2182      	movs	r1, #130	; 0x82
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f001 ff54 	bl	800bb9a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d00e      	beq.n	8009d2a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f002 f87f 	bl	800be20 <USBD_static_free>
    pdev->pClassData = NULL;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2200      	movs	r2, #0
 8009d26:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b086      	sub	sp, #24
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d44:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009d46:	2300      	movs	r3, #0
 8009d48:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d101      	bne.n	8009d5c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009d58:	2303      	movs	r3, #3
 8009d5a:	e0af      	b.n	8009ebc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d03f      	beq.n	8009de8 <USBD_CDC_Setup+0xb4>
 8009d68:	2b20      	cmp	r3, #32
 8009d6a:	f040 809f 	bne.w	8009eac <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	88db      	ldrh	r3, [r3, #6]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d02e      	beq.n	8009dd4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	b25b      	sxtb	r3, r3
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	da16      	bge.n	8009dae <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	683a      	ldr	r2, [r7, #0]
 8009d8a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009d8c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d8e:	683a      	ldr	r2, [r7, #0]
 8009d90:	88d2      	ldrh	r2, [r2, #6]
 8009d92:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	88db      	ldrh	r3, [r3, #6]
 8009d98:	2b07      	cmp	r3, #7
 8009d9a:	bf28      	it	cs
 8009d9c:	2307      	movcs	r3, #7
 8009d9e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	89fa      	ldrh	r2, [r7, #14]
 8009da4:	4619      	mov	r1, r3
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f001 facf 	bl	800b34a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009dac:	e085      	b.n	8009eba <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	785a      	ldrb	r2, [r3, #1]
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	88db      	ldrh	r3, [r3, #6]
 8009dbc:	b2da      	uxtb	r2, r3
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009dc4:	6939      	ldr	r1, [r7, #16]
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	88db      	ldrh	r3, [r3, #6]
 8009dca:	461a      	mov	r2, r3
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f001 fae8 	bl	800b3a2 <USBD_CtlPrepareRx>
      break;
 8009dd2:	e072      	b.n	8009eba <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	683a      	ldr	r2, [r7, #0]
 8009dde:	7850      	ldrb	r0, [r2, #1]
 8009de0:	2200      	movs	r2, #0
 8009de2:	6839      	ldr	r1, [r7, #0]
 8009de4:	4798      	blx	r3
      break;
 8009de6:	e068      	b.n	8009eba <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	785b      	ldrb	r3, [r3, #1]
 8009dec:	2b0b      	cmp	r3, #11
 8009dee:	d852      	bhi.n	8009e96 <USBD_CDC_Setup+0x162>
 8009df0:	a201      	add	r2, pc, #4	; (adr r2, 8009df8 <USBD_CDC_Setup+0xc4>)
 8009df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df6:	bf00      	nop
 8009df8:	08009e29 	.word	0x08009e29
 8009dfc:	08009ea5 	.word	0x08009ea5
 8009e00:	08009e97 	.word	0x08009e97
 8009e04:	08009e97 	.word	0x08009e97
 8009e08:	08009e97 	.word	0x08009e97
 8009e0c:	08009e97 	.word	0x08009e97
 8009e10:	08009e97 	.word	0x08009e97
 8009e14:	08009e97 	.word	0x08009e97
 8009e18:	08009e97 	.word	0x08009e97
 8009e1c:	08009e97 	.word	0x08009e97
 8009e20:	08009e53 	.word	0x08009e53
 8009e24:	08009e7d 	.word	0x08009e7d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	2b03      	cmp	r3, #3
 8009e32:	d107      	bne.n	8009e44 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009e34:	f107 030a 	add.w	r3, r7, #10
 8009e38:	2202      	movs	r2, #2
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f001 fa84 	bl	800b34a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e42:	e032      	b.n	8009eaa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009e44:	6839      	ldr	r1, [r7, #0]
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f001 fa0e 	bl	800b268 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e4c:	2303      	movs	r3, #3
 8009e4e:	75fb      	strb	r3, [r7, #23]
          break;
 8009e50:	e02b      	b.n	8009eaa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	2b03      	cmp	r3, #3
 8009e5c:	d107      	bne.n	8009e6e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009e5e:	f107 030d 	add.w	r3, r7, #13
 8009e62:	2201      	movs	r2, #1
 8009e64:	4619      	mov	r1, r3
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f001 fa6f 	bl	800b34a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e6c:	e01d      	b.n	8009eaa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009e6e:	6839      	ldr	r1, [r7, #0]
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f001 f9f9 	bl	800b268 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e76:	2303      	movs	r3, #3
 8009e78:	75fb      	strb	r3, [r7, #23]
          break;
 8009e7a:	e016      	b.n	8009eaa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	2b03      	cmp	r3, #3
 8009e86:	d00f      	beq.n	8009ea8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009e88:	6839      	ldr	r1, [r7, #0]
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f001 f9ec 	bl	800b268 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e90:	2303      	movs	r3, #3
 8009e92:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009e94:	e008      	b.n	8009ea8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009e96:	6839      	ldr	r1, [r7, #0]
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f001 f9e5 	bl	800b268 <USBD_CtlError>
          ret = USBD_FAIL;
 8009e9e:	2303      	movs	r3, #3
 8009ea0:	75fb      	strb	r3, [r7, #23]
          break;
 8009ea2:	e002      	b.n	8009eaa <USBD_CDC_Setup+0x176>
          break;
 8009ea4:	bf00      	nop
 8009ea6:	e008      	b.n	8009eba <USBD_CDC_Setup+0x186>
          break;
 8009ea8:	bf00      	nop
      }
      break;
 8009eaa:	e006      	b.n	8009eba <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009eac:	6839      	ldr	r1, [r7, #0]
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f001 f9da 	bl	800b268 <USBD_CtlError>
      ret = USBD_FAIL;
 8009eb4:	2303      	movs	r3, #3
 8009eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8009eb8:	bf00      	nop
  }

  return (uint8_t)ret;
 8009eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3718      	adds	r7, #24
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	460b      	mov	r3, r1
 8009ece:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ed6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d101      	bne.n	8009ee6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009ee2:	2303      	movs	r3, #3
 8009ee4:	e04f      	b.n	8009f86 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009eec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009eee:	78fa      	ldrb	r2, [r7, #3]
 8009ef0:	6879      	ldr	r1, [r7, #4]
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	4413      	add	r3, r2
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	440b      	add	r3, r1
 8009efc:	3318      	adds	r3, #24
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d029      	beq.n	8009f58 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009f04:	78fa      	ldrb	r2, [r7, #3]
 8009f06:	6879      	ldr	r1, [r7, #4]
 8009f08:	4613      	mov	r3, r2
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	4413      	add	r3, r2
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	440b      	add	r3, r1
 8009f12:	3318      	adds	r3, #24
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	78f9      	ldrb	r1, [r7, #3]
 8009f18:	68f8      	ldr	r0, [r7, #12]
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	440b      	add	r3, r1
 8009f20:	00db      	lsls	r3, r3, #3
 8009f22:	4403      	add	r3, r0
 8009f24:	3338      	adds	r3, #56	; 0x38
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	fbb2 f1f3 	udiv	r1, r2, r3
 8009f2c:	fb01 f303 	mul.w	r3, r1, r3
 8009f30:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d110      	bne.n	8009f58 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009f36:	78fa      	ldrb	r2, [r7, #3]
 8009f38:	6879      	ldr	r1, [r7, #4]
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4413      	add	r3, r2
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	440b      	add	r3, r1
 8009f44:	3318      	adds	r3, #24
 8009f46:	2200      	movs	r2, #0
 8009f48:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009f4a:	78f9      	ldrb	r1, [r7, #3]
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	2200      	movs	r2, #0
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f001 fecb 	bl	800bcec <USBD_LL_Transmit>
 8009f56:	e015      	b.n	8009f84 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d00b      	beq.n	8009f84 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f72:	691b      	ldr	r3, [r3, #16]
 8009f74:	68ba      	ldr	r2, [r7, #8]
 8009f76:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009f7a:	68ba      	ldr	r2, [r7, #8]
 8009f7c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009f80:	78fa      	ldrb	r2, [r7, #3]
 8009f82:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3710      	adds	r7, #16
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}

08009f8e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f8e:	b580      	push	{r7, lr}
 8009f90:	b084      	sub	sp, #16
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
 8009f96:	460b      	mov	r3, r1
 8009f98:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fa0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d101      	bne.n	8009fb0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009fac:	2303      	movs	r3, #3
 8009fae:	e015      	b.n	8009fdc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009fb0:	78fb      	ldrb	r3, [r7, #3]
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f001 fedb 	bl	800bd70 <USBD_LL_GetRxDataSize>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	68fa      	ldr	r2, [r7, #12]
 8009fcc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009fd0:	68fa      	ldr	r2, [r7, #12]
 8009fd2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009fd6:	4611      	mov	r1, r2
 8009fd8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ff2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d101      	bne.n	8009ffe <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009ffa:	2303      	movs	r3, #3
 8009ffc:	e01b      	b.n	800a036 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a004:	2b00      	cmp	r3, #0
 800a006:	d015      	beq.n	800a034 <USBD_CDC_EP0_RxReady+0x50>
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a00e:	2bff      	cmp	r3, #255	; 0xff
 800a010:	d010      	beq.n	800a034 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	68fa      	ldr	r2, [r7, #12]
 800a01c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a020:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a022:	68fa      	ldr	r2, [r7, #12]
 800a024:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a028:	b292      	uxth	r2, r2
 800a02a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	22ff      	movs	r2, #255	; 0xff
 800a030:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a034:	2300      	movs	r3, #0
}
 800a036:	4618      	mov	r0, r3
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
	...

0800a040 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2243      	movs	r2, #67	; 0x43
 800a04c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a04e:	4b03      	ldr	r3, [pc, #12]	; (800a05c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a050:	4618      	mov	r0, r3
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr
 800a05c:	200000a4 	.word	0x200000a4

0800a060 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2243      	movs	r2, #67	; 0x43
 800a06c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a06e:	4b03      	ldr	r3, [pc, #12]	; (800a07c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a070:	4618      	mov	r0, r3
 800a072:	370c      	adds	r7, #12
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr
 800a07c:	20000060 	.word	0x20000060

0800a080 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2243      	movs	r2, #67	; 0x43
 800a08c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a08e:	4b03      	ldr	r3, [pc, #12]	; (800a09c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a090:	4618      	mov	r0, r3
 800a092:	370c      	adds	r7, #12
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr
 800a09c:	200000e8 	.word	0x200000e8

0800a0a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b083      	sub	sp, #12
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	220a      	movs	r2, #10
 800a0ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a0ae:	4b03      	ldr	r3, [pc, #12]	; (800a0bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr
 800a0bc:	2000001c 	.word	0x2000001c

0800a0c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d101      	bne.n	800a0d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a0d0:	2303      	movs	r3, #3
 800a0d2:	e004      	b.n	800a0de <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	683a      	ldr	r2, [r7, #0]
 800a0d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	370c      	adds	r7, #12
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr

0800a0ea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a0ea:	b480      	push	{r7}
 800a0ec:	b087      	sub	sp, #28
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	60f8      	str	r0, [r7, #12]
 800a0f2:	60b9      	str	r1, [r7, #8]
 800a0f4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0fc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d101      	bne.n	800a108 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a104:	2303      	movs	r3, #3
 800a106:	e008      	b.n	800a11a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	68ba      	ldr	r2, [r7, #8]
 800a10c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	371c      	adds	r7, #28
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr

0800a126 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a126:	b480      	push	{r7}
 800a128:	b085      	sub	sp, #20
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
 800a12e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a136:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d101      	bne.n	800a142 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a13e:	2303      	movs	r3, #3
 800a140:	e004      	b.n	800a14c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	683a      	ldr	r2, [r7, #0]
 800a146:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a14a:	2300      	movs	r3, #0
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3714      	adds	r7, #20
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr

0800a158 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a166:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a168:	2301      	movs	r3, #1
 800a16a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a172:	2b00      	cmp	r3, #0
 800a174:	d101      	bne.n	800a17a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a176:	2303      	movs	r3, #3
 800a178:	e01a      	b.n	800a1b0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a180:	2b00      	cmp	r3, #0
 800a182:	d114      	bne.n	800a1ae <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	2201      	movs	r2, #1
 800a188:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a1a2:	2181      	movs	r1, #129	; 0x81
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f001 fda1 	bl	800bcec <USBD_LL_Transmit>

    ret = USBD_OK;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a1ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3710      	adds	r7, #16
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d101      	bne.n	800a1d6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a1d2:	2303      	movs	r3, #3
 800a1d4:	e016      	b.n	800a204 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	7c1b      	ldrb	r3, [r3, #16]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d109      	bne.n	800a1f2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1e8:	2101      	movs	r1, #1
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f001 fd9f 	bl	800bd2e <USBD_LL_PrepareReceive>
 800a1f0:	e007      	b.n	800a202 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1f8:	2340      	movs	r3, #64	; 0x40
 800a1fa:	2101      	movs	r1, #1
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f001 fd96 	bl	800bd2e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a202:	2300      	movs	r3, #0
}
 800a204:	4618      	mov	r0, r3
 800a206:	3710      	adds	r7, #16
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b086      	sub	sp, #24
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	4613      	mov	r3, r2
 800a218:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d101      	bne.n	800a224 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a220:	2303      	movs	r3, #3
 800a222:	e01f      	b.n	800a264 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2200      	movs	r2, #0
 800a228:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2200      	movs	r2, #0
 800a230:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2200      	movs	r2, #0
 800a238:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d003      	beq.n	800a24a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	68ba      	ldr	r2, [r7, #8]
 800a246:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2201      	movs	r2, #1
 800a24e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	79fa      	ldrb	r2, [r7, #7]
 800a256:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	f001 fbfd 	bl	800ba58 <USBD_LL_Init>
 800a25e:	4603      	mov	r3, r0
 800a260:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a262:	7dfb      	ldrb	r3, [r7, #23]
}
 800a264:	4618      	mov	r0, r3
 800a266:	3718      	adds	r7, #24
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a276:	2300      	movs	r3, #0
 800a278:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d101      	bne.n	800a284 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a280:	2303      	movs	r3, #3
 800a282:	e016      	b.n	800a2b2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	683a      	ldr	r2, [r7, #0]
 800a288:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a294:	2b00      	cmp	r3, #0
 800a296:	d00b      	beq.n	800a2b0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a0:	f107 020e 	add.w	r2, r7, #14
 800a2a4:	4610      	mov	r0, r2
 800a2a6:	4798      	blx	r3
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a2b0:	2300      	movs	r3, #0
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3710      	adds	r7, #16
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a2ba:	b580      	push	{r7, lr}
 800a2bc:	b082      	sub	sp, #8
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f001 fc28 	bl	800bb18 <USBD_LL_Start>
 800a2c8:	4603      	mov	r3, r0
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3708      	adds	r7, #8
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}

0800a2d2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a2d2:	b480      	push	{r7}
 800a2d4:	b083      	sub	sp, #12
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a2da:	2300      	movs	r3, #0
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a2f4:	2303      	movs	r3, #3
 800a2f6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d009      	beq.n	800a316 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	78fa      	ldrb	r2, [r7, #3]
 800a30c:	4611      	mov	r1, r2
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	4798      	blx	r3
 800a312:	4603      	mov	r3, r0
 800a314:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a316:	7bfb      	ldrb	r3, [r7, #15]
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3710      	adds	r7, #16
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	460b      	mov	r3, r1
 800a32a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a332:	2b00      	cmp	r3, #0
 800a334:	d007      	beq.n	800a346 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	78fa      	ldrb	r2, [r7, #3]
 800a340:	4611      	mov	r1, r2
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	4798      	blx	r3
  }

  return USBD_OK;
 800a346:	2300      	movs	r3, #0
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3708      	adds	r7, #8
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a360:	6839      	ldr	r1, [r7, #0]
 800a362:	4618      	mov	r0, r3
 800a364:	f000 ff46 	bl	800b1f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2201      	movs	r2, #1
 800a36c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a376:	461a      	mov	r2, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a384:	f003 031f 	and.w	r3, r3, #31
 800a388:	2b02      	cmp	r3, #2
 800a38a:	d01a      	beq.n	800a3c2 <USBD_LL_SetupStage+0x72>
 800a38c:	2b02      	cmp	r3, #2
 800a38e:	d822      	bhi.n	800a3d6 <USBD_LL_SetupStage+0x86>
 800a390:	2b00      	cmp	r3, #0
 800a392:	d002      	beq.n	800a39a <USBD_LL_SetupStage+0x4a>
 800a394:	2b01      	cmp	r3, #1
 800a396:	d00a      	beq.n	800a3ae <USBD_LL_SetupStage+0x5e>
 800a398:	e01d      	b.n	800a3d6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 f9ee 	bl	800a784 <USBD_StdDevReq>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	73fb      	strb	r3, [r7, #15]
      break;
 800a3ac:	e020      	b.n	800a3f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 fa52 	bl	800a860 <USBD_StdItfReq>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	73fb      	strb	r3, [r7, #15]
      break;
 800a3c0:	e016      	b.n	800a3f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 fa91 	bl	800a8f2 <USBD_StdEPReq>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	73fb      	strb	r3, [r7, #15]
      break;
 800a3d4:	e00c      	b.n	800a3f0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a3dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f001 fbf7 	bl	800bbd8 <USBD_LL_StallEP>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	73fb      	strb	r3, [r7, #15]
      break;
 800a3ee:	bf00      	nop
  }

  return ret;
 800a3f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3710      	adds	r7, #16
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b086      	sub	sp, #24
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	60f8      	str	r0, [r7, #12]
 800a402:	460b      	mov	r3, r1
 800a404:	607a      	str	r2, [r7, #4]
 800a406:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a408:	7afb      	ldrb	r3, [r7, #11]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d138      	bne.n	800a480 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a414:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a41c:	2b03      	cmp	r3, #3
 800a41e:	d14a      	bne.n	800a4b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	689a      	ldr	r2, [r3, #8]
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d913      	bls.n	800a454 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	689a      	ldr	r2, [r3, #8]
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	1ad2      	subs	r2, r2, r3
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	68da      	ldr	r2, [r3, #12]
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	4293      	cmp	r3, r2
 800a444:	bf28      	it	cs
 800a446:	4613      	movcs	r3, r2
 800a448:	461a      	mov	r2, r3
 800a44a:	6879      	ldr	r1, [r7, #4]
 800a44c:	68f8      	ldr	r0, [r7, #12]
 800a44e:	f000 ffc5 	bl	800b3dc <USBD_CtlContinueRx>
 800a452:	e030      	b.n	800a4b6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	2b03      	cmp	r3, #3
 800a45e:	d10b      	bne.n	800a478 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a466:	691b      	ldr	r3, [r3, #16]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d005      	beq.n	800a478 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	68f8      	ldr	r0, [r7, #12]
 800a476:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a478:	68f8      	ldr	r0, [r7, #12]
 800a47a:	f000 ffc0 	bl	800b3fe <USBD_CtlSendStatus>
 800a47e:	e01a      	b.n	800a4b6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a486:	b2db      	uxtb	r3, r3
 800a488:	2b03      	cmp	r3, #3
 800a48a:	d114      	bne.n	800a4b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a492:	699b      	ldr	r3, [r3, #24]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d00e      	beq.n	800a4b6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a49e:	699b      	ldr	r3, [r3, #24]
 800a4a0:	7afa      	ldrb	r2, [r7, #11]
 800a4a2:	4611      	mov	r1, r2
 800a4a4:	68f8      	ldr	r0, [r7, #12]
 800a4a6:	4798      	blx	r3
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a4ac:	7dfb      	ldrb	r3, [r7, #23]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d001      	beq.n	800a4b6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a4b2:	7dfb      	ldrb	r3, [r7, #23]
 800a4b4:	e000      	b.n	800a4b8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3718      	adds	r7, #24
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b086      	sub	sp, #24
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	607a      	str	r2, [r7, #4]
 800a4cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a4ce:	7afb      	ldrb	r3, [r7, #11]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d16b      	bne.n	800a5ac <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	3314      	adds	r3, #20
 800a4d8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a4e0:	2b02      	cmp	r3, #2
 800a4e2:	d156      	bne.n	800a592 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	689a      	ldr	r2, [r3, #8]
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d914      	bls.n	800a51a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	689a      	ldr	r2, [r3, #8]
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	68db      	ldr	r3, [r3, #12]
 800a4f8:	1ad2      	subs	r2, r2, r3
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	461a      	mov	r2, r3
 800a504:	6879      	ldr	r1, [r7, #4]
 800a506:	68f8      	ldr	r0, [r7, #12]
 800a508:	f000 ff3a 	bl	800b380 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a50c:	2300      	movs	r3, #0
 800a50e:	2200      	movs	r2, #0
 800a510:	2100      	movs	r1, #0
 800a512:	68f8      	ldr	r0, [r7, #12]
 800a514:	f001 fc0b 	bl	800bd2e <USBD_LL_PrepareReceive>
 800a518:	e03b      	b.n	800a592 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	68da      	ldr	r2, [r3, #12]
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	429a      	cmp	r2, r3
 800a524:	d11c      	bne.n	800a560 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	685a      	ldr	r2, [r3, #4]
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a52e:	429a      	cmp	r2, r3
 800a530:	d316      	bcc.n	800a560 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	685a      	ldr	r2, [r3, #4]
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d20f      	bcs.n	800a560 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a540:	2200      	movs	r2, #0
 800a542:	2100      	movs	r1, #0
 800a544:	68f8      	ldr	r0, [r7, #12]
 800a546:	f000 ff1b 	bl	800b380 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2200      	movs	r2, #0
 800a54e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a552:	2300      	movs	r3, #0
 800a554:	2200      	movs	r2, #0
 800a556:	2100      	movs	r1, #0
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	f001 fbe8 	bl	800bd2e <USBD_LL_PrepareReceive>
 800a55e:	e018      	b.n	800a592 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a566:	b2db      	uxtb	r3, r3
 800a568:	2b03      	cmp	r3, #3
 800a56a:	d10b      	bne.n	800a584 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d005      	beq.n	800a584 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	68f8      	ldr	r0, [r7, #12]
 800a582:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a584:	2180      	movs	r1, #128	; 0x80
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f001 fb26 	bl	800bbd8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a58c:	68f8      	ldr	r0, [r7, #12]
 800a58e:	f000 ff49 	bl	800b424 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d122      	bne.n	800a5e2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a59c:	68f8      	ldr	r0, [r7, #12]
 800a59e:	f7ff fe98 	bl	800a2d2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a5aa:	e01a      	b.n	800a5e2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	2b03      	cmp	r3, #3
 800a5b6:	d114      	bne.n	800a5e2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5be:	695b      	ldr	r3, [r3, #20]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d00e      	beq.n	800a5e2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5ca:	695b      	ldr	r3, [r3, #20]
 800a5cc:	7afa      	ldrb	r2, [r7, #11]
 800a5ce:	4611      	mov	r1, r2
 800a5d0:	68f8      	ldr	r0, [r7, #12]
 800a5d2:	4798      	blx	r3
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a5d8:	7dfb      	ldrb	r3, [r7, #23]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d001      	beq.n	800a5e2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a5de:	7dfb      	ldrb	r3, [r7, #23]
 800a5e0:	e000      	b.n	800a5e4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a5e2:	2300      	movs	r3, #0
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3718      	adds	r7, #24
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d101      	bne.n	800a620 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a61c:	2303      	movs	r3, #3
 800a61e:	e02f      	b.n	800a680 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00f      	beq.n	800a64a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d009      	beq.n	800a64a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	6852      	ldr	r2, [r2, #4]
 800a642:	b2d2      	uxtb	r2, r2
 800a644:	4611      	mov	r1, r2
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a64a:	2340      	movs	r3, #64	; 0x40
 800a64c:	2200      	movs	r2, #0
 800a64e:	2100      	movs	r1, #0
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f001 fa7c 	bl	800bb4e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2201      	movs	r2, #1
 800a65a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2240      	movs	r2, #64	; 0x40
 800a662:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a666:	2340      	movs	r3, #64	; 0x40
 800a668:	2200      	movs	r2, #0
 800a66a:	2180      	movs	r1, #128	; 0x80
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f001 fa6e 	bl	800bb4e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2201      	movs	r2, #1
 800a676:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2240      	movs	r2, #64	; 0x40
 800a67c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a67e:	2300      	movs	r3, #0
}
 800a680:	4618      	mov	r0, r3
 800a682:	3708      	adds	r7, #8
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a688:	b480      	push	{r7}
 800a68a:	b083      	sub	sp, #12
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	460b      	mov	r3, r1
 800a692:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	78fa      	ldrb	r2, [r7, #3]
 800a698:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6b6:	b2da      	uxtb	r2, r3
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2204      	movs	r2, #4
 800a6c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a6c6:	2300      	movs	r3, #0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	370c      	adds	r7, #12
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr

0800a6d4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	2b04      	cmp	r3, #4
 800a6e6:	d106      	bne.n	800a6f6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a6ee:	b2da      	uxtb	r2, r3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a6f6:	2300      	movs	r3, #0
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	370c      	adds	r7, #12
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b082      	sub	sp, #8
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a712:	2b00      	cmp	r3, #0
 800a714:	d101      	bne.n	800a71a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a716:	2303      	movs	r3, #3
 800a718:	e012      	b.n	800a740 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a720:	b2db      	uxtb	r3, r3
 800a722:	2b03      	cmp	r3, #3
 800a724:	d10b      	bne.n	800a73e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a72c:	69db      	ldr	r3, [r3, #28]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d005      	beq.n	800a73e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a738:	69db      	ldr	r3, [r3, #28]
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a73e:	2300      	movs	r3, #0
}
 800a740:	4618      	mov	r0, r3
 800a742:	3708      	adds	r7, #8
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a748:	b480      	push	{r7}
 800a74a:	b087      	sub	sp, #28
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	3301      	adds	r3, #1
 800a75e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a766:	8a3b      	ldrh	r3, [r7, #16]
 800a768:	021b      	lsls	r3, r3, #8
 800a76a:	b21a      	sxth	r2, r3
 800a76c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a770:	4313      	orrs	r3, r2
 800a772:	b21b      	sxth	r3, r3
 800a774:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a776:	89fb      	ldrh	r3, [r7, #14]
}
 800a778:	4618      	mov	r0, r3
 800a77a:	371c      	adds	r7, #28
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a78e:	2300      	movs	r3, #0
 800a790:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a79a:	2b40      	cmp	r3, #64	; 0x40
 800a79c:	d005      	beq.n	800a7aa <USBD_StdDevReq+0x26>
 800a79e:	2b40      	cmp	r3, #64	; 0x40
 800a7a0:	d853      	bhi.n	800a84a <USBD_StdDevReq+0xc6>
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d00b      	beq.n	800a7be <USBD_StdDevReq+0x3a>
 800a7a6:	2b20      	cmp	r3, #32
 800a7a8:	d14f      	bne.n	800a84a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	6839      	ldr	r1, [r7, #0]
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	4798      	blx	r3
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	73fb      	strb	r3, [r7, #15]
      break;
 800a7bc:	e04a      	b.n	800a854 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	785b      	ldrb	r3, [r3, #1]
 800a7c2:	2b09      	cmp	r3, #9
 800a7c4:	d83b      	bhi.n	800a83e <USBD_StdDevReq+0xba>
 800a7c6:	a201      	add	r2, pc, #4	; (adr r2, 800a7cc <USBD_StdDevReq+0x48>)
 800a7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7cc:	0800a821 	.word	0x0800a821
 800a7d0:	0800a835 	.word	0x0800a835
 800a7d4:	0800a83f 	.word	0x0800a83f
 800a7d8:	0800a82b 	.word	0x0800a82b
 800a7dc:	0800a83f 	.word	0x0800a83f
 800a7e0:	0800a7ff 	.word	0x0800a7ff
 800a7e4:	0800a7f5 	.word	0x0800a7f5
 800a7e8:	0800a83f 	.word	0x0800a83f
 800a7ec:	0800a817 	.word	0x0800a817
 800a7f0:	0800a809 	.word	0x0800a809
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a7f4:	6839      	ldr	r1, [r7, #0]
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 f9de 	bl	800abb8 <USBD_GetDescriptor>
          break;
 800a7fc:	e024      	b.n	800a848 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a7fe:	6839      	ldr	r1, [r7, #0]
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 fb6d 	bl	800aee0 <USBD_SetAddress>
          break;
 800a806:	e01f      	b.n	800a848 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a808:	6839      	ldr	r1, [r7, #0]
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 fbac 	bl	800af68 <USBD_SetConfig>
 800a810:	4603      	mov	r3, r0
 800a812:	73fb      	strb	r3, [r7, #15]
          break;
 800a814:	e018      	b.n	800a848 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a816:	6839      	ldr	r1, [r7, #0]
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 fc4b 	bl	800b0b4 <USBD_GetConfig>
          break;
 800a81e:	e013      	b.n	800a848 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a820:	6839      	ldr	r1, [r7, #0]
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 fc7c 	bl	800b120 <USBD_GetStatus>
          break;
 800a828:	e00e      	b.n	800a848 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a82a:	6839      	ldr	r1, [r7, #0]
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 fcab 	bl	800b188 <USBD_SetFeature>
          break;
 800a832:	e009      	b.n	800a848 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a834:	6839      	ldr	r1, [r7, #0]
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 fcba 	bl	800b1b0 <USBD_ClrFeature>
          break;
 800a83c:	e004      	b.n	800a848 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a83e:	6839      	ldr	r1, [r7, #0]
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 fd11 	bl	800b268 <USBD_CtlError>
          break;
 800a846:	bf00      	nop
      }
      break;
 800a848:	e004      	b.n	800a854 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a84a:	6839      	ldr	r1, [r7, #0]
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 fd0b 	bl	800b268 <USBD_CtlError>
      break;
 800a852:	bf00      	nop
  }

  return ret;
 800a854:	7bfb      	ldrb	r3, [r7, #15]
}
 800a856:	4618      	mov	r0, r3
 800a858:	3710      	adds	r7, #16
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	bf00      	nop

0800a860 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b084      	sub	sp, #16
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a86a:	2300      	movs	r3, #0
 800a86c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a876:	2b40      	cmp	r3, #64	; 0x40
 800a878:	d005      	beq.n	800a886 <USBD_StdItfReq+0x26>
 800a87a:	2b40      	cmp	r3, #64	; 0x40
 800a87c:	d82f      	bhi.n	800a8de <USBD_StdItfReq+0x7e>
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d001      	beq.n	800a886 <USBD_StdItfReq+0x26>
 800a882:	2b20      	cmp	r3, #32
 800a884:	d12b      	bne.n	800a8de <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	3b01      	subs	r3, #1
 800a890:	2b02      	cmp	r3, #2
 800a892:	d81d      	bhi.n	800a8d0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	889b      	ldrh	r3, [r3, #4]
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d813      	bhi.n	800a8c6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8a4:	689b      	ldr	r3, [r3, #8]
 800a8a6:	6839      	ldr	r1, [r7, #0]
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	4798      	blx	r3
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	88db      	ldrh	r3, [r3, #6]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d110      	bne.n	800a8da <USBD_StdItfReq+0x7a>
 800a8b8:	7bfb      	ldrb	r3, [r7, #15]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d10d      	bne.n	800a8da <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 fd9d 	bl	800b3fe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a8c4:	e009      	b.n	800a8da <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a8c6:	6839      	ldr	r1, [r7, #0]
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 fccd 	bl	800b268 <USBD_CtlError>
          break;
 800a8ce:	e004      	b.n	800a8da <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a8d0:	6839      	ldr	r1, [r7, #0]
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 fcc8 	bl	800b268 <USBD_CtlError>
          break;
 800a8d8:	e000      	b.n	800a8dc <USBD_StdItfReq+0x7c>
          break;
 800a8da:	bf00      	nop
      }
      break;
 800a8dc:	e004      	b.n	800a8e8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a8de:	6839      	ldr	r1, [r7, #0]
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 fcc1 	bl	800b268 <USBD_CtlError>
      break;
 800a8e6:	bf00      	nop
  }

  return ret;
 800a8e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b084      	sub	sp, #16
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
 800a8fa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	889b      	ldrh	r3, [r3, #4]
 800a904:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a90e:	2b40      	cmp	r3, #64	; 0x40
 800a910:	d007      	beq.n	800a922 <USBD_StdEPReq+0x30>
 800a912:	2b40      	cmp	r3, #64	; 0x40
 800a914:	f200 8145 	bhi.w	800aba2 <USBD_StdEPReq+0x2b0>
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d00c      	beq.n	800a936 <USBD_StdEPReq+0x44>
 800a91c:	2b20      	cmp	r3, #32
 800a91e:	f040 8140 	bne.w	800aba2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	6839      	ldr	r1, [r7, #0]
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	4798      	blx	r3
 800a930:	4603      	mov	r3, r0
 800a932:	73fb      	strb	r3, [r7, #15]
      break;
 800a934:	e13a      	b.n	800abac <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	785b      	ldrb	r3, [r3, #1]
 800a93a:	2b03      	cmp	r3, #3
 800a93c:	d007      	beq.n	800a94e <USBD_StdEPReq+0x5c>
 800a93e:	2b03      	cmp	r3, #3
 800a940:	f300 8129 	bgt.w	800ab96 <USBD_StdEPReq+0x2a4>
 800a944:	2b00      	cmp	r3, #0
 800a946:	d07f      	beq.n	800aa48 <USBD_StdEPReq+0x156>
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d03c      	beq.n	800a9c6 <USBD_StdEPReq+0xd4>
 800a94c:	e123      	b.n	800ab96 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a954:	b2db      	uxtb	r3, r3
 800a956:	2b02      	cmp	r3, #2
 800a958:	d002      	beq.n	800a960 <USBD_StdEPReq+0x6e>
 800a95a:	2b03      	cmp	r3, #3
 800a95c:	d016      	beq.n	800a98c <USBD_StdEPReq+0x9a>
 800a95e:	e02c      	b.n	800a9ba <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a960:	7bbb      	ldrb	r3, [r7, #14]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d00d      	beq.n	800a982 <USBD_StdEPReq+0x90>
 800a966:	7bbb      	ldrb	r3, [r7, #14]
 800a968:	2b80      	cmp	r3, #128	; 0x80
 800a96a:	d00a      	beq.n	800a982 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a96c:	7bbb      	ldrb	r3, [r7, #14]
 800a96e:	4619      	mov	r1, r3
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f001 f931 	bl	800bbd8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a976:	2180      	movs	r1, #128	; 0x80
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f001 f92d 	bl	800bbd8 <USBD_LL_StallEP>
 800a97e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a980:	e020      	b.n	800a9c4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a982:	6839      	ldr	r1, [r7, #0]
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f000 fc6f 	bl	800b268 <USBD_CtlError>
              break;
 800a98a:	e01b      	b.n	800a9c4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	885b      	ldrh	r3, [r3, #2]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d10e      	bne.n	800a9b2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a994:	7bbb      	ldrb	r3, [r7, #14]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d00b      	beq.n	800a9b2 <USBD_StdEPReq+0xc0>
 800a99a:	7bbb      	ldrb	r3, [r7, #14]
 800a99c:	2b80      	cmp	r3, #128	; 0x80
 800a99e:	d008      	beq.n	800a9b2 <USBD_StdEPReq+0xc0>
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	88db      	ldrh	r3, [r3, #6]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d104      	bne.n	800a9b2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9a8:	7bbb      	ldrb	r3, [r7, #14]
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f001 f913 	bl	800bbd8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 fd23 	bl	800b3fe <USBD_CtlSendStatus>

              break;
 800a9b8:	e004      	b.n	800a9c4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a9ba:	6839      	ldr	r1, [r7, #0]
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 fc53 	bl	800b268 <USBD_CtlError>
              break;
 800a9c2:	bf00      	nop
          }
          break;
 800a9c4:	e0ec      	b.n	800aba0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	2b02      	cmp	r3, #2
 800a9d0:	d002      	beq.n	800a9d8 <USBD_StdEPReq+0xe6>
 800a9d2:	2b03      	cmp	r3, #3
 800a9d4:	d016      	beq.n	800aa04 <USBD_StdEPReq+0x112>
 800a9d6:	e030      	b.n	800aa3a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9d8:	7bbb      	ldrb	r3, [r7, #14]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00d      	beq.n	800a9fa <USBD_StdEPReq+0x108>
 800a9de:	7bbb      	ldrb	r3, [r7, #14]
 800a9e0:	2b80      	cmp	r3, #128	; 0x80
 800a9e2:	d00a      	beq.n	800a9fa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9e4:	7bbb      	ldrb	r3, [r7, #14]
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f001 f8f5 	bl	800bbd8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9ee:	2180      	movs	r1, #128	; 0x80
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f001 f8f1 	bl	800bbd8 <USBD_LL_StallEP>
 800a9f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a9f8:	e025      	b.n	800aa46 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a9fa:	6839      	ldr	r1, [r7, #0]
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 fc33 	bl	800b268 <USBD_CtlError>
              break;
 800aa02:	e020      	b.n	800aa46 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	885b      	ldrh	r3, [r3, #2]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d11b      	bne.n	800aa44 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aa0c:	7bbb      	ldrb	r3, [r7, #14]
 800aa0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d004      	beq.n	800aa20 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aa16:	7bbb      	ldrb	r3, [r7, #14]
 800aa18:	4619      	mov	r1, r3
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f001 f8fb 	bl	800bc16 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 fcec 	bl	800b3fe <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	6839      	ldr	r1, [r7, #0]
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	4798      	blx	r3
 800aa34:	4603      	mov	r3, r0
 800aa36:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800aa38:	e004      	b.n	800aa44 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800aa3a:	6839      	ldr	r1, [r7, #0]
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 fc13 	bl	800b268 <USBD_CtlError>
              break;
 800aa42:	e000      	b.n	800aa46 <USBD_StdEPReq+0x154>
              break;
 800aa44:	bf00      	nop
          }
          break;
 800aa46:	e0ab      	b.n	800aba0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	2b02      	cmp	r3, #2
 800aa52:	d002      	beq.n	800aa5a <USBD_StdEPReq+0x168>
 800aa54:	2b03      	cmp	r3, #3
 800aa56:	d032      	beq.n	800aabe <USBD_StdEPReq+0x1cc>
 800aa58:	e097      	b.n	800ab8a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa5a:	7bbb      	ldrb	r3, [r7, #14]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d007      	beq.n	800aa70 <USBD_StdEPReq+0x17e>
 800aa60:	7bbb      	ldrb	r3, [r7, #14]
 800aa62:	2b80      	cmp	r3, #128	; 0x80
 800aa64:	d004      	beq.n	800aa70 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800aa66:	6839      	ldr	r1, [r7, #0]
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 fbfd 	bl	800b268 <USBD_CtlError>
                break;
 800aa6e:	e091      	b.n	800ab94 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	da0b      	bge.n	800aa90 <USBD_StdEPReq+0x19e>
 800aa78:	7bbb      	ldrb	r3, [r7, #14]
 800aa7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa7e:	4613      	mov	r3, r2
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	4413      	add	r3, r2
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	3310      	adds	r3, #16
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	4413      	add	r3, r2
 800aa8c:	3304      	adds	r3, #4
 800aa8e:	e00b      	b.n	800aaa8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa90:	7bbb      	ldrb	r3, [r7, #14]
 800aa92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa96:	4613      	mov	r3, r2
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	4413      	add	r3, r2
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	3304      	adds	r3, #4
 800aaa8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	2200      	movs	r2, #0
 800aaae:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	2202      	movs	r2, #2
 800aab4:	4619      	mov	r1, r3
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 fc47 	bl	800b34a <USBD_CtlSendData>
              break;
 800aabc:	e06a      	b.n	800ab94 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aabe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	da11      	bge.n	800aaea <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aac6:	7bbb      	ldrb	r3, [r7, #14]
 800aac8:	f003 020f 	and.w	r2, r3, #15
 800aacc:	6879      	ldr	r1, [r7, #4]
 800aace:	4613      	mov	r3, r2
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	4413      	add	r3, r2
 800aad4:	009b      	lsls	r3, r3, #2
 800aad6:	440b      	add	r3, r1
 800aad8:	3324      	adds	r3, #36	; 0x24
 800aada:	881b      	ldrh	r3, [r3, #0]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d117      	bne.n	800ab10 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800aae0:	6839      	ldr	r1, [r7, #0]
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f000 fbc0 	bl	800b268 <USBD_CtlError>
                  break;
 800aae8:	e054      	b.n	800ab94 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aaea:	7bbb      	ldrb	r3, [r7, #14]
 800aaec:	f003 020f 	and.w	r2, r3, #15
 800aaf0:	6879      	ldr	r1, [r7, #4]
 800aaf2:	4613      	mov	r3, r2
 800aaf4:	009b      	lsls	r3, r3, #2
 800aaf6:	4413      	add	r3, r2
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	440b      	add	r3, r1
 800aafc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ab00:	881b      	ldrh	r3, [r3, #0]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d104      	bne.n	800ab10 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ab06:	6839      	ldr	r1, [r7, #0]
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 fbad 	bl	800b268 <USBD_CtlError>
                  break;
 800ab0e:	e041      	b.n	800ab94 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	da0b      	bge.n	800ab30 <USBD_StdEPReq+0x23e>
 800ab18:	7bbb      	ldrb	r3, [r7, #14]
 800ab1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab1e:	4613      	mov	r3, r2
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	4413      	add	r3, r2
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	3310      	adds	r3, #16
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	4413      	add	r3, r2
 800ab2c:	3304      	adds	r3, #4
 800ab2e:	e00b      	b.n	800ab48 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab30:	7bbb      	ldrb	r3, [r7, #14]
 800ab32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab36:	4613      	mov	r3, r2
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	4413      	add	r3, r2
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	4413      	add	r3, r2
 800ab46:	3304      	adds	r3, #4
 800ab48:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ab4a:	7bbb      	ldrb	r3, [r7, #14]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d002      	beq.n	800ab56 <USBD_StdEPReq+0x264>
 800ab50:	7bbb      	ldrb	r3, [r7, #14]
 800ab52:	2b80      	cmp	r3, #128	; 0x80
 800ab54:	d103      	bne.n	800ab5e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	601a      	str	r2, [r3, #0]
 800ab5c:	e00e      	b.n	800ab7c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ab5e:	7bbb      	ldrb	r3, [r7, #14]
 800ab60:	4619      	mov	r1, r3
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f001 f876 	bl	800bc54 <USBD_LL_IsStallEP>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d003      	beq.n	800ab76 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	2201      	movs	r2, #1
 800ab72:	601a      	str	r2, [r3, #0]
 800ab74:	e002      	b.n	800ab7c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	2202      	movs	r2, #2
 800ab80:	4619      	mov	r1, r3
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f000 fbe1 	bl	800b34a <USBD_CtlSendData>
              break;
 800ab88:	e004      	b.n	800ab94 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ab8a:	6839      	ldr	r1, [r7, #0]
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f000 fb6b 	bl	800b268 <USBD_CtlError>
              break;
 800ab92:	bf00      	nop
          }
          break;
 800ab94:	e004      	b.n	800aba0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ab96:	6839      	ldr	r1, [r7, #0]
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 fb65 	bl	800b268 <USBD_CtlError>
          break;
 800ab9e:	bf00      	nop
      }
      break;
 800aba0:	e004      	b.n	800abac <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800aba2:	6839      	ldr	r1, [r7, #0]
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 fb5f 	bl	800b268 <USBD_CtlError>
      break;
 800abaa:	bf00      	nop
  }

  return ret;
 800abac:	7bfb      	ldrb	r3, [r7, #15]
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3710      	adds	r7, #16
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
	...

0800abb8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800abc2:	2300      	movs	r3, #0
 800abc4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800abc6:	2300      	movs	r3, #0
 800abc8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800abca:	2300      	movs	r3, #0
 800abcc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	885b      	ldrh	r3, [r3, #2]
 800abd2:	0a1b      	lsrs	r3, r3, #8
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	3b01      	subs	r3, #1
 800abd8:	2b0e      	cmp	r3, #14
 800abda:	f200 8152 	bhi.w	800ae82 <USBD_GetDescriptor+0x2ca>
 800abde:	a201      	add	r2, pc, #4	; (adr r2, 800abe4 <USBD_GetDescriptor+0x2c>)
 800abe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe4:	0800ac55 	.word	0x0800ac55
 800abe8:	0800ac6d 	.word	0x0800ac6d
 800abec:	0800acad 	.word	0x0800acad
 800abf0:	0800ae83 	.word	0x0800ae83
 800abf4:	0800ae83 	.word	0x0800ae83
 800abf8:	0800ae23 	.word	0x0800ae23
 800abfc:	0800ae4f 	.word	0x0800ae4f
 800ac00:	0800ae83 	.word	0x0800ae83
 800ac04:	0800ae83 	.word	0x0800ae83
 800ac08:	0800ae83 	.word	0x0800ae83
 800ac0c:	0800ae83 	.word	0x0800ae83
 800ac10:	0800ae83 	.word	0x0800ae83
 800ac14:	0800ae83 	.word	0x0800ae83
 800ac18:	0800ae83 	.word	0x0800ae83
 800ac1c:	0800ac21 	.word	0x0800ac21
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac26:	69db      	ldr	r3, [r3, #28]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d00b      	beq.n	800ac44 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac32:	69db      	ldr	r3, [r3, #28]
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	7c12      	ldrb	r2, [r2, #16]
 800ac38:	f107 0108 	add.w	r1, r7, #8
 800ac3c:	4610      	mov	r0, r2
 800ac3e:	4798      	blx	r3
 800ac40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac42:	e126      	b.n	800ae92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ac44:	6839      	ldr	r1, [r7, #0]
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 fb0e 	bl	800b268 <USBD_CtlError>
        err++;
 800ac4c:	7afb      	ldrb	r3, [r7, #11]
 800ac4e:	3301      	adds	r3, #1
 800ac50:	72fb      	strb	r3, [r7, #11]
      break;
 800ac52:	e11e      	b.n	800ae92 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	7c12      	ldrb	r2, [r2, #16]
 800ac60:	f107 0108 	add.w	r1, r7, #8
 800ac64:	4610      	mov	r0, r2
 800ac66:	4798      	blx	r3
 800ac68:	60f8      	str	r0, [r7, #12]
      break;
 800ac6a:	e112      	b.n	800ae92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	7c1b      	ldrb	r3, [r3, #16]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d10d      	bne.n	800ac90 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac7c:	f107 0208 	add.w	r2, r7, #8
 800ac80:	4610      	mov	r0, r2
 800ac82:	4798      	blx	r3
 800ac84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	3301      	adds	r3, #1
 800ac8a:	2202      	movs	r2, #2
 800ac8c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ac8e:	e100      	b.n	800ae92 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac98:	f107 0208 	add.w	r2, r7, #8
 800ac9c:	4610      	mov	r0, r2
 800ac9e:	4798      	blx	r3
 800aca0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	3301      	adds	r3, #1
 800aca6:	2202      	movs	r2, #2
 800aca8:	701a      	strb	r2, [r3, #0]
      break;
 800acaa:	e0f2      	b.n	800ae92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	885b      	ldrh	r3, [r3, #2]
 800acb0:	b2db      	uxtb	r3, r3
 800acb2:	2b05      	cmp	r3, #5
 800acb4:	f200 80ac 	bhi.w	800ae10 <USBD_GetDescriptor+0x258>
 800acb8:	a201      	add	r2, pc, #4	; (adr r2, 800acc0 <USBD_GetDescriptor+0x108>)
 800acba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acbe:	bf00      	nop
 800acc0:	0800acd9 	.word	0x0800acd9
 800acc4:	0800ad0d 	.word	0x0800ad0d
 800acc8:	0800ad41 	.word	0x0800ad41
 800accc:	0800ad75 	.word	0x0800ad75
 800acd0:	0800ada9 	.word	0x0800ada9
 800acd4:	0800addd 	.word	0x0800addd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d00b      	beq.n	800acfc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	7c12      	ldrb	r2, [r2, #16]
 800acf0:	f107 0108 	add.w	r1, r7, #8
 800acf4:	4610      	mov	r0, r2
 800acf6:	4798      	blx	r3
 800acf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acfa:	e091      	b.n	800ae20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800acfc:	6839      	ldr	r1, [r7, #0]
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 fab2 	bl	800b268 <USBD_CtlError>
            err++;
 800ad04:	7afb      	ldrb	r3, [r7, #11]
 800ad06:	3301      	adds	r3, #1
 800ad08:	72fb      	strb	r3, [r7, #11]
          break;
 800ad0a:	e089      	b.n	800ae20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad12:	689b      	ldr	r3, [r3, #8]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d00b      	beq.n	800ad30 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	7c12      	ldrb	r2, [r2, #16]
 800ad24:	f107 0108 	add.w	r1, r7, #8
 800ad28:	4610      	mov	r0, r2
 800ad2a:	4798      	blx	r3
 800ad2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad2e:	e077      	b.n	800ae20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad30:	6839      	ldr	r1, [r7, #0]
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f000 fa98 	bl	800b268 <USBD_CtlError>
            err++;
 800ad38:	7afb      	ldrb	r3, [r7, #11]
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad3e:	e06f      	b.n	800ae20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d00b      	beq.n	800ad64 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad52:	68db      	ldr	r3, [r3, #12]
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	7c12      	ldrb	r2, [r2, #16]
 800ad58:	f107 0108 	add.w	r1, r7, #8
 800ad5c:	4610      	mov	r0, r2
 800ad5e:	4798      	blx	r3
 800ad60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad62:	e05d      	b.n	800ae20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad64:	6839      	ldr	r1, [r7, #0]
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 fa7e 	bl	800b268 <USBD_CtlError>
            err++;
 800ad6c:	7afb      	ldrb	r3, [r7, #11]
 800ad6e:	3301      	adds	r3, #1
 800ad70:	72fb      	strb	r3, [r7, #11]
          break;
 800ad72:	e055      	b.n	800ae20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad7a:	691b      	ldr	r3, [r3, #16]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d00b      	beq.n	800ad98 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad86:	691b      	ldr	r3, [r3, #16]
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	7c12      	ldrb	r2, [r2, #16]
 800ad8c:	f107 0108 	add.w	r1, r7, #8
 800ad90:	4610      	mov	r0, r2
 800ad92:	4798      	blx	r3
 800ad94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad96:	e043      	b.n	800ae20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad98:	6839      	ldr	r1, [r7, #0]
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 fa64 	bl	800b268 <USBD_CtlError>
            err++;
 800ada0:	7afb      	ldrb	r3, [r7, #11]
 800ada2:	3301      	adds	r3, #1
 800ada4:	72fb      	strb	r3, [r7, #11]
          break;
 800ada6:	e03b      	b.n	800ae20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adae:	695b      	ldr	r3, [r3, #20]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d00b      	beq.n	800adcc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adba:	695b      	ldr	r3, [r3, #20]
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	7c12      	ldrb	r2, [r2, #16]
 800adc0:	f107 0108 	add.w	r1, r7, #8
 800adc4:	4610      	mov	r0, r2
 800adc6:	4798      	blx	r3
 800adc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adca:	e029      	b.n	800ae20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800adcc:	6839      	ldr	r1, [r7, #0]
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f000 fa4a 	bl	800b268 <USBD_CtlError>
            err++;
 800add4:	7afb      	ldrb	r3, [r7, #11]
 800add6:	3301      	adds	r3, #1
 800add8:	72fb      	strb	r3, [r7, #11]
          break;
 800adda:	e021      	b.n	800ae20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ade2:	699b      	ldr	r3, [r3, #24]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d00b      	beq.n	800ae00 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adee:	699b      	ldr	r3, [r3, #24]
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	7c12      	ldrb	r2, [r2, #16]
 800adf4:	f107 0108 	add.w	r1, r7, #8
 800adf8:	4610      	mov	r0, r2
 800adfa:	4798      	blx	r3
 800adfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adfe:	e00f      	b.n	800ae20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae00:	6839      	ldr	r1, [r7, #0]
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 fa30 	bl	800b268 <USBD_CtlError>
            err++;
 800ae08:	7afb      	ldrb	r3, [r7, #11]
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	72fb      	strb	r3, [r7, #11]
          break;
 800ae0e:	e007      	b.n	800ae20 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ae10:	6839      	ldr	r1, [r7, #0]
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 fa28 	bl	800b268 <USBD_CtlError>
          err++;
 800ae18:	7afb      	ldrb	r3, [r7, #11]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ae1e:	bf00      	nop
      }
      break;
 800ae20:	e037      	b.n	800ae92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	7c1b      	ldrb	r3, [r3, #16]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d109      	bne.n	800ae3e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae32:	f107 0208 	add.w	r2, r7, #8
 800ae36:	4610      	mov	r0, r2
 800ae38:	4798      	blx	r3
 800ae3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae3c:	e029      	b.n	800ae92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ae3e:	6839      	ldr	r1, [r7, #0]
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f000 fa11 	bl	800b268 <USBD_CtlError>
        err++;
 800ae46:	7afb      	ldrb	r3, [r7, #11]
 800ae48:	3301      	adds	r3, #1
 800ae4a:	72fb      	strb	r3, [r7, #11]
      break;
 800ae4c:	e021      	b.n	800ae92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	7c1b      	ldrb	r3, [r3, #16]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d10d      	bne.n	800ae72 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae5e:	f107 0208 	add.w	r2, r7, #8
 800ae62:	4610      	mov	r0, r2
 800ae64:	4798      	blx	r3
 800ae66:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	2207      	movs	r2, #7
 800ae6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae70:	e00f      	b.n	800ae92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ae72:	6839      	ldr	r1, [r7, #0]
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 f9f7 	bl	800b268 <USBD_CtlError>
        err++;
 800ae7a:	7afb      	ldrb	r3, [r7, #11]
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	72fb      	strb	r3, [r7, #11]
      break;
 800ae80:	e007      	b.n	800ae92 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ae82:	6839      	ldr	r1, [r7, #0]
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 f9ef 	bl	800b268 <USBD_CtlError>
      err++;
 800ae8a:	7afb      	ldrb	r3, [r7, #11]
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	72fb      	strb	r3, [r7, #11]
      break;
 800ae90:	bf00      	nop
  }

  if (err != 0U)
 800ae92:	7afb      	ldrb	r3, [r7, #11]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d11e      	bne.n	800aed6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	88db      	ldrh	r3, [r3, #6]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d016      	beq.n	800aece <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800aea0:	893b      	ldrh	r3, [r7, #8]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d00e      	beq.n	800aec4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	88da      	ldrh	r2, [r3, #6]
 800aeaa:	893b      	ldrh	r3, [r7, #8]
 800aeac:	4293      	cmp	r3, r2
 800aeae:	bf28      	it	cs
 800aeb0:	4613      	movcs	r3, r2
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aeb6:	893b      	ldrh	r3, [r7, #8]
 800aeb8:	461a      	mov	r2, r3
 800aeba:	68f9      	ldr	r1, [r7, #12]
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 fa44 	bl	800b34a <USBD_CtlSendData>
 800aec2:	e009      	b.n	800aed8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800aec4:	6839      	ldr	r1, [r7, #0]
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 f9ce 	bl	800b268 <USBD_CtlError>
 800aecc:	e004      	b.n	800aed8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f000 fa95 	bl	800b3fe <USBD_CtlSendStatus>
 800aed4:	e000      	b.n	800aed8 <USBD_GetDescriptor+0x320>
    return;
 800aed6:	bf00      	nop
  }
}
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop

0800aee0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b084      	sub	sp, #16
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	889b      	ldrh	r3, [r3, #4]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d131      	bne.n	800af56 <USBD_SetAddress+0x76>
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	88db      	ldrh	r3, [r3, #6]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d12d      	bne.n	800af56 <USBD_SetAddress+0x76>
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	885b      	ldrh	r3, [r3, #2]
 800aefe:	2b7f      	cmp	r3, #127	; 0x7f
 800af00:	d829      	bhi.n	800af56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	885b      	ldrh	r3, [r3, #2]
 800af06:	b2db      	uxtb	r3, r3
 800af08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af14:	b2db      	uxtb	r3, r3
 800af16:	2b03      	cmp	r3, #3
 800af18:	d104      	bne.n	800af24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800af1a:	6839      	ldr	r1, [r7, #0]
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f000 f9a3 	bl	800b268 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af22:	e01d      	b.n	800af60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	7bfa      	ldrb	r2, [r7, #15]
 800af28:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800af2c:	7bfb      	ldrb	r3, [r7, #15]
 800af2e:	4619      	mov	r1, r3
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 febc 	bl	800bcae <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 fa61 	bl	800b3fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800af3c:	7bfb      	ldrb	r3, [r7, #15]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d004      	beq.n	800af4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2202      	movs	r2, #2
 800af46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af4a:	e009      	b.n	800af60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2201      	movs	r2, #1
 800af50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af54:	e004      	b.n	800af60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800af56:	6839      	ldr	r1, [r7, #0]
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f000 f985 	bl	800b268 <USBD_CtlError>
  }
}
 800af5e:	bf00      	nop
 800af60:	bf00      	nop
 800af62:	3710      	adds	r7, #16
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af72:	2300      	movs	r3, #0
 800af74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	885b      	ldrh	r3, [r3, #2]
 800af7a:	b2da      	uxtb	r2, r3
 800af7c:	4b4c      	ldr	r3, [pc, #304]	; (800b0b0 <USBD_SetConfig+0x148>)
 800af7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800af80:	4b4b      	ldr	r3, [pc, #300]	; (800b0b0 <USBD_SetConfig+0x148>)
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	2b01      	cmp	r3, #1
 800af86:	d905      	bls.n	800af94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800af88:	6839      	ldr	r1, [r7, #0]
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 f96c 	bl	800b268 <USBD_CtlError>
    return USBD_FAIL;
 800af90:	2303      	movs	r3, #3
 800af92:	e088      	b.n	800b0a6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	2b02      	cmp	r3, #2
 800af9e:	d002      	beq.n	800afa6 <USBD_SetConfig+0x3e>
 800afa0:	2b03      	cmp	r3, #3
 800afa2:	d025      	beq.n	800aff0 <USBD_SetConfig+0x88>
 800afa4:	e071      	b.n	800b08a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800afa6:	4b42      	ldr	r3, [pc, #264]	; (800b0b0 <USBD_SetConfig+0x148>)
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d01c      	beq.n	800afe8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800afae:	4b40      	ldr	r3, [pc, #256]	; (800b0b0 <USBD_SetConfig+0x148>)
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	461a      	mov	r2, r3
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800afb8:	4b3d      	ldr	r3, [pc, #244]	; (800b0b0 <USBD_SetConfig+0x148>)
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	4619      	mov	r1, r3
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7ff f992 	bl	800a2e8 <USBD_SetClassConfig>
 800afc4:	4603      	mov	r3, r0
 800afc6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800afc8:	7bfb      	ldrb	r3, [r7, #15]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d004      	beq.n	800afd8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800afce:	6839      	ldr	r1, [r7, #0]
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 f949 	bl	800b268 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800afd6:	e065      	b.n	800b0a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f000 fa10 	bl	800b3fe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2203      	movs	r2, #3
 800afe2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800afe6:	e05d      	b.n	800b0a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 fa08 	bl	800b3fe <USBD_CtlSendStatus>
      break;
 800afee:	e059      	b.n	800b0a4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800aff0:	4b2f      	ldr	r3, [pc, #188]	; (800b0b0 <USBD_SetConfig+0x148>)
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d112      	bne.n	800b01e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2202      	movs	r2, #2
 800affc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b000:	4b2b      	ldr	r3, [pc, #172]	; (800b0b0 <USBD_SetConfig+0x148>)
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	461a      	mov	r2, r3
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b00a:	4b29      	ldr	r3, [pc, #164]	; (800b0b0 <USBD_SetConfig+0x148>)
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	4619      	mov	r1, r3
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f7ff f985 	bl	800a320 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 f9f1 	bl	800b3fe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b01c:	e042      	b.n	800b0a4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b01e:	4b24      	ldr	r3, [pc, #144]	; (800b0b0 <USBD_SetConfig+0x148>)
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	461a      	mov	r2, r3
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	429a      	cmp	r2, r3
 800b02a:	d02a      	beq.n	800b082 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	b2db      	uxtb	r3, r3
 800b032:	4619      	mov	r1, r3
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f7ff f973 	bl	800a320 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b03a:	4b1d      	ldr	r3, [pc, #116]	; (800b0b0 <USBD_SetConfig+0x148>)
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	461a      	mov	r2, r3
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b044:	4b1a      	ldr	r3, [pc, #104]	; (800b0b0 <USBD_SetConfig+0x148>)
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	4619      	mov	r1, r3
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f7ff f94c 	bl	800a2e8 <USBD_SetClassConfig>
 800b050:	4603      	mov	r3, r0
 800b052:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b054:	7bfb      	ldrb	r3, [r7, #15]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00f      	beq.n	800b07a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b05a:	6839      	ldr	r1, [r7, #0]
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 f903 	bl	800b268 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	b2db      	uxtb	r3, r3
 800b068:	4619      	mov	r1, r3
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f7ff f958 	bl	800a320 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2202      	movs	r2, #2
 800b074:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b078:	e014      	b.n	800b0a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 f9bf 	bl	800b3fe <USBD_CtlSendStatus>
      break;
 800b080:	e010      	b.n	800b0a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 f9bb 	bl	800b3fe <USBD_CtlSendStatus>
      break;
 800b088:	e00c      	b.n	800b0a4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b08a:	6839      	ldr	r1, [r7, #0]
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 f8eb 	bl	800b268 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b092:	4b07      	ldr	r3, [pc, #28]	; (800b0b0 <USBD_SetConfig+0x148>)
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	4619      	mov	r1, r3
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f7ff f941 	bl	800a320 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b09e:	2303      	movs	r3, #3
 800b0a0:	73fb      	strb	r3, [r7, #15]
      break;
 800b0a2:	bf00      	nop
  }

  return ret;
 800b0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3710      	adds	r7, #16
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	200004bc 	.word	0x200004bc

0800b0b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	88db      	ldrh	r3, [r3, #6]
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d004      	beq.n	800b0d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b0c6:	6839      	ldr	r1, [r7, #0]
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f000 f8cd 	bl	800b268 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b0ce:	e023      	b.n	800b118 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0d6:	b2db      	uxtb	r3, r3
 800b0d8:	2b02      	cmp	r3, #2
 800b0da:	dc02      	bgt.n	800b0e2 <USBD_GetConfig+0x2e>
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	dc03      	bgt.n	800b0e8 <USBD_GetConfig+0x34>
 800b0e0:	e015      	b.n	800b10e <USBD_GetConfig+0x5a>
 800b0e2:	2b03      	cmp	r3, #3
 800b0e4:	d00b      	beq.n	800b0fe <USBD_GetConfig+0x4a>
 800b0e6:	e012      	b.n	800b10e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	3308      	adds	r3, #8
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 f927 	bl	800b34a <USBD_CtlSendData>
        break;
 800b0fc:	e00c      	b.n	800b118 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	3304      	adds	r3, #4
 800b102:	2201      	movs	r2, #1
 800b104:	4619      	mov	r1, r3
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 f91f 	bl	800b34a <USBD_CtlSendData>
        break;
 800b10c:	e004      	b.n	800b118 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b10e:	6839      	ldr	r1, [r7, #0]
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 f8a9 	bl	800b268 <USBD_CtlError>
        break;
 800b116:	bf00      	nop
}
 800b118:	bf00      	nop
 800b11a:	3708      	adds	r7, #8
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b130:	b2db      	uxtb	r3, r3
 800b132:	3b01      	subs	r3, #1
 800b134:	2b02      	cmp	r3, #2
 800b136:	d81e      	bhi.n	800b176 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	88db      	ldrh	r3, [r3, #6]
 800b13c:	2b02      	cmp	r3, #2
 800b13e:	d004      	beq.n	800b14a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b140:	6839      	ldr	r1, [r7, #0]
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f000 f890 	bl	800b268 <USBD_CtlError>
        break;
 800b148:	e01a      	b.n	800b180 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2201      	movs	r2, #1
 800b14e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b156:	2b00      	cmp	r3, #0
 800b158:	d005      	beq.n	800b166 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	68db      	ldr	r3, [r3, #12]
 800b15e:	f043 0202 	orr.w	r2, r3, #2
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	330c      	adds	r3, #12
 800b16a:	2202      	movs	r2, #2
 800b16c:	4619      	mov	r1, r3
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 f8eb 	bl	800b34a <USBD_CtlSendData>
      break;
 800b174:	e004      	b.n	800b180 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b176:	6839      	ldr	r1, [r7, #0]
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f000 f875 	bl	800b268 <USBD_CtlError>
      break;
 800b17e:	bf00      	nop
  }
}
 800b180:	bf00      	nop
 800b182:	3708      	adds	r7, #8
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b082      	sub	sp, #8
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	885b      	ldrh	r3, [r3, #2]
 800b196:	2b01      	cmp	r3, #1
 800b198:	d106      	bne.n	800b1a8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2201      	movs	r2, #1
 800b19e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 f92b 	bl	800b3fe <USBD_CtlSendStatus>
  }
}
 800b1a8:	bf00      	nop
 800b1aa:	3708      	adds	r7, #8
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	3b01      	subs	r3, #1
 800b1c4:	2b02      	cmp	r3, #2
 800b1c6:	d80b      	bhi.n	800b1e0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	885b      	ldrh	r3, [r3, #2]
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d10c      	bne.n	800b1ea <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 f910 	bl	800b3fe <USBD_CtlSendStatus>
      }
      break;
 800b1de:	e004      	b.n	800b1ea <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b1e0:	6839      	ldr	r1, [r7, #0]
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 f840 	bl	800b268 <USBD_CtlError>
      break;
 800b1e8:	e000      	b.n	800b1ec <USBD_ClrFeature+0x3c>
      break;
 800b1ea:	bf00      	nop
  }
}
 800b1ec:	bf00      	nop
 800b1ee:	3708      	adds	r7, #8
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	781a      	ldrb	r2, [r3, #0]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	3301      	adds	r3, #1
 800b20e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	781a      	ldrb	r2, [r3, #0]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	3301      	adds	r3, #1
 800b21c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b21e:	68f8      	ldr	r0, [r7, #12]
 800b220:	f7ff fa92 	bl	800a748 <SWAPBYTE>
 800b224:	4603      	mov	r3, r0
 800b226:	461a      	mov	r2, r3
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	3301      	adds	r3, #1
 800b230:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	3301      	adds	r3, #1
 800b236:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b238:	68f8      	ldr	r0, [r7, #12]
 800b23a:	f7ff fa85 	bl	800a748 <SWAPBYTE>
 800b23e:	4603      	mov	r3, r0
 800b240:	461a      	mov	r2, r3
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	3301      	adds	r3, #1
 800b24a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	3301      	adds	r3, #1
 800b250:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b252:	68f8      	ldr	r0, [r7, #12]
 800b254:	f7ff fa78 	bl	800a748 <SWAPBYTE>
 800b258:	4603      	mov	r3, r0
 800b25a:	461a      	mov	r2, r3
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	80da      	strh	r2, [r3, #6]
}
 800b260:	bf00      	nop
 800b262:	3710      	adds	r7, #16
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b082      	sub	sp, #8
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b272:	2180      	movs	r1, #128	; 0x80
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f000 fcaf 	bl	800bbd8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b27a:	2100      	movs	r1, #0
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f000 fcab 	bl	800bbd8 <USBD_LL_StallEP>
}
 800b282:	bf00      	nop
 800b284:	3708      	adds	r7, #8
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}

0800b28a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b086      	sub	sp, #24
 800b28e:	af00      	add	r7, sp, #0
 800b290:	60f8      	str	r0, [r7, #12]
 800b292:	60b9      	str	r1, [r7, #8]
 800b294:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b296:	2300      	movs	r3, #0
 800b298:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d036      	beq.n	800b30e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b2a4:	6938      	ldr	r0, [r7, #16]
 800b2a6:	f000 f836 	bl	800b316 <USBD_GetLen>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	3301      	adds	r3, #1
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	005b      	lsls	r3, r3, #1
 800b2b2:	b29a      	uxth	r2, r3
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b2b8:	7dfb      	ldrb	r3, [r7, #23]
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	4413      	add	r3, r2
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	7812      	ldrb	r2, [r2, #0]
 800b2c2:	701a      	strb	r2, [r3, #0]
  idx++;
 800b2c4:	7dfb      	ldrb	r3, [r7, #23]
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b2ca:	7dfb      	ldrb	r3, [r7, #23]
 800b2cc:	68ba      	ldr	r2, [r7, #8]
 800b2ce:	4413      	add	r3, r2
 800b2d0:	2203      	movs	r2, #3
 800b2d2:	701a      	strb	r2, [r3, #0]
  idx++;
 800b2d4:	7dfb      	ldrb	r3, [r7, #23]
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b2da:	e013      	b.n	800b304 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b2dc:	7dfb      	ldrb	r3, [r7, #23]
 800b2de:	68ba      	ldr	r2, [r7, #8]
 800b2e0:	4413      	add	r3, r2
 800b2e2:	693a      	ldr	r2, [r7, #16]
 800b2e4:	7812      	ldrb	r2, [r2, #0]
 800b2e6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	3301      	adds	r3, #1
 800b2ec:	613b      	str	r3, [r7, #16]
    idx++;
 800b2ee:	7dfb      	ldrb	r3, [r7, #23]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b2f4:	7dfb      	ldrb	r3, [r7, #23]
 800b2f6:	68ba      	ldr	r2, [r7, #8]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	701a      	strb	r2, [r3, #0]
    idx++;
 800b2fe:	7dfb      	ldrb	r3, [r7, #23]
 800b300:	3301      	adds	r3, #1
 800b302:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d1e7      	bne.n	800b2dc <USBD_GetString+0x52>
 800b30c:	e000      	b.n	800b310 <USBD_GetString+0x86>
    return;
 800b30e:	bf00      	nop
  }
}
 800b310:	3718      	adds	r7, #24
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}

0800b316 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b316:	b480      	push	{r7}
 800b318:	b085      	sub	sp, #20
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b31e:	2300      	movs	r3, #0
 800b320:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b326:	e005      	b.n	800b334 <USBD_GetLen+0x1e>
  {
    len++;
 800b328:	7bfb      	ldrb	r3, [r7, #15]
 800b32a:	3301      	adds	r3, #1
 800b32c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	3301      	adds	r3, #1
 800b332:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d1f5      	bne.n	800b328 <USBD_GetLen+0x12>
  }

  return len;
 800b33c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3714      	adds	r7, #20
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr

0800b34a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b34a:	b580      	push	{r7, lr}
 800b34c:	b084      	sub	sp, #16
 800b34e:	af00      	add	r7, sp, #0
 800b350:	60f8      	str	r0, [r7, #12]
 800b352:	60b9      	str	r1, [r7, #8]
 800b354:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2202      	movs	r2, #2
 800b35a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	2100      	movs	r1, #0
 800b370:	68f8      	ldr	r0, [r7, #12]
 800b372:	f000 fcbb 	bl	800bcec <USBD_LL_Transmit>

  return USBD_OK;
 800b376:	2300      	movs	r3, #0
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3710      	adds	r7, #16
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	60b9      	str	r1, [r7, #8]
 800b38a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	68ba      	ldr	r2, [r7, #8]
 800b390:	2100      	movs	r1, #0
 800b392:	68f8      	ldr	r0, [r7, #12]
 800b394:	f000 fcaa 	bl	800bcec <USBD_LL_Transmit>

  return USBD_OK;
 800b398:	2300      	movs	r3, #0
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b3a2:	b580      	push	{r7, lr}
 800b3a4:	b084      	sub	sp, #16
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	60f8      	str	r0, [r7, #12]
 800b3aa:	60b9      	str	r1, [r7, #8]
 800b3ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2203      	movs	r2, #3
 800b3b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	687a      	ldr	r2, [r7, #4]
 800b3ba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	68ba      	ldr	r2, [r7, #8]
 800b3ca:	2100      	movs	r1, #0
 800b3cc:	68f8      	ldr	r0, [r7, #12]
 800b3ce:	f000 fcae 	bl	800bd2e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3d2:	2300      	movs	r3, #0
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3710      	adds	r7, #16
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	68ba      	ldr	r2, [r7, #8]
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	68f8      	ldr	r0, [r7, #12]
 800b3f0:	f000 fc9d 	bl	800bd2e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3f4:	2300      	movs	r3, #0
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3710      	adds	r7, #16
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b082      	sub	sp, #8
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2204      	movs	r2, #4
 800b40a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b40e:	2300      	movs	r3, #0
 800b410:	2200      	movs	r2, #0
 800b412:	2100      	movs	r1, #0
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f000 fc69 	bl	800bcec <USBD_LL_Transmit>

  return USBD_OK;
 800b41a:	2300      	movs	r3, #0
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3708      	adds	r7, #8
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b082      	sub	sp, #8
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2205      	movs	r2, #5
 800b430:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b434:	2300      	movs	r3, #0
 800b436:	2200      	movs	r2, #0
 800b438:	2100      	movs	r1, #0
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 fc77 	bl	800bd2e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b440:	2300      	movs	r3, #0
}
 800b442:	4618      	mov	r0, r3
 800b444:	3708      	adds	r7, #8
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
	...

0800b44c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b450:	2200      	movs	r2, #0
 800b452:	4912      	ldr	r1, [pc, #72]	; (800b49c <MX_USB_Device_Init+0x50>)
 800b454:	4812      	ldr	r0, [pc, #72]	; (800b4a0 <MX_USB_Device_Init+0x54>)
 800b456:	f7fe fed9 	bl	800a20c <USBD_Init>
 800b45a:	4603      	mov	r3, r0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d001      	beq.n	800b464 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b460:	f7f6 f958 	bl	8001714 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b464:	490f      	ldr	r1, [pc, #60]	; (800b4a4 <MX_USB_Device_Init+0x58>)
 800b466:	480e      	ldr	r0, [pc, #56]	; (800b4a0 <MX_USB_Device_Init+0x54>)
 800b468:	f7fe ff00 	bl	800a26c <USBD_RegisterClass>
 800b46c:	4603      	mov	r3, r0
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d001      	beq.n	800b476 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b472:	f7f6 f94f 	bl	8001714 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b476:	490c      	ldr	r1, [pc, #48]	; (800b4a8 <MX_USB_Device_Init+0x5c>)
 800b478:	4809      	ldr	r0, [pc, #36]	; (800b4a0 <MX_USB_Device_Init+0x54>)
 800b47a:	f7fe fe21 	bl	800a0c0 <USBD_CDC_RegisterInterface>
 800b47e:	4603      	mov	r3, r0
 800b480:	2b00      	cmp	r3, #0
 800b482:	d001      	beq.n	800b488 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b484:	f7f6 f946 	bl	8001714 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b488:	4805      	ldr	r0, [pc, #20]	; (800b4a0 <MX_USB_Device_Init+0x54>)
 800b48a:	f7fe ff16 	bl	800a2ba <USBD_Start>
 800b48e:	4603      	mov	r3, r0
 800b490:	2b00      	cmp	r3, #0
 800b492:	d001      	beq.n	800b498 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b494:	f7f6 f93e 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b498:	bf00      	nop
 800b49a:	bd80      	pop	{r7, pc}
 800b49c:	20000140 	.word	0x20000140
 800b4a0:	200004c0 	.word	0x200004c0
 800b4a4:	20000028 	.word	0x20000028
 800b4a8:	2000012c 	.word	0x2000012c

0800b4ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	4905      	ldr	r1, [pc, #20]	; (800b4c8 <CDC_Init_FS+0x1c>)
 800b4b4:	4805      	ldr	r0, [pc, #20]	; (800b4cc <CDC_Init_FS+0x20>)
 800b4b6:	f7fe fe18 	bl	800a0ea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b4ba:	4905      	ldr	r1, [pc, #20]	; (800b4d0 <CDC_Init_FS+0x24>)
 800b4bc:	4803      	ldr	r0, [pc, #12]	; (800b4cc <CDC_Init_FS+0x20>)
 800b4be:	f7fe fe32 	bl	800a126 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b4c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	20000f90 	.word	0x20000f90
 800b4cc:	200004c0 	.word	0x200004c0
 800b4d0:	20000790 	.word	0x20000790

0800b4d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b4d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr

0800b4e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	6039      	str	r1, [r7, #0]
 800b4ee:	71fb      	strb	r3, [r7, #7]
 800b4f0:	4613      	mov	r3, r2
 800b4f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b4f4:	79fb      	ldrb	r3, [r7, #7]
 800b4f6:	2b23      	cmp	r3, #35	; 0x23
 800b4f8:	d84a      	bhi.n	800b590 <CDC_Control_FS+0xac>
 800b4fa:	a201      	add	r2, pc, #4	; (adr r2, 800b500 <CDC_Control_FS+0x1c>)
 800b4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b500:	0800b591 	.word	0x0800b591
 800b504:	0800b591 	.word	0x0800b591
 800b508:	0800b591 	.word	0x0800b591
 800b50c:	0800b591 	.word	0x0800b591
 800b510:	0800b591 	.word	0x0800b591
 800b514:	0800b591 	.word	0x0800b591
 800b518:	0800b591 	.word	0x0800b591
 800b51c:	0800b591 	.word	0x0800b591
 800b520:	0800b591 	.word	0x0800b591
 800b524:	0800b591 	.word	0x0800b591
 800b528:	0800b591 	.word	0x0800b591
 800b52c:	0800b591 	.word	0x0800b591
 800b530:	0800b591 	.word	0x0800b591
 800b534:	0800b591 	.word	0x0800b591
 800b538:	0800b591 	.word	0x0800b591
 800b53c:	0800b591 	.word	0x0800b591
 800b540:	0800b591 	.word	0x0800b591
 800b544:	0800b591 	.word	0x0800b591
 800b548:	0800b591 	.word	0x0800b591
 800b54c:	0800b591 	.word	0x0800b591
 800b550:	0800b591 	.word	0x0800b591
 800b554:	0800b591 	.word	0x0800b591
 800b558:	0800b591 	.word	0x0800b591
 800b55c:	0800b591 	.word	0x0800b591
 800b560:	0800b591 	.word	0x0800b591
 800b564:	0800b591 	.word	0x0800b591
 800b568:	0800b591 	.word	0x0800b591
 800b56c:	0800b591 	.word	0x0800b591
 800b570:	0800b591 	.word	0x0800b591
 800b574:	0800b591 	.word	0x0800b591
 800b578:	0800b591 	.word	0x0800b591
 800b57c:	0800b591 	.word	0x0800b591
 800b580:	0800b591 	.word	0x0800b591
 800b584:	0800b591 	.word	0x0800b591
 800b588:	0800b591 	.word	0x0800b591
 800b58c:	0800b591 	.word	0x0800b591
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b590:	bf00      	nop
  }

  return (USBD_OK);
 800b592:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b594:	4618      	mov	r0, r3
 800b596:	370c      	adds	r7, #12
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr

0800b5a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b5aa:	6879      	ldr	r1, [r7, #4]
 800b5ac:	4810      	ldr	r0, [pc, #64]	; (800b5f0 <CDC_Receive_FS+0x50>)
 800b5ae:	f7fe fdba 	bl	800a126 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b5b2:	480f      	ldr	r0, [pc, #60]	; (800b5f0 <CDC_Receive_FS+0x50>)
 800b5b4:	f7fe fe00 	bl	800a1b8 <USBD_CDC_ReceivePacket>

  memset(buffer, '\0', 64);  // clear the buffer
 800b5b8:	2240      	movs	r2, #64	; 0x40
 800b5ba:	2100      	movs	r1, #0
 800b5bc:	480d      	ldr	r0, [pc, #52]	; (800b5f4 <CDC_Receive_FS+0x54>)
 800b5be:	f000 fca3 	bl	800bf08 <memset>
  uint8_t len = (uint8_t)*Len;
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer, Buf, len);  // copy the data to the buffer
 800b5c8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	6879      	ldr	r1, [r7, #4]
 800b5ce:	4809      	ldr	r0, [pc, #36]	; (800b5f4 <CDC_Receive_FS+0x54>)
 800b5d0:	f000 fc8c 	bl	800beec <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 800b5d4:	7bfb      	ldrb	r3, [r7, #15]
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	2100      	movs	r1, #0
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 fc94 	bl	800bf08 <memset>
  newReceived = true;
 800b5e0:	4b05      	ldr	r3, [pc, #20]	; (800b5f8 <CDC_Receive_FS+0x58>)
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 800b5e6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3710      	adds	r7, #16
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}
 800b5f0:	200004c0 	.word	0x200004c0
 800b5f4:	20000470 	.word	0x20000470
 800b5f8:	200004b0 	.word	0x200004b0

0800b5fc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	460b      	mov	r3, r1
 800b606:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b608:	2300      	movs	r3, #0
 800b60a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b60c:	4b0d      	ldr	r3, [pc, #52]	; (800b644 <CDC_Transmit_FS+0x48>)
 800b60e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b612:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d001      	beq.n	800b622 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b61e:	2301      	movs	r3, #1
 800b620:	e00b      	b.n	800b63a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b622:	887b      	ldrh	r3, [r7, #2]
 800b624:	461a      	mov	r2, r3
 800b626:	6879      	ldr	r1, [r7, #4]
 800b628:	4806      	ldr	r0, [pc, #24]	; (800b644 <CDC_Transmit_FS+0x48>)
 800b62a:	f7fe fd5e 	bl	800a0ea <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b62e:	4805      	ldr	r0, [pc, #20]	; (800b644 <CDC_Transmit_FS+0x48>)
 800b630:	f7fe fd92 	bl	800a158 <USBD_CDC_TransmitPacket>
 800b634:	4603      	mov	r3, r0
 800b636:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b638:	7bfb      	ldrb	r3, [r7, #15]
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3710      	adds	r7, #16
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	200004c0 	.word	0x200004c0

0800b648 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b648:	b480      	push	{r7}
 800b64a:	b087      	sub	sp, #28
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	60b9      	str	r1, [r7, #8]
 800b652:	4613      	mov	r3, r2
 800b654:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b656:	2300      	movs	r3, #0
 800b658:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b65a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b65e:	4618      	mov	r0, r3
 800b660:	371c      	adds	r7, #28
 800b662:	46bd      	mov	sp, r7
 800b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b668:	4770      	bx	lr
	...

0800b66c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	4603      	mov	r3, r0
 800b674:	6039      	str	r1, [r7, #0]
 800b676:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	2212      	movs	r2, #18
 800b67c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b67e:	4b03      	ldr	r3, [pc, #12]	; (800b68c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b680:	4618      	mov	r0, r3
 800b682:	370c      	adds	r7, #12
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr
 800b68c:	20000160 	.word	0x20000160

0800b690 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b690:	b480      	push	{r7}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
 800b696:	4603      	mov	r3, r0
 800b698:	6039      	str	r1, [r7, #0]
 800b69a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	2204      	movs	r2, #4
 800b6a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b6a2:	4b03      	ldr	r3, [pc, #12]	; (800b6b0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	370c      	adds	r7, #12
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr
 800b6b0:	20000174 	.word	0x20000174

0800b6b4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b082      	sub	sp, #8
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	6039      	str	r1, [r7, #0]
 800b6be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b6c0:	79fb      	ldrb	r3, [r7, #7]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d105      	bne.n	800b6d2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b6c6:	683a      	ldr	r2, [r7, #0]
 800b6c8:	4907      	ldr	r1, [pc, #28]	; (800b6e8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b6ca:	4808      	ldr	r0, [pc, #32]	; (800b6ec <USBD_CDC_ProductStrDescriptor+0x38>)
 800b6cc:	f7ff fddd 	bl	800b28a <USBD_GetString>
 800b6d0:	e004      	b.n	800b6dc <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b6d2:	683a      	ldr	r2, [r7, #0]
 800b6d4:	4904      	ldr	r1, [pc, #16]	; (800b6e8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b6d6:	4805      	ldr	r0, [pc, #20]	; (800b6ec <USBD_CDC_ProductStrDescriptor+0x38>)
 800b6d8:	f7ff fdd7 	bl	800b28a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6dc:	4b02      	ldr	r3, [pc, #8]	; (800b6e8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3708      	adds	r7, #8
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	20001790 	.word	0x20001790
 800b6ec:	0800d3ac 	.word	0x0800d3ac

0800b6f0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	6039      	str	r1, [r7, #0]
 800b6fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b6fc:	683a      	ldr	r2, [r7, #0]
 800b6fe:	4904      	ldr	r1, [pc, #16]	; (800b710 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b700:	4804      	ldr	r0, [pc, #16]	; (800b714 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b702:	f7ff fdc2 	bl	800b28a <USBD_GetString>
  return USBD_StrDesc;
 800b706:	4b02      	ldr	r3, [pc, #8]	; (800b710 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3708      	adds	r7, #8
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	20001790 	.word	0x20001790
 800b714:	0800d3c4 	.word	0x0800d3c4

0800b718 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b082      	sub	sp, #8
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	4603      	mov	r3, r0
 800b720:	6039      	str	r1, [r7, #0]
 800b722:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	221a      	movs	r2, #26
 800b728:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b72a:	f000 f843 	bl	800b7b4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b72e:	4b02      	ldr	r3, [pc, #8]	; (800b738 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b730:	4618      	mov	r0, r3
 800b732:	3708      	adds	r7, #8
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}
 800b738:	20000178 	.word	0x20000178

0800b73c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b082      	sub	sp, #8
 800b740:	af00      	add	r7, sp, #0
 800b742:	4603      	mov	r3, r0
 800b744:	6039      	str	r1, [r7, #0]
 800b746:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b748:	79fb      	ldrb	r3, [r7, #7]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d105      	bne.n	800b75a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b74e:	683a      	ldr	r2, [r7, #0]
 800b750:	4907      	ldr	r1, [pc, #28]	; (800b770 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b752:	4808      	ldr	r0, [pc, #32]	; (800b774 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b754:	f7ff fd99 	bl	800b28a <USBD_GetString>
 800b758:	e004      	b.n	800b764 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b75a:	683a      	ldr	r2, [r7, #0]
 800b75c:	4904      	ldr	r1, [pc, #16]	; (800b770 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b75e:	4805      	ldr	r0, [pc, #20]	; (800b774 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b760:	f7ff fd93 	bl	800b28a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b764:	4b02      	ldr	r3, [pc, #8]	; (800b770 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b766:	4618      	mov	r0, r3
 800b768:	3708      	adds	r7, #8
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	20001790 	.word	0x20001790
 800b774:	0800d3d8 	.word	0x0800d3d8

0800b778 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	4603      	mov	r3, r0
 800b780:	6039      	str	r1, [r7, #0]
 800b782:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b784:	79fb      	ldrb	r3, [r7, #7]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d105      	bne.n	800b796 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b78a:	683a      	ldr	r2, [r7, #0]
 800b78c:	4907      	ldr	r1, [pc, #28]	; (800b7ac <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b78e:	4808      	ldr	r0, [pc, #32]	; (800b7b0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b790:	f7ff fd7b 	bl	800b28a <USBD_GetString>
 800b794:	e004      	b.n	800b7a0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b796:	683a      	ldr	r2, [r7, #0]
 800b798:	4904      	ldr	r1, [pc, #16]	; (800b7ac <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b79a:	4805      	ldr	r0, [pc, #20]	; (800b7b0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b79c:	f7ff fd75 	bl	800b28a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7a0:	4b02      	ldr	r3, [pc, #8]	; (800b7ac <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3708      	adds	r7, #8
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	20001790 	.word	0x20001790
 800b7b0:	0800d3e4 	.word	0x0800d3e4

0800b7b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b084      	sub	sp, #16
 800b7b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b7ba:	4b0f      	ldr	r3, [pc, #60]	; (800b7f8 <Get_SerialNum+0x44>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b7c0:	4b0e      	ldr	r3, [pc, #56]	; (800b7fc <Get_SerialNum+0x48>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b7c6:	4b0e      	ldr	r3, [pc, #56]	; (800b800 <Get_SerialNum+0x4c>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b7cc:	68fa      	ldr	r2, [r7, #12]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d009      	beq.n	800b7ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b7da:	2208      	movs	r2, #8
 800b7dc:	4909      	ldr	r1, [pc, #36]	; (800b804 <Get_SerialNum+0x50>)
 800b7de:	68f8      	ldr	r0, [r7, #12]
 800b7e0:	f000 f814 	bl	800b80c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b7e4:	2204      	movs	r2, #4
 800b7e6:	4908      	ldr	r1, [pc, #32]	; (800b808 <Get_SerialNum+0x54>)
 800b7e8:	68b8      	ldr	r0, [r7, #8]
 800b7ea:	f000 f80f 	bl	800b80c <IntToUnicode>
  }
}
 800b7ee:	bf00      	nop
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	1fff7590 	.word	0x1fff7590
 800b7fc:	1fff7594 	.word	0x1fff7594
 800b800:	1fff7598 	.word	0x1fff7598
 800b804:	2000017a 	.word	0x2000017a
 800b808:	2000018a 	.word	0x2000018a

0800b80c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b087      	sub	sp, #28
 800b810:	af00      	add	r7, sp, #0
 800b812:	60f8      	str	r0, [r7, #12]
 800b814:	60b9      	str	r1, [r7, #8]
 800b816:	4613      	mov	r3, r2
 800b818:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b81a:	2300      	movs	r3, #0
 800b81c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b81e:	2300      	movs	r3, #0
 800b820:	75fb      	strb	r3, [r7, #23]
 800b822:	e027      	b.n	800b874 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	0f1b      	lsrs	r3, r3, #28
 800b828:	2b09      	cmp	r3, #9
 800b82a:	d80b      	bhi.n	800b844 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	0f1b      	lsrs	r3, r3, #28
 800b830:	b2da      	uxtb	r2, r3
 800b832:	7dfb      	ldrb	r3, [r7, #23]
 800b834:	005b      	lsls	r3, r3, #1
 800b836:	4619      	mov	r1, r3
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	440b      	add	r3, r1
 800b83c:	3230      	adds	r2, #48	; 0x30
 800b83e:	b2d2      	uxtb	r2, r2
 800b840:	701a      	strb	r2, [r3, #0]
 800b842:	e00a      	b.n	800b85a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	0f1b      	lsrs	r3, r3, #28
 800b848:	b2da      	uxtb	r2, r3
 800b84a:	7dfb      	ldrb	r3, [r7, #23]
 800b84c:	005b      	lsls	r3, r3, #1
 800b84e:	4619      	mov	r1, r3
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	440b      	add	r3, r1
 800b854:	3237      	adds	r2, #55	; 0x37
 800b856:	b2d2      	uxtb	r2, r2
 800b858:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	011b      	lsls	r3, r3, #4
 800b85e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b860:	7dfb      	ldrb	r3, [r7, #23]
 800b862:	005b      	lsls	r3, r3, #1
 800b864:	3301      	adds	r3, #1
 800b866:	68ba      	ldr	r2, [r7, #8]
 800b868:	4413      	add	r3, r2
 800b86a:	2200      	movs	r2, #0
 800b86c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b86e:	7dfb      	ldrb	r3, [r7, #23]
 800b870:	3301      	adds	r3, #1
 800b872:	75fb      	strb	r3, [r7, #23]
 800b874:	7dfa      	ldrb	r2, [r7, #23]
 800b876:	79fb      	ldrb	r3, [r7, #7]
 800b878:	429a      	cmp	r2, r3
 800b87a:	d3d3      	bcc.n	800b824 <IntToUnicode+0x18>
  }
}
 800b87c:	bf00      	nop
 800b87e:	bf00      	nop
 800b880:	371c      	adds	r7, #28
 800b882:	46bd      	mov	sp, r7
 800b884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b888:	4770      	bx	lr
	...

0800b88c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b098      	sub	sp, #96	; 0x60
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b894:	f107 030c 	add.w	r3, r7, #12
 800b898:	2254      	movs	r2, #84	; 0x54
 800b89a:	2100      	movs	r1, #0
 800b89c:	4618      	mov	r0, r3
 800b89e:	f000 fb33 	bl	800bf08 <memset>
  if(pcdHandle->Instance==USB)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4a15      	ldr	r2, [pc, #84]	; (800b8fc <HAL_PCD_MspInit+0x70>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d123      	bne.n	800b8f4 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b8ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b8b0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800b8b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b8b6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b8b8:	f107 030c 	add.w	r3, r7, #12
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f7fb f8b1 	bl	8006a24 <HAL_RCCEx_PeriphCLKConfig>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d001      	beq.n	800b8cc <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800b8c8:	f7f5 ff24 	bl	8001714 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b8cc:	4b0c      	ldr	r3, [pc, #48]	; (800b900 <HAL_PCD_MspInit+0x74>)
 800b8ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8d0:	4a0b      	ldr	r2, [pc, #44]	; (800b900 <HAL_PCD_MspInit+0x74>)
 800b8d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b8d6:	6593      	str	r3, [r2, #88]	; 0x58
 800b8d8:	4b09      	ldr	r3, [pc, #36]	; (800b900 <HAL_PCD_MspInit+0x74>)
 800b8da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b8e0:	60bb      	str	r3, [r7, #8]
 800b8e2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	2100      	movs	r1, #0
 800b8e8:	2014      	movs	r0, #20
 800b8ea:	f7f8 f886 	bl	80039fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b8ee:	2014      	movs	r0, #20
 800b8f0:	f7f8 f89d 	bl	8003a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b8f4:	bf00      	nop
 800b8f6:	3760      	adds	r7, #96	; 0x60
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	40005c00 	.word	0x40005c00
 800b900:	40021000 	.word	0x40021000

0800b904 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b918:	4619      	mov	r1, r3
 800b91a:	4610      	mov	r0, r2
 800b91c:	f7fe fd18 	bl	800a350 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b920:	bf00      	nop
 800b922:	3708      	adds	r7, #8
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b082      	sub	sp, #8
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	460b      	mov	r3, r1
 800b932:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b93a:	78fa      	ldrb	r2, [r7, #3]
 800b93c:	6879      	ldr	r1, [r7, #4]
 800b93e:	4613      	mov	r3, r2
 800b940:	009b      	lsls	r3, r3, #2
 800b942:	4413      	add	r3, r2
 800b944:	00db      	lsls	r3, r3, #3
 800b946:	440b      	add	r3, r1
 800b948:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b94c:	681a      	ldr	r2, [r3, #0]
 800b94e:	78fb      	ldrb	r3, [r7, #3]
 800b950:	4619      	mov	r1, r3
 800b952:	f7fe fd52 	bl	800a3fa <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b956:	bf00      	nop
 800b958:	3708      	adds	r7, #8
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}

0800b95e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b95e:	b580      	push	{r7, lr}
 800b960:	b082      	sub	sp, #8
 800b962:	af00      	add	r7, sp, #0
 800b964:	6078      	str	r0, [r7, #4]
 800b966:	460b      	mov	r3, r1
 800b968:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b970:	78fa      	ldrb	r2, [r7, #3]
 800b972:	6879      	ldr	r1, [r7, #4]
 800b974:	4613      	mov	r3, r2
 800b976:	009b      	lsls	r3, r3, #2
 800b978:	4413      	add	r3, r2
 800b97a:	00db      	lsls	r3, r3, #3
 800b97c:	440b      	add	r3, r1
 800b97e:	333c      	adds	r3, #60	; 0x3c
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	78fb      	ldrb	r3, [r7, #3]
 800b984:	4619      	mov	r1, r3
 800b986:	f7fe fd9b 	bl	800a4c0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b98a:	bf00      	nop
 800b98c:	3708      	adds	r7, #8
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}

0800b992 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b992:	b580      	push	{r7, lr}
 800b994:	b082      	sub	sp, #8
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7fe feaf 	bl	800a704 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b9a6:	bf00      	nop
 800b9a8:	3708      	adds	r7, #8
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b084      	sub	sp, #16
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	689b      	ldr	r3, [r3, #8]
 800b9be:	2b02      	cmp	r3, #2
 800b9c0:	d001      	beq.n	800b9c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b9c2:	f7f5 fea7 	bl	8001714 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b9cc:	7bfa      	ldrb	r2, [r7, #15]
 800b9ce:	4611      	mov	r1, r2
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f7fe fe59 	bl	800a688 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7fe fe05 	bl	800a5ec <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b9e2:	bf00      	nop
 800b9e4:	3710      	adds	r7, #16
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
	...

0800b9ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7fe fe54 	bl	800a6a8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	699b      	ldr	r3, [r3, #24]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d005      	beq.n	800ba14 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba08:	4b04      	ldr	r3, [pc, #16]	; (800ba1c <HAL_PCD_SuspendCallback+0x30>)
 800ba0a:	691b      	ldr	r3, [r3, #16]
 800ba0c:	4a03      	ldr	r2, [pc, #12]	; (800ba1c <HAL_PCD_SuspendCallback+0x30>)
 800ba0e:	f043 0306 	orr.w	r3, r3, #6
 800ba12:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800ba14:	bf00      	nop
 800ba16:	3708      	adds	r7, #8
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	e000ed00 	.word	0xe000ed00

0800ba20 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	699b      	ldr	r3, [r3, #24]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d007      	beq.n	800ba40 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba30:	4b08      	ldr	r3, [pc, #32]	; (800ba54 <HAL_PCD_ResumeCallback+0x34>)
 800ba32:	691b      	ldr	r3, [r3, #16]
 800ba34:	4a07      	ldr	r2, [pc, #28]	; (800ba54 <HAL_PCD_ResumeCallback+0x34>)
 800ba36:	f023 0306 	bic.w	r3, r3, #6
 800ba3a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ba3c:	f000 f9fa 	bl	800be34 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7fe fe44 	bl	800a6d4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800ba4c:	bf00      	nop
 800ba4e:	3708      	adds	r7, #8
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}
 800ba54:	e000ed00 	.word	0xe000ed00

0800ba58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b082      	sub	sp, #8
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800ba60:	4a2b      	ldr	r2, [pc, #172]	; (800bb10 <USBD_LL_Init+0xb8>)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	4a29      	ldr	r2, [pc, #164]	; (800bb10 <USBD_LL_Init+0xb8>)
 800ba6c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800ba70:	4b27      	ldr	r3, [pc, #156]	; (800bb10 <USBD_LL_Init+0xb8>)
 800ba72:	4a28      	ldr	r2, [pc, #160]	; (800bb14 <USBD_LL_Init+0xbc>)
 800ba74:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ba76:	4b26      	ldr	r3, [pc, #152]	; (800bb10 <USBD_LL_Init+0xb8>)
 800ba78:	2208      	movs	r2, #8
 800ba7a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ba7c:	4b24      	ldr	r3, [pc, #144]	; (800bb10 <USBD_LL_Init+0xb8>)
 800ba7e:	2202      	movs	r2, #2
 800ba80:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ba82:	4b23      	ldr	r3, [pc, #140]	; (800bb10 <USBD_LL_Init+0xb8>)
 800ba84:	2202      	movs	r2, #2
 800ba86:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800ba88:	4b21      	ldr	r3, [pc, #132]	; (800bb10 <USBD_LL_Init+0xb8>)
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ba8e:	4b20      	ldr	r3, [pc, #128]	; (800bb10 <USBD_LL_Init+0xb8>)
 800ba90:	2200      	movs	r2, #0
 800ba92:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ba94:	4b1e      	ldr	r3, [pc, #120]	; (800bb10 <USBD_LL_Init+0xb8>)
 800ba96:	2200      	movs	r2, #0
 800ba98:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ba9a:	4b1d      	ldr	r3, [pc, #116]	; (800bb10 <USBD_LL_Init+0xb8>)
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800baa0:	481b      	ldr	r0, [pc, #108]	; (800bb10 <USBD_LL_Init+0xb8>)
 800baa2:	f7f8 fce0 	bl	8004466 <HAL_PCD_Init>
 800baa6:	4603      	mov	r3, r0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d001      	beq.n	800bab0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800baac:	f7f5 fe32 	bl	8001714 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bab6:	2318      	movs	r3, #24
 800bab8:	2200      	movs	r2, #0
 800baba:	2100      	movs	r1, #0
 800babc:	f7fa f999 	bl	8005df2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bac6:	2358      	movs	r3, #88	; 0x58
 800bac8:	2200      	movs	r2, #0
 800baca:	2180      	movs	r1, #128	; 0x80
 800bacc:	f7fa f991 	bl	8005df2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bad6:	23c0      	movs	r3, #192	; 0xc0
 800bad8:	2200      	movs	r2, #0
 800bada:	2181      	movs	r1, #129	; 0x81
 800badc:	f7fa f989 	bl	8005df2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bae6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800baea:	2200      	movs	r2, #0
 800baec:	2101      	movs	r1, #1
 800baee:	f7fa f980 	bl	8005df2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800baf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bafc:	2200      	movs	r2, #0
 800bafe:	2182      	movs	r1, #130	; 0x82
 800bb00:	f7fa f977 	bl	8005df2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bb04:	2300      	movs	r3, #0
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3708      	adds	r7, #8
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	20001990 	.word	0x20001990
 800bb14:	40005c00 	.word	0x40005c00

0800bb18 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb20:	2300      	movs	r3, #0
 800bb22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb24:	2300      	movs	r3, #0
 800bb26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7f8 fd7e 	bl	8004630 <HAL_PCD_Start>
 800bb34:	4603      	mov	r3, r0
 800bb36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb38:	7bfb      	ldrb	r3, [r7, #15]
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f000 f980 	bl	800be40 <USBD_Get_USB_Status>
 800bb40:	4603      	mov	r3, r0
 800bb42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb44:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3710      	adds	r7, #16
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}

0800bb4e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bb4e:	b580      	push	{r7, lr}
 800bb50:	b084      	sub	sp, #16
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	6078      	str	r0, [r7, #4]
 800bb56:	4608      	mov	r0, r1
 800bb58:	4611      	mov	r1, r2
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	70fb      	strb	r3, [r7, #3]
 800bb60:	460b      	mov	r3, r1
 800bb62:	70bb      	strb	r3, [r7, #2]
 800bb64:	4613      	mov	r3, r2
 800bb66:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bb76:	78bb      	ldrb	r3, [r7, #2]
 800bb78:	883a      	ldrh	r2, [r7, #0]
 800bb7a:	78f9      	ldrb	r1, [r7, #3]
 800bb7c:	f7f8 fec6 	bl	800490c <HAL_PCD_EP_Open>
 800bb80:	4603      	mov	r3, r0
 800bb82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb84:	7bfb      	ldrb	r3, [r7, #15]
 800bb86:	4618      	mov	r0, r3
 800bb88:	f000 f95a 	bl	800be40 <USBD_Get_USB_Status>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb90:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3710      	adds	r7, #16
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b084      	sub	sp, #16
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
 800bba2:	460b      	mov	r3, r1
 800bba4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bba6:	2300      	movs	r3, #0
 800bba8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bbb4:	78fa      	ldrb	r2, [r7, #3]
 800bbb6:	4611      	mov	r1, r2
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f7f8 ff0d 	bl	80049d8 <HAL_PCD_EP_Close>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbc2:	7bfb      	ldrb	r3, [r7, #15]
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f000 f93b 	bl	800be40 <USBD_Get_USB_Status>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbce:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3710      	adds	r7, #16
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b084      	sub	sp, #16
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bbf2:	78fa      	ldrb	r2, [r7, #3]
 800bbf4:	4611      	mov	r1, r2
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7f8 ffce 	bl	8004b98 <HAL_PCD_EP_SetStall>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc00:	7bfb      	ldrb	r3, [r7, #15]
 800bc02:	4618      	mov	r0, r3
 800bc04:	f000 f91c 	bl	800be40 <USBD_Get_USB_Status>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3710      	adds	r7, #16
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}

0800bc16 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc16:	b580      	push	{r7, lr}
 800bc18:	b084      	sub	sp, #16
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	6078      	str	r0, [r7, #4]
 800bc1e:	460b      	mov	r3, r1
 800bc20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc22:	2300      	movs	r3, #0
 800bc24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc26:	2300      	movs	r3, #0
 800bc28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc30:	78fa      	ldrb	r2, [r7, #3]
 800bc32:	4611      	mov	r1, r2
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7f9 f801 	bl	8004c3c <HAL_PCD_EP_ClrStall>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc3e:	7bfb      	ldrb	r3, [r7, #15]
 800bc40:	4618      	mov	r0, r3
 800bc42:	f000 f8fd 	bl	800be40 <USBD_Get_USB_Status>
 800bc46:	4603      	mov	r3, r0
 800bc48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3710      	adds	r7, #16
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc54:	b480      	push	{r7}
 800bc56:	b085      	sub	sp, #20
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc66:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bc68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	da0c      	bge.n	800bc8a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bc70:	78fb      	ldrb	r3, [r7, #3]
 800bc72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc76:	68f9      	ldr	r1, [r7, #12]
 800bc78:	1c5a      	adds	r2, r3, #1
 800bc7a:	4613      	mov	r3, r2
 800bc7c:	009b      	lsls	r3, r3, #2
 800bc7e:	4413      	add	r3, r2
 800bc80:	00db      	lsls	r3, r3, #3
 800bc82:	440b      	add	r3, r1
 800bc84:	3302      	adds	r3, #2
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	e00b      	b.n	800bca2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bc8a:	78fb      	ldrb	r3, [r7, #3]
 800bc8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc90:	68f9      	ldr	r1, [r7, #12]
 800bc92:	4613      	mov	r3, r2
 800bc94:	009b      	lsls	r3, r3, #2
 800bc96:	4413      	add	r3, r2
 800bc98:	00db      	lsls	r3, r3, #3
 800bc9a:	440b      	add	r3, r1
 800bc9c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800bca0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3714      	adds	r7, #20
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr

0800bcae <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b084      	sub	sp, #16
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
 800bcb6:	460b      	mov	r3, r1
 800bcb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bcc8:	78fa      	ldrb	r2, [r7, #3]
 800bcca:	4611      	mov	r1, r2
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7f8 fdf8 	bl	80048c2 <HAL_PCD_SetAddress>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcd6:	7bfb      	ldrb	r3, [r7, #15]
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f000 f8b1 	bl	800be40 <USBD_Get_USB_Status>
 800bcde:	4603      	mov	r3, r0
 800bce0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bce2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3710      	adds	r7, #16
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b086      	sub	sp, #24
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	607a      	str	r2, [r7, #4]
 800bcf6:	603b      	str	r3, [r7, #0]
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd00:	2300      	movs	r3, #0
 800bd02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bd0a:	7af9      	ldrb	r1, [r7, #11]
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	f7f8 feff 	bl	8004b12 <HAL_PCD_EP_Transmit>
 800bd14:	4603      	mov	r3, r0
 800bd16:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd18:	7dfb      	ldrb	r3, [r7, #23]
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f000 f890 	bl	800be40 <USBD_Get_USB_Status>
 800bd20:	4603      	mov	r3, r0
 800bd22:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bd24:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3718      	adds	r7, #24
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}

0800bd2e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bd2e:	b580      	push	{r7, lr}
 800bd30:	b086      	sub	sp, #24
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	60f8      	str	r0, [r7, #12]
 800bd36:	607a      	str	r2, [r7, #4]
 800bd38:	603b      	str	r3, [r7, #0]
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd42:	2300      	movs	r3, #0
 800bd44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bd4c:	7af9      	ldrb	r1, [r7, #11]
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	f7f8 fe89 	bl	8004a68 <HAL_PCD_EP_Receive>
 800bd56:	4603      	mov	r3, r0
 800bd58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd5a:	7dfb      	ldrb	r3, [r7, #23]
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f000 f86f 	bl	800be40 <USBD_Get_USB_Status>
 800bd62:	4603      	mov	r3, r0
 800bd64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bd66:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3718      	adds	r7, #24
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	460b      	mov	r3, r1
 800bd7a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bd82:	78fa      	ldrb	r2, [r7, #3]
 800bd84:	4611      	mov	r1, r2
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7f8 feab 	bl	8004ae2 <HAL_PCD_EP_GetRxCount>
 800bd8c:	4603      	mov	r3, r0
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3708      	adds	r7, #8
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
	...

0800bd98 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	460b      	mov	r3, r1
 800bda2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800bda4:	78fb      	ldrb	r3, [r7, #3]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d002      	beq.n	800bdb0 <HAL_PCDEx_LPM_Callback+0x18>
 800bdaa:	2b01      	cmp	r3, #1
 800bdac:	d013      	beq.n	800bdd6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800bdae:	e023      	b.n	800bdf8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	699b      	ldr	r3, [r3, #24]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d007      	beq.n	800bdc8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bdb8:	f000 f83c 	bl	800be34 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bdbc:	4b10      	ldr	r3, [pc, #64]	; (800be00 <HAL_PCDEx_LPM_Callback+0x68>)
 800bdbe:	691b      	ldr	r3, [r3, #16]
 800bdc0:	4a0f      	ldr	r2, [pc, #60]	; (800be00 <HAL_PCDEx_LPM_Callback+0x68>)
 800bdc2:	f023 0306 	bic.w	r3, r3, #6
 800bdc6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7fe fc80 	bl	800a6d4 <USBD_LL_Resume>
    break;
 800bdd4:	e010      	b.n	800bdf8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bddc:	4618      	mov	r0, r3
 800bdde:	f7fe fc63 	bl	800a6a8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	699b      	ldr	r3, [r3, #24]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d005      	beq.n	800bdf6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bdea:	4b05      	ldr	r3, [pc, #20]	; (800be00 <HAL_PCDEx_LPM_Callback+0x68>)
 800bdec:	691b      	ldr	r3, [r3, #16]
 800bdee:	4a04      	ldr	r2, [pc, #16]	; (800be00 <HAL_PCDEx_LPM_Callback+0x68>)
 800bdf0:	f043 0306 	orr.w	r3, r3, #6
 800bdf4:	6113      	str	r3, [r2, #16]
    break;
 800bdf6:	bf00      	nop
}
 800bdf8:	bf00      	nop
 800bdfa:	3708      	adds	r7, #8
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}
 800be00:	e000ed00 	.word	0xe000ed00

0800be04 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800be04:	b480      	push	{r7}
 800be06:	b083      	sub	sp, #12
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800be0c:	4b03      	ldr	r3, [pc, #12]	; (800be1c <USBD_static_malloc+0x18>)
}
 800be0e:	4618      	mov	r0, r3
 800be10:	370c      	adds	r7, #12
 800be12:	46bd      	mov	sp, r7
 800be14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be18:	4770      	bx	lr
 800be1a:	bf00      	nop
 800be1c:	20001c84 	.word	0x20001c84

0800be20 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800be20:	b480      	push	{r7}
 800be22:	b083      	sub	sp, #12
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]

}
 800be28:	bf00      	nop
 800be2a:	370c      	adds	r7, #12
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800be38:	f7f5 f952 	bl	80010e0 <SystemClock_Config>
}
 800be3c:	bf00      	nop
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800be40:	b480      	push	{r7}
 800be42:	b085      	sub	sp, #20
 800be44:	af00      	add	r7, sp, #0
 800be46:	4603      	mov	r3, r0
 800be48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be4a:	2300      	movs	r3, #0
 800be4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800be4e:	79fb      	ldrb	r3, [r7, #7]
 800be50:	2b03      	cmp	r3, #3
 800be52:	d817      	bhi.n	800be84 <USBD_Get_USB_Status+0x44>
 800be54:	a201      	add	r2, pc, #4	; (adr r2, 800be5c <USBD_Get_USB_Status+0x1c>)
 800be56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be5a:	bf00      	nop
 800be5c:	0800be6d 	.word	0x0800be6d
 800be60:	0800be73 	.word	0x0800be73
 800be64:	0800be79 	.word	0x0800be79
 800be68:	0800be7f 	.word	0x0800be7f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800be6c:	2300      	movs	r3, #0
 800be6e:	73fb      	strb	r3, [r7, #15]
    break;
 800be70:	e00b      	b.n	800be8a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be72:	2303      	movs	r3, #3
 800be74:	73fb      	strb	r3, [r7, #15]
    break;
 800be76:	e008      	b.n	800be8a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be78:	2301      	movs	r3, #1
 800be7a:	73fb      	strb	r3, [r7, #15]
    break;
 800be7c:	e005      	b.n	800be8a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be7e:	2303      	movs	r3, #3
 800be80:	73fb      	strb	r3, [r7, #15]
    break;
 800be82:	e002      	b.n	800be8a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800be84:	2303      	movs	r3, #3
 800be86:	73fb      	strb	r3, [r7, #15]
    break;
 800be88:	bf00      	nop
  }
  return usb_status;
 800be8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3714      	adds	r7, #20
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr

0800be98 <__errno>:
 800be98:	4b01      	ldr	r3, [pc, #4]	; (800bea0 <__errno+0x8>)
 800be9a:	6818      	ldr	r0, [r3, #0]
 800be9c:	4770      	bx	lr
 800be9e:	bf00      	nop
 800bea0:	20000194 	.word	0x20000194

0800bea4 <__libc_init_array>:
 800bea4:	b570      	push	{r4, r5, r6, lr}
 800bea6:	4d0d      	ldr	r5, [pc, #52]	; (800bedc <__libc_init_array+0x38>)
 800bea8:	4c0d      	ldr	r4, [pc, #52]	; (800bee0 <__libc_init_array+0x3c>)
 800beaa:	1b64      	subs	r4, r4, r5
 800beac:	10a4      	asrs	r4, r4, #2
 800beae:	2600      	movs	r6, #0
 800beb0:	42a6      	cmp	r6, r4
 800beb2:	d109      	bne.n	800bec8 <__libc_init_array+0x24>
 800beb4:	4d0b      	ldr	r5, [pc, #44]	; (800bee4 <__libc_init_array+0x40>)
 800beb6:	4c0c      	ldr	r4, [pc, #48]	; (800bee8 <__libc_init_array+0x44>)
 800beb8:	f001 fa00 	bl	800d2bc <_init>
 800bebc:	1b64      	subs	r4, r4, r5
 800bebe:	10a4      	asrs	r4, r4, #2
 800bec0:	2600      	movs	r6, #0
 800bec2:	42a6      	cmp	r6, r4
 800bec4:	d105      	bne.n	800bed2 <__libc_init_array+0x2e>
 800bec6:	bd70      	pop	{r4, r5, r6, pc}
 800bec8:	f855 3b04 	ldr.w	r3, [r5], #4
 800becc:	4798      	blx	r3
 800bece:	3601      	adds	r6, #1
 800bed0:	e7ee      	b.n	800beb0 <__libc_init_array+0xc>
 800bed2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bed6:	4798      	blx	r3
 800bed8:	3601      	adds	r6, #1
 800beda:	e7f2      	b.n	800bec2 <__libc_init_array+0x1e>
 800bedc:	0800d5a0 	.word	0x0800d5a0
 800bee0:	0800d5a0 	.word	0x0800d5a0
 800bee4:	0800d5a0 	.word	0x0800d5a0
 800bee8:	0800d5a4 	.word	0x0800d5a4

0800beec <memcpy>:
 800beec:	440a      	add	r2, r1
 800beee:	4291      	cmp	r1, r2
 800bef0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bef4:	d100      	bne.n	800bef8 <memcpy+0xc>
 800bef6:	4770      	bx	lr
 800bef8:	b510      	push	{r4, lr}
 800befa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800befe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf02:	4291      	cmp	r1, r2
 800bf04:	d1f9      	bne.n	800befa <memcpy+0xe>
 800bf06:	bd10      	pop	{r4, pc}

0800bf08 <memset>:
 800bf08:	4402      	add	r2, r0
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d100      	bne.n	800bf12 <memset+0xa>
 800bf10:	4770      	bx	lr
 800bf12:	f803 1b01 	strb.w	r1, [r3], #1
 800bf16:	e7f9      	b.n	800bf0c <memset+0x4>

0800bf18 <iprintf>:
 800bf18:	b40f      	push	{r0, r1, r2, r3}
 800bf1a:	4b0a      	ldr	r3, [pc, #40]	; (800bf44 <iprintf+0x2c>)
 800bf1c:	b513      	push	{r0, r1, r4, lr}
 800bf1e:	681c      	ldr	r4, [r3, #0]
 800bf20:	b124      	cbz	r4, 800bf2c <iprintf+0x14>
 800bf22:	69a3      	ldr	r3, [r4, #24]
 800bf24:	b913      	cbnz	r3, 800bf2c <iprintf+0x14>
 800bf26:	4620      	mov	r0, r4
 800bf28:	f000 fa7e 	bl	800c428 <__sinit>
 800bf2c:	ab05      	add	r3, sp, #20
 800bf2e:	9a04      	ldr	r2, [sp, #16]
 800bf30:	68a1      	ldr	r1, [r4, #8]
 800bf32:	9301      	str	r3, [sp, #4]
 800bf34:	4620      	mov	r0, r4
 800bf36:	f000 fde3 	bl	800cb00 <_vfiprintf_r>
 800bf3a:	b002      	add	sp, #8
 800bf3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf40:	b004      	add	sp, #16
 800bf42:	4770      	bx	lr
 800bf44:	20000194 	.word	0x20000194

0800bf48 <_puts_r>:
 800bf48:	b570      	push	{r4, r5, r6, lr}
 800bf4a:	460e      	mov	r6, r1
 800bf4c:	4605      	mov	r5, r0
 800bf4e:	b118      	cbz	r0, 800bf58 <_puts_r+0x10>
 800bf50:	6983      	ldr	r3, [r0, #24]
 800bf52:	b90b      	cbnz	r3, 800bf58 <_puts_r+0x10>
 800bf54:	f000 fa68 	bl	800c428 <__sinit>
 800bf58:	69ab      	ldr	r3, [r5, #24]
 800bf5a:	68ac      	ldr	r4, [r5, #8]
 800bf5c:	b913      	cbnz	r3, 800bf64 <_puts_r+0x1c>
 800bf5e:	4628      	mov	r0, r5
 800bf60:	f000 fa62 	bl	800c428 <__sinit>
 800bf64:	4b2c      	ldr	r3, [pc, #176]	; (800c018 <_puts_r+0xd0>)
 800bf66:	429c      	cmp	r4, r3
 800bf68:	d120      	bne.n	800bfac <_puts_r+0x64>
 800bf6a:	686c      	ldr	r4, [r5, #4]
 800bf6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf6e:	07db      	lsls	r3, r3, #31
 800bf70:	d405      	bmi.n	800bf7e <_puts_r+0x36>
 800bf72:	89a3      	ldrh	r3, [r4, #12]
 800bf74:	0598      	lsls	r0, r3, #22
 800bf76:	d402      	bmi.n	800bf7e <_puts_r+0x36>
 800bf78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf7a:	f000 faf3 	bl	800c564 <__retarget_lock_acquire_recursive>
 800bf7e:	89a3      	ldrh	r3, [r4, #12]
 800bf80:	0719      	lsls	r1, r3, #28
 800bf82:	d51d      	bpl.n	800bfc0 <_puts_r+0x78>
 800bf84:	6923      	ldr	r3, [r4, #16]
 800bf86:	b1db      	cbz	r3, 800bfc0 <_puts_r+0x78>
 800bf88:	3e01      	subs	r6, #1
 800bf8a:	68a3      	ldr	r3, [r4, #8]
 800bf8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bf90:	3b01      	subs	r3, #1
 800bf92:	60a3      	str	r3, [r4, #8]
 800bf94:	bb39      	cbnz	r1, 800bfe6 <_puts_r+0x9e>
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	da38      	bge.n	800c00c <_puts_r+0xc4>
 800bf9a:	4622      	mov	r2, r4
 800bf9c:	210a      	movs	r1, #10
 800bf9e:	4628      	mov	r0, r5
 800bfa0:	f000 f868 	bl	800c074 <__swbuf_r>
 800bfa4:	3001      	adds	r0, #1
 800bfa6:	d011      	beq.n	800bfcc <_puts_r+0x84>
 800bfa8:	250a      	movs	r5, #10
 800bfaa:	e011      	b.n	800bfd0 <_puts_r+0x88>
 800bfac:	4b1b      	ldr	r3, [pc, #108]	; (800c01c <_puts_r+0xd4>)
 800bfae:	429c      	cmp	r4, r3
 800bfb0:	d101      	bne.n	800bfb6 <_puts_r+0x6e>
 800bfb2:	68ac      	ldr	r4, [r5, #8]
 800bfb4:	e7da      	b.n	800bf6c <_puts_r+0x24>
 800bfb6:	4b1a      	ldr	r3, [pc, #104]	; (800c020 <_puts_r+0xd8>)
 800bfb8:	429c      	cmp	r4, r3
 800bfba:	bf08      	it	eq
 800bfbc:	68ec      	ldreq	r4, [r5, #12]
 800bfbe:	e7d5      	b.n	800bf6c <_puts_r+0x24>
 800bfc0:	4621      	mov	r1, r4
 800bfc2:	4628      	mov	r0, r5
 800bfc4:	f000 f8a8 	bl	800c118 <__swsetup_r>
 800bfc8:	2800      	cmp	r0, #0
 800bfca:	d0dd      	beq.n	800bf88 <_puts_r+0x40>
 800bfcc:	f04f 35ff 	mov.w	r5, #4294967295
 800bfd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfd2:	07da      	lsls	r2, r3, #31
 800bfd4:	d405      	bmi.n	800bfe2 <_puts_r+0x9a>
 800bfd6:	89a3      	ldrh	r3, [r4, #12]
 800bfd8:	059b      	lsls	r3, r3, #22
 800bfda:	d402      	bmi.n	800bfe2 <_puts_r+0x9a>
 800bfdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfde:	f000 fac2 	bl	800c566 <__retarget_lock_release_recursive>
 800bfe2:	4628      	mov	r0, r5
 800bfe4:	bd70      	pop	{r4, r5, r6, pc}
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	da04      	bge.n	800bff4 <_puts_r+0xac>
 800bfea:	69a2      	ldr	r2, [r4, #24]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	dc06      	bgt.n	800bffe <_puts_r+0xb6>
 800bff0:	290a      	cmp	r1, #10
 800bff2:	d004      	beq.n	800bffe <_puts_r+0xb6>
 800bff4:	6823      	ldr	r3, [r4, #0]
 800bff6:	1c5a      	adds	r2, r3, #1
 800bff8:	6022      	str	r2, [r4, #0]
 800bffa:	7019      	strb	r1, [r3, #0]
 800bffc:	e7c5      	b.n	800bf8a <_puts_r+0x42>
 800bffe:	4622      	mov	r2, r4
 800c000:	4628      	mov	r0, r5
 800c002:	f000 f837 	bl	800c074 <__swbuf_r>
 800c006:	3001      	adds	r0, #1
 800c008:	d1bf      	bne.n	800bf8a <_puts_r+0x42>
 800c00a:	e7df      	b.n	800bfcc <_puts_r+0x84>
 800c00c:	6823      	ldr	r3, [r4, #0]
 800c00e:	250a      	movs	r5, #10
 800c010:	1c5a      	adds	r2, r3, #1
 800c012:	6022      	str	r2, [r4, #0]
 800c014:	701d      	strb	r5, [r3, #0]
 800c016:	e7db      	b.n	800bfd0 <_puts_r+0x88>
 800c018:	0800d52c 	.word	0x0800d52c
 800c01c:	0800d54c 	.word	0x0800d54c
 800c020:	0800d50c 	.word	0x0800d50c

0800c024 <puts>:
 800c024:	4b02      	ldr	r3, [pc, #8]	; (800c030 <puts+0xc>)
 800c026:	4601      	mov	r1, r0
 800c028:	6818      	ldr	r0, [r3, #0]
 800c02a:	f7ff bf8d 	b.w	800bf48 <_puts_r>
 800c02e:	bf00      	nop
 800c030:	20000194 	.word	0x20000194

0800c034 <siprintf>:
 800c034:	b40e      	push	{r1, r2, r3}
 800c036:	b500      	push	{lr}
 800c038:	b09c      	sub	sp, #112	; 0x70
 800c03a:	ab1d      	add	r3, sp, #116	; 0x74
 800c03c:	9002      	str	r0, [sp, #8]
 800c03e:	9006      	str	r0, [sp, #24]
 800c040:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c044:	4809      	ldr	r0, [pc, #36]	; (800c06c <siprintf+0x38>)
 800c046:	9107      	str	r1, [sp, #28]
 800c048:	9104      	str	r1, [sp, #16]
 800c04a:	4909      	ldr	r1, [pc, #36]	; (800c070 <siprintf+0x3c>)
 800c04c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c050:	9105      	str	r1, [sp, #20]
 800c052:	6800      	ldr	r0, [r0, #0]
 800c054:	9301      	str	r3, [sp, #4]
 800c056:	a902      	add	r1, sp, #8
 800c058:	f000 fc28 	bl	800c8ac <_svfiprintf_r>
 800c05c:	9b02      	ldr	r3, [sp, #8]
 800c05e:	2200      	movs	r2, #0
 800c060:	701a      	strb	r2, [r3, #0]
 800c062:	b01c      	add	sp, #112	; 0x70
 800c064:	f85d eb04 	ldr.w	lr, [sp], #4
 800c068:	b003      	add	sp, #12
 800c06a:	4770      	bx	lr
 800c06c:	20000194 	.word	0x20000194
 800c070:	ffff0208 	.word	0xffff0208

0800c074 <__swbuf_r>:
 800c074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c076:	460e      	mov	r6, r1
 800c078:	4614      	mov	r4, r2
 800c07a:	4605      	mov	r5, r0
 800c07c:	b118      	cbz	r0, 800c086 <__swbuf_r+0x12>
 800c07e:	6983      	ldr	r3, [r0, #24]
 800c080:	b90b      	cbnz	r3, 800c086 <__swbuf_r+0x12>
 800c082:	f000 f9d1 	bl	800c428 <__sinit>
 800c086:	4b21      	ldr	r3, [pc, #132]	; (800c10c <__swbuf_r+0x98>)
 800c088:	429c      	cmp	r4, r3
 800c08a:	d12b      	bne.n	800c0e4 <__swbuf_r+0x70>
 800c08c:	686c      	ldr	r4, [r5, #4]
 800c08e:	69a3      	ldr	r3, [r4, #24]
 800c090:	60a3      	str	r3, [r4, #8]
 800c092:	89a3      	ldrh	r3, [r4, #12]
 800c094:	071a      	lsls	r2, r3, #28
 800c096:	d52f      	bpl.n	800c0f8 <__swbuf_r+0x84>
 800c098:	6923      	ldr	r3, [r4, #16]
 800c09a:	b36b      	cbz	r3, 800c0f8 <__swbuf_r+0x84>
 800c09c:	6923      	ldr	r3, [r4, #16]
 800c09e:	6820      	ldr	r0, [r4, #0]
 800c0a0:	1ac0      	subs	r0, r0, r3
 800c0a2:	6963      	ldr	r3, [r4, #20]
 800c0a4:	b2f6      	uxtb	r6, r6
 800c0a6:	4283      	cmp	r3, r0
 800c0a8:	4637      	mov	r7, r6
 800c0aa:	dc04      	bgt.n	800c0b6 <__swbuf_r+0x42>
 800c0ac:	4621      	mov	r1, r4
 800c0ae:	4628      	mov	r0, r5
 800c0b0:	f000 f926 	bl	800c300 <_fflush_r>
 800c0b4:	bb30      	cbnz	r0, 800c104 <__swbuf_r+0x90>
 800c0b6:	68a3      	ldr	r3, [r4, #8]
 800c0b8:	3b01      	subs	r3, #1
 800c0ba:	60a3      	str	r3, [r4, #8]
 800c0bc:	6823      	ldr	r3, [r4, #0]
 800c0be:	1c5a      	adds	r2, r3, #1
 800c0c0:	6022      	str	r2, [r4, #0]
 800c0c2:	701e      	strb	r6, [r3, #0]
 800c0c4:	6963      	ldr	r3, [r4, #20]
 800c0c6:	3001      	adds	r0, #1
 800c0c8:	4283      	cmp	r3, r0
 800c0ca:	d004      	beq.n	800c0d6 <__swbuf_r+0x62>
 800c0cc:	89a3      	ldrh	r3, [r4, #12]
 800c0ce:	07db      	lsls	r3, r3, #31
 800c0d0:	d506      	bpl.n	800c0e0 <__swbuf_r+0x6c>
 800c0d2:	2e0a      	cmp	r6, #10
 800c0d4:	d104      	bne.n	800c0e0 <__swbuf_r+0x6c>
 800c0d6:	4621      	mov	r1, r4
 800c0d8:	4628      	mov	r0, r5
 800c0da:	f000 f911 	bl	800c300 <_fflush_r>
 800c0de:	b988      	cbnz	r0, 800c104 <__swbuf_r+0x90>
 800c0e0:	4638      	mov	r0, r7
 800c0e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0e4:	4b0a      	ldr	r3, [pc, #40]	; (800c110 <__swbuf_r+0x9c>)
 800c0e6:	429c      	cmp	r4, r3
 800c0e8:	d101      	bne.n	800c0ee <__swbuf_r+0x7a>
 800c0ea:	68ac      	ldr	r4, [r5, #8]
 800c0ec:	e7cf      	b.n	800c08e <__swbuf_r+0x1a>
 800c0ee:	4b09      	ldr	r3, [pc, #36]	; (800c114 <__swbuf_r+0xa0>)
 800c0f0:	429c      	cmp	r4, r3
 800c0f2:	bf08      	it	eq
 800c0f4:	68ec      	ldreq	r4, [r5, #12]
 800c0f6:	e7ca      	b.n	800c08e <__swbuf_r+0x1a>
 800c0f8:	4621      	mov	r1, r4
 800c0fa:	4628      	mov	r0, r5
 800c0fc:	f000 f80c 	bl	800c118 <__swsetup_r>
 800c100:	2800      	cmp	r0, #0
 800c102:	d0cb      	beq.n	800c09c <__swbuf_r+0x28>
 800c104:	f04f 37ff 	mov.w	r7, #4294967295
 800c108:	e7ea      	b.n	800c0e0 <__swbuf_r+0x6c>
 800c10a:	bf00      	nop
 800c10c:	0800d52c 	.word	0x0800d52c
 800c110:	0800d54c 	.word	0x0800d54c
 800c114:	0800d50c 	.word	0x0800d50c

0800c118 <__swsetup_r>:
 800c118:	4b32      	ldr	r3, [pc, #200]	; (800c1e4 <__swsetup_r+0xcc>)
 800c11a:	b570      	push	{r4, r5, r6, lr}
 800c11c:	681d      	ldr	r5, [r3, #0]
 800c11e:	4606      	mov	r6, r0
 800c120:	460c      	mov	r4, r1
 800c122:	b125      	cbz	r5, 800c12e <__swsetup_r+0x16>
 800c124:	69ab      	ldr	r3, [r5, #24]
 800c126:	b913      	cbnz	r3, 800c12e <__swsetup_r+0x16>
 800c128:	4628      	mov	r0, r5
 800c12a:	f000 f97d 	bl	800c428 <__sinit>
 800c12e:	4b2e      	ldr	r3, [pc, #184]	; (800c1e8 <__swsetup_r+0xd0>)
 800c130:	429c      	cmp	r4, r3
 800c132:	d10f      	bne.n	800c154 <__swsetup_r+0x3c>
 800c134:	686c      	ldr	r4, [r5, #4]
 800c136:	89a3      	ldrh	r3, [r4, #12]
 800c138:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c13c:	0719      	lsls	r1, r3, #28
 800c13e:	d42c      	bmi.n	800c19a <__swsetup_r+0x82>
 800c140:	06dd      	lsls	r5, r3, #27
 800c142:	d411      	bmi.n	800c168 <__swsetup_r+0x50>
 800c144:	2309      	movs	r3, #9
 800c146:	6033      	str	r3, [r6, #0]
 800c148:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c14c:	81a3      	strh	r3, [r4, #12]
 800c14e:	f04f 30ff 	mov.w	r0, #4294967295
 800c152:	e03e      	b.n	800c1d2 <__swsetup_r+0xba>
 800c154:	4b25      	ldr	r3, [pc, #148]	; (800c1ec <__swsetup_r+0xd4>)
 800c156:	429c      	cmp	r4, r3
 800c158:	d101      	bne.n	800c15e <__swsetup_r+0x46>
 800c15a:	68ac      	ldr	r4, [r5, #8]
 800c15c:	e7eb      	b.n	800c136 <__swsetup_r+0x1e>
 800c15e:	4b24      	ldr	r3, [pc, #144]	; (800c1f0 <__swsetup_r+0xd8>)
 800c160:	429c      	cmp	r4, r3
 800c162:	bf08      	it	eq
 800c164:	68ec      	ldreq	r4, [r5, #12]
 800c166:	e7e6      	b.n	800c136 <__swsetup_r+0x1e>
 800c168:	0758      	lsls	r0, r3, #29
 800c16a:	d512      	bpl.n	800c192 <__swsetup_r+0x7a>
 800c16c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c16e:	b141      	cbz	r1, 800c182 <__swsetup_r+0x6a>
 800c170:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c174:	4299      	cmp	r1, r3
 800c176:	d002      	beq.n	800c17e <__swsetup_r+0x66>
 800c178:	4630      	mov	r0, r6
 800c17a:	f000 fa5b 	bl	800c634 <_free_r>
 800c17e:	2300      	movs	r3, #0
 800c180:	6363      	str	r3, [r4, #52]	; 0x34
 800c182:	89a3      	ldrh	r3, [r4, #12]
 800c184:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c188:	81a3      	strh	r3, [r4, #12]
 800c18a:	2300      	movs	r3, #0
 800c18c:	6063      	str	r3, [r4, #4]
 800c18e:	6923      	ldr	r3, [r4, #16]
 800c190:	6023      	str	r3, [r4, #0]
 800c192:	89a3      	ldrh	r3, [r4, #12]
 800c194:	f043 0308 	orr.w	r3, r3, #8
 800c198:	81a3      	strh	r3, [r4, #12]
 800c19a:	6923      	ldr	r3, [r4, #16]
 800c19c:	b94b      	cbnz	r3, 800c1b2 <__swsetup_r+0x9a>
 800c19e:	89a3      	ldrh	r3, [r4, #12]
 800c1a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c1a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1a8:	d003      	beq.n	800c1b2 <__swsetup_r+0x9a>
 800c1aa:	4621      	mov	r1, r4
 800c1ac:	4630      	mov	r0, r6
 800c1ae:	f000 fa01 	bl	800c5b4 <__smakebuf_r>
 800c1b2:	89a0      	ldrh	r0, [r4, #12]
 800c1b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c1b8:	f010 0301 	ands.w	r3, r0, #1
 800c1bc:	d00a      	beq.n	800c1d4 <__swsetup_r+0xbc>
 800c1be:	2300      	movs	r3, #0
 800c1c0:	60a3      	str	r3, [r4, #8]
 800c1c2:	6963      	ldr	r3, [r4, #20]
 800c1c4:	425b      	negs	r3, r3
 800c1c6:	61a3      	str	r3, [r4, #24]
 800c1c8:	6923      	ldr	r3, [r4, #16]
 800c1ca:	b943      	cbnz	r3, 800c1de <__swsetup_r+0xc6>
 800c1cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c1d0:	d1ba      	bne.n	800c148 <__swsetup_r+0x30>
 800c1d2:	bd70      	pop	{r4, r5, r6, pc}
 800c1d4:	0781      	lsls	r1, r0, #30
 800c1d6:	bf58      	it	pl
 800c1d8:	6963      	ldrpl	r3, [r4, #20]
 800c1da:	60a3      	str	r3, [r4, #8]
 800c1dc:	e7f4      	b.n	800c1c8 <__swsetup_r+0xb0>
 800c1de:	2000      	movs	r0, #0
 800c1e0:	e7f7      	b.n	800c1d2 <__swsetup_r+0xba>
 800c1e2:	bf00      	nop
 800c1e4:	20000194 	.word	0x20000194
 800c1e8:	0800d52c 	.word	0x0800d52c
 800c1ec:	0800d54c 	.word	0x0800d54c
 800c1f0:	0800d50c 	.word	0x0800d50c

0800c1f4 <__sflush_r>:
 800c1f4:	898a      	ldrh	r2, [r1, #12]
 800c1f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1fa:	4605      	mov	r5, r0
 800c1fc:	0710      	lsls	r0, r2, #28
 800c1fe:	460c      	mov	r4, r1
 800c200:	d458      	bmi.n	800c2b4 <__sflush_r+0xc0>
 800c202:	684b      	ldr	r3, [r1, #4]
 800c204:	2b00      	cmp	r3, #0
 800c206:	dc05      	bgt.n	800c214 <__sflush_r+0x20>
 800c208:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	dc02      	bgt.n	800c214 <__sflush_r+0x20>
 800c20e:	2000      	movs	r0, #0
 800c210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c214:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c216:	2e00      	cmp	r6, #0
 800c218:	d0f9      	beq.n	800c20e <__sflush_r+0x1a>
 800c21a:	2300      	movs	r3, #0
 800c21c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c220:	682f      	ldr	r7, [r5, #0]
 800c222:	602b      	str	r3, [r5, #0]
 800c224:	d032      	beq.n	800c28c <__sflush_r+0x98>
 800c226:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c228:	89a3      	ldrh	r3, [r4, #12]
 800c22a:	075a      	lsls	r2, r3, #29
 800c22c:	d505      	bpl.n	800c23a <__sflush_r+0x46>
 800c22e:	6863      	ldr	r3, [r4, #4]
 800c230:	1ac0      	subs	r0, r0, r3
 800c232:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c234:	b10b      	cbz	r3, 800c23a <__sflush_r+0x46>
 800c236:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c238:	1ac0      	subs	r0, r0, r3
 800c23a:	2300      	movs	r3, #0
 800c23c:	4602      	mov	r2, r0
 800c23e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c240:	6a21      	ldr	r1, [r4, #32]
 800c242:	4628      	mov	r0, r5
 800c244:	47b0      	blx	r6
 800c246:	1c43      	adds	r3, r0, #1
 800c248:	89a3      	ldrh	r3, [r4, #12]
 800c24a:	d106      	bne.n	800c25a <__sflush_r+0x66>
 800c24c:	6829      	ldr	r1, [r5, #0]
 800c24e:	291d      	cmp	r1, #29
 800c250:	d82c      	bhi.n	800c2ac <__sflush_r+0xb8>
 800c252:	4a2a      	ldr	r2, [pc, #168]	; (800c2fc <__sflush_r+0x108>)
 800c254:	40ca      	lsrs	r2, r1
 800c256:	07d6      	lsls	r6, r2, #31
 800c258:	d528      	bpl.n	800c2ac <__sflush_r+0xb8>
 800c25a:	2200      	movs	r2, #0
 800c25c:	6062      	str	r2, [r4, #4]
 800c25e:	04d9      	lsls	r1, r3, #19
 800c260:	6922      	ldr	r2, [r4, #16]
 800c262:	6022      	str	r2, [r4, #0]
 800c264:	d504      	bpl.n	800c270 <__sflush_r+0x7c>
 800c266:	1c42      	adds	r2, r0, #1
 800c268:	d101      	bne.n	800c26e <__sflush_r+0x7a>
 800c26a:	682b      	ldr	r3, [r5, #0]
 800c26c:	b903      	cbnz	r3, 800c270 <__sflush_r+0x7c>
 800c26e:	6560      	str	r0, [r4, #84]	; 0x54
 800c270:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c272:	602f      	str	r7, [r5, #0]
 800c274:	2900      	cmp	r1, #0
 800c276:	d0ca      	beq.n	800c20e <__sflush_r+0x1a>
 800c278:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c27c:	4299      	cmp	r1, r3
 800c27e:	d002      	beq.n	800c286 <__sflush_r+0x92>
 800c280:	4628      	mov	r0, r5
 800c282:	f000 f9d7 	bl	800c634 <_free_r>
 800c286:	2000      	movs	r0, #0
 800c288:	6360      	str	r0, [r4, #52]	; 0x34
 800c28a:	e7c1      	b.n	800c210 <__sflush_r+0x1c>
 800c28c:	6a21      	ldr	r1, [r4, #32]
 800c28e:	2301      	movs	r3, #1
 800c290:	4628      	mov	r0, r5
 800c292:	47b0      	blx	r6
 800c294:	1c41      	adds	r1, r0, #1
 800c296:	d1c7      	bne.n	800c228 <__sflush_r+0x34>
 800c298:	682b      	ldr	r3, [r5, #0]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d0c4      	beq.n	800c228 <__sflush_r+0x34>
 800c29e:	2b1d      	cmp	r3, #29
 800c2a0:	d001      	beq.n	800c2a6 <__sflush_r+0xb2>
 800c2a2:	2b16      	cmp	r3, #22
 800c2a4:	d101      	bne.n	800c2aa <__sflush_r+0xb6>
 800c2a6:	602f      	str	r7, [r5, #0]
 800c2a8:	e7b1      	b.n	800c20e <__sflush_r+0x1a>
 800c2aa:	89a3      	ldrh	r3, [r4, #12]
 800c2ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2b0:	81a3      	strh	r3, [r4, #12]
 800c2b2:	e7ad      	b.n	800c210 <__sflush_r+0x1c>
 800c2b4:	690f      	ldr	r7, [r1, #16]
 800c2b6:	2f00      	cmp	r7, #0
 800c2b8:	d0a9      	beq.n	800c20e <__sflush_r+0x1a>
 800c2ba:	0793      	lsls	r3, r2, #30
 800c2bc:	680e      	ldr	r6, [r1, #0]
 800c2be:	bf08      	it	eq
 800c2c0:	694b      	ldreq	r3, [r1, #20]
 800c2c2:	600f      	str	r7, [r1, #0]
 800c2c4:	bf18      	it	ne
 800c2c6:	2300      	movne	r3, #0
 800c2c8:	eba6 0807 	sub.w	r8, r6, r7
 800c2cc:	608b      	str	r3, [r1, #8]
 800c2ce:	f1b8 0f00 	cmp.w	r8, #0
 800c2d2:	dd9c      	ble.n	800c20e <__sflush_r+0x1a>
 800c2d4:	6a21      	ldr	r1, [r4, #32]
 800c2d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c2d8:	4643      	mov	r3, r8
 800c2da:	463a      	mov	r2, r7
 800c2dc:	4628      	mov	r0, r5
 800c2de:	47b0      	blx	r6
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	dc06      	bgt.n	800c2f2 <__sflush_r+0xfe>
 800c2e4:	89a3      	ldrh	r3, [r4, #12]
 800c2e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2ea:	81a3      	strh	r3, [r4, #12]
 800c2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c2f0:	e78e      	b.n	800c210 <__sflush_r+0x1c>
 800c2f2:	4407      	add	r7, r0
 800c2f4:	eba8 0800 	sub.w	r8, r8, r0
 800c2f8:	e7e9      	b.n	800c2ce <__sflush_r+0xda>
 800c2fa:	bf00      	nop
 800c2fc:	20400001 	.word	0x20400001

0800c300 <_fflush_r>:
 800c300:	b538      	push	{r3, r4, r5, lr}
 800c302:	690b      	ldr	r3, [r1, #16]
 800c304:	4605      	mov	r5, r0
 800c306:	460c      	mov	r4, r1
 800c308:	b913      	cbnz	r3, 800c310 <_fflush_r+0x10>
 800c30a:	2500      	movs	r5, #0
 800c30c:	4628      	mov	r0, r5
 800c30e:	bd38      	pop	{r3, r4, r5, pc}
 800c310:	b118      	cbz	r0, 800c31a <_fflush_r+0x1a>
 800c312:	6983      	ldr	r3, [r0, #24]
 800c314:	b90b      	cbnz	r3, 800c31a <_fflush_r+0x1a>
 800c316:	f000 f887 	bl	800c428 <__sinit>
 800c31a:	4b14      	ldr	r3, [pc, #80]	; (800c36c <_fflush_r+0x6c>)
 800c31c:	429c      	cmp	r4, r3
 800c31e:	d11b      	bne.n	800c358 <_fflush_r+0x58>
 800c320:	686c      	ldr	r4, [r5, #4]
 800c322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d0ef      	beq.n	800c30a <_fflush_r+0xa>
 800c32a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c32c:	07d0      	lsls	r0, r2, #31
 800c32e:	d404      	bmi.n	800c33a <_fflush_r+0x3a>
 800c330:	0599      	lsls	r1, r3, #22
 800c332:	d402      	bmi.n	800c33a <_fflush_r+0x3a>
 800c334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c336:	f000 f915 	bl	800c564 <__retarget_lock_acquire_recursive>
 800c33a:	4628      	mov	r0, r5
 800c33c:	4621      	mov	r1, r4
 800c33e:	f7ff ff59 	bl	800c1f4 <__sflush_r>
 800c342:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c344:	07da      	lsls	r2, r3, #31
 800c346:	4605      	mov	r5, r0
 800c348:	d4e0      	bmi.n	800c30c <_fflush_r+0xc>
 800c34a:	89a3      	ldrh	r3, [r4, #12]
 800c34c:	059b      	lsls	r3, r3, #22
 800c34e:	d4dd      	bmi.n	800c30c <_fflush_r+0xc>
 800c350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c352:	f000 f908 	bl	800c566 <__retarget_lock_release_recursive>
 800c356:	e7d9      	b.n	800c30c <_fflush_r+0xc>
 800c358:	4b05      	ldr	r3, [pc, #20]	; (800c370 <_fflush_r+0x70>)
 800c35a:	429c      	cmp	r4, r3
 800c35c:	d101      	bne.n	800c362 <_fflush_r+0x62>
 800c35e:	68ac      	ldr	r4, [r5, #8]
 800c360:	e7df      	b.n	800c322 <_fflush_r+0x22>
 800c362:	4b04      	ldr	r3, [pc, #16]	; (800c374 <_fflush_r+0x74>)
 800c364:	429c      	cmp	r4, r3
 800c366:	bf08      	it	eq
 800c368:	68ec      	ldreq	r4, [r5, #12]
 800c36a:	e7da      	b.n	800c322 <_fflush_r+0x22>
 800c36c:	0800d52c 	.word	0x0800d52c
 800c370:	0800d54c 	.word	0x0800d54c
 800c374:	0800d50c 	.word	0x0800d50c

0800c378 <std>:
 800c378:	2300      	movs	r3, #0
 800c37a:	b510      	push	{r4, lr}
 800c37c:	4604      	mov	r4, r0
 800c37e:	e9c0 3300 	strd	r3, r3, [r0]
 800c382:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c386:	6083      	str	r3, [r0, #8]
 800c388:	8181      	strh	r1, [r0, #12]
 800c38a:	6643      	str	r3, [r0, #100]	; 0x64
 800c38c:	81c2      	strh	r2, [r0, #14]
 800c38e:	6183      	str	r3, [r0, #24]
 800c390:	4619      	mov	r1, r3
 800c392:	2208      	movs	r2, #8
 800c394:	305c      	adds	r0, #92	; 0x5c
 800c396:	f7ff fdb7 	bl	800bf08 <memset>
 800c39a:	4b05      	ldr	r3, [pc, #20]	; (800c3b0 <std+0x38>)
 800c39c:	6263      	str	r3, [r4, #36]	; 0x24
 800c39e:	4b05      	ldr	r3, [pc, #20]	; (800c3b4 <std+0x3c>)
 800c3a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800c3a2:	4b05      	ldr	r3, [pc, #20]	; (800c3b8 <std+0x40>)
 800c3a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c3a6:	4b05      	ldr	r3, [pc, #20]	; (800c3bc <std+0x44>)
 800c3a8:	6224      	str	r4, [r4, #32]
 800c3aa:	6323      	str	r3, [r4, #48]	; 0x30
 800c3ac:	bd10      	pop	{r4, pc}
 800c3ae:	bf00      	nop
 800c3b0:	0800d0a9 	.word	0x0800d0a9
 800c3b4:	0800d0cb 	.word	0x0800d0cb
 800c3b8:	0800d103 	.word	0x0800d103
 800c3bc:	0800d127 	.word	0x0800d127

0800c3c0 <_cleanup_r>:
 800c3c0:	4901      	ldr	r1, [pc, #4]	; (800c3c8 <_cleanup_r+0x8>)
 800c3c2:	f000 b8af 	b.w	800c524 <_fwalk_reent>
 800c3c6:	bf00      	nop
 800c3c8:	0800c301 	.word	0x0800c301

0800c3cc <__sfmoreglue>:
 800c3cc:	b570      	push	{r4, r5, r6, lr}
 800c3ce:	2268      	movs	r2, #104	; 0x68
 800c3d0:	1e4d      	subs	r5, r1, #1
 800c3d2:	4355      	muls	r5, r2
 800c3d4:	460e      	mov	r6, r1
 800c3d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c3da:	f000 f997 	bl	800c70c <_malloc_r>
 800c3de:	4604      	mov	r4, r0
 800c3e0:	b140      	cbz	r0, 800c3f4 <__sfmoreglue+0x28>
 800c3e2:	2100      	movs	r1, #0
 800c3e4:	e9c0 1600 	strd	r1, r6, [r0]
 800c3e8:	300c      	adds	r0, #12
 800c3ea:	60a0      	str	r0, [r4, #8]
 800c3ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c3f0:	f7ff fd8a 	bl	800bf08 <memset>
 800c3f4:	4620      	mov	r0, r4
 800c3f6:	bd70      	pop	{r4, r5, r6, pc}

0800c3f8 <__sfp_lock_acquire>:
 800c3f8:	4801      	ldr	r0, [pc, #4]	; (800c400 <__sfp_lock_acquire+0x8>)
 800c3fa:	f000 b8b3 	b.w	800c564 <__retarget_lock_acquire_recursive>
 800c3fe:	bf00      	nop
 800c400:	20001ea5 	.word	0x20001ea5

0800c404 <__sfp_lock_release>:
 800c404:	4801      	ldr	r0, [pc, #4]	; (800c40c <__sfp_lock_release+0x8>)
 800c406:	f000 b8ae 	b.w	800c566 <__retarget_lock_release_recursive>
 800c40a:	bf00      	nop
 800c40c:	20001ea5 	.word	0x20001ea5

0800c410 <__sinit_lock_acquire>:
 800c410:	4801      	ldr	r0, [pc, #4]	; (800c418 <__sinit_lock_acquire+0x8>)
 800c412:	f000 b8a7 	b.w	800c564 <__retarget_lock_acquire_recursive>
 800c416:	bf00      	nop
 800c418:	20001ea6 	.word	0x20001ea6

0800c41c <__sinit_lock_release>:
 800c41c:	4801      	ldr	r0, [pc, #4]	; (800c424 <__sinit_lock_release+0x8>)
 800c41e:	f000 b8a2 	b.w	800c566 <__retarget_lock_release_recursive>
 800c422:	bf00      	nop
 800c424:	20001ea6 	.word	0x20001ea6

0800c428 <__sinit>:
 800c428:	b510      	push	{r4, lr}
 800c42a:	4604      	mov	r4, r0
 800c42c:	f7ff fff0 	bl	800c410 <__sinit_lock_acquire>
 800c430:	69a3      	ldr	r3, [r4, #24]
 800c432:	b11b      	cbz	r3, 800c43c <__sinit+0x14>
 800c434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c438:	f7ff bff0 	b.w	800c41c <__sinit_lock_release>
 800c43c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c440:	6523      	str	r3, [r4, #80]	; 0x50
 800c442:	4b13      	ldr	r3, [pc, #76]	; (800c490 <__sinit+0x68>)
 800c444:	4a13      	ldr	r2, [pc, #76]	; (800c494 <__sinit+0x6c>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	62a2      	str	r2, [r4, #40]	; 0x28
 800c44a:	42a3      	cmp	r3, r4
 800c44c:	bf04      	itt	eq
 800c44e:	2301      	moveq	r3, #1
 800c450:	61a3      	streq	r3, [r4, #24]
 800c452:	4620      	mov	r0, r4
 800c454:	f000 f820 	bl	800c498 <__sfp>
 800c458:	6060      	str	r0, [r4, #4]
 800c45a:	4620      	mov	r0, r4
 800c45c:	f000 f81c 	bl	800c498 <__sfp>
 800c460:	60a0      	str	r0, [r4, #8]
 800c462:	4620      	mov	r0, r4
 800c464:	f000 f818 	bl	800c498 <__sfp>
 800c468:	2200      	movs	r2, #0
 800c46a:	60e0      	str	r0, [r4, #12]
 800c46c:	2104      	movs	r1, #4
 800c46e:	6860      	ldr	r0, [r4, #4]
 800c470:	f7ff ff82 	bl	800c378 <std>
 800c474:	68a0      	ldr	r0, [r4, #8]
 800c476:	2201      	movs	r2, #1
 800c478:	2109      	movs	r1, #9
 800c47a:	f7ff ff7d 	bl	800c378 <std>
 800c47e:	68e0      	ldr	r0, [r4, #12]
 800c480:	2202      	movs	r2, #2
 800c482:	2112      	movs	r1, #18
 800c484:	f7ff ff78 	bl	800c378 <std>
 800c488:	2301      	movs	r3, #1
 800c48a:	61a3      	str	r3, [r4, #24]
 800c48c:	e7d2      	b.n	800c434 <__sinit+0xc>
 800c48e:	bf00      	nop
 800c490:	0800d508 	.word	0x0800d508
 800c494:	0800c3c1 	.word	0x0800c3c1

0800c498 <__sfp>:
 800c498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c49a:	4607      	mov	r7, r0
 800c49c:	f7ff ffac 	bl	800c3f8 <__sfp_lock_acquire>
 800c4a0:	4b1e      	ldr	r3, [pc, #120]	; (800c51c <__sfp+0x84>)
 800c4a2:	681e      	ldr	r6, [r3, #0]
 800c4a4:	69b3      	ldr	r3, [r6, #24]
 800c4a6:	b913      	cbnz	r3, 800c4ae <__sfp+0x16>
 800c4a8:	4630      	mov	r0, r6
 800c4aa:	f7ff ffbd 	bl	800c428 <__sinit>
 800c4ae:	3648      	adds	r6, #72	; 0x48
 800c4b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c4b4:	3b01      	subs	r3, #1
 800c4b6:	d503      	bpl.n	800c4c0 <__sfp+0x28>
 800c4b8:	6833      	ldr	r3, [r6, #0]
 800c4ba:	b30b      	cbz	r3, 800c500 <__sfp+0x68>
 800c4bc:	6836      	ldr	r6, [r6, #0]
 800c4be:	e7f7      	b.n	800c4b0 <__sfp+0x18>
 800c4c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c4c4:	b9d5      	cbnz	r5, 800c4fc <__sfp+0x64>
 800c4c6:	4b16      	ldr	r3, [pc, #88]	; (800c520 <__sfp+0x88>)
 800c4c8:	60e3      	str	r3, [r4, #12]
 800c4ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c4ce:	6665      	str	r5, [r4, #100]	; 0x64
 800c4d0:	f000 f847 	bl	800c562 <__retarget_lock_init_recursive>
 800c4d4:	f7ff ff96 	bl	800c404 <__sfp_lock_release>
 800c4d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c4dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c4e0:	6025      	str	r5, [r4, #0]
 800c4e2:	61a5      	str	r5, [r4, #24]
 800c4e4:	2208      	movs	r2, #8
 800c4e6:	4629      	mov	r1, r5
 800c4e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c4ec:	f7ff fd0c 	bl	800bf08 <memset>
 800c4f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c4f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c4f8:	4620      	mov	r0, r4
 800c4fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4fc:	3468      	adds	r4, #104	; 0x68
 800c4fe:	e7d9      	b.n	800c4b4 <__sfp+0x1c>
 800c500:	2104      	movs	r1, #4
 800c502:	4638      	mov	r0, r7
 800c504:	f7ff ff62 	bl	800c3cc <__sfmoreglue>
 800c508:	4604      	mov	r4, r0
 800c50a:	6030      	str	r0, [r6, #0]
 800c50c:	2800      	cmp	r0, #0
 800c50e:	d1d5      	bne.n	800c4bc <__sfp+0x24>
 800c510:	f7ff ff78 	bl	800c404 <__sfp_lock_release>
 800c514:	230c      	movs	r3, #12
 800c516:	603b      	str	r3, [r7, #0]
 800c518:	e7ee      	b.n	800c4f8 <__sfp+0x60>
 800c51a:	bf00      	nop
 800c51c:	0800d508 	.word	0x0800d508
 800c520:	ffff0001 	.word	0xffff0001

0800c524 <_fwalk_reent>:
 800c524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c528:	4606      	mov	r6, r0
 800c52a:	4688      	mov	r8, r1
 800c52c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c530:	2700      	movs	r7, #0
 800c532:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c536:	f1b9 0901 	subs.w	r9, r9, #1
 800c53a:	d505      	bpl.n	800c548 <_fwalk_reent+0x24>
 800c53c:	6824      	ldr	r4, [r4, #0]
 800c53e:	2c00      	cmp	r4, #0
 800c540:	d1f7      	bne.n	800c532 <_fwalk_reent+0xe>
 800c542:	4638      	mov	r0, r7
 800c544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c548:	89ab      	ldrh	r3, [r5, #12]
 800c54a:	2b01      	cmp	r3, #1
 800c54c:	d907      	bls.n	800c55e <_fwalk_reent+0x3a>
 800c54e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c552:	3301      	adds	r3, #1
 800c554:	d003      	beq.n	800c55e <_fwalk_reent+0x3a>
 800c556:	4629      	mov	r1, r5
 800c558:	4630      	mov	r0, r6
 800c55a:	47c0      	blx	r8
 800c55c:	4307      	orrs	r7, r0
 800c55e:	3568      	adds	r5, #104	; 0x68
 800c560:	e7e9      	b.n	800c536 <_fwalk_reent+0x12>

0800c562 <__retarget_lock_init_recursive>:
 800c562:	4770      	bx	lr

0800c564 <__retarget_lock_acquire_recursive>:
 800c564:	4770      	bx	lr

0800c566 <__retarget_lock_release_recursive>:
 800c566:	4770      	bx	lr

0800c568 <__swhatbuf_r>:
 800c568:	b570      	push	{r4, r5, r6, lr}
 800c56a:	460e      	mov	r6, r1
 800c56c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c570:	2900      	cmp	r1, #0
 800c572:	b096      	sub	sp, #88	; 0x58
 800c574:	4614      	mov	r4, r2
 800c576:	461d      	mov	r5, r3
 800c578:	da08      	bge.n	800c58c <__swhatbuf_r+0x24>
 800c57a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c57e:	2200      	movs	r2, #0
 800c580:	602a      	str	r2, [r5, #0]
 800c582:	061a      	lsls	r2, r3, #24
 800c584:	d410      	bmi.n	800c5a8 <__swhatbuf_r+0x40>
 800c586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c58a:	e00e      	b.n	800c5aa <__swhatbuf_r+0x42>
 800c58c:	466a      	mov	r2, sp
 800c58e:	f000 fdf1 	bl	800d174 <_fstat_r>
 800c592:	2800      	cmp	r0, #0
 800c594:	dbf1      	blt.n	800c57a <__swhatbuf_r+0x12>
 800c596:	9a01      	ldr	r2, [sp, #4]
 800c598:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c59c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c5a0:	425a      	negs	r2, r3
 800c5a2:	415a      	adcs	r2, r3
 800c5a4:	602a      	str	r2, [r5, #0]
 800c5a6:	e7ee      	b.n	800c586 <__swhatbuf_r+0x1e>
 800c5a8:	2340      	movs	r3, #64	; 0x40
 800c5aa:	2000      	movs	r0, #0
 800c5ac:	6023      	str	r3, [r4, #0]
 800c5ae:	b016      	add	sp, #88	; 0x58
 800c5b0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c5b4 <__smakebuf_r>:
 800c5b4:	898b      	ldrh	r3, [r1, #12]
 800c5b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c5b8:	079d      	lsls	r5, r3, #30
 800c5ba:	4606      	mov	r6, r0
 800c5bc:	460c      	mov	r4, r1
 800c5be:	d507      	bpl.n	800c5d0 <__smakebuf_r+0x1c>
 800c5c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c5c4:	6023      	str	r3, [r4, #0]
 800c5c6:	6123      	str	r3, [r4, #16]
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	6163      	str	r3, [r4, #20]
 800c5cc:	b002      	add	sp, #8
 800c5ce:	bd70      	pop	{r4, r5, r6, pc}
 800c5d0:	ab01      	add	r3, sp, #4
 800c5d2:	466a      	mov	r2, sp
 800c5d4:	f7ff ffc8 	bl	800c568 <__swhatbuf_r>
 800c5d8:	9900      	ldr	r1, [sp, #0]
 800c5da:	4605      	mov	r5, r0
 800c5dc:	4630      	mov	r0, r6
 800c5de:	f000 f895 	bl	800c70c <_malloc_r>
 800c5e2:	b948      	cbnz	r0, 800c5f8 <__smakebuf_r+0x44>
 800c5e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5e8:	059a      	lsls	r2, r3, #22
 800c5ea:	d4ef      	bmi.n	800c5cc <__smakebuf_r+0x18>
 800c5ec:	f023 0303 	bic.w	r3, r3, #3
 800c5f0:	f043 0302 	orr.w	r3, r3, #2
 800c5f4:	81a3      	strh	r3, [r4, #12]
 800c5f6:	e7e3      	b.n	800c5c0 <__smakebuf_r+0xc>
 800c5f8:	4b0d      	ldr	r3, [pc, #52]	; (800c630 <__smakebuf_r+0x7c>)
 800c5fa:	62b3      	str	r3, [r6, #40]	; 0x28
 800c5fc:	89a3      	ldrh	r3, [r4, #12]
 800c5fe:	6020      	str	r0, [r4, #0]
 800c600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c604:	81a3      	strh	r3, [r4, #12]
 800c606:	9b00      	ldr	r3, [sp, #0]
 800c608:	6163      	str	r3, [r4, #20]
 800c60a:	9b01      	ldr	r3, [sp, #4]
 800c60c:	6120      	str	r0, [r4, #16]
 800c60e:	b15b      	cbz	r3, 800c628 <__smakebuf_r+0x74>
 800c610:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c614:	4630      	mov	r0, r6
 800c616:	f000 fdbf 	bl	800d198 <_isatty_r>
 800c61a:	b128      	cbz	r0, 800c628 <__smakebuf_r+0x74>
 800c61c:	89a3      	ldrh	r3, [r4, #12]
 800c61e:	f023 0303 	bic.w	r3, r3, #3
 800c622:	f043 0301 	orr.w	r3, r3, #1
 800c626:	81a3      	strh	r3, [r4, #12]
 800c628:	89a0      	ldrh	r0, [r4, #12]
 800c62a:	4305      	orrs	r5, r0
 800c62c:	81a5      	strh	r5, [r4, #12]
 800c62e:	e7cd      	b.n	800c5cc <__smakebuf_r+0x18>
 800c630:	0800c3c1 	.word	0x0800c3c1

0800c634 <_free_r>:
 800c634:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c636:	2900      	cmp	r1, #0
 800c638:	d044      	beq.n	800c6c4 <_free_r+0x90>
 800c63a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c63e:	9001      	str	r0, [sp, #4]
 800c640:	2b00      	cmp	r3, #0
 800c642:	f1a1 0404 	sub.w	r4, r1, #4
 800c646:	bfb8      	it	lt
 800c648:	18e4      	addlt	r4, r4, r3
 800c64a:	f000 fde1 	bl	800d210 <__malloc_lock>
 800c64e:	4a1e      	ldr	r2, [pc, #120]	; (800c6c8 <_free_r+0x94>)
 800c650:	9801      	ldr	r0, [sp, #4]
 800c652:	6813      	ldr	r3, [r2, #0]
 800c654:	b933      	cbnz	r3, 800c664 <_free_r+0x30>
 800c656:	6063      	str	r3, [r4, #4]
 800c658:	6014      	str	r4, [r2, #0]
 800c65a:	b003      	add	sp, #12
 800c65c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c660:	f000 bddc 	b.w	800d21c <__malloc_unlock>
 800c664:	42a3      	cmp	r3, r4
 800c666:	d908      	bls.n	800c67a <_free_r+0x46>
 800c668:	6825      	ldr	r5, [r4, #0]
 800c66a:	1961      	adds	r1, r4, r5
 800c66c:	428b      	cmp	r3, r1
 800c66e:	bf01      	itttt	eq
 800c670:	6819      	ldreq	r1, [r3, #0]
 800c672:	685b      	ldreq	r3, [r3, #4]
 800c674:	1949      	addeq	r1, r1, r5
 800c676:	6021      	streq	r1, [r4, #0]
 800c678:	e7ed      	b.n	800c656 <_free_r+0x22>
 800c67a:	461a      	mov	r2, r3
 800c67c:	685b      	ldr	r3, [r3, #4]
 800c67e:	b10b      	cbz	r3, 800c684 <_free_r+0x50>
 800c680:	42a3      	cmp	r3, r4
 800c682:	d9fa      	bls.n	800c67a <_free_r+0x46>
 800c684:	6811      	ldr	r1, [r2, #0]
 800c686:	1855      	adds	r5, r2, r1
 800c688:	42a5      	cmp	r5, r4
 800c68a:	d10b      	bne.n	800c6a4 <_free_r+0x70>
 800c68c:	6824      	ldr	r4, [r4, #0]
 800c68e:	4421      	add	r1, r4
 800c690:	1854      	adds	r4, r2, r1
 800c692:	42a3      	cmp	r3, r4
 800c694:	6011      	str	r1, [r2, #0]
 800c696:	d1e0      	bne.n	800c65a <_free_r+0x26>
 800c698:	681c      	ldr	r4, [r3, #0]
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	6053      	str	r3, [r2, #4]
 800c69e:	4421      	add	r1, r4
 800c6a0:	6011      	str	r1, [r2, #0]
 800c6a2:	e7da      	b.n	800c65a <_free_r+0x26>
 800c6a4:	d902      	bls.n	800c6ac <_free_r+0x78>
 800c6a6:	230c      	movs	r3, #12
 800c6a8:	6003      	str	r3, [r0, #0]
 800c6aa:	e7d6      	b.n	800c65a <_free_r+0x26>
 800c6ac:	6825      	ldr	r5, [r4, #0]
 800c6ae:	1961      	adds	r1, r4, r5
 800c6b0:	428b      	cmp	r3, r1
 800c6b2:	bf04      	itt	eq
 800c6b4:	6819      	ldreq	r1, [r3, #0]
 800c6b6:	685b      	ldreq	r3, [r3, #4]
 800c6b8:	6063      	str	r3, [r4, #4]
 800c6ba:	bf04      	itt	eq
 800c6bc:	1949      	addeq	r1, r1, r5
 800c6be:	6021      	streq	r1, [r4, #0]
 800c6c0:	6054      	str	r4, [r2, #4]
 800c6c2:	e7ca      	b.n	800c65a <_free_r+0x26>
 800c6c4:	b003      	add	sp, #12
 800c6c6:	bd30      	pop	{r4, r5, pc}
 800c6c8:	20001ea8 	.word	0x20001ea8

0800c6cc <sbrk_aligned>:
 800c6cc:	b570      	push	{r4, r5, r6, lr}
 800c6ce:	4e0e      	ldr	r6, [pc, #56]	; (800c708 <sbrk_aligned+0x3c>)
 800c6d0:	460c      	mov	r4, r1
 800c6d2:	6831      	ldr	r1, [r6, #0]
 800c6d4:	4605      	mov	r5, r0
 800c6d6:	b911      	cbnz	r1, 800c6de <sbrk_aligned+0x12>
 800c6d8:	f000 fcd6 	bl	800d088 <_sbrk_r>
 800c6dc:	6030      	str	r0, [r6, #0]
 800c6de:	4621      	mov	r1, r4
 800c6e0:	4628      	mov	r0, r5
 800c6e2:	f000 fcd1 	bl	800d088 <_sbrk_r>
 800c6e6:	1c43      	adds	r3, r0, #1
 800c6e8:	d00a      	beq.n	800c700 <sbrk_aligned+0x34>
 800c6ea:	1cc4      	adds	r4, r0, #3
 800c6ec:	f024 0403 	bic.w	r4, r4, #3
 800c6f0:	42a0      	cmp	r0, r4
 800c6f2:	d007      	beq.n	800c704 <sbrk_aligned+0x38>
 800c6f4:	1a21      	subs	r1, r4, r0
 800c6f6:	4628      	mov	r0, r5
 800c6f8:	f000 fcc6 	bl	800d088 <_sbrk_r>
 800c6fc:	3001      	adds	r0, #1
 800c6fe:	d101      	bne.n	800c704 <sbrk_aligned+0x38>
 800c700:	f04f 34ff 	mov.w	r4, #4294967295
 800c704:	4620      	mov	r0, r4
 800c706:	bd70      	pop	{r4, r5, r6, pc}
 800c708:	20001eac 	.word	0x20001eac

0800c70c <_malloc_r>:
 800c70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c710:	1ccd      	adds	r5, r1, #3
 800c712:	f025 0503 	bic.w	r5, r5, #3
 800c716:	3508      	adds	r5, #8
 800c718:	2d0c      	cmp	r5, #12
 800c71a:	bf38      	it	cc
 800c71c:	250c      	movcc	r5, #12
 800c71e:	2d00      	cmp	r5, #0
 800c720:	4607      	mov	r7, r0
 800c722:	db01      	blt.n	800c728 <_malloc_r+0x1c>
 800c724:	42a9      	cmp	r1, r5
 800c726:	d905      	bls.n	800c734 <_malloc_r+0x28>
 800c728:	230c      	movs	r3, #12
 800c72a:	603b      	str	r3, [r7, #0]
 800c72c:	2600      	movs	r6, #0
 800c72e:	4630      	mov	r0, r6
 800c730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c734:	4e2e      	ldr	r6, [pc, #184]	; (800c7f0 <_malloc_r+0xe4>)
 800c736:	f000 fd6b 	bl	800d210 <__malloc_lock>
 800c73a:	6833      	ldr	r3, [r6, #0]
 800c73c:	461c      	mov	r4, r3
 800c73e:	bb34      	cbnz	r4, 800c78e <_malloc_r+0x82>
 800c740:	4629      	mov	r1, r5
 800c742:	4638      	mov	r0, r7
 800c744:	f7ff ffc2 	bl	800c6cc <sbrk_aligned>
 800c748:	1c43      	adds	r3, r0, #1
 800c74a:	4604      	mov	r4, r0
 800c74c:	d14d      	bne.n	800c7ea <_malloc_r+0xde>
 800c74e:	6834      	ldr	r4, [r6, #0]
 800c750:	4626      	mov	r6, r4
 800c752:	2e00      	cmp	r6, #0
 800c754:	d140      	bne.n	800c7d8 <_malloc_r+0xcc>
 800c756:	6823      	ldr	r3, [r4, #0]
 800c758:	4631      	mov	r1, r6
 800c75a:	4638      	mov	r0, r7
 800c75c:	eb04 0803 	add.w	r8, r4, r3
 800c760:	f000 fc92 	bl	800d088 <_sbrk_r>
 800c764:	4580      	cmp	r8, r0
 800c766:	d13a      	bne.n	800c7de <_malloc_r+0xd2>
 800c768:	6821      	ldr	r1, [r4, #0]
 800c76a:	3503      	adds	r5, #3
 800c76c:	1a6d      	subs	r5, r5, r1
 800c76e:	f025 0503 	bic.w	r5, r5, #3
 800c772:	3508      	adds	r5, #8
 800c774:	2d0c      	cmp	r5, #12
 800c776:	bf38      	it	cc
 800c778:	250c      	movcc	r5, #12
 800c77a:	4629      	mov	r1, r5
 800c77c:	4638      	mov	r0, r7
 800c77e:	f7ff ffa5 	bl	800c6cc <sbrk_aligned>
 800c782:	3001      	adds	r0, #1
 800c784:	d02b      	beq.n	800c7de <_malloc_r+0xd2>
 800c786:	6823      	ldr	r3, [r4, #0]
 800c788:	442b      	add	r3, r5
 800c78a:	6023      	str	r3, [r4, #0]
 800c78c:	e00e      	b.n	800c7ac <_malloc_r+0xa0>
 800c78e:	6822      	ldr	r2, [r4, #0]
 800c790:	1b52      	subs	r2, r2, r5
 800c792:	d41e      	bmi.n	800c7d2 <_malloc_r+0xc6>
 800c794:	2a0b      	cmp	r2, #11
 800c796:	d916      	bls.n	800c7c6 <_malloc_r+0xba>
 800c798:	1961      	adds	r1, r4, r5
 800c79a:	42a3      	cmp	r3, r4
 800c79c:	6025      	str	r5, [r4, #0]
 800c79e:	bf18      	it	ne
 800c7a0:	6059      	strne	r1, [r3, #4]
 800c7a2:	6863      	ldr	r3, [r4, #4]
 800c7a4:	bf08      	it	eq
 800c7a6:	6031      	streq	r1, [r6, #0]
 800c7a8:	5162      	str	r2, [r4, r5]
 800c7aa:	604b      	str	r3, [r1, #4]
 800c7ac:	4638      	mov	r0, r7
 800c7ae:	f104 060b 	add.w	r6, r4, #11
 800c7b2:	f000 fd33 	bl	800d21c <__malloc_unlock>
 800c7b6:	f026 0607 	bic.w	r6, r6, #7
 800c7ba:	1d23      	adds	r3, r4, #4
 800c7bc:	1af2      	subs	r2, r6, r3
 800c7be:	d0b6      	beq.n	800c72e <_malloc_r+0x22>
 800c7c0:	1b9b      	subs	r3, r3, r6
 800c7c2:	50a3      	str	r3, [r4, r2]
 800c7c4:	e7b3      	b.n	800c72e <_malloc_r+0x22>
 800c7c6:	6862      	ldr	r2, [r4, #4]
 800c7c8:	42a3      	cmp	r3, r4
 800c7ca:	bf0c      	ite	eq
 800c7cc:	6032      	streq	r2, [r6, #0]
 800c7ce:	605a      	strne	r2, [r3, #4]
 800c7d0:	e7ec      	b.n	800c7ac <_malloc_r+0xa0>
 800c7d2:	4623      	mov	r3, r4
 800c7d4:	6864      	ldr	r4, [r4, #4]
 800c7d6:	e7b2      	b.n	800c73e <_malloc_r+0x32>
 800c7d8:	4634      	mov	r4, r6
 800c7da:	6876      	ldr	r6, [r6, #4]
 800c7dc:	e7b9      	b.n	800c752 <_malloc_r+0x46>
 800c7de:	230c      	movs	r3, #12
 800c7e0:	603b      	str	r3, [r7, #0]
 800c7e2:	4638      	mov	r0, r7
 800c7e4:	f000 fd1a 	bl	800d21c <__malloc_unlock>
 800c7e8:	e7a1      	b.n	800c72e <_malloc_r+0x22>
 800c7ea:	6025      	str	r5, [r4, #0]
 800c7ec:	e7de      	b.n	800c7ac <_malloc_r+0xa0>
 800c7ee:	bf00      	nop
 800c7f0:	20001ea8 	.word	0x20001ea8

0800c7f4 <__ssputs_r>:
 800c7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7f8:	688e      	ldr	r6, [r1, #8]
 800c7fa:	429e      	cmp	r6, r3
 800c7fc:	4682      	mov	sl, r0
 800c7fe:	460c      	mov	r4, r1
 800c800:	4690      	mov	r8, r2
 800c802:	461f      	mov	r7, r3
 800c804:	d838      	bhi.n	800c878 <__ssputs_r+0x84>
 800c806:	898a      	ldrh	r2, [r1, #12]
 800c808:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c80c:	d032      	beq.n	800c874 <__ssputs_r+0x80>
 800c80e:	6825      	ldr	r5, [r4, #0]
 800c810:	6909      	ldr	r1, [r1, #16]
 800c812:	eba5 0901 	sub.w	r9, r5, r1
 800c816:	6965      	ldr	r5, [r4, #20]
 800c818:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c81c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c820:	3301      	adds	r3, #1
 800c822:	444b      	add	r3, r9
 800c824:	106d      	asrs	r5, r5, #1
 800c826:	429d      	cmp	r5, r3
 800c828:	bf38      	it	cc
 800c82a:	461d      	movcc	r5, r3
 800c82c:	0553      	lsls	r3, r2, #21
 800c82e:	d531      	bpl.n	800c894 <__ssputs_r+0xa0>
 800c830:	4629      	mov	r1, r5
 800c832:	f7ff ff6b 	bl	800c70c <_malloc_r>
 800c836:	4606      	mov	r6, r0
 800c838:	b950      	cbnz	r0, 800c850 <__ssputs_r+0x5c>
 800c83a:	230c      	movs	r3, #12
 800c83c:	f8ca 3000 	str.w	r3, [sl]
 800c840:	89a3      	ldrh	r3, [r4, #12]
 800c842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c846:	81a3      	strh	r3, [r4, #12]
 800c848:	f04f 30ff 	mov.w	r0, #4294967295
 800c84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c850:	6921      	ldr	r1, [r4, #16]
 800c852:	464a      	mov	r2, r9
 800c854:	f7ff fb4a 	bl	800beec <memcpy>
 800c858:	89a3      	ldrh	r3, [r4, #12]
 800c85a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c85e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c862:	81a3      	strh	r3, [r4, #12]
 800c864:	6126      	str	r6, [r4, #16]
 800c866:	6165      	str	r5, [r4, #20]
 800c868:	444e      	add	r6, r9
 800c86a:	eba5 0509 	sub.w	r5, r5, r9
 800c86e:	6026      	str	r6, [r4, #0]
 800c870:	60a5      	str	r5, [r4, #8]
 800c872:	463e      	mov	r6, r7
 800c874:	42be      	cmp	r6, r7
 800c876:	d900      	bls.n	800c87a <__ssputs_r+0x86>
 800c878:	463e      	mov	r6, r7
 800c87a:	6820      	ldr	r0, [r4, #0]
 800c87c:	4632      	mov	r2, r6
 800c87e:	4641      	mov	r1, r8
 800c880:	f000 fcac 	bl	800d1dc <memmove>
 800c884:	68a3      	ldr	r3, [r4, #8]
 800c886:	1b9b      	subs	r3, r3, r6
 800c888:	60a3      	str	r3, [r4, #8]
 800c88a:	6823      	ldr	r3, [r4, #0]
 800c88c:	4433      	add	r3, r6
 800c88e:	6023      	str	r3, [r4, #0]
 800c890:	2000      	movs	r0, #0
 800c892:	e7db      	b.n	800c84c <__ssputs_r+0x58>
 800c894:	462a      	mov	r2, r5
 800c896:	f000 fcc7 	bl	800d228 <_realloc_r>
 800c89a:	4606      	mov	r6, r0
 800c89c:	2800      	cmp	r0, #0
 800c89e:	d1e1      	bne.n	800c864 <__ssputs_r+0x70>
 800c8a0:	6921      	ldr	r1, [r4, #16]
 800c8a2:	4650      	mov	r0, sl
 800c8a4:	f7ff fec6 	bl	800c634 <_free_r>
 800c8a8:	e7c7      	b.n	800c83a <__ssputs_r+0x46>
	...

0800c8ac <_svfiprintf_r>:
 800c8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b0:	4698      	mov	r8, r3
 800c8b2:	898b      	ldrh	r3, [r1, #12]
 800c8b4:	061b      	lsls	r3, r3, #24
 800c8b6:	b09d      	sub	sp, #116	; 0x74
 800c8b8:	4607      	mov	r7, r0
 800c8ba:	460d      	mov	r5, r1
 800c8bc:	4614      	mov	r4, r2
 800c8be:	d50e      	bpl.n	800c8de <_svfiprintf_r+0x32>
 800c8c0:	690b      	ldr	r3, [r1, #16]
 800c8c2:	b963      	cbnz	r3, 800c8de <_svfiprintf_r+0x32>
 800c8c4:	2140      	movs	r1, #64	; 0x40
 800c8c6:	f7ff ff21 	bl	800c70c <_malloc_r>
 800c8ca:	6028      	str	r0, [r5, #0]
 800c8cc:	6128      	str	r0, [r5, #16]
 800c8ce:	b920      	cbnz	r0, 800c8da <_svfiprintf_r+0x2e>
 800c8d0:	230c      	movs	r3, #12
 800c8d2:	603b      	str	r3, [r7, #0]
 800c8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8d8:	e0d1      	b.n	800ca7e <_svfiprintf_r+0x1d2>
 800c8da:	2340      	movs	r3, #64	; 0x40
 800c8dc:	616b      	str	r3, [r5, #20]
 800c8de:	2300      	movs	r3, #0
 800c8e0:	9309      	str	r3, [sp, #36]	; 0x24
 800c8e2:	2320      	movs	r3, #32
 800c8e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8ec:	2330      	movs	r3, #48	; 0x30
 800c8ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ca98 <_svfiprintf_r+0x1ec>
 800c8f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8f6:	f04f 0901 	mov.w	r9, #1
 800c8fa:	4623      	mov	r3, r4
 800c8fc:	469a      	mov	sl, r3
 800c8fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c902:	b10a      	cbz	r2, 800c908 <_svfiprintf_r+0x5c>
 800c904:	2a25      	cmp	r2, #37	; 0x25
 800c906:	d1f9      	bne.n	800c8fc <_svfiprintf_r+0x50>
 800c908:	ebba 0b04 	subs.w	fp, sl, r4
 800c90c:	d00b      	beq.n	800c926 <_svfiprintf_r+0x7a>
 800c90e:	465b      	mov	r3, fp
 800c910:	4622      	mov	r2, r4
 800c912:	4629      	mov	r1, r5
 800c914:	4638      	mov	r0, r7
 800c916:	f7ff ff6d 	bl	800c7f4 <__ssputs_r>
 800c91a:	3001      	adds	r0, #1
 800c91c:	f000 80aa 	beq.w	800ca74 <_svfiprintf_r+0x1c8>
 800c920:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c922:	445a      	add	r2, fp
 800c924:	9209      	str	r2, [sp, #36]	; 0x24
 800c926:	f89a 3000 	ldrb.w	r3, [sl]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	f000 80a2 	beq.w	800ca74 <_svfiprintf_r+0x1c8>
 800c930:	2300      	movs	r3, #0
 800c932:	f04f 32ff 	mov.w	r2, #4294967295
 800c936:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c93a:	f10a 0a01 	add.w	sl, sl, #1
 800c93e:	9304      	str	r3, [sp, #16]
 800c940:	9307      	str	r3, [sp, #28]
 800c942:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c946:	931a      	str	r3, [sp, #104]	; 0x68
 800c948:	4654      	mov	r4, sl
 800c94a:	2205      	movs	r2, #5
 800c94c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c950:	4851      	ldr	r0, [pc, #324]	; (800ca98 <_svfiprintf_r+0x1ec>)
 800c952:	f7f3 fc65 	bl	8000220 <memchr>
 800c956:	9a04      	ldr	r2, [sp, #16]
 800c958:	b9d8      	cbnz	r0, 800c992 <_svfiprintf_r+0xe6>
 800c95a:	06d0      	lsls	r0, r2, #27
 800c95c:	bf44      	itt	mi
 800c95e:	2320      	movmi	r3, #32
 800c960:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c964:	0711      	lsls	r1, r2, #28
 800c966:	bf44      	itt	mi
 800c968:	232b      	movmi	r3, #43	; 0x2b
 800c96a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c96e:	f89a 3000 	ldrb.w	r3, [sl]
 800c972:	2b2a      	cmp	r3, #42	; 0x2a
 800c974:	d015      	beq.n	800c9a2 <_svfiprintf_r+0xf6>
 800c976:	9a07      	ldr	r2, [sp, #28]
 800c978:	4654      	mov	r4, sl
 800c97a:	2000      	movs	r0, #0
 800c97c:	f04f 0c0a 	mov.w	ip, #10
 800c980:	4621      	mov	r1, r4
 800c982:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c986:	3b30      	subs	r3, #48	; 0x30
 800c988:	2b09      	cmp	r3, #9
 800c98a:	d94e      	bls.n	800ca2a <_svfiprintf_r+0x17e>
 800c98c:	b1b0      	cbz	r0, 800c9bc <_svfiprintf_r+0x110>
 800c98e:	9207      	str	r2, [sp, #28]
 800c990:	e014      	b.n	800c9bc <_svfiprintf_r+0x110>
 800c992:	eba0 0308 	sub.w	r3, r0, r8
 800c996:	fa09 f303 	lsl.w	r3, r9, r3
 800c99a:	4313      	orrs	r3, r2
 800c99c:	9304      	str	r3, [sp, #16]
 800c99e:	46a2      	mov	sl, r4
 800c9a0:	e7d2      	b.n	800c948 <_svfiprintf_r+0x9c>
 800c9a2:	9b03      	ldr	r3, [sp, #12]
 800c9a4:	1d19      	adds	r1, r3, #4
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	9103      	str	r1, [sp, #12]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	bfbb      	ittet	lt
 800c9ae:	425b      	neglt	r3, r3
 800c9b0:	f042 0202 	orrlt.w	r2, r2, #2
 800c9b4:	9307      	strge	r3, [sp, #28]
 800c9b6:	9307      	strlt	r3, [sp, #28]
 800c9b8:	bfb8      	it	lt
 800c9ba:	9204      	strlt	r2, [sp, #16]
 800c9bc:	7823      	ldrb	r3, [r4, #0]
 800c9be:	2b2e      	cmp	r3, #46	; 0x2e
 800c9c0:	d10c      	bne.n	800c9dc <_svfiprintf_r+0x130>
 800c9c2:	7863      	ldrb	r3, [r4, #1]
 800c9c4:	2b2a      	cmp	r3, #42	; 0x2a
 800c9c6:	d135      	bne.n	800ca34 <_svfiprintf_r+0x188>
 800c9c8:	9b03      	ldr	r3, [sp, #12]
 800c9ca:	1d1a      	adds	r2, r3, #4
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	9203      	str	r2, [sp, #12]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	bfb8      	it	lt
 800c9d4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c9d8:	3402      	adds	r4, #2
 800c9da:	9305      	str	r3, [sp, #20]
 800c9dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800caa8 <_svfiprintf_r+0x1fc>
 800c9e0:	7821      	ldrb	r1, [r4, #0]
 800c9e2:	2203      	movs	r2, #3
 800c9e4:	4650      	mov	r0, sl
 800c9e6:	f7f3 fc1b 	bl	8000220 <memchr>
 800c9ea:	b140      	cbz	r0, 800c9fe <_svfiprintf_r+0x152>
 800c9ec:	2340      	movs	r3, #64	; 0x40
 800c9ee:	eba0 000a 	sub.w	r0, r0, sl
 800c9f2:	fa03 f000 	lsl.w	r0, r3, r0
 800c9f6:	9b04      	ldr	r3, [sp, #16]
 800c9f8:	4303      	orrs	r3, r0
 800c9fa:	3401      	adds	r4, #1
 800c9fc:	9304      	str	r3, [sp, #16]
 800c9fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca02:	4826      	ldr	r0, [pc, #152]	; (800ca9c <_svfiprintf_r+0x1f0>)
 800ca04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca08:	2206      	movs	r2, #6
 800ca0a:	f7f3 fc09 	bl	8000220 <memchr>
 800ca0e:	2800      	cmp	r0, #0
 800ca10:	d038      	beq.n	800ca84 <_svfiprintf_r+0x1d8>
 800ca12:	4b23      	ldr	r3, [pc, #140]	; (800caa0 <_svfiprintf_r+0x1f4>)
 800ca14:	bb1b      	cbnz	r3, 800ca5e <_svfiprintf_r+0x1b2>
 800ca16:	9b03      	ldr	r3, [sp, #12]
 800ca18:	3307      	adds	r3, #7
 800ca1a:	f023 0307 	bic.w	r3, r3, #7
 800ca1e:	3308      	adds	r3, #8
 800ca20:	9303      	str	r3, [sp, #12]
 800ca22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca24:	4433      	add	r3, r6
 800ca26:	9309      	str	r3, [sp, #36]	; 0x24
 800ca28:	e767      	b.n	800c8fa <_svfiprintf_r+0x4e>
 800ca2a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca2e:	460c      	mov	r4, r1
 800ca30:	2001      	movs	r0, #1
 800ca32:	e7a5      	b.n	800c980 <_svfiprintf_r+0xd4>
 800ca34:	2300      	movs	r3, #0
 800ca36:	3401      	adds	r4, #1
 800ca38:	9305      	str	r3, [sp, #20]
 800ca3a:	4619      	mov	r1, r3
 800ca3c:	f04f 0c0a 	mov.w	ip, #10
 800ca40:	4620      	mov	r0, r4
 800ca42:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca46:	3a30      	subs	r2, #48	; 0x30
 800ca48:	2a09      	cmp	r2, #9
 800ca4a:	d903      	bls.n	800ca54 <_svfiprintf_r+0x1a8>
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d0c5      	beq.n	800c9dc <_svfiprintf_r+0x130>
 800ca50:	9105      	str	r1, [sp, #20]
 800ca52:	e7c3      	b.n	800c9dc <_svfiprintf_r+0x130>
 800ca54:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca58:	4604      	mov	r4, r0
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	e7f0      	b.n	800ca40 <_svfiprintf_r+0x194>
 800ca5e:	ab03      	add	r3, sp, #12
 800ca60:	9300      	str	r3, [sp, #0]
 800ca62:	462a      	mov	r2, r5
 800ca64:	4b0f      	ldr	r3, [pc, #60]	; (800caa4 <_svfiprintf_r+0x1f8>)
 800ca66:	a904      	add	r1, sp, #16
 800ca68:	4638      	mov	r0, r7
 800ca6a:	f3af 8000 	nop.w
 800ca6e:	1c42      	adds	r2, r0, #1
 800ca70:	4606      	mov	r6, r0
 800ca72:	d1d6      	bne.n	800ca22 <_svfiprintf_r+0x176>
 800ca74:	89ab      	ldrh	r3, [r5, #12]
 800ca76:	065b      	lsls	r3, r3, #25
 800ca78:	f53f af2c 	bmi.w	800c8d4 <_svfiprintf_r+0x28>
 800ca7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca7e:	b01d      	add	sp, #116	; 0x74
 800ca80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca84:	ab03      	add	r3, sp, #12
 800ca86:	9300      	str	r3, [sp, #0]
 800ca88:	462a      	mov	r2, r5
 800ca8a:	4b06      	ldr	r3, [pc, #24]	; (800caa4 <_svfiprintf_r+0x1f8>)
 800ca8c:	a904      	add	r1, sp, #16
 800ca8e:	4638      	mov	r0, r7
 800ca90:	f000 f9d4 	bl	800ce3c <_printf_i>
 800ca94:	e7eb      	b.n	800ca6e <_svfiprintf_r+0x1c2>
 800ca96:	bf00      	nop
 800ca98:	0800d56c 	.word	0x0800d56c
 800ca9c:	0800d576 	.word	0x0800d576
 800caa0:	00000000 	.word	0x00000000
 800caa4:	0800c7f5 	.word	0x0800c7f5
 800caa8:	0800d572 	.word	0x0800d572

0800caac <__sfputc_r>:
 800caac:	6893      	ldr	r3, [r2, #8]
 800caae:	3b01      	subs	r3, #1
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	b410      	push	{r4}
 800cab4:	6093      	str	r3, [r2, #8]
 800cab6:	da08      	bge.n	800caca <__sfputc_r+0x1e>
 800cab8:	6994      	ldr	r4, [r2, #24]
 800caba:	42a3      	cmp	r3, r4
 800cabc:	db01      	blt.n	800cac2 <__sfputc_r+0x16>
 800cabe:	290a      	cmp	r1, #10
 800cac0:	d103      	bne.n	800caca <__sfputc_r+0x1e>
 800cac2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cac6:	f7ff bad5 	b.w	800c074 <__swbuf_r>
 800caca:	6813      	ldr	r3, [r2, #0]
 800cacc:	1c58      	adds	r0, r3, #1
 800cace:	6010      	str	r0, [r2, #0]
 800cad0:	7019      	strb	r1, [r3, #0]
 800cad2:	4608      	mov	r0, r1
 800cad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cad8:	4770      	bx	lr

0800cada <__sfputs_r>:
 800cada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cadc:	4606      	mov	r6, r0
 800cade:	460f      	mov	r7, r1
 800cae0:	4614      	mov	r4, r2
 800cae2:	18d5      	adds	r5, r2, r3
 800cae4:	42ac      	cmp	r4, r5
 800cae6:	d101      	bne.n	800caec <__sfputs_r+0x12>
 800cae8:	2000      	movs	r0, #0
 800caea:	e007      	b.n	800cafc <__sfputs_r+0x22>
 800caec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caf0:	463a      	mov	r2, r7
 800caf2:	4630      	mov	r0, r6
 800caf4:	f7ff ffda 	bl	800caac <__sfputc_r>
 800caf8:	1c43      	adds	r3, r0, #1
 800cafa:	d1f3      	bne.n	800cae4 <__sfputs_r+0xa>
 800cafc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cb00 <_vfiprintf_r>:
 800cb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb04:	460d      	mov	r5, r1
 800cb06:	b09d      	sub	sp, #116	; 0x74
 800cb08:	4614      	mov	r4, r2
 800cb0a:	4698      	mov	r8, r3
 800cb0c:	4606      	mov	r6, r0
 800cb0e:	b118      	cbz	r0, 800cb18 <_vfiprintf_r+0x18>
 800cb10:	6983      	ldr	r3, [r0, #24]
 800cb12:	b90b      	cbnz	r3, 800cb18 <_vfiprintf_r+0x18>
 800cb14:	f7ff fc88 	bl	800c428 <__sinit>
 800cb18:	4b89      	ldr	r3, [pc, #548]	; (800cd40 <_vfiprintf_r+0x240>)
 800cb1a:	429d      	cmp	r5, r3
 800cb1c:	d11b      	bne.n	800cb56 <_vfiprintf_r+0x56>
 800cb1e:	6875      	ldr	r5, [r6, #4]
 800cb20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb22:	07d9      	lsls	r1, r3, #31
 800cb24:	d405      	bmi.n	800cb32 <_vfiprintf_r+0x32>
 800cb26:	89ab      	ldrh	r3, [r5, #12]
 800cb28:	059a      	lsls	r2, r3, #22
 800cb2a:	d402      	bmi.n	800cb32 <_vfiprintf_r+0x32>
 800cb2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb2e:	f7ff fd19 	bl	800c564 <__retarget_lock_acquire_recursive>
 800cb32:	89ab      	ldrh	r3, [r5, #12]
 800cb34:	071b      	lsls	r3, r3, #28
 800cb36:	d501      	bpl.n	800cb3c <_vfiprintf_r+0x3c>
 800cb38:	692b      	ldr	r3, [r5, #16]
 800cb3a:	b9eb      	cbnz	r3, 800cb78 <_vfiprintf_r+0x78>
 800cb3c:	4629      	mov	r1, r5
 800cb3e:	4630      	mov	r0, r6
 800cb40:	f7ff faea 	bl	800c118 <__swsetup_r>
 800cb44:	b1c0      	cbz	r0, 800cb78 <_vfiprintf_r+0x78>
 800cb46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb48:	07dc      	lsls	r4, r3, #31
 800cb4a:	d50e      	bpl.n	800cb6a <_vfiprintf_r+0x6a>
 800cb4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb50:	b01d      	add	sp, #116	; 0x74
 800cb52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb56:	4b7b      	ldr	r3, [pc, #492]	; (800cd44 <_vfiprintf_r+0x244>)
 800cb58:	429d      	cmp	r5, r3
 800cb5a:	d101      	bne.n	800cb60 <_vfiprintf_r+0x60>
 800cb5c:	68b5      	ldr	r5, [r6, #8]
 800cb5e:	e7df      	b.n	800cb20 <_vfiprintf_r+0x20>
 800cb60:	4b79      	ldr	r3, [pc, #484]	; (800cd48 <_vfiprintf_r+0x248>)
 800cb62:	429d      	cmp	r5, r3
 800cb64:	bf08      	it	eq
 800cb66:	68f5      	ldreq	r5, [r6, #12]
 800cb68:	e7da      	b.n	800cb20 <_vfiprintf_r+0x20>
 800cb6a:	89ab      	ldrh	r3, [r5, #12]
 800cb6c:	0598      	lsls	r0, r3, #22
 800cb6e:	d4ed      	bmi.n	800cb4c <_vfiprintf_r+0x4c>
 800cb70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb72:	f7ff fcf8 	bl	800c566 <__retarget_lock_release_recursive>
 800cb76:	e7e9      	b.n	800cb4c <_vfiprintf_r+0x4c>
 800cb78:	2300      	movs	r3, #0
 800cb7a:	9309      	str	r3, [sp, #36]	; 0x24
 800cb7c:	2320      	movs	r3, #32
 800cb7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb82:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb86:	2330      	movs	r3, #48	; 0x30
 800cb88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cd4c <_vfiprintf_r+0x24c>
 800cb8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb90:	f04f 0901 	mov.w	r9, #1
 800cb94:	4623      	mov	r3, r4
 800cb96:	469a      	mov	sl, r3
 800cb98:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb9c:	b10a      	cbz	r2, 800cba2 <_vfiprintf_r+0xa2>
 800cb9e:	2a25      	cmp	r2, #37	; 0x25
 800cba0:	d1f9      	bne.n	800cb96 <_vfiprintf_r+0x96>
 800cba2:	ebba 0b04 	subs.w	fp, sl, r4
 800cba6:	d00b      	beq.n	800cbc0 <_vfiprintf_r+0xc0>
 800cba8:	465b      	mov	r3, fp
 800cbaa:	4622      	mov	r2, r4
 800cbac:	4629      	mov	r1, r5
 800cbae:	4630      	mov	r0, r6
 800cbb0:	f7ff ff93 	bl	800cada <__sfputs_r>
 800cbb4:	3001      	adds	r0, #1
 800cbb6:	f000 80aa 	beq.w	800cd0e <_vfiprintf_r+0x20e>
 800cbba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cbbc:	445a      	add	r2, fp
 800cbbe:	9209      	str	r2, [sp, #36]	; 0x24
 800cbc0:	f89a 3000 	ldrb.w	r3, [sl]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	f000 80a2 	beq.w	800cd0e <_vfiprintf_r+0x20e>
 800cbca:	2300      	movs	r3, #0
 800cbcc:	f04f 32ff 	mov.w	r2, #4294967295
 800cbd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbd4:	f10a 0a01 	add.w	sl, sl, #1
 800cbd8:	9304      	str	r3, [sp, #16]
 800cbda:	9307      	str	r3, [sp, #28]
 800cbdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cbe0:	931a      	str	r3, [sp, #104]	; 0x68
 800cbe2:	4654      	mov	r4, sl
 800cbe4:	2205      	movs	r2, #5
 800cbe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbea:	4858      	ldr	r0, [pc, #352]	; (800cd4c <_vfiprintf_r+0x24c>)
 800cbec:	f7f3 fb18 	bl	8000220 <memchr>
 800cbf0:	9a04      	ldr	r2, [sp, #16]
 800cbf2:	b9d8      	cbnz	r0, 800cc2c <_vfiprintf_r+0x12c>
 800cbf4:	06d1      	lsls	r1, r2, #27
 800cbf6:	bf44      	itt	mi
 800cbf8:	2320      	movmi	r3, #32
 800cbfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbfe:	0713      	lsls	r3, r2, #28
 800cc00:	bf44      	itt	mi
 800cc02:	232b      	movmi	r3, #43	; 0x2b
 800cc04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc08:	f89a 3000 	ldrb.w	r3, [sl]
 800cc0c:	2b2a      	cmp	r3, #42	; 0x2a
 800cc0e:	d015      	beq.n	800cc3c <_vfiprintf_r+0x13c>
 800cc10:	9a07      	ldr	r2, [sp, #28]
 800cc12:	4654      	mov	r4, sl
 800cc14:	2000      	movs	r0, #0
 800cc16:	f04f 0c0a 	mov.w	ip, #10
 800cc1a:	4621      	mov	r1, r4
 800cc1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc20:	3b30      	subs	r3, #48	; 0x30
 800cc22:	2b09      	cmp	r3, #9
 800cc24:	d94e      	bls.n	800ccc4 <_vfiprintf_r+0x1c4>
 800cc26:	b1b0      	cbz	r0, 800cc56 <_vfiprintf_r+0x156>
 800cc28:	9207      	str	r2, [sp, #28]
 800cc2a:	e014      	b.n	800cc56 <_vfiprintf_r+0x156>
 800cc2c:	eba0 0308 	sub.w	r3, r0, r8
 800cc30:	fa09 f303 	lsl.w	r3, r9, r3
 800cc34:	4313      	orrs	r3, r2
 800cc36:	9304      	str	r3, [sp, #16]
 800cc38:	46a2      	mov	sl, r4
 800cc3a:	e7d2      	b.n	800cbe2 <_vfiprintf_r+0xe2>
 800cc3c:	9b03      	ldr	r3, [sp, #12]
 800cc3e:	1d19      	adds	r1, r3, #4
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	9103      	str	r1, [sp, #12]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	bfbb      	ittet	lt
 800cc48:	425b      	neglt	r3, r3
 800cc4a:	f042 0202 	orrlt.w	r2, r2, #2
 800cc4e:	9307      	strge	r3, [sp, #28]
 800cc50:	9307      	strlt	r3, [sp, #28]
 800cc52:	bfb8      	it	lt
 800cc54:	9204      	strlt	r2, [sp, #16]
 800cc56:	7823      	ldrb	r3, [r4, #0]
 800cc58:	2b2e      	cmp	r3, #46	; 0x2e
 800cc5a:	d10c      	bne.n	800cc76 <_vfiprintf_r+0x176>
 800cc5c:	7863      	ldrb	r3, [r4, #1]
 800cc5e:	2b2a      	cmp	r3, #42	; 0x2a
 800cc60:	d135      	bne.n	800ccce <_vfiprintf_r+0x1ce>
 800cc62:	9b03      	ldr	r3, [sp, #12]
 800cc64:	1d1a      	adds	r2, r3, #4
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	9203      	str	r2, [sp, #12]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	bfb8      	it	lt
 800cc6e:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc72:	3402      	adds	r4, #2
 800cc74:	9305      	str	r3, [sp, #20]
 800cc76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cd5c <_vfiprintf_r+0x25c>
 800cc7a:	7821      	ldrb	r1, [r4, #0]
 800cc7c:	2203      	movs	r2, #3
 800cc7e:	4650      	mov	r0, sl
 800cc80:	f7f3 face 	bl	8000220 <memchr>
 800cc84:	b140      	cbz	r0, 800cc98 <_vfiprintf_r+0x198>
 800cc86:	2340      	movs	r3, #64	; 0x40
 800cc88:	eba0 000a 	sub.w	r0, r0, sl
 800cc8c:	fa03 f000 	lsl.w	r0, r3, r0
 800cc90:	9b04      	ldr	r3, [sp, #16]
 800cc92:	4303      	orrs	r3, r0
 800cc94:	3401      	adds	r4, #1
 800cc96:	9304      	str	r3, [sp, #16]
 800cc98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc9c:	482c      	ldr	r0, [pc, #176]	; (800cd50 <_vfiprintf_r+0x250>)
 800cc9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cca2:	2206      	movs	r2, #6
 800cca4:	f7f3 fabc 	bl	8000220 <memchr>
 800cca8:	2800      	cmp	r0, #0
 800ccaa:	d03f      	beq.n	800cd2c <_vfiprintf_r+0x22c>
 800ccac:	4b29      	ldr	r3, [pc, #164]	; (800cd54 <_vfiprintf_r+0x254>)
 800ccae:	bb1b      	cbnz	r3, 800ccf8 <_vfiprintf_r+0x1f8>
 800ccb0:	9b03      	ldr	r3, [sp, #12]
 800ccb2:	3307      	adds	r3, #7
 800ccb4:	f023 0307 	bic.w	r3, r3, #7
 800ccb8:	3308      	adds	r3, #8
 800ccba:	9303      	str	r3, [sp, #12]
 800ccbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccbe:	443b      	add	r3, r7
 800ccc0:	9309      	str	r3, [sp, #36]	; 0x24
 800ccc2:	e767      	b.n	800cb94 <_vfiprintf_r+0x94>
 800ccc4:	fb0c 3202 	mla	r2, ip, r2, r3
 800ccc8:	460c      	mov	r4, r1
 800ccca:	2001      	movs	r0, #1
 800cccc:	e7a5      	b.n	800cc1a <_vfiprintf_r+0x11a>
 800ccce:	2300      	movs	r3, #0
 800ccd0:	3401      	adds	r4, #1
 800ccd2:	9305      	str	r3, [sp, #20]
 800ccd4:	4619      	mov	r1, r3
 800ccd6:	f04f 0c0a 	mov.w	ip, #10
 800ccda:	4620      	mov	r0, r4
 800ccdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cce0:	3a30      	subs	r2, #48	; 0x30
 800cce2:	2a09      	cmp	r2, #9
 800cce4:	d903      	bls.n	800ccee <_vfiprintf_r+0x1ee>
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d0c5      	beq.n	800cc76 <_vfiprintf_r+0x176>
 800ccea:	9105      	str	r1, [sp, #20]
 800ccec:	e7c3      	b.n	800cc76 <_vfiprintf_r+0x176>
 800ccee:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccf2:	4604      	mov	r4, r0
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	e7f0      	b.n	800ccda <_vfiprintf_r+0x1da>
 800ccf8:	ab03      	add	r3, sp, #12
 800ccfa:	9300      	str	r3, [sp, #0]
 800ccfc:	462a      	mov	r2, r5
 800ccfe:	4b16      	ldr	r3, [pc, #88]	; (800cd58 <_vfiprintf_r+0x258>)
 800cd00:	a904      	add	r1, sp, #16
 800cd02:	4630      	mov	r0, r6
 800cd04:	f3af 8000 	nop.w
 800cd08:	4607      	mov	r7, r0
 800cd0a:	1c78      	adds	r0, r7, #1
 800cd0c:	d1d6      	bne.n	800ccbc <_vfiprintf_r+0x1bc>
 800cd0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd10:	07d9      	lsls	r1, r3, #31
 800cd12:	d405      	bmi.n	800cd20 <_vfiprintf_r+0x220>
 800cd14:	89ab      	ldrh	r3, [r5, #12]
 800cd16:	059a      	lsls	r2, r3, #22
 800cd18:	d402      	bmi.n	800cd20 <_vfiprintf_r+0x220>
 800cd1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd1c:	f7ff fc23 	bl	800c566 <__retarget_lock_release_recursive>
 800cd20:	89ab      	ldrh	r3, [r5, #12]
 800cd22:	065b      	lsls	r3, r3, #25
 800cd24:	f53f af12 	bmi.w	800cb4c <_vfiprintf_r+0x4c>
 800cd28:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd2a:	e711      	b.n	800cb50 <_vfiprintf_r+0x50>
 800cd2c:	ab03      	add	r3, sp, #12
 800cd2e:	9300      	str	r3, [sp, #0]
 800cd30:	462a      	mov	r2, r5
 800cd32:	4b09      	ldr	r3, [pc, #36]	; (800cd58 <_vfiprintf_r+0x258>)
 800cd34:	a904      	add	r1, sp, #16
 800cd36:	4630      	mov	r0, r6
 800cd38:	f000 f880 	bl	800ce3c <_printf_i>
 800cd3c:	e7e4      	b.n	800cd08 <_vfiprintf_r+0x208>
 800cd3e:	bf00      	nop
 800cd40:	0800d52c 	.word	0x0800d52c
 800cd44:	0800d54c 	.word	0x0800d54c
 800cd48:	0800d50c 	.word	0x0800d50c
 800cd4c:	0800d56c 	.word	0x0800d56c
 800cd50:	0800d576 	.word	0x0800d576
 800cd54:	00000000 	.word	0x00000000
 800cd58:	0800cadb 	.word	0x0800cadb
 800cd5c:	0800d572 	.word	0x0800d572

0800cd60 <_printf_common>:
 800cd60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd64:	4616      	mov	r6, r2
 800cd66:	4699      	mov	r9, r3
 800cd68:	688a      	ldr	r2, [r1, #8]
 800cd6a:	690b      	ldr	r3, [r1, #16]
 800cd6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cd70:	4293      	cmp	r3, r2
 800cd72:	bfb8      	it	lt
 800cd74:	4613      	movlt	r3, r2
 800cd76:	6033      	str	r3, [r6, #0]
 800cd78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd7c:	4607      	mov	r7, r0
 800cd7e:	460c      	mov	r4, r1
 800cd80:	b10a      	cbz	r2, 800cd86 <_printf_common+0x26>
 800cd82:	3301      	adds	r3, #1
 800cd84:	6033      	str	r3, [r6, #0]
 800cd86:	6823      	ldr	r3, [r4, #0]
 800cd88:	0699      	lsls	r1, r3, #26
 800cd8a:	bf42      	ittt	mi
 800cd8c:	6833      	ldrmi	r3, [r6, #0]
 800cd8e:	3302      	addmi	r3, #2
 800cd90:	6033      	strmi	r3, [r6, #0]
 800cd92:	6825      	ldr	r5, [r4, #0]
 800cd94:	f015 0506 	ands.w	r5, r5, #6
 800cd98:	d106      	bne.n	800cda8 <_printf_common+0x48>
 800cd9a:	f104 0a19 	add.w	sl, r4, #25
 800cd9e:	68e3      	ldr	r3, [r4, #12]
 800cda0:	6832      	ldr	r2, [r6, #0]
 800cda2:	1a9b      	subs	r3, r3, r2
 800cda4:	42ab      	cmp	r3, r5
 800cda6:	dc26      	bgt.n	800cdf6 <_printf_common+0x96>
 800cda8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cdac:	1e13      	subs	r3, r2, #0
 800cdae:	6822      	ldr	r2, [r4, #0]
 800cdb0:	bf18      	it	ne
 800cdb2:	2301      	movne	r3, #1
 800cdb4:	0692      	lsls	r2, r2, #26
 800cdb6:	d42b      	bmi.n	800ce10 <_printf_common+0xb0>
 800cdb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cdbc:	4649      	mov	r1, r9
 800cdbe:	4638      	mov	r0, r7
 800cdc0:	47c0      	blx	r8
 800cdc2:	3001      	adds	r0, #1
 800cdc4:	d01e      	beq.n	800ce04 <_printf_common+0xa4>
 800cdc6:	6823      	ldr	r3, [r4, #0]
 800cdc8:	68e5      	ldr	r5, [r4, #12]
 800cdca:	6832      	ldr	r2, [r6, #0]
 800cdcc:	f003 0306 	and.w	r3, r3, #6
 800cdd0:	2b04      	cmp	r3, #4
 800cdd2:	bf08      	it	eq
 800cdd4:	1aad      	subeq	r5, r5, r2
 800cdd6:	68a3      	ldr	r3, [r4, #8]
 800cdd8:	6922      	ldr	r2, [r4, #16]
 800cdda:	bf0c      	ite	eq
 800cddc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cde0:	2500      	movne	r5, #0
 800cde2:	4293      	cmp	r3, r2
 800cde4:	bfc4      	itt	gt
 800cde6:	1a9b      	subgt	r3, r3, r2
 800cde8:	18ed      	addgt	r5, r5, r3
 800cdea:	2600      	movs	r6, #0
 800cdec:	341a      	adds	r4, #26
 800cdee:	42b5      	cmp	r5, r6
 800cdf0:	d11a      	bne.n	800ce28 <_printf_common+0xc8>
 800cdf2:	2000      	movs	r0, #0
 800cdf4:	e008      	b.n	800ce08 <_printf_common+0xa8>
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	4652      	mov	r2, sl
 800cdfa:	4649      	mov	r1, r9
 800cdfc:	4638      	mov	r0, r7
 800cdfe:	47c0      	blx	r8
 800ce00:	3001      	adds	r0, #1
 800ce02:	d103      	bne.n	800ce0c <_printf_common+0xac>
 800ce04:	f04f 30ff 	mov.w	r0, #4294967295
 800ce08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce0c:	3501      	adds	r5, #1
 800ce0e:	e7c6      	b.n	800cd9e <_printf_common+0x3e>
 800ce10:	18e1      	adds	r1, r4, r3
 800ce12:	1c5a      	adds	r2, r3, #1
 800ce14:	2030      	movs	r0, #48	; 0x30
 800ce16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ce1a:	4422      	add	r2, r4
 800ce1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ce20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ce24:	3302      	adds	r3, #2
 800ce26:	e7c7      	b.n	800cdb8 <_printf_common+0x58>
 800ce28:	2301      	movs	r3, #1
 800ce2a:	4622      	mov	r2, r4
 800ce2c:	4649      	mov	r1, r9
 800ce2e:	4638      	mov	r0, r7
 800ce30:	47c0      	blx	r8
 800ce32:	3001      	adds	r0, #1
 800ce34:	d0e6      	beq.n	800ce04 <_printf_common+0xa4>
 800ce36:	3601      	adds	r6, #1
 800ce38:	e7d9      	b.n	800cdee <_printf_common+0x8e>
	...

0800ce3c <_printf_i>:
 800ce3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce40:	7e0f      	ldrb	r7, [r1, #24]
 800ce42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ce44:	2f78      	cmp	r7, #120	; 0x78
 800ce46:	4691      	mov	r9, r2
 800ce48:	4680      	mov	r8, r0
 800ce4a:	460c      	mov	r4, r1
 800ce4c:	469a      	mov	sl, r3
 800ce4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ce52:	d807      	bhi.n	800ce64 <_printf_i+0x28>
 800ce54:	2f62      	cmp	r7, #98	; 0x62
 800ce56:	d80a      	bhi.n	800ce6e <_printf_i+0x32>
 800ce58:	2f00      	cmp	r7, #0
 800ce5a:	f000 80d8 	beq.w	800d00e <_printf_i+0x1d2>
 800ce5e:	2f58      	cmp	r7, #88	; 0x58
 800ce60:	f000 80a3 	beq.w	800cfaa <_printf_i+0x16e>
 800ce64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ce6c:	e03a      	b.n	800cee4 <_printf_i+0xa8>
 800ce6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ce72:	2b15      	cmp	r3, #21
 800ce74:	d8f6      	bhi.n	800ce64 <_printf_i+0x28>
 800ce76:	a101      	add	r1, pc, #4	; (adr r1, 800ce7c <_printf_i+0x40>)
 800ce78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce7c:	0800ced5 	.word	0x0800ced5
 800ce80:	0800cee9 	.word	0x0800cee9
 800ce84:	0800ce65 	.word	0x0800ce65
 800ce88:	0800ce65 	.word	0x0800ce65
 800ce8c:	0800ce65 	.word	0x0800ce65
 800ce90:	0800ce65 	.word	0x0800ce65
 800ce94:	0800cee9 	.word	0x0800cee9
 800ce98:	0800ce65 	.word	0x0800ce65
 800ce9c:	0800ce65 	.word	0x0800ce65
 800cea0:	0800ce65 	.word	0x0800ce65
 800cea4:	0800ce65 	.word	0x0800ce65
 800cea8:	0800cff5 	.word	0x0800cff5
 800ceac:	0800cf19 	.word	0x0800cf19
 800ceb0:	0800cfd7 	.word	0x0800cfd7
 800ceb4:	0800ce65 	.word	0x0800ce65
 800ceb8:	0800ce65 	.word	0x0800ce65
 800cebc:	0800d017 	.word	0x0800d017
 800cec0:	0800ce65 	.word	0x0800ce65
 800cec4:	0800cf19 	.word	0x0800cf19
 800cec8:	0800ce65 	.word	0x0800ce65
 800cecc:	0800ce65 	.word	0x0800ce65
 800ced0:	0800cfdf 	.word	0x0800cfdf
 800ced4:	682b      	ldr	r3, [r5, #0]
 800ced6:	1d1a      	adds	r2, r3, #4
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	602a      	str	r2, [r5, #0]
 800cedc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cee0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cee4:	2301      	movs	r3, #1
 800cee6:	e0a3      	b.n	800d030 <_printf_i+0x1f4>
 800cee8:	6820      	ldr	r0, [r4, #0]
 800ceea:	6829      	ldr	r1, [r5, #0]
 800ceec:	0606      	lsls	r6, r0, #24
 800ceee:	f101 0304 	add.w	r3, r1, #4
 800cef2:	d50a      	bpl.n	800cf0a <_printf_i+0xce>
 800cef4:	680e      	ldr	r6, [r1, #0]
 800cef6:	602b      	str	r3, [r5, #0]
 800cef8:	2e00      	cmp	r6, #0
 800cefa:	da03      	bge.n	800cf04 <_printf_i+0xc8>
 800cefc:	232d      	movs	r3, #45	; 0x2d
 800cefe:	4276      	negs	r6, r6
 800cf00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf04:	485e      	ldr	r0, [pc, #376]	; (800d080 <_printf_i+0x244>)
 800cf06:	230a      	movs	r3, #10
 800cf08:	e019      	b.n	800cf3e <_printf_i+0x102>
 800cf0a:	680e      	ldr	r6, [r1, #0]
 800cf0c:	602b      	str	r3, [r5, #0]
 800cf0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cf12:	bf18      	it	ne
 800cf14:	b236      	sxthne	r6, r6
 800cf16:	e7ef      	b.n	800cef8 <_printf_i+0xbc>
 800cf18:	682b      	ldr	r3, [r5, #0]
 800cf1a:	6820      	ldr	r0, [r4, #0]
 800cf1c:	1d19      	adds	r1, r3, #4
 800cf1e:	6029      	str	r1, [r5, #0]
 800cf20:	0601      	lsls	r1, r0, #24
 800cf22:	d501      	bpl.n	800cf28 <_printf_i+0xec>
 800cf24:	681e      	ldr	r6, [r3, #0]
 800cf26:	e002      	b.n	800cf2e <_printf_i+0xf2>
 800cf28:	0646      	lsls	r6, r0, #25
 800cf2a:	d5fb      	bpl.n	800cf24 <_printf_i+0xe8>
 800cf2c:	881e      	ldrh	r6, [r3, #0]
 800cf2e:	4854      	ldr	r0, [pc, #336]	; (800d080 <_printf_i+0x244>)
 800cf30:	2f6f      	cmp	r7, #111	; 0x6f
 800cf32:	bf0c      	ite	eq
 800cf34:	2308      	moveq	r3, #8
 800cf36:	230a      	movne	r3, #10
 800cf38:	2100      	movs	r1, #0
 800cf3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cf3e:	6865      	ldr	r5, [r4, #4]
 800cf40:	60a5      	str	r5, [r4, #8]
 800cf42:	2d00      	cmp	r5, #0
 800cf44:	bfa2      	ittt	ge
 800cf46:	6821      	ldrge	r1, [r4, #0]
 800cf48:	f021 0104 	bicge.w	r1, r1, #4
 800cf4c:	6021      	strge	r1, [r4, #0]
 800cf4e:	b90e      	cbnz	r6, 800cf54 <_printf_i+0x118>
 800cf50:	2d00      	cmp	r5, #0
 800cf52:	d04d      	beq.n	800cff0 <_printf_i+0x1b4>
 800cf54:	4615      	mov	r5, r2
 800cf56:	fbb6 f1f3 	udiv	r1, r6, r3
 800cf5a:	fb03 6711 	mls	r7, r3, r1, r6
 800cf5e:	5dc7      	ldrb	r7, [r0, r7]
 800cf60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cf64:	4637      	mov	r7, r6
 800cf66:	42bb      	cmp	r3, r7
 800cf68:	460e      	mov	r6, r1
 800cf6a:	d9f4      	bls.n	800cf56 <_printf_i+0x11a>
 800cf6c:	2b08      	cmp	r3, #8
 800cf6e:	d10b      	bne.n	800cf88 <_printf_i+0x14c>
 800cf70:	6823      	ldr	r3, [r4, #0]
 800cf72:	07de      	lsls	r6, r3, #31
 800cf74:	d508      	bpl.n	800cf88 <_printf_i+0x14c>
 800cf76:	6923      	ldr	r3, [r4, #16]
 800cf78:	6861      	ldr	r1, [r4, #4]
 800cf7a:	4299      	cmp	r1, r3
 800cf7c:	bfde      	ittt	le
 800cf7e:	2330      	movle	r3, #48	; 0x30
 800cf80:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cf84:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cf88:	1b52      	subs	r2, r2, r5
 800cf8a:	6122      	str	r2, [r4, #16]
 800cf8c:	f8cd a000 	str.w	sl, [sp]
 800cf90:	464b      	mov	r3, r9
 800cf92:	aa03      	add	r2, sp, #12
 800cf94:	4621      	mov	r1, r4
 800cf96:	4640      	mov	r0, r8
 800cf98:	f7ff fee2 	bl	800cd60 <_printf_common>
 800cf9c:	3001      	adds	r0, #1
 800cf9e:	d14c      	bne.n	800d03a <_printf_i+0x1fe>
 800cfa0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfa4:	b004      	add	sp, #16
 800cfa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfaa:	4835      	ldr	r0, [pc, #212]	; (800d080 <_printf_i+0x244>)
 800cfac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cfb0:	6829      	ldr	r1, [r5, #0]
 800cfb2:	6823      	ldr	r3, [r4, #0]
 800cfb4:	f851 6b04 	ldr.w	r6, [r1], #4
 800cfb8:	6029      	str	r1, [r5, #0]
 800cfba:	061d      	lsls	r5, r3, #24
 800cfbc:	d514      	bpl.n	800cfe8 <_printf_i+0x1ac>
 800cfbe:	07df      	lsls	r7, r3, #31
 800cfc0:	bf44      	itt	mi
 800cfc2:	f043 0320 	orrmi.w	r3, r3, #32
 800cfc6:	6023      	strmi	r3, [r4, #0]
 800cfc8:	b91e      	cbnz	r6, 800cfd2 <_printf_i+0x196>
 800cfca:	6823      	ldr	r3, [r4, #0]
 800cfcc:	f023 0320 	bic.w	r3, r3, #32
 800cfd0:	6023      	str	r3, [r4, #0]
 800cfd2:	2310      	movs	r3, #16
 800cfd4:	e7b0      	b.n	800cf38 <_printf_i+0xfc>
 800cfd6:	6823      	ldr	r3, [r4, #0]
 800cfd8:	f043 0320 	orr.w	r3, r3, #32
 800cfdc:	6023      	str	r3, [r4, #0]
 800cfde:	2378      	movs	r3, #120	; 0x78
 800cfe0:	4828      	ldr	r0, [pc, #160]	; (800d084 <_printf_i+0x248>)
 800cfe2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cfe6:	e7e3      	b.n	800cfb0 <_printf_i+0x174>
 800cfe8:	0659      	lsls	r1, r3, #25
 800cfea:	bf48      	it	mi
 800cfec:	b2b6      	uxthmi	r6, r6
 800cfee:	e7e6      	b.n	800cfbe <_printf_i+0x182>
 800cff0:	4615      	mov	r5, r2
 800cff2:	e7bb      	b.n	800cf6c <_printf_i+0x130>
 800cff4:	682b      	ldr	r3, [r5, #0]
 800cff6:	6826      	ldr	r6, [r4, #0]
 800cff8:	6961      	ldr	r1, [r4, #20]
 800cffa:	1d18      	adds	r0, r3, #4
 800cffc:	6028      	str	r0, [r5, #0]
 800cffe:	0635      	lsls	r5, r6, #24
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	d501      	bpl.n	800d008 <_printf_i+0x1cc>
 800d004:	6019      	str	r1, [r3, #0]
 800d006:	e002      	b.n	800d00e <_printf_i+0x1d2>
 800d008:	0670      	lsls	r0, r6, #25
 800d00a:	d5fb      	bpl.n	800d004 <_printf_i+0x1c8>
 800d00c:	8019      	strh	r1, [r3, #0]
 800d00e:	2300      	movs	r3, #0
 800d010:	6123      	str	r3, [r4, #16]
 800d012:	4615      	mov	r5, r2
 800d014:	e7ba      	b.n	800cf8c <_printf_i+0x150>
 800d016:	682b      	ldr	r3, [r5, #0]
 800d018:	1d1a      	adds	r2, r3, #4
 800d01a:	602a      	str	r2, [r5, #0]
 800d01c:	681d      	ldr	r5, [r3, #0]
 800d01e:	6862      	ldr	r2, [r4, #4]
 800d020:	2100      	movs	r1, #0
 800d022:	4628      	mov	r0, r5
 800d024:	f7f3 f8fc 	bl	8000220 <memchr>
 800d028:	b108      	cbz	r0, 800d02e <_printf_i+0x1f2>
 800d02a:	1b40      	subs	r0, r0, r5
 800d02c:	6060      	str	r0, [r4, #4]
 800d02e:	6863      	ldr	r3, [r4, #4]
 800d030:	6123      	str	r3, [r4, #16]
 800d032:	2300      	movs	r3, #0
 800d034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d038:	e7a8      	b.n	800cf8c <_printf_i+0x150>
 800d03a:	6923      	ldr	r3, [r4, #16]
 800d03c:	462a      	mov	r2, r5
 800d03e:	4649      	mov	r1, r9
 800d040:	4640      	mov	r0, r8
 800d042:	47d0      	blx	sl
 800d044:	3001      	adds	r0, #1
 800d046:	d0ab      	beq.n	800cfa0 <_printf_i+0x164>
 800d048:	6823      	ldr	r3, [r4, #0]
 800d04a:	079b      	lsls	r3, r3, #30
 800d04c:	d413      	bmi.n	800d076 <_printf_i+0x23a>
 800d04e:	68e0      	ldr	r0, [r4, #12]
 800d050:	9b03      	ldr	r3, [sp, #12]
 800d052:	4298      	cmp	r0, r3
 800d054:	bfb8      	it	lt
 800d056:	4618      	movlt	r0, r3
 800d058:	e7a4      	b.n	800cfa4 <_printf_i+0x168>
 800d05a:	2301      	movs	r3, #1
 800d05c:	4632      	mov	r2, r6
 800d05e:	4649      	mov	r1, r9
 800d060:	4640      	mov	r0, r8
 800d062:	47d0      	blx	sl
 800d064:	3001      	adds	r0, #1
 800d066:	d09b      	beq.n	800cfa0 <_printf_i+0x164>
 800d068:	3501      	adds	r5, #1
 800d06a:	68e3      	ldr	r3, [r4, #12]
 800d06c:	9903      	ldr	r1, [sp, #12]
 800d06e:	1a5b      	subs	r3, r3, r1
 800d070:	42ab      	cmp	r3, r5
 800d072:	dcf2      	bgt.n	800d05a <_printf_i+0x21e>
 800d074:	e7eb      	b.n	800d04e <_printf_i+0x212>
 800d076:	2500      	movs	r5, #0
 800d078:	f104 0619 	add.w	r6, r4, #25
 800d07c:	e7f5      	b.n	800d06a <_printf_i+0x22e>
 800d07e:	bf00      	nop
 800d080:	0800d57d 	.word	0x0800d57d
 800d084:	0800d58e 	.word	0x0800d58e

0800d088 <_sbrk_r>:
 800d088:	b538      	push	{r3, r4, r5, lr}
 800d08a:	4d06      	ldr	r5, [pc, #24]	; (800d0a4 <_sbrk_r+0x1c>)
 800d08c:	2300      	movs	r3, #0
 800d08e:	4604      	mov	r4, r0
 800d090:	4608      	mov	r0, r1
 800d092:	602b      	str	r3, [r5, #0]
 800d094:	f7f4 fd7a 	bl	8001b8c <_sbrk>
 800d098:	1c43      	adds	r3, r0, #1
 800d09a:	d102      	bne.n	800d0a2 <_sbrk_r+0x1a>
 800d09c:	682b      	ldr	r3, [r5, #0]
 800d09e:	b103      	cbz	r3, 800d0a2 <_sbrk_r+0x1a>
 800d0a0:	6023      	str	r3, [r4, #0]
 800d0a2:	bd38      	pop	{r3, r4, r5, pc}
 800d0a4:	20001eb0 	.word	0x20001eb0

0800d0a8 <__sread>:
 800d0a8:	b510      	push	{r4, lr}
 800d0aa:	460c      	mov	r4, r1
 800d0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0b0:	f000 f8ea 	bl	800d288 <_read_r>
 800d0b4:	2800      	cmp	r0, #0
 800d0b6:	bfab      	itete	ge
 800d0b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d0ba:	89a3      	ldrhlt	r3, [r4, #12]
 800d0bc:	181b      	addge	r3, r3, r0
 800d0be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d0c2:	bfac      	ite	ge
 800d0c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d0c6:	81a3      	strhlt	r3, [r4, #12]
 800d0c8:	bd10      	pop	{r4, pc}

0800d0ca <__swrite>:
 800d0ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ce:	461f      	mov	r7, r3
 800d0d0:	898b      	ldrh	r3, [r1, #12]
 800d0d2:	05db      	lsls	r3, r3, #23
 800d0d4:	4605      	mov	r5, r0
 800d0d6:	460c      	mov	r4, r1
 800d0d8:	4616      	mov	r6, r2
 800d0da:	d505      	bpl.n	800d0e8 <__swrite+0x1e>
 800d0dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0e0:	2302      	movs	r3, #2
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	f000 f868 	bl	800d1b8 <_lseek_r>
 800d0e8:	89a3      	ldrh	r3, [r4, #12]
 800d0ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d0f2:	81a3      	strh	r3, [r4, #12]
 800d0f4:	4632      	mov	r2, r6
 800d0f6:	463b      	mov	r3, r7
 800d0f8:	4628      	mov	r0, r5
 800d0fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0fe:	f000 b817 	b.w	800d130 <_write_r>

0800d102 <__sseek>:
 800d102:	b510      	push	{r4, lr}
 800d104:	460c      	mov	r4, r1
 800d106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d10a:	f000 f855 	bl	800d1b8 <_lseek_r>
 800d10e:	1c43      	adds	r3, r0, #1
 800d110:	89a3      	ldrh	r3, [r4, #12]
 800d112:	bf15      	itete	ne
 800d114:	6560      	strne	r0, [r4, #84]	; 0x54
 800d116:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d11a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d11e:	81a3      	strheq	r3, [r4, #12]
 800d120:	bf18      	it	ne
 800d122:	81a3      	strhne	r3, [r4, #12]
 800d124:	bd10      	pop	{r4, pc}

0800d126 <__sclose>:
 800d126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d12a:	f000 b813 	b.w	800d154 <_close_r>
	...

0800d130 <_write_r>:
 800d130:	b538      	push	{r3, r4, r5, lr}
 800d132:	4d07      	ldr	r5, [pc, #28]	; (800d150 <_write_r+0x20>)
 800d134:	4604      	mov	r4, r0
 800d136:	4608      	mov	r0, r1
 800d138:	4611      	mov	r1, r2
 800d13a:	2200      	movs	r2, #0
 800d13c:	602a      	str	r2, [r5, #0]
 800d13e:	461a      	mov	r2, r3
 800d140:	f7f3 fabc 	bl	80006bc <_write>
 800d144:	1c43      	adds	r3, r0, #1
 800d146:	d102      	bne.n	800d14e <_write_r+0x1e>
 800d148:	682b      	ldr	r3, [r5, #0]
 800d14a:	b103      	cbz	r3, 800d14e <_write_r+0x1e>
 800d14c:	6023      	str	r3, [r4, #0]
 800d14e:	bd38      	pop	{r3, r4, r5, pc}
 800d150:	20001eb0 	.word	0x20001eb0

0800d154 <_close_r>:
 800d154:	b538      	push	{r3, r4, r5, lr}
 800d156:	4d06      	ldr	r5, [pc, #24]	; (800d170 <_close_r+0x1c>)
 800d158:	2300      	movs	r3, #0
 800d15a:	4604      	mov	r4, r0
 800d15c:	4608      	mov	r0, r1
 800d15e:	602b      	str	r3, [r5, #0]
 800d160:	f7f4 fcdf 	bl	8001b22 <_close>
 800d164:	1c43      	adds	r3, r0, #1
 800d166:	d102      	bne.n	800d16e <_close_r+0x1a>
 800d168:	682b      	ldr	r3, [r5, #0]
 800d16a:	b103      	cbz	r3, 800d16e <_close_r+0x1a>
 800d16c:	6023      	str	r3, [r4, #0]
 800d16e:	bd38      	pop	{r3, r4, r5, pc}
 800d170:	20001eb0 	.word	0x20001eb0

0800d174 <_fstat_r>:
 800d174:	b538      	push	{r3, r4, r5, lr}
 800d176:	4d07      	ldr	r5, [pc, #28]	; (800d194 <_fstat_r+0x20>)
 800d178:	2300      	movs	r3, #0
 800d17a:	4604      	mov	r4, r0
 800d17c:	4608      	mov	r0, r1
 800d17e:	4611      	mov	r1, r2
 800d180:	602b      	str	r3, [r5, #0]
 800d182:	f7f4 fcda 	bl	8001b3a <_fstat>
 800d186:	1c43      	adds	r3, r0, #1
 800d188:	d102      	bne.n	800d190 <_fstat_r+0x1c>
 800d18a:	682b      	ldr	r3, [r5, #0]
 800d18c:	b103      	cbz	r3, 800d190 <_fstat_r+0x1c>
 800d18e:	6023      	str	r3, [r4, #0]
 800d190:	bd38      	pop	{r3, r4, r5, pc}
 800d192:	bf00      	nop
 800d194:	20001eb0 	.word	0x20001eb0

0800d198 <_isatty_r>:
 800d198:	b538      	push	{r3, r4, r5, lr}
 800d19a:	4d06      	ldr	r5, [pc, #24]	; (800d1b4 <_isatty_r+0x1c>)
 800d19c:	2300      	movs	r3, #0
 800d19e:	4604      	mov	r4, r0
 800d1a0:	4608      	mov	r0, r1
 800d1a2:	602b      	str	r3, [r5, #0]
 800d1a4:	f7f4 fcd9 	bl	8001b5a <_isatty>
 800d1a8:	1c43      	adds	r3, r0, #1
 800d1aa:	d102      	bne.n	800d1b2 <_isatty_r+0x1a>
 800d1ac:	682b      	ldr	r3, [r5, #0]
 800d1ae:	b103      	cbz	r3, 800d1b2 <_isatty_r+0x1a>
 800d1b0:	6023      	str	r3, [r4, #0]
 800d1b2:	bd38      	pop	{r3, r4, r5, pc}
 800d1b4:	20001eb0 	.word	0x20001eb0

0800d1b8 <_lseek_r>:
 800d1b8:	b538      	push	{r3, r4, r5, lr}
 800d1ba:	4d07      	ldr	r5, [pc, #28]	; (800d1d8 <_lseek_r+0x20>)
 800d1bc:	4604      	mov	r4, r0
 800d1be:	4608      	mov	r0, r1
 800d1c0:	4611      	mov	r1, r2
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	602a      	str	r2, [r5, #0]
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	f7f4 fcd2 	bl	8001b70 <_lseek>
 800d1cc:	1c43      	adds	r3, r0, #1
 800d1ce:	d102      	bne.n	800d1d6 <_lseek_r+0x1e>
 800d1d0:	682b      	ldr	r3, [r5, #0]
 800d1d2:	b103      	cbz	r3, 800d1d6 <_lseek_r+0x1e>
 800d1d4:	6023      	str	r3, [r4, #0]
 800d1d6:	bd38      	pop	{r3, r4, r5, pc}
 800d1d8:	20001eb0 	.word	0x20001eb0

0800d1dc <memmove>:
 800d1dc:	4288      	cmp	r0, r1
 800d1de:	b510      	push	{r4, lr}
 800d1e0:	eb01 0402 	add.w	r4, r1, r2
 800d1e4:	d902      	bls.n	800d1ec <memmove+0x10>
 800d1e6:	4284      	cmp	r4, r0
 800d1e8:	4623      	mov	r3, r4
 800d1ea:	d807      	bhi.n	800d1fc <memmove+0x20>
 800d1ec:	1e43      	subs	r3, r0, #1
 800d1ee:	42a1      	cmp	r1, r4
 800d1f0:	d008      	beq.n	800d204 <memmove+0x28>
 800d1f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d1fa:	e7f8      	b.n	800d1ee <memmove+0x12>
 800d1fc:	4402      	add	r2, r0
 800d1fe:	4601      	mov	r1, r0
 800d200:	428a      	cmp	r2, r1
 800d202:	d100      	bne.n	800d206 <memmove+0x2a>
 800d204:	bd10      	pop	{r4, pc}
 800d206:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d20a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d20e:	e7f7      	b.n	800d200 <memmove+0x24>

0800d210 <__malloc_lock>:
 800d210:	4801      	ldr	r0, [pc, #4]	; (800d218 <__malloc_lock+0x8>)
 800d212:	f7ff b9a7 	b.w	800c564 <__retarget_lock_acquire_recursive>
 800d216:	bf00      	nop
 800d218:	20001ea4 	.word	0x20001ea4

0800d21c <__malloc_unlock>:
 800d21c:	4801      	ldr	r0, [pc, #4]	; (800d224 <__malloc_unlock+0x8>)
 800d21e:	f7ff b9a2 	b.w	800c566 <__retarget_lock_release_recursive>
 800d222:	bf00      	nop
 800d224:	20001ea4 	.word	0x20001ea4

0800d228 <_realloc_r>:
 800d228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d22c:	4680      	mov	r8, r0
 800d22e:	4614      	mov	r4, r2
 800d230:	460e      	mov	r6, r1
 800d232:	b921      	cbnz	r1, 800d23e <_realloc_r+0x16>
 800d234:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d238:	4611      	mov	r1, r2
 800d23a:	f7ff ba67 	b.w	800c70c <_malloc_r>
 800d23e:	b92a      	cbnz	r2, 800d24c <_realloc_r+0x24>
 800d240:	f7ff f9f8 	bl	800c634 <_free_r>
 800d244:	4625      	mov	r5, r4
 800d246:	4628      	mov	r0, r5
 800d248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d24c:	f000 f82e 	bl	800d2ac <_malloc_usable_size_r>
 800d250:	4284      	cmp	r4, r0
 800d252:	4607      	mov	r7, r0
 800d254:	d802      	bhi.n	800d25c <_realloc_r+0x34>
 800d256:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d25a:	d812      	bhi.n	800d282 <_realloc_r+0x5a>
 800d25c:	4621      	mov	r1, r4
 800d25e:	4640      	mov	r0, r8
 800d260:	f7ff fa54 	bl	800c70c <_malloc_r>
 800d264:	4605      	mov	r5, r0
 800d266:	2800      	cmp	r0, #0
 800d268:	d0ed      	beq.n	800d246 <_realloc_r+0x1e>
 800d26a:	42bc      	cmp	r4, r7
 800d26c:	4622      	mov	r2, r4
 800d26e:	4631      	mov	r1, r6
 800d270:	bf28      	it	cs
 800d272:	463a      	movcs	r2, r7
 800d274:	f7fe fe3a 	bl	800beec <memcpy>
 800d278:	4631      	mov	r1, r6
 800d27a:	4640      	mov	r0, r8
 800d27c:	f7ff f9da 	bl	800c634 <_free_r>
 800d280:	e7e1      	b.n	800d246 <_realloc_r+0x1e>
 800d282:	4635      	mov	r5, r6
 800d284:	e7df      	b.n	800d246 <_realloc_r+0x1e>
	...

0800d288 <_read_r>:
 800d288:	b538      	push	{r3, r4, r5, lr}
 800d28a:	4d07      	ldr	r5, [pc, #28]	; (800d2a8 <_read_r+0x20>)
 800d28c:	4604      	mov	r4, r0
 800d28e:	4608      	mov	r0, r1
 800d290:	4611      	mov	r1, r2
 800d292:	2200      	movs	r2, #0
 800d294:	602a      	str	r2, [r5, #0]
 800d296:	461a      	mov	r2, r3
 800d298:	f7f4 fc26 	bl	8001ae8 <_read>
 800d29c:	1c43      	adds	r3, r0, #1
 800d29e:	d102      	bne.n	800d2a6 <_read_r+0x1e>
 800d2a0:	682b      	ldr	r3, [r5, #0]
 800d2a2:	b103      	cbz	r3, 800d2a6 <_read_r+0x1e>
 800d2a4:	6023      	str	r3, [r4, #0]
 800d2a6:	bd38      	pop	{r3, r4, r5, pc}
 800d2a8:	20001eb0 	.word	0x20001eb0

0800d2ac <_malloc_usable_size_r>:
 800d2ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2b0:	1f18      	subs	r0, r3, #4
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	bfbc      	itt	lt
 800d2b6:	580b      	ldrlt	r3, [r1, r0]
 800d2b8:	18c0      	addlt	r0, r0, r3
 800d2ba:	4770      	bx	lr

0800d2bc <_init>:
 800d2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2be:	bf00      	nop
 800d2c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2c2:	bc08      	pop	{r3}
 800d2c4:	469e      	mov	lr, r3
 800d2c6:	4770      	bx	lr

0800d2c8 <_fini>:
 800d2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2ca:	bf00      	nop
 800d2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2ce:	bc08      	pop	{r3}
 800d2d0:	469e      	mov	lr, r3
 800d2d2:	4770      	bx	lr
