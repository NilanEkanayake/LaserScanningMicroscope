
stm32g473-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0cc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  0800d2ac  0800d2ac  0001d2ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d56c  0800d56c  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800d56c  0800d56c  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d56c  0800d56c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d56c  0800d56c  0001d56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d570  0800d570  0001d570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800d574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cbc  200001f8  0800d76c  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001eb4  0800d76c  00021eb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cecf  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004180  00000000  00000000  0003d0f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001968  00000000  00000000  00041278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001790  00000000  00000000  00042be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026dd1  00000000  00000000  00044370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001de3e  00000000  00000000  0006b141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3fd5  00000000  00000000  00088f7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017cf54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075b4  00000000  00000000  0017cfa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d294 	.word	0x0800d294

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001fc 	.word	0x200001fc
 800021c:	0800d294 	.word	0x0800d294

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_d2iz>:
 8000638:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800063c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000640:	d215      	bcs.n	800066e <__aeabi_d2iz+0x36>
 8000642:	d511      	bpl.n	8000668 <__aeabi_d2iz+0x30>
 8000644:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000648:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800064c:	d912      	bls.n	8000674 <__aeabi_d2iz+0x3c>
 800064e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000652:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000656:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800065a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800065e:	fa23 f002 	lsr.w	r0, r3, r2
 8000662:	bf18      	it	ne
 8000664:	4240      	negne	r0, r0
 8000666:	4770      	bx	lr
 8000668:	f04f 0000 	mov.w	r0, #0
 800066c:	4770      	bx	lr
 800066e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000672:	d105      	bne.n	8000680 <__aeabi_d2iz+0x48>
 8000674:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000678:	bf08      	it	eq
 800067a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800067e:	4770      	bx	lr
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <delay_us>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//microsecond delay
void delay_us(uint16_t us)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <delay_us+0x30>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);
 800069a:	bf00      	nop
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <delay_us+0x30>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d3f9      	bcc.n	800069c <delay_us+0x14>
}
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	20000418 	.word	0x20000418

080006bc <_write>:

//USB cdc transmit
int _write(int file, char *ptr, int len) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
    static uint8_t rc = USBD_OK;

    do {
        rc = CDC_Transmit_FS((unsigned char*)ptr, len);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	4619      	mov	r1, r3
 80006ce:	68b8      	ldr	r0, [r7, #8]
 80006d0:	f00a ff80 	bl	800b5d4 <CDC_Transmit_FS>
 80006d4:	4603      	mov	r3, r0
 80006d6:	461a      	mov	r2, r3
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <_write+0x40>)
 80006da:	701a      	strb	r2, [r3, #0]
    } while (USBD_BUSY == rc);
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <_write+0x40>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d0f1      	beq.n	80006c8 <_write+0xc>

    if (USBD_FAIL == rc) {
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <_write+0x40>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b03      	cmp	r3, #3
 80006ea:	d101      	bne.n	80006f0 <_write+0x34>
        /// NOTE: Should never reach here.
        /// TODO: Handle this error.
        return 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	e000      	b.n	80006f2 <_write+0x36>
    }
    return len;
 80006f0:	687b      	ldr	r3, [r7, #4]
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200004b1 	.word	0x200004b1

08000700 <analogRead>:
uint8_t buffer[64];
bool newReceived;

//ADC
uint32_t analogRead(uint8_t channel)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
	uint32_t ADCValue = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
	if (channel == 1) {
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d111      	bne.n	8000738 <analogRead+0x38>
		  HAL_ADC_Start(&hadc1);
 8000714:	4815      	ldr	r0, [pc, #84]	; (800076c <analogRead+0x6c>)
 8000716:	f001 ff69 	bl	80025ec <HAL_ADC_Start>
		  if (HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK) {
 800071a:	4915      	ldr	r1, [pc, #84]	; (8000770 <analogRead+0x70>)
 800071c:	4813      	ldr	r0, [pc, #76]	; (800076c <analogRead+0x6c>)
 800071e:	f002 f87d 	bl	800281c <HAL_ADC_PollForConversion>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d103      	bne.n	8000730 <analogRead+0x30>
		      ADCValue = HAL_ADC_GetValue(&hadc1);
 8000728:	4810      	ldr	r0, [pc, #64]	; (800076c <analogRead+0x6c>)
 800072a:	f002 f97d 	bl	8002a28 <HAL_ADC_GetValue>
 800072e:	60f8      	str	r0, [r7, #12]
		  }
		  HAL_ADC_Stop(&hadc1);
 8000730:	480e      	ldr	r0, [pc, #56]	; (800076c <analogRead+0x6c>)
 8000732:	f002 f83f 	bl	80027b4 <HAL_ADC_Stop>
 8000736:	e013      	b.n	8000760 <analogRead+0x60>
	} else if (channel == 5) {
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	2b05      	cmp	r3, #5
 800073c:	d110      	bne.n	8000760 <analogRead+0x60>
		  HAL_ADC_Start(&hadc5);
 800073e:	480d      	ldr	r0, [pc, #52]	; (8000774 <analogRead+0x74>)
 8000740:	f001 ff54 	bl	80025ec <HAL_ADC_Start>
		  if (HAL_ADC_PollForConversion(&hadc5, 1000000) == HAL_OK) {
 8000744:	490a      	ldr	r1, [pc, #40]	; (8000770 <analogRead+0x70>)
 8000746:	480b      	ldr	r0, [pc, #44]	; (8000774 <analogRead+0x74>)
 8000748:	f002 f868 	bl	800281c <HAL_ADC_PollForConversion>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d103      	bne.n	800075a <analogRead+0x5a>
		      ADCValue = HAL_ADC_GetValue(&hadc5);
 8000752:	4808      	ldr	r0, [pc, #32]	; (8000774 <analogRead+0x74>)
 8000754:	f002 f968 	bl	8002a28 <HAL_ADC_GetValue>
 8000758:	60f8      	str	r0, [r7, #12]
		  }
		  HAL_ADC_Stop(&hadc5);
 800075a:	4806      	ldr	r0, [pc, #24]	; (8000774 <analogRead+0x74>)
 800075c:	f002 f82a 	bl	80027b4 <HAL_ADC_Stop>
	}

  return ADCValue;
 8000760:	68fb      	ldr	r3, [r7, #12]
}
 8000762:	4618      	mov	r0, r3
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000214 	.word	0x20000214
 8000770:	000f4240 	.word	0x000f4240
 8000774:	20000280 	.word	0x20000280

08000778 <getNum>:

//parse usb serial input
uint16_t getNum() {
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
	  uint16_t num = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	80fb      	strh	r3, [r7, #6]
	  for (int i=1; i<=4; i++) {
 8000782:	2301      	movs	r3, #1
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	e01e      	b.n	80007c6 <getNum+0x4e>
		  if (isdigit(buffer[i])) { //only works if buffer isn't initialized with all zeros - shouldn't be
 8000788:	4a14      	ldr	r2, [pc, #80]	; (80007dc <getNum+0x64>)
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	4413      	add	r3, r2
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	3301      	adds	r3, #1
 8000792:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <getNum+0x68>)
 8000794:	4413      	add	r3, r2
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	f003 0304 	and.w	r3, r3, #4
 800079c:	2b00      	cmp	r3, #0
 800079e:	d00f      	beq.n	80007c0 <getNum+0x48>
			  num *= 10;
 80007a0:	88fb      	ldrh	r3, [r7, #6]
 80007a2:	461a      	mov	r2, r3
 80007a4:	0092      	lsls	r2, r2, #2
 80007a6:	4413      	add	r3, r2
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	80fb      	strh	r3, [r7, #6]
			  num += buffer[i] - '0';
 80007ac:	4a0b      	ldr	r2, [pc, #44]	; (80007dc <getNum+0x64>)
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	4413      	add	r3, r2
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	88fb      	ldrh	r3, [r7, #6]
 80007b8:	4413      	add	r3, r2
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	3b30      	subs	r3, #48	; 0x30
 80007be:	80fb      	strh	r3, [r7, #6]
	  for (int i=1; i<=4; i++) {
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	3301      	adds	r3, #1
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	2b04      	cmp	r3, #4
 80007ca:	dddd      	ble.n	8000788 <getNum+0x10>
		  }
	  }
	  return num;
 80007cc:	88fb      	ldrh	r3, [r7, #6]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	20000470 	.word	0x20000470
 80007e0:	0800d3d0 	.word	0x0800d3d0

080007e4 <fineFocus>:

//fine focus
//return true for successful focus, false for not
int16_t fineFocus() {
 80007e4:	b5b0      	push	{r4, r5, r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
	int16_t currentAdc;
	int16_t topAdc = -10000;
 80007ea:	f64d 03f0 	movw	r3, #55536	; 0xd8f0
 80007ee:	82fb      	strh	r3, [r7, #22]
	int16_t bottomAdc = 10000;
 80007f0:	f242 7310 	movw	r3, #10000	; 0x2710
 80007f4:	82bb      	strh	r3, [r7, #20]
	int16_t topDac = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	827b      	strh	r3, [r7, #18]
	int16_t bottomDac = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	823b      	strh	r3, [r7, #16]
	int16_t middleDac;
	int8_t precision = 3;
 80007fe:	2303      	movs	r3, #3
 8000800:	71fb      	strb	r3, [r7, #7]

	//set offsets
	HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_1, DAC_ALIGN_12B_R, xOffset);
 8000802:	4b56      	ldr	r3, [pc, #344]	; (800095c <fineFocus+0x178>)
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	4855      	ldr	r0, [pc, #340]	; (8000960 <fineFocus+0x17c>)
 800080c:	f003 f98a 	bl	8003b24 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_2, DAC_ALIGN_12B_R, yOffset);
 8000810:	4b54      	ldr	r3, [pc, #336]	; (8000964 <fineFocus+0x180>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	2200      	movs	r2, #0
 8000816:	2110      	movs	r1, #16
 8000818:	4851      	ldr	r0, [pc, #324]	; (8000960 <fineFocus+0x17c>)
 800081a:	f003 f983 	bl	8003b24 <HAL_DAC_SetValue>

	//set laser power
	HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, laserPower);
 800081e:	4b52      	ldr	r3, [pc, #328]	; (8000968 <fineFocus+0x184>)
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	2200      	movs	r2, #0
 8000824:	2100      	movs	r1, #0
 8000826:	4851      	ldr	r0, [pc, #324]	; (800096c <fineFocus+0x188>)
 8000828:	f003 f97c 	bl	8003b24 <HAL_DAC_SetValue>

	//delay to settle
	HAL_Delay(3);
 800082c:	2003      	movs	r0, #3
 800082e:	f001 fa7b 	bl	8001d28 <HAL_Delay>

	for (int i=0; i<4096; i+=precision) { //can do +=5?
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	e038      	b.n	80008aa <fineFocus+0xc6>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, i);
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	2200      	movs	r2, #0
 800083c:	2100      	movs	r1, #0
 800083e:	484c      	ldr	r0, [pc, #304]	; (8000970 <fineFocus+0x18c>)
 8000840:	f003 f970 	bl	8003b24 <HAL_DAC_SetValue>
		//delay_us(1000);
		HAL_Delay(2);
 8000844:	2002      	movs	r0, #2
 8000846:	f001 fa6f 	bl	8001d28 <HAL_Delay>
		currentAdc = analogRead(5)-analogRead(1);
 800084a:	2005      	movs	r0, #5
 800084c:	f7ff ff58 	bl	8000700 <analogRead>
 8000850:	4603      	mov	r3, r0
 8000852:	b29c      	uxth	r4, r3
 8000854:	2001      	movs	r0, #1
 8000856:	f7ff ff53 	bl	8000700 <analogRead>
 800085a:	4603      	mov	r3, r0
 800085c:	b29b      	uxth	r3, r3
 800085e:	1ae3      	subs	r3, r4, r3
 8000860:	b29b      	uxth	r3, r3
 8000862:	807b      	strh	r3, [r7, #2]
		if (currentAdc > topAdc) {
 8000864:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000868:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800086c:	429a      	cmp	r2, r3
 800086e:	dd04      	ble.n	800087a <fineFocus+0x96>
			topAdc = currentAdc;
 8000870:	887b      	ldrh	r3, [r7, #2]
 8000872:	82fb      	strh	r3, [r7, #22]
			topDac = i;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	827b      	strh	r3, [r7, #18]
 8000878:	e009      	b.n	800088e <fineFocus+0xaa>
		} else if (currentAdc < bottomAdc) {
 800087a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800087e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000882:	429a      	cmp	r2, r3
 8000884:	da03      	bge.n	800088e <fineFocus+0xaa>
			bottomAdc = currentAdc;
 8000886:	887b      	ldrh	r3, [r7, #2]
 8000888:	82bb      	strh	r3, [r7, #20]
			bottomDac = i;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	823b      	strh	r3, [r7, #16]
		}
		//delay_us(1000); //give time for VCM to catch up - maybe not needed
		HAL_Delay(2);
 800088e:	2002      	movs	r0, #2
 8000890:	f001 fa4a 	bl	8001d28 <HAL_Delay>
		printf("%d\r\n", currentAdc);
 8000894:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000898:	4619      	mov	r1, r3
 800089a:	4836      	ldr	r0, [pc, #216]	; (8000974 <fineFocus+0x190>)
 800089c:	f00b fb28 	bl	800bef0 <iprintf>
	for (int i=0; i<4096; i+=precision) { //can do +=5?
 80008a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a4:	68fa      	ldr	r2, [r7, #12]
 80008a6:	4413      	add	r3, r2
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008b0:	dbc2      	blt.n	8000838 <fineFocus+0x54>
	}
	middleDac = (round((topDac-bottomDac)/2))+bottomDac;
 80008b2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80008b6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80008ba:	1ad3      	subs	r3, r2, r3
 80008bc:	0fda      	lsrs	r2, r3, #31
 80008be:	4413      	add	r3, r2
 80008c0:	105b      	asrs	r3, r3, #1
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fe4e 	bl	8000564 <__aeabi_i2d>
 80008c8:	4604      	mov	r4, r0
 80008ca:	460d      	mov	r5, r1
 80008cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff fe47 	bl	8000564 <__aeabi_i2d>
 80008d6:	4602      	mov	r2, r0
 80008d8:	460b      	mov	r3, r1
 80008da:	4620      	mov	r0, r4
 80008dc:	4629      	mov	r1, r5
 80008de:	f7ff fcf5 	bl	80002cc <__adddf3>
 80008e2:	4602      	mov	r2, r0
 80008e4:	460b      	mov	r3, r1
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	f7ff fea5 	bl	8000638 <__aeabi_d2iz>
 80008ee:	4603      	mov	r3, r0
 80008f0:	80bb      	strh	r3, [r7, #4]

	printf("Top DAC: %d\r\n", topDac);
 80008f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80008f6:	4619      	mov	r1, r3
 80008f8:	481f      	ldr	r0, [pc, #124]	; (8000978 <fineFocus+0x194>)
 80008fa:	f00b faf9 	bl	800bef0 <iprintf>
	printf("Bottom DAC: %d\r\n", bottomDac);
 80008fe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000902:	4619      	mov	r1, r3
 8000904:	481d      	ldr	r0, [pc, #116]	; (800097c <fineFocus+0x198>)
 8000906:	f00b faf3 	bl	800bef0 <iprintf>
	printf("Middle DAC: %d\r\n", middleDac);
 800090a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800090e:	4619      	mov	r1, r3
 8000910:	481b      	ldr	r0, [pc, #108]	; (8000980 <fineFocus+0x19c>)
 8000912:	f00b faed 	bl	800bef0 <iprintf>



	for (int i = 4095; i >= middleDac; i-=precision) {
 8000916:	f640 73ff 	movw	r3, #4095	; 0xfff
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	e00d      	b.n	800093a <fineFocus+0x156>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, i); //is blocking?
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	2200      	movs	r2, #0
 8000922:	2100      	movs	r1, #0
 8000924:	4812      	ldr	r0, [pc, #72]	; (8000970 <fineFocus+0x18c>)
 8000926:	f003 f8fd 	bl	8003b24 <HAL_DAC_SetValue>
		HAL_Delay(2);
 800092a:	2002      	movs	r0, #2
 800092c:	f001 f9fc 	bl	8001d28 <HAL_Delay>
	for (int i = 4095; i >= middleDac; i-=precision) {
 8000930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000934:	68ba      	ldr	r2, [r7, #8]
 8000936:	1ad3      	subs	r3, r2, r3
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	429a      	cmp	r2, r3
 8000942:	daec      	bge.n	800091e <fineFocus+0x13a>
	}

	HAL_Delay(1); //leave time to settle
 8000944:	2001      	movs	r0, #1
 8000946:	f001 f9ef 	bl	8001d28 <HAL_Delay>
	return topAdc-bottomAdc; //return difference, aka size of S-shape
 800094a:	8afa      	ldrh	r2, [r7, #22]
 800094c:	8abb      	ldrh	r3, [r7, #20]
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	b29b      	uxth	r3, r3
 8000952:	b21b      	sxth	r3, r3
}
 8000954:	4618      	mov	r0, r3
 8000956:	3718      	adds	r7, #24
 8000958:	46bd      	mov	sp, r7
 800095a:	bdb0      	pop	{r4, r5, r7, pc}
 800095c:	20000006 	.word	0x20000006
 8000960:	20000314 	.word	0x20000314
 8000964:	20000008 	.word	0x20000008
 8000968:	2000000c 	.word	0x2000000c
 800096c:	20000300 	.word	0x20000300
 8000970:	200002ec 	.word	0x200002ec
 8000974:	0800d2ac 	.word	0x0800d2ac
 8000978:	0800d2b4 	.word	0x0800d2b4
 800097c:	0800d2c4 	.word	0x0800d2c4
 8000980:	0800d2d8 	.word	0x0800d2d8

08000984 <coarseFocus>:

//coarse focus
uint16_t coarseFocus() {
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
	uint16_t sum = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	807b      	strh	r3, [r7, #2]
	uint16_t minDac = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	81fb      	strh	r3, [r7, #14]
	uint8_t precision = 3;
 8000992:	2303      	movs	r3, #3
 8000994:	707b      	strb	r3, [r7, #1]
	uint16_t minSum = 10000;
 8000996:	f242 7310 	movw	r3, #10000	; 0x2710
 800099a:	81bb      	strh	r3, [r7, #12]
	//set offsets
	HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_1, DAC_ALIGN_12B_R, xOffset);
 800099c:	4b3a      	ldr	r3, [pc, #232]	; (8000a88 <coarseFocus+0x104>)
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	4839      	ldr	r0, [pc, #228]	; (8000a8c <coarseFocus+0x108>)
 80009a6:	f003 f8bd 	bl	8003b24 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_2, DAC_ALIGN_12B_R, yOffset);
 80009aa:	4b39      	ldr	r3, [pc, #228]	; (8000a90 <coarseFocus+0x10c>)
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	2200      	movs	r2, #0
 80009b0:	2110      	movs	r1, #16
 80009b2:	4836      	ldr	r0, [pc, #216]	; (8000a8c <coarseFocus+0x108>)
 80009b4:	f003 f8b6 	bl	8003b24 <HAL_DAC_SetValue>

	//set laser power
	HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, laserPower);
 80009b8:	4b36      	ldr	r3, [pc, #216]	; (8000a94 <coarseFocus+0x110>)
 80009ba:	881b      	ldrh	r3, [r3, #0]
 80009bc:	2200      	movs	r2, #0
 80009be:	2100      	movs	r1, #0
 80009c0:	4835      	ldr	r0, [pc, #212]	; (8000a98 <coarseFocus+0x114>)
 80009c2:	f003 f8af 	bl	8003b24 <HAL_DAC_SetValue>

	//delay to settle
	HAL_Delay(3);
 80009c6:	2003      	movs	r0, #3
 80009c8:	f001 f9ae 	bl	8001d28 <HAL_Delay>

	for (int i=0; i<4096; i+=precision) {
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	e028      	b.n	8000a24 <coarseFocus+0xa0>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, i);
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	2200      	movs	r2, #0
 80009d6:	2110      	movs	r1, #16
 80009d8:	4830      	ldr	r0, [pc, #192]	; (8000a9c <coarseFocus+0x118>)
 80009da:	f003 f8a3 	bl	8003b24 <HAL_DAC_SetValue>
		HAL_Delay(2);
 80009de:	2002      	movs	r0, #2
 80009e0:	f001 f9a2 	bl	8001d28 <HAL_Delay>
		sum = analogRead(5)+analogRead(1);
 80009e4:	2005      	movs	r0, #5
 80009e6:	f7ff fe8b 	bl	8000700 <analogRead>
 80009ea:	4603      	mov	r3, r0
 80009ec:	b29c      	uxth	r4, r3
 80009ee:	2001      	movs	r0, #1
 80009f0:	f7ff fe86 	bl	8000700 <analogRead>
 80009f4:	4603      	mov	r3, r0
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	4423      	add	r3, r4
 80009fa:	807b      	strh	r3, [r7, #2]
		if (sum < minSum) { //values get smaller as light increases (inverted)
 80009fc:	887a      	ldrh	r2, [r7, #2]
 80009fe:	89bb      	ldrh	r3, [r7, #12]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d203      	bcs.n	8000a0c <coarseFocus+0x88>
			minSum = sum;
 8000a04:	887b      	ldrh	r3, [r7, #2]
 8000a06:	81bb      	strh	r3, [r7, #12]
			minDac = i;
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	81fb      	strh	r3, [r7, #14]
		}
		HAL_Delay(2); //give time for VCM to catch up - maybe not needed
 8000a0c:	2002      	movs	r0, #2
 8000a0e:	f001 f98b 	bl	8001d28 <HAL_Delay>
		printf("%d\r\n", sum); //print to see curve
 8000a12:	887b      	ldrh	r3, [r7, #2]
 8000a14:	4619      	mov	r1, r3
 8000a16:	4822      	ldr	r0, [pc, #136]	; (8000aa0 <coarseFocus+0x11c>)
 8000a18:	f00b fa6a 	bl	800bef0 <iprintf>
	for (int i=0; i<4096; i+=precision) {
 8000a1c:	787b      	ldrb	r3, [r7, #1]
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	4413      	add	r3, r2
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a2a:	dbd2      	blt.n	80009d2 <coarseFocus+0x4e>
	}

	printf("%d\r\n", minDac);
 8000a2c:	89fb      	ldrh	r3, [r7, #14]
 8000a2e:	4619      	mov	r1, r3
 8000a30:	481b      	ldr	r0, [pc, #108]	; (8000aa0 <coarseFocus+0x11c>)
 8000a32:	f00b fa5d 	bl	800bef0 <iprintf>

	for (int i = 4095; i >= minDac; i-=precision) {
 8000a36:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	e00c      	b.n	8000a58 <coarseFocus+0xd4>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, i);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2200      	movs	r2, #0
 8000a42:	2110      	movs	r1, #16
 8000a44:	4815      	ldr	r0, [pc, #84]	; (8000a9c <coarseFocus+0x118>)
 8000a46:	f003 f86d 	bl	8003b24 <HAL_DAC_SetValue>
		HAL_Delay(1);
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f001 f96c 	bl	8001d28 <HAL_Delay>
	for (int i = 4095; i >= minDac; i-=precision) {
 8000a50:	787b      	ldrb	r3, [r7, #1]
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	89fb      	ldrh	r3, [r7, #14]
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	daee      	bge.n	8000a3e <coarseFocus+0xba>
		//printf("%d\r\n", i);
	}

	HAL_Delay(1); //time to settle
 8000a60:	2001      	movs	r0, #1
 8000a62:	f001 f961 	bl	8001d28 <HAL_Delay>
	//maybe print DAC value at max, to know general position (aka make sure it's not at a max?)
	return analogRead(5)+analogRead(1);
 8000a66:	2005      	movs	r0, #5
 8000a68:	f7ff fe4a 	bl	8000700 <analogRead>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	b29c      	uxth	r4, r3
 8000a70:	2001      	movs	r0, #1
 8000a72:	f7ff fe45 	bl	8000700 <analogRead>
 8000a76:	4603      	mov	r3, r0
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	4423      	add	r3, r4
 8000a7c:	b29b      	uxth	r3, r3
	//return 0;
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd90      	pop	{r4, r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000006 	.word	0x20000006
 8000a8c:	20000314 	.word	0x20000314
 8000a90:	20000008 	.word	0x20000008
 8000a94:	2000000c 	.word	0x2000000c
 8000a98:	20000300 	.word	0x20000300
 8000a9c:	200002ec 	.word	0x200002ec
 8000aa0:	0800d2ac 	.word	0x0800d2ac

08000aa4 <scan>:

//main scan
void scan() {
 8000aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000aa8:	b088      	sub	sp, #32
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	466b      	mov	r3, sp
 8000aae:	4698      	mov	r8, r3
	//TODO: timers based on resolution to avoid warping and artifacts from the VCM not being fast enough
	//TODO: preset values for fine and coarse VCMs when doing other VCM scan to avoid focus being at start or end of scan
	int raw;
	unsigned char row[xRes*4];
 8000ab0:	4b68      	ldr	r3, [pc, #416]	; (8000c54 <scan+0x1b0>)
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	009e      	lsls	r6, r3, #2
 8000ab6:	1e73      	subs	r3, r6, #1
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	4632      	mov	r2, r6
 8000abc:	2300      	movs	r3, #0
 8000abe:	4614      	mov	r4, r2
 8000ac0:	461d      	mov	r5, r3
 8000ac2:	f04f 0200 	mov.w	r2, #0
 8000ac6:	f04f 0300 	mov.w	r3, #0
 8000aca:	00eb      	lsls	r3, r5, #3
 8000acc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ad0:	00e2      	lsls	r2, r4, #3
 8000ad2:	4632      	mov	r2, r6
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f04f 0200 	mov.w	r2, #0
 8000ade:	f04f 0300 	mov.w	r3, #0
 8000ae2:	00cb      	lsls	r3, r1, #3
 8000ae4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ae8:	00c2      	lsls	r2, r0, #3
 8000aea:	4633      	mov	r3, r6
 8000aec:	3307      	adds	r3, #7
 8000aee:	08db      	lsrs	r3, r3, #3
 8000af0:	00db      	lsls	r3, r3, #3
 8000af2:	ebad 0d03 	sub.w	sp, sp, r3
 8000af6:	466b      	mov	r3, sp
 8000af8:	3300      	adds	r3, #0
 8000afa:	607b      	str	r3, [r7, #4]
	//unsigned char row[xRes*4]; //max 8192 = 4 digits long
	uint16_t usedCounter = 0; //keep track of how much of the array has been filled
 8000afc:	2300      	movs	r3, #0
 8000afe:	82fb      	strh	r3, [r7, #22]

	HAL_Delay(100);
 8000b00:	2064      	movs	r0, #100	; 0x64
 8000b02:	f001 f911 	bl	8001d28 <HAL_Delay>
	printf("starting scan loop\r\n");
 8000b06:	4854      	ldr	r0, [pc, #336]	; (8000c58 <scan+0x1b4>)
 8000b08:	f00b fa78 	bl	800bffc <puts>
	for (int y=0; y<yRes; y++) {
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61bb      	str	r3, [r7, #24]
 8000b10:	e092      	b.n	8000c38 <scan+0x194>
		  HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_2, DAC_ALIGN_12B_R, scanOffsetY+(y*skipSteps));
 8000b12:	4b52      	ldr	r3, [pc, #328]	; (8000c5c <scan+0x1b8>)
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	461a      	mov	r2, r3
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	fb03 f202 	mul.w	r2, r3, r2
 8000b1e:	4b50      	ldr	r3, [pc, #320]	; (8000c60 <scan+0x1bc>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	2200      	movs	r2, #0
 8000b26:	2110      	movs	r1, #16
 8000b28:	484e      	ldr	r0, [pc, #312]	; (8000c64 <scan+0x1c0>)
 8000b2a:	f002 fffb 	bl	8003b24 <HAL_DAC_SetValue>
		  HAL_Delay(1);
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f001 f8fa 	bl	8001d28 <HAL_Delay>
		  //delay_us(20);
		  usedCounter = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	82fb      	strh	r3, [r7, #22]
		  for (int x=0; x<xRes; x++) {
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
 8000b3c:	e05f      	b.n	8000bfe <scan+0x15a>
			  raw = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
			  HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_1, DAC_ALIGN_12B_R, scanOffsetX+(x*skipSteps));
 8000b42:	4b46      	ldr	r3, [pc, #280]	; (8000c5c <scan+0x1b8>)
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	461a      	mov	r2, r3
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	fb03 f202 	mul.w	r2, r3, r2
 8000b4e:	4b46      	ldr	r3, [pc, #280]	; (8000c68 <scan+0x1c4>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4413      	add	r3, r2
 8000b54:	2200      	movs	r2, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	4842      	ldr	r0, [pc, #264]	; (8000c64 <scan+0x1c0>)
 8000b5a:	f002 ffe3 	bl	8003b24 <HAL_DAC_SetValue>
			  if (x==0) {
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d103      	bne.n	8000b6c <scan+0xc8>
				  HAL_Delay(20);
 8000b64:	2014      	movs	r0, #20
 8000b66:	f001 f8df 	bl	8001d28 <HAL_Delay>
 8000b6a:	e002      	b.n	8000b72 <scan+0xce>
			  } else {
				  HAL_Delay(1);
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f001 f8db 	bl	8001d28 <HAL_Delay>
			  }
			  //delay_us(500);
			  for (int i=1; i<=adcAvg; i++) {
 8000b72:	2301      	movs	r3, #1
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	e011      	b.n	8000b9c <scan+0xf8>
				  raw += analogRead(5)+analogRead(1);
 8000b78:	2005      	movs	r0, #5
 8000b7a:	f7ff fdc1 	bl	8000700 <analogRead>
 8000b7e:	4604      	mov	r4, r0
 8000b80:	2001      	movs	r0, #1
 8000b82:	f7ff fdbd 	bl	8000700 <analogRead>
 8000b86:	4603      	mov	r3, r0
 8000b88:	18e2      	adds	r2, r4, r3
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
				  delay_us(100);
 8000b90:	2064      	movs	r0, #100	; 0x64
 8000b92:	f7ff fd79 	bl	8000688 <delay_us>
			  for (int i=1; i<=adcAvg; i++) {
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	4b33      	ldr	r3, [pc, #204]	; (8000c6c <scan+0x1c8>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	dde7      	ble.n	8000b78 <scan+0xd4>
			  }
			  raw = (raw/adcAvg);
 8000ba8:	4b30      	ldr	r3, [pc, #192]	; (8000c6c <scan+0x1c8>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
			  //printf("%d\r\n", raw);
			  if (x+1 != xRes) {
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	4a26      	ldr	r2, [pc, #152]	; (8000c54 <scan+0x1b0>)
 8000bbc:	8812      	ldrh	r2, [r2, #0]
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d00d      	beq.n	8000bde <scan+0x13a>
				  usedCounter += sprintf(row+usedCounter, "%d,", raw);
 8000bc2:	8afb      	ldrh	r3, [r7, #22]
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	4929      	ldr	r1, [pc, #164]	; (8000c70 <scan+0x1cc>)
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f00b fa1d 	bl	800c00c <siprintf>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	8afb      	ldrh	r3, [r7, #22]
 8000bd8:	4413      	add	r3, r2
 8000bda:	82fb      	strh	r3, [r7, #22]
 8000bdc:	e00c      	b.n	8000bf8 <scan+0x154>
				  /*if (y+1 != yRes) {
					  usedCounter += sprintf(row+usedCounter, "%d:", raw);
				  } else {
					  usedCounter += sprintf(row+usedCounter, "%d|", raw);
				  */
				  usedCounter += sprintf(row+usedCounter, "%d\r\n", raw);
 8000bde:	8afb      	ldrh	r3, [r7, #22]
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	4413      	add	r3, r2
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	4923      	ldr	r1, [pc, #140]	; (8000c74 <scan+0x1d0>)
 8000be8:	4618      	mov	r0, r3
 8000bea:	f00b fa0f 	bl	800c00c <siprintf>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	8afb      	ldrh	r3, [r7, #22]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	82fb      	strh	r3, [r7, #22]
		  for (int x=0; x<xRes; x++) {
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	61fb      	str	r3, [r7, #28]
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <scan+0x1b0>)
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	461a      	mov	r2, r3
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	4293      	cmp	r3, r2
 8000c08:	db99      	blt.n	8000b3e <scan+0x9a>
		  }
		  //can use usedCounter instead of sizeof(row) to account for >512 by splitting?
		  //temp -> remove last comma for easy parsing
		  static uint8_t rc = USBD_OK;
		  do {
		          rc = CDC_Transmit_FS(row, usedCounter);
 8000c0a:	8afb      	ldrh	r3, [r7, #22]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f00a fce0 	bl	800b5d4 <CDC_Transmit_FS>
 8000c14:	4603      	mov	r3, r0
 8000c16:	461a      	mov	r2, r3
 8000c18:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <scan+0x1d4>)
 8000c1a:	701a      	strb	r2, [r3, #0]
		      } while (USBD_BUSY == rc);
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <scan+0x1d4>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d0f2      	beq.n	8000c0a <scan+0x166>

		      if (USBD_FAIL == rc) {
 8000c24:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <scan+0x1d4>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b03      	cmp	r3, #3
 8000c2a:	d102      	bne.n	8000c32 <scan+0x18e>
		          /// NOTE: Should never reach here.
		          /// TODO: Handle this error.
		          printf("Failed to send image");
 8000c2c:	4813      	ldr	r0, [pc, #76]	; (8000c7c <scan+0x1d8>)
 8000c2e:	f00b f95f 	bl	800bef0 <iprintf>
	for (int y=0; y<yRes; y++) {
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	3301      	adds	r3, #1
 8000c36:	61bb      	str	r3, [r7, #24]
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <scan+0x1dc>)
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	4293      	cmp	r3, r2
 8000c42:	f6ff af66 	blt.w	8000b12 <scan+0x6e>
 8000c46:	46c5      	mov	sp, r8
		  //HAL_Delay(30);
		  //memset(row, 0, xRes*4);
		  //IT WOOOOOOOOORRRRRRKKKSSSSSS!

	}
}
 8000c48:	bf00      	nop
 8000c4a:	3720      	adds	r7, #32
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c52:	bf00      	nop
 8000c54:	20000000 	.word	0x20000000
 8000c58:	0800d2ec 	.word	0x0800d2ec
 8000c5c:	20000004 	.word	0x20000004
 8000c60:	2000046c 	.word	0x2000046c
 8000c64:	20000314 	.word	0x20000314
 8000c68:	20000468 	.word	0x20000468
 8000c6c:	2000000a 	.word	0x2000000a
 8000c70:	0800d300 	.word	0x0800d300
 8000c74:	0800d2ac 	.word	0x0800d2ac
 8000c78:	200004b2 	.word	0x200004b2
 8000c7c:	0800d304 	.word	0x0800d304
 8000c80:	20000002 	.word	0x20000002

08000c84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8a:	f000 ffdc 	bl	8001c46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c8e:	f000 fa13 	bl	80010b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c92:	f000 fcfb 	bl	800168c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000c96:	f000 fa59 	bl	800114c <MX_ADC1_Init>
  MX_ADC5_Init();
 8000c9a:	f000 facf 	bl	800123c <MX_ADC5_Init>
  MX_DAC1_Init();
 8000c9e:	f000 fb33 	bl	8001308 <MX_DAC1_Init>
  MX_DAC2_Init();
 8000ca2:	f000 fb75 	bl	8001390 <MX_DAC2_Init>
  MX_DAC3_Init();
 8000ca6:	f000 fbad 	bl	8001404 <MX_DAC3_Init>
  MX_OPAMP1_Init();
 8000caa:	f000 fbef 	bl	800148c <MX_OPAMP1_Init>
  MX_OPAMP3_Init();
 8000cae:	f000 fc1d 	bl	80014ec <MX_OPAMP3_Init>
  MX_OPAMP4_Init();
 8000cb2:	f000 fc41 	bl	8001538 <MX_OPAMP4_Init>
  MX_OPAMP6_Init();
 8000cb6:	f000 fc6f 	bl	8001598 <MX_OPAMP6_Init>
  MX_USB_Device_Init();
 8000cba:	f00a fbb3 	bl	800b424 <MX_USB_Device_Init>
  MX_TIM1_Init();
 8000cbe:	f000 fc91 	bl	80015e4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //DAC setup
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	48a4      	ldr	r0, [pc, #656]	; (8000f58 <main+0x2d4>)
 8000cc6:	f002 feda 	bl	8003a7e <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000cca:	2110      	movs	r1, #16
 8000ccc:	48a2      	ldr	r0, [pc, #648]	; (8000f58 <main+0x2d4>)
 8000cce:	f002 fed6 	bl	8003a7e <HAL_DAC_Start>
  HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	48a1      	ldr	r0, [pc, #644]	; (8000f5c <main+0x2d8>)
 8000cd6:	f002 fed2 	bl	8003a7e <HAL_DAC_Start>
  HAL_DAC_Start(&hdac3, DAC_CHANNEL_1);
 8000cda:	2100      	movs	r1, #0
 8000cdc:	48a0      	ldr	r0, [pc, #640]	; (8000f60 <main+0x2dc>)
 8000cde:	f002 fece 	bl	8003a7e <HAL_DAC_Start>
  HAL_DAC_Start(&hdac3, DAC_CHANNEL_2);
 8000ce2:	2110      	movs	r1, #16
 8000ce4:	489e      	ldr	r0, [pc, #632]	; (8000f60 <main+0x2dc>)
 8000ce6:	f002 feca 	bl	8003a7e <HAL_DAC_Start>

  //ADC setup
  HAL_ADC_Start(&hadc1);
 8000cea:	489e      	ldr	r0, [pc, #632]	; (8000f64 <main+0x2e0>)
 8000cec:	f001 fc7e 	bl	80025ec <HAL_ADC_Start>
  HAL_ADC_Start(&hadc5);
 8000cf0:	489d      	ldr	r0, [pc, #628]	; (8000f68 <main+0x2e4>)
 8000cf2:	f001 fc7b 	bl	80025ec <HAL_ADC_Start>

  //opamp setup for DAC outputs
  HAL_OPAMP_Start(&hopamp3);
 8000cf6:	489d      	ldr	r0, [pc, #628]	; (8000f6c <main+0x2e8>)
 8000cf8:	f003 fb36 	bl	8004368 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp6);
 8000cfc:	489c      	ldr	r0, [pc, #624]	; (8000f70 <main+0x2ec>)
 8000cfe:	f003 fb33 	bl	8004368 <HAL_OPAMP_Start>

  //opamp setup for ADC inputs
  HAL_OPAMP_Start(&hopamp1);
 8000d02:	489c      	ldr	r0, [pc, #624]	; (8000f74 <main+0x2f0>)
 8000d04:	f003 fb30 	bl	8004368 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp4);
 8000d08:	489b      	ldr	r0, [pc, #620]	; (8000f78 <main+0x2f4>)
 8000d0a:	f003 fb2d 	bl	8004368 <HAL_OPAMP_Start>

  //timer setup
  HAL_TIM_Base_Start(&htim1);
 8000d0e:	489b      	ldr	r0, [pc, #620]	; (8000f7c <main+0x2f8>)
 8000d10:	f006 f91a 	bl	8006f48 <HAL_TIM_Base_Start>
	  //0 -> no input after

	  //missing vars are above

	  //6 -> int between 0 and 2 (0=2x, 1=4x, 2=8x)
	  uint8_t adcGain = 1;
 8000d14:	2301      	movs	r3, #1
 8000d16:	71fb      	strb	r3, [r7, #7]

	  //buffer[0]
	  uint8_t start;

	  //value of following data after buffer[0]
	  uint16_t num = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	80bb      	strh	r3, [r7, #4]
	  //missing is above
	  //9 -> boolean (0=don't focus, 1=fine focus, 2=coarse focus) - reset to zero after focus routine done.

	  //when starting a scan, do checks to make sure you aren't exceeding 4096 for any VCM output, and not exceeding 2500 for laser input.
	  //avoid floats?
	  if (newReceived) {
 8000d1c:	4b98      	ldr	r3, [pc, #608]	; (8000f80 <main+0x2fc>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	f000 81b5 	beq.w	8001090 <main+0x40c>
		  printf("Received\r\n");
 8000d26:	4897      	ldr	r0, [pc, #604]	; (8000f84 <main+0x300>)
 8000d28:	f00b f968 	bl	800bffc <puts>
		  //hangs on line below -> when I send loads of 0s, it only shows one in the buffer.
		  if (buffer[0]=='0') {
 8000d2c:	4b96      	ldr	r3, [pc, #600]	; (8000f88 <main+0x304>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b30      	cmp	r3, #48	; 0x30
 8000d32:	d102      	bne.n	8000d3a <main+0xb6>
				  start = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	71bb      	strb	r3, [r7, #6]
 8000d38:	e007      	b.n	8000d4a <main+0xc6>
		  } else {
			  start = buffer[0]-'0';
 8000d3a:	4b93      	ldr	r3, [pc, #588]	; (8000f88 <main+0x304>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	3b30      	subs	r3, #48	; 0x30
 8000d40:	71bb      	strb	r3, [r7, #6]
			  num = getNum();
 8000d42:	f7ff fd19 	bl	8000778 <getNum>
 8000d46:	4603      	mov	r3, r0
 8000d48:	80bb      	strh	r3, [r7, #4]
		  }
		  switch (start) {
 8000d4a:	79bb      	ldrb	r3, [r7, #6]
 8000d4c:	2b09      	cmp	r3, #9
 8000d4e:	f200 819c 	bhi.w	800108a <main+0x406>
 8000d52:	a201      	add	r2, pc, #4	; (adr r2, 8000d58 <main+0xd4>)
 8000d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d58:	08000d81 	.word	0x08000d81
 8000d5c:	08000e49 	.word	0x08000e49
 8000d60:	08000e6f 	.word	0x08000e6f
 8000d64:	08000e95 	.word	0x08000e95
 8000d68:	08000ebb 	.word	0x08000ebb
 8000d6c:	08000ed9 	.word	0x08000ed9
 8000d70:	08000ef7 	.word	0x08000ef7
 8000d74:	08001005 	.word	0x08001005
 8000d78:	08001031 	.word	0x08001031
 8000d7c:	08001053 	.word	0x08001053
			case 0:
				printf("Scanning\r\n");
 8000d80:	4882      	ldr	r0, [pc, #520]	; (8000f8c <main+0x308>)
 8000d82:	f00b f93b 	bl	800bffc <puts>
				int16_t xSum = (skipSteps*xRes)+xOffset; //not setting properly?
 8000d86:	4b82      	ldr	r3, [pc, #520]	; (8000f90 <main+0x30c>)
 8000d88:	881a      	ldrh	r2, [r3, #0]
 8000d8a:	4b82      	ldr	r3, [pc, #520]	; (8000f94 <main+0x310>)
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	fb12 f303 	smulbb	r3, r2, r3
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	4b80      	ldr	r3, [pc, #512]	; (8000f98 <main+0x314>)
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	4413      	add	r3, r2
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	807b      	strh	r3, [r7, #2]
				int16_t ySum = (skipSteps*yRes)+yOffset;
 8000d9e:	4b7c      	ldr	r3, [pc, #496]	; (8000f90 <main+0x30c>)
 8000da0:	881a      	ldrh	r2, [r3, #0]
 8000da2:	4b7e      	ldr	r3, [pc, #504]	; (8000f9c <main+0x318>)
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	fb12 f303 	smulbb	r3, r2, r3
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	4b7c      	ldr	r3, [pc, #496]	; (8000fa0 <main+0x31c>)
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	4413      	add	r3, r2
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	803b      	strh	r3, [r7, #0]

				scanOffsetX = xOffset - (xRes * skipSteps / 2); // set focus to center of scanned image (make sure > 0)
 8000db6:	4b78      	ldr	r3, [pc, #480]	; (8000f98 <main+0x314>)
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4b75      	ldr	r3, [pc, #468]	; (8000f94 <main+0x310>)
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b73      	ldr	r3, [pc, #460]	; (8000f90 <main+0x30c>)
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	fb02 f303 	mul.w	r3, r2, r3
 8000dca:	0fda      	lsrs	r2, r3, #31
 8000dcc:	4413      	add	r3, r2
 8000dce:	105b      	asrs	r3, r3, #1
 8000dd0:	425b      	negs	r3, r3
 8000dd2:	440b      	add	r3, r1
 8000dd4:	4a73      	ldr	r2, [pc, #460]	; (8000fa4 <main+0x320>)
 8000dd6:	6013      	str	r3, [r2, #0]
				scanOffsetY = yOffset - (yRes * skipSteps / 2);
 8000dd8:	4b71      	ldr	r3, [pc, #452]	; (8000fa0 <main+0x31c>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4b6f      	ldr	r3, [pc, #444]	; (8000f9c <main+0x318>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	461a      	mov	r2, r3
 8000de4:	4b6a      	ldr	r3, [pc, #424]	; (8000f90 <main+0x30c>)
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	fb02 f303 	mul.w	r3, r2, r3
 8000dec:	0fda      	lsrs	r2, r3, #31
 8000dee:	4413      	add	r3, r2
 8000df0:	105b      	asrs	r3, r3, #1
 8000df2:	425b      	negs	r3, r3
 8000df4:	440b      	add	r3, r1
 8000df6:	4a6c      	ldr	r2, [pc, #432]	; (8000fa8 <main+0x324>)
 8000df8:	6013      	str	r3, [r2, #0]

				if (xSum < 4096 && ySum < 4096) { //doesn't go to else properly
 8000dfa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e02:	da1c      	bge.n	8000e3e <main+0x1ba>
 8000e04:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e0c:	da17      	bge.n	8000e3e <main+0x1ba>
					if (scanOffsetX >= 0 && scanOffsetY >= 0) {
 8000e0e:	4b65      	ldr	r3, [pc, #404]	; (8000fa4 <main+0x320>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db0f      	blt.n	8000e36 <main+0x1b2>
 8000e16:	4b64      	ldr	r3, [pc, #400]	; (8000fa8 <main+0x324>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	db0b      	blt.n	8000e36 <main+0x1b2>
						printf("passed checks\r\n");
 8000e1e:	4863      	ldr	r0, [pc, #396]	; (8000fac <main+0x328>)
 8000e20:	f00b f8ec 	bl	800bffc <puts>
					    //call scan function
					    //might have issues sending if char count is over 512 in the X axis (maybe break into chunks if an issue)
						scan(); //pass pointer
 8000e24:	f7ff fe3e 	bl	8000aa4 <scan>

						HAL_Delay(1);
 8000e28:	2001      	movs	r0, #1
 8000e2a:	f000 ff7d 	bl	8001d28 <HAL_Delay>
						printf("done\r\n");
 8000e2e:	4860      	ldr	r0, [pc, #384]	; (8000fb0 <main+0x32c>)
 8000e30:	f00b f8e4 	bl	800bffc <puts>
					if (scanOffsetX >= 0 && scanOffsetY >= 0) {
 8000e34:	e007      	b.n	8000e46 <main+0x1c2>
					} else {
						printf("Offset too small\r\n");
 8000e36:	485f      	ldr	r0, [pc, #380]	; (8000fb4 <main+0x330>)
 8000e38:	f00b f8e0 	bl	800bffc <puts>
					if (scanOffsetX >= 0 && scanOffsetY >= 0) {
 8000e3c:	e003      	b.n	8000e46 <main+0x1c2>
					}
				} else {
				  	printf("Dimensions too large\r\n");
 8000e3e:	485e      	ldr	r0, [pc, #376]	; (8000fb8 <main+0x334>)
 8000e40:	f00b f8dc 	bl	800bffc <puts>
				}
				break;
 8000e44:	e121      	b.n	800108a <main+0x406>
 8000e46:	e120      	b.n	800108a <main+0x406>
			case 1:
				if (xRes < 4096 && xRes > 0) {
 8000e48:	4b52      	ldr	r3, [pc, #328]	; (8000f94 <main+0x310>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e50:	d206      	bcs.n	8000e60 <main+0x1dc>
 8000e52:	4b50      	ldr	r3, [pc, #320]	; (8000f94 <main+0x310>)
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d002      	beq.n	8000e60 <main+0x1dc>
					xRes = num;
 8000e5a:	4a4e      	ldr	r2, [pc, #312]	; (8000f94 <main+0x310>)
 8000e5c:	88bb      	ldrh	r3, [r7, #4]
 8000e5e:	8013      	strh	r3, [r2, #0]
				}
				printf("%d\r\n", xRes);
 8000e60:	4b4c      	ldr	r3, [pc, #304]	; (8000f94 <main+0x310>)
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	4619      	mov	r1, r3
 8000e66:	4855      	ldr	r0, [pc, #340]	; (8000fbc <main+0x338>)
 8000e68:	f00b f842 	bl	800bef0 <iprintf>
				break;
 8000e6c:	e10d      	b.n	800108a <main+0x406>
			case 2:
				if (yRes < 4096 && yRes > 0) {
 8000e6e:	4b4b      	ldr	r3, [pc, #300]	; (8000f9c <main+0x318>)
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e76:	d206      	bcs.n	8000e86 <main+0x202>
 8000e78:	4b48      	ldr	r3, [pc, #288]	; (8000f9c <main+0x318>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d002      	beq.n	8000e86 <main+0x202>
					yRes = num;
 8000e80:	4a46      	ldr	r2, [pc, #280]	; (8000f9c <main+0x318>)
 8000e82:	88bb      	ldrh	r3, [r7, #4]
 8000e84:	8013      	strh	r3, [r2, #0]
				}
				printf("%d\r\n", yRes);
 8000e86:	4b45      	ldr	r3, [pc, #276]	; (8000f9c <main+0x318>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	484b      	ldr	r0, [pc, #300]	; (8000fbc <main+0x338>)
 8000e8e:	f00b f82f 	bl	800bef0 <iprintf>
				break;
 8000e92:	e0fa      	b.n	800108a <main+0x406>
			case 3:
				if (skipSteps < 4096 && skipSteps > 0) {
 8000e94:	4b3e      	ldr	r3, [pc, #248]	; (8000f90 <main+0x30c>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e9c:	d206      	bcs.n	8000eac <main+0x228>
 8000e9e:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <main+0x30c>)
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d002      	beq.n	8000eac <main+0x228>
					skipSteps = num;
 8000ea6:	4a3a      	ldr	r2, [pc, #232]	; (8000f90 <main+0x30c>)
 8000ea8:	88bb      	ldrh	r3, [r7, #4]
 8000eaa:	8013      	strh	r3, [r2, #0]
				}
				printf("%d\r\n", skipSteps);
 8000eac:	4b38      	ldr	r3, [pc, #224]	; (8000f90 <main+0x30c>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4842      	ldr	r0, [pc, #264]	; (8000fbc <main+0x338>)
 8000eb4:	f00b f81c 	bl	800bef0 <iprintf>
				break;
 8000eb8:	e0e7      	b.n	800108a <main+0x406>
			case 4:
				//apply offsets here so that focus is on the correct scan area, or apply in focus functions
				if (xOffset < 4096) {
 8000eba:	4b37      	ldr	r3, [pc, #220]	; (8000f98 <main+0x314>)
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ec2:	d202      	bcs.n	8000eca <main+0x246>
					xOffset = num;
 8000ec4:	4a34      	ldr	r2, [pc, #208]	; (8000f98 <main+0x314>)
 8000ec6:	88bb      	ldrh	r3, [r7, #4]
 8000ec8:	8013      	strh	r3, [r2, #0]
				}
				printf("%d\r\n", xOffset);
 8000eca:	4b33      	ldr	r3, [pc, #204]	; (8000f98 <main+0x314>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	4619      	mov	r1, r3
 8000ed0:	483a      	ldr	r0, [pc, #232]	; (8000fbc <main+0x338>)
 8000ed2:	f00b f80d 	bl	800bef0 <iprintf>
				break;
 8000ed6:	e0d8      	b.n	800108a <main+0x406>
			case 5:
				if (yOffset < 4096) {
 8000ed8:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <main+0x31c>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ee0:	d202      	bcs.n	8000ee8 <main+0x264>
					yOffset = num;
 8000ee2:	4a2f      	ldr	r2, [pc, #188]	; (8000fa0 <main+0x31c>)
 8000ee4:	88bb      	ldrh	r3, [r7, #4]
 8000ee6:	8013      	strh	r3, [r2, #0]
				}
				printf("%d\r\n", yOffset);
 8000ee8:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <main+0x31c>)
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	4833      	ldr	r0, [pc, #204]	; (8000fbc <main+0x338>)
 8000ef0:	f00a fffe 	bl	800bef0 <iprintf>
				break;
 8000ef4:	e0c9      	b.n	800108a <main+0x406>
			case 6:
			    if (num <= 5) {
 8000ef6:	88bb      	ldrh	r3, [r7, #4]
 8000ef8:	2b05      	cmp	r3, #5
 8000efa:	d87d      	bhi.n	8000ff8 <main+0x374>
				  adcGain = num;
 8000efc:	88bb      	ldrh	r3, [r7, #4]
 8000efe:	71fb      	strb	r3, [r7, #7]
				  HAL_OPAMP_Stop(&hopamp1);
 8000f00:	481c      	ldr	r0, [pc, #112]	; (8000f74 <main+0x2f0>)
 8000f02:	f003 fa62 	bl	80043ca <HAL_OPAMP_Stop>
				  HAL_OPAMP_Stop(&hopamp4);
 8000f06:	481c      	ldr	r0, [pc, #112]	; (8000f78 <main+0x2f4>)
 8000f08:	f003 fa5f 	bl	80043ca <HAL_OPAMP_Stop>
				  switch (adcGain) {
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	2b05      	cmp	r3, #5
 8000f10:	d862      	bhi.n	8000fd8 <main+0x354>
 8000f12:	a201      	add	r2, pc, #4	; (adr r2, 8000f18 <main+0x294>)
 8000f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f18:	08000f31 	.word	0x08000f31
 8000f1c:	08000f39 	.word	0x08000f39
 8000f20:	08000f43 	.word	0x08000f43
 8000f24:	08000f4d 	.word	0x08000f4d
 8000f28:	08000fc5 	.word	0x08000fc5
 8000f2c:	08000fcf 	.word	0x08000fcf
					  case 0:
					    pgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8000f30:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <main+0x33c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
					    break;
 8000f36:	e04f      	b.n	8000fd8 <main+0x354>
					  case 1:
					    pgaGain = OPAMP_PGA_GAIN_4_OR_MINUS_3;
 8000f38:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <main+0x33c>)
 8000f3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f3e:	601a      	str	r2, [r3, #0]
					    break;
 8000f40:	e04a      	b.n	8000fd8 <main+0x354>
					  case 2:
					    pgaGain = OPAMP_PGA_GAIN_8_OR_MINUS_7;
 8000f42:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <main+0x33c>)
 8000f44:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f48:	601a      	str	r2, [r3, #0]
					    break;
 8000f4a:	e045      	b.n	8000fd8 <main+0x354>
					  case 3:
					    pgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <main+0x33c>)
 8000f4e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000f52:	601a      	str	r2, [r3, #0]
					    break;
 8000f54:	e040      	b.n	8000fd8 <main+0x354>
 8000f56:	bf00      	nop
 8000f58:	200002ec 	.word	0x200002ec
 8000f5c:	20000300 	.word	0x20000300
 8000f60:	20000314 	.word	0x20000314
 8000f64:	20000214 	.word	0x20000214
 8000f68:	20000280 	.word	0x20000280
 8000f6c:	20000364 	.word	0x20000364
 8000f70:	200003dc 	.word	0x200003dc
 8000f74:	20000328 	.word	0x20000328
 8000f78:	200003a0 	.word	0x200003a0
 8000f7c:	20000418 	.word	0x20000418
 8000f80:	200004b0 	.word	0x200004b0
 8000f84:	0800d31c 	.word	0x0800d31c
 8000f88:	20000470 	.word	0x20000470
 8000f8c:	0800d328 	.word	0x0800d328
 8000f90:	20000004 	.word	0x20000004
 8000f94:	20000000 	.word	0x20000000
 8000f98:	20000006 	.word	0x20000006
 8000f9c:	20000002 	.word	0x20000002
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	20000468 	.word	0x20000468
 8000fa8:	2000046c 	.word	0x2000046c
 8000fac:	0800d334 	.word	0x0800d334
 8000fb0:	0800d344 	.word	0x0800d344
 8000fb4:	0800d34c 	.word	0x0800d34c
 8000fb8:	0800d360 	.word	0x0800d360
 8000fbc:	0800d2ac 	.word	0x0800d2ac
 8000fc0:	20000464 	.word	0x20000464
					  case 4:
					    pgaGain = OPAMP_PGA_GAIN_32_OR_MINUS_31;
 8000fc4:	4b34      	ldr	r3, [pc, #208]	; (8001098 <main+0x414>)
 8000fc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fca:	601a      	str	r2, [r3, #0]
					    break;
 8000fcc:	e004      	b.n	8000fd8 <main+0x354>
					  case 5:
					    pgaGain = OPAMP_PGA_GAIN_64_OR_MINUS_63;
 8000fce:	4b32      	ldr	r3, [pc, #200]	; (8001098 <main+0x414>)
 8000fd0:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 8000fd4:	601a      	str	r2, [r3, #0]
					    break;
 8000fd6:	bf00      	nop
				  }
				  HAL_Delay(2); //just to give it time to shut down?
 8000fd8:	2002      	movs	r0, #2
 8000fda:	f000 fea5 	bl	8001d28 <HAL_Delay>
				  MX_OPAMP1_Init();
 8000fde:	f000 fa55 	bl	800148c <MX_OPAMP1_Init>
				  MX_OPAMP4_Init();
 8000fe2:	f000 faa9 	bl	8001538 <MX_OPAMP4_Init>
				  HAL_Delay(2); //just to give it time to start up?
 8000fe6:	2002      	movs	r0, #2
 8000fe8:	f000 fe9e 	bl	8001d28 <HAL_Delay>
				  HAL_OPAMP_Start(&hopamp1);
 8000fec:	482b      	ldr	r0, [pc, #172]	; (800109c <main+0x418>)
 8000fee:	f003 f9bb 	bl	8004368 <HAL_OPAMP_Start>
				  HAL_OPAMP_Start(&hopamp4);
 8000ff2:	482b      	ldr	r0, [pc, #172]	; (80010a0 <main+0x41c>)
 8000ff4:	f003 f9b8 	bl	8004368 <HAL_OPAMP_Start>
			    }
			    printf("%d\r\n", adcGain);
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4829      	ldr	r0, [pc, #164]	; (80010a4 <main+0x420>)
 8000ffe:	f00a ff77 	bl	800bef0 <iprintf>
			    break;
 8001002:	e042      	b.n	800108a <main+0x406>
			case 7:
				if (num <= 2500) {
 8001004:	88bb      	ldrh	r3, [r7, #4]
 8001006:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800100a:	4293      	cmp	r3, r2
 800100c:	d809      	bhi.n	8001022 <main+0x39e>
					laserPower = num;
 800100e:	4a26      	ldr	r2, [pc, #152]	; (80010a8 <main+0x424>)
 8001010:	88bb      	ldrh	r3, [r7, #4]
 8001012:	8013      	strh	r3, [r2, #0]
					HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, laserPower);
 8001014:	4b24      	ldr	r3, [pc, #144]	; (80010a8 <main+0x424>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	2200      	movs	r2, #0
 800101a:	2100      	movs	r1, #0
 800101c:	4823      	ldr	r0, [pc, #140]	; (80010ac <main+0x428>)
 800101e:	f002 fd81 	bl	8003b24 <HAL_DAC_SetValue>
				}
				printf("%d\r\n", laserPower);
 8001022:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <main+0x424>)
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	4619      	mov	r1, r3
 8001028:	481e      	ldr	r0, [pc, #120]	; (80010a4 <main+0x420>)
 800102a:	f00a ff61 	bl	800bef0 <iprintf>
				break;
 800102e:	e02c      	b.n	800108a <main+0x406>
			case 8:
				//apply averaging function to focus as well for very high zoom (fine only?)
				if (num <= 20 && num != 0) {
 8001030:	88bb      	ldrh	r3, [r7, #4]
 8001032:	2b14      	cmp	r3, #20
 8001034:	d806      	bhi.n	8001044 <main+0x3c0>
 8001036:	88bb      	ldrh	r3, [r7, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <main+0x3c0>
					adcAvg = num;
 800103c:	88bb      	ldrh	r3, [r7, #4]
 800103e:	b2da      	uxtb	r2, r3
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <main+0x42c>)
 8001042:	701a      	strb	r2, [r3, #0]
				}
				printf("%d\r\n", adcAvg);
 8001044:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <main+0x42c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	4816      	ldr	r0, [pc, #88]	; (80010a4 <main+0x420>)
 800104c:	f00a ff50 	bl	800bef0 <iprintf>
				break;
 8001050:	e01b      	b.n	800108a <main+0x406>
			case 9:
				if (num == 1) {
 8001052:	88bb      	ldrh	r3, [r7, #4]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d107      	bne.n	8001068 <main+0x3e4>
					printf("%d\r\n", fineFocus()); //if number = 10000, didn't focus. anything else = current FES value
 8001058:	f7ff fbc4 	bl	80007e4 <fineFocus>
 800105c:	4603      	mov	r3, r0
 800105e:	4619      	mov	r1, r3
 8001060:	4810      	ldr	r0, [pc, #64]	; (80010a4 <main+0x420>)
 8001062:	f00a ff45 	bl	800bef0 <iprintf>
				} else if (num == 2) {
					printf("%d\r\n", coarseFocus());
				} else {
					printf("%d\r\n", 11000); // if number = 11000, bad input
				}
				break;
 8001066:	e00f      	b.n	8001088 <main+0x404>
				} else if (num == 2) {
 8001068:	88bb      	ldrh	r3, [r7, #4]
 800106a:	2b02      	cmp	r3, #2
 800106c:	d107      	bne.n	800107e <main+0x3fa>
					printf("%d\r\n", coarseFocus());
 800106e:	f7ff fc89 	bl	8000984 <coarseFocus>
 8001072:	4603      	mov	r3, r0
 8001074:	4619      	mov	r1, r3
 8001076:	480b      	ldr	r0, [pc, #44]	; (80010a4 <main+0x420>)
 8001078:	f00a ff3a 	bl	800bef0 <iprintf>
				break;
 800107c:	e004      	b.n	8001088 <main+0x404>
					printf("%d\r\n", 11000); // if number = 11000, bad input
 800107e:	f642 21f8 	movw	r1, #11000	; 0x2af8
 8001082:	4808      	ldr	r0, [pc, #32]	; (80010a4 <main+0x420>)
 8001084:	f00a ff34 	bl	800bef0 <iprintf>
				break;
 8001088:	bf00      	nop
		  }

		  newReceived = false;
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <main+0x430>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_Delay(100); //100ms polling delay
 8001090:	2064      	movs	r0, #100	; 0x64
 8001092:	f000 fe49 	bl	8001d28 <HAL_Delay>
  {
 8001096:	e63d      	b.n	8000d14 <main+0x90>
 8001098:	20000464 	.word	0x20000464
 800109c:	20000328 	.word	0x20000328
 80010a0:	200003a0 	.word	0x200003a0
 80010a4:	0800d2ac 	.word	0x0800d2ac
 80010a8:	2000000c 	.word	0x2000000c
 80010ac:	20000300 	.word	0x20000300
 80010b0:	2000000a 	.word	0x2000000a
 80010b4:	200004b0 	.word	0x200004b0

080010b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b094      	sub	sp, #80	; 0x50
 80010bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010be:	f107 0318 	add.w	r3, r7, #24
 80010c2:	2238      	movs	r2, #56	; 0x38
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f00a ff0a 	bl	800bee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010de:	f004 fee1 	bl	8005ea4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010e2:	2301      	movs	r3, #1
 80010e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ec:	2302      	movs	r3, #2
 80010ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010f0:	2303      	movs	r3, #3
 80010f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80010f4:	2302      	movs	r3, #2
 80010f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 23;
 80010f8:	2317      	movs	r3, #23
 80010fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8001100:	2306      	movs	r3, #6
 8001102:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001104:	2302      	movs	r3, #2
 8001106:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001108:	f107 0318 	add.w	r3, r7, #24
 800110c:	4618      	mov	r0, r3
 800110e:	f004 ff6d 	bl	8005fec <HAL_RCC_OscConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001118:	f000 fae8 	bl	80016ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111c:	230f      	movs	r3, #15
 800111e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001120:	2303      	movs	r3, #3
 8001122:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2104      	movs	r1, #4
 8001134:	4618      	mov	r0, r3
 8001136:	f005 fa71 	bl	800661c <HAL_RCC_ClockConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001140:	f000 fad4 	bl	80016ec <Error_Handler>
  }
}
 8001144:	bf00      	nop
 8001146:	3750      	adds	r7, #80	; 0x50
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08c      	sub	sp, #48	; 0x30
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2220      	movs	r2, #32
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f00a febb 	bl	800bee0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800116a:	4b32      	ldr	r3, [pc, #200]	; (8001234 <MX_ADC1_Init+0xe8>)
 800116c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001170:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001172:	4b30      	ldr	r3, [pc, #192]	; (8001234 <MX_ADC1_Init+0xe8>)
 8001174:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001178:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800117a:	4b2e      	ldr	r3, [pc, #184]	; (8001234 <MX_ADC1_Init+0xe8>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001180:	4b2c      	ldr	r3, [pc, #176]	; (8001234 <MX_ADC1_Init+0xe8>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001186:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <MX_ADC1_Init+0xe8>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800118c:	4b29      	ldr	r3, [pc, #164]	; (8001234 <MX_ADC1_Init+0xe8>)
 800118e:	2200      	movs	r2, #0
 8001190:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001192:	4b28      	ldr	r3, [pc, #160]	; (8001234 <MX_ADC1_Init+0xe8>)
 8001194:	2204      	movs	r2, #4
 8001196:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001198:	4b26      	ldr	r3, [pc, #152]	; (8001234 <MX_ADC1_Init+0xe8>)
 800119a:	2200      	movs	r2, #0
 800119c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800119e:	4b25      	ldr	r3, [pc, #148]	; (8001234 <MX_ADC1_Init+0xe8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80011a4:	4b23      	ldr	r3, [pc, #140]	; (8001234 <MX_ADC1_Init+0xe8>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011aa:	4b22      	ldr	r3, [pc, #136]	; (8001234 <MX_ADC1_Init+0xe8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b2:	4b20      	ldr	r3, [pc, #128]	; (8001234 <MX_ADC1_Init+0xe8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b8:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <MX_ADC1_Init+0xe8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011be:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <MX_ADC1_Init+0xe8>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011c6:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <MX_ADC1_Init+0xe8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80011cc:	4b19      	ldr	r3, [pc, #100]	; (8001234 <MX_ADC1_Init+0xe8>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d4:	4817      	ldr	r0, [pc, #92]	; (8001234 <MX_ADC1_Init+0xe8>)
 80011d6:	f001 f847 	bl	8002268 <HAL_ADC_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80011e0:	f000 fa84 	bl	80016ec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011e4:	2300      	movs	r3, #0
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ec:	4619      	mov	r1, r3
 80011ee:	4811      	ldr	r0, [pc, #68]	; (8001234 <MX_ADC1_Init+0xe8>)
 80011f0:	f002 fa0c 	bl	800360c <HAL_ADCEx_MultiModeConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80011fa:	f000 fa77 	bl	80016ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <MX_ADC1_Init+0xec>)
 8001200:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001202:	2306      	movs	r3, #6
 8001204:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800120a:	237f      	movs	r3, #127	; 0x7f
 800120c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800120e:	2304      	movs	r3, #4
 8001210:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	4619      	mov	r1, r3
 800121a:	4806      	ldr	r0, [pc, #24]	; (8001234 <MX_ADC1_Init+0xe8>)
 800121c:	f001 fc12 	bl	8002a44 <HAL_ADC_ConfigChannel>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001226:	f000 fa61 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	3730      	adds	r7, #48	; 0x30
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000214 	.word	0x20000214
 8001238:	b6902000 	.word	0xb6902000

0800123c <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001242:	463b      	mov	r3, r7
 8001244:	2220      	movs	r2, #32
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f00a fe49 	bl	800bee0 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 800124e:	4b2b      	ldr	r3, [pc, #172]	; (80012fc <MX_ADC5_Init+0xc0>)
 8001250:	4a2b      	ldr	r2, [pc, #172]	; (8001300 <MX_ADC5_Init+0xc4>)
 8001252:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001254:	4b29      	ldr	r3, [pc, #164]	; (80012fc <MX_ADC5_Init+0xc0>)
 8001256:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800125a:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 800125c:	4b27      	ldr	r3, [pc, #156]	; (80012fc <MX_ADC5_Init+0xc0>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001262:	4b26      	ldr	r3, [pc, #152]	; (80012fc <MX_ADC5_Init+0xc0>)
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8001268:	4b24      	ldr	r3, [pc, #144]	; (80012fc <MX_ADC5_Init+0xc0>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800126e:	4b23      	ldr	r3, [pc, #140]	; (80012fc <MX_ADC5_Init+0xc0>)
 8001270:	2200      	movs	r2, #0
 8001272:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <MX_ADC5_Init+0xc0>)
 8001276:	2204      	movs	r2, #4
 8001278:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 800127a:	4b20      	ldr	r3, [pc, #128]	; (80012fc <MX_ADC5_Init+0xc0>)
 800127c:	2200      	movs	r2, #0
 800127e:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8001280:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <MX_ADC5_Init+0xc0>)
 8001282:	2200      	movs	r2, #0
 8001284:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8001286:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <MX_ADC5_Init+0xc0>)
 8001288:	2201      	movs	r2, #1
 800128a:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 800128c:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <MX_ADC5_Init+0xc0>)
 800128e:	2200      	movs	r2, #0
 8001290:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001294:	4b19      	ldr	r3, [pc, #100]	; (80012fc <MX_ADC5_Init+0xc0>)
 8001296:	2200      	movs	r2, #0
 8001298:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800129a:	4b18      	ldr	r3, [pc, #96]	; (80012fc <MX_ADC5_Init+0xc0>)
 800129c:	2200      	movs	r2, #0
 800129e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 80012a0:	4b16      	ldr	r3, [pc, #88]	; (80012fc <MX_ADC5_Init+0xc0>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <MX_ADC5_Init+0xc0>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 80012ae:	4b13      	ldr	r3, [pc, #76]	; (80012fc <MX_ADC5_Init+0xc0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80012b6:	4811      	ldr	r0, [pc, #68]	; (80012fc <MX_ADC5_Init+0xc0>)
 80012b8:	f000 ffd6 	bl	8002268 <HAL_ADC_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 80012c2:	f000 fa13 	bl	80016ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP4;
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <MX_ADC5_Init+0xc8>)
 80012c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012ca:	2306      	movs	r3, #6
 80012cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012d2:	237f      	movs	r3, #127	; 0x7f
 80012d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012d6:	2304      	movs	r3, #4
 80012d8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80012de:	463b      	mov	r3, r7
 80012e0:	4619      	mov	r1, r3
 80012e2:	4806      	ldr	r0, [pc, #24]	; (80012fc <MX_ADC5_Init+0xc0>)
 80012e4:	f001 fbae 	bl	8002a44 <HAL_ADC_ConfigChannel>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 80012ee:	f000 f9fd 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	3720      	adds	r7, #32
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000280 	.word	0x20000280
 8001300:	50000600 	.word	0x50000600
 8001304:	94f00020 	.word	0x94f00020

08001308 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08c      	sub	sp, #48	; 0x30
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800130e:	463b      	mov	r3, r7
 8001310:	2230      	movs	r2, #48	; 0x30
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f00a fde3 	bl	800bee0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800131a:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <MX_DAC1_Init+0x80>)
 800131c:	4a1b      	ldr	r2, [pc, #108]	; (800138c <MX_DAC1_Init+0x84>)
 800131e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001320:	4819      	ldr	r0, [pc, #100]	; (8001388 <MX_DAC1_Init+0x80>)
 8001322:	f002 fb8a 	bl	8003a3a <HAL_DAC_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800132c:	f000 f9de 	bl	80016ec <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001330:	2302      	movs	r3, #2
 8001332:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800134c:	2301      	movs	r3, #1
 800134e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001354:	463b      	mov	r3, r7
 8001356:	2200      	movs	r2, #0
 8001358:	4619      	mov	r1, r3
 800135a:	480b      	ldr	r0, [pc, #44]	; (8001388 <MX_DAC1_Init+0x80>)
 800135c:	f002 fc0a 	bl	8003b74 <HAL_DAC_ConfigChannel>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001366:	f000 f9c1 	bl	80016ec <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800136a:	463b      	mov	r3, r7
 800136c:	2210      	movs	r2, #16
 800136e:	4619      	mov	r1, r3
 8001370:	4805      	ldr	r0, [pc, #20]	; (8001388 <MX_DAC1_Init+0x80>)
 8001372:	f002 fbff 	bl	8003b74 <HAL_DAC_ConfigChannel>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 800137c:	f000 f9b6 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	3730      	adds	r7, #48	; 0x30
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200002ec 	.word	0x200002ec
 800138c:	50000800 	.word	0x50000800

08001390 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	; 0x30
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001396:	463b      	mov	r3, r7
 8001398:	2230      	movs	r2, #48	; 0x30
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f00a fd9f 	bl	800bee0 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 80013a2:	4b16      	ldr	r3, [pc, #88]	; (80013fc <MX_DAC2_Init+0x6c>)
 80013a4:	4a16      	ldr	r2, [pc, #88]	; (8001400 <MX_DAC2_Init+0x70>)
 80013a6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80013a8:	4814      	ldr	r0, [pc, #80]	; (80013fc <MX_DAC2_Init+0x6c>)
 80013aa:	f002 fb46 	bl	8003a3a <HAL_DAC_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80013b4:	f000 f99a 	bl	80016ec <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80013b8:	2302      	movs	r3, #2
 80013ba:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80013d4:	2301      	movs	r3, #1
 80013d6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80013d8:	2300      	movs	r3, #0
 80013da:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80013dc:	463b      	mov	r3, r7
 80013de:	2200      	movs	r2, #0
 80013e0:	4619      	mov	r1, r3
 80013e2:	4806      	ldr	r0, [pc, #24]	; (80013fc <MX_DAC2_Init+0x6c>)
 80013e4:	f002 fbc6 	bl	8003b74 <HAL_DAC_ConfigChannel>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 80013ee:	f000 f97d 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	3730      	adds	r7, #48	; 0x30
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000300 	.word	0x20000300
 8001400:	50000c00 	.word	0x50000c00

08001404 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08c      	sub	sp, #48	; 0x30
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800140a:	463b      	mov	r3, r7
 800140c:	2230      	movs	r2, #48	; 0x30
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f00a fd65 	bl	800bee0 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8001416:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <MX_DAC3_Init+0x80>)
 8001418:	4a1b      	ldr	r2, [pc, #108]	; (8001488 <MX_DAC3_Init+0x84>)
 800141a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 800141c:	4819      	ldr	r0, [pc, #100]	; (8001484 <MX_DAC3_Init+0x80>)
 800141e:	f002 fb0c 	bl	8003a3a <HAL_DAC_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8001428:	f000 f960 	bl	80016ec <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800142c:	2302      	movs	r3, #2
 800142e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001430:	2300      	movs	r3, #0
 8001432:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001444:	2302      	movs	r3, #2
 8001446:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001448:	2302      	movs	r3, #2
 800144a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001450:	463b      	mov	r3, r7
 8001452:	2200      	movs	r2, #0
 8001454:	4619      	mov	r1, r3
 8001456:	480b      	ldr	r0, [pc, #44]	; (8001484 <MX_DAC3_Init+0x80>)
 8001458:	f002 fb8c 	bl	8003b74 <HAL_DAC_ConfigChannel>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8001462:	f000 f943 	bl	80016ec <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001466:	463b      	mov	r3, r7
 8001468:	2210      	movs	r2, #16
 800146a:	4619      	mov	r1, r3
 800146c:	4805      	ldr	r0, [pc, #20]	; (8001484 <MX_DAC3_Init+0x80>)
 800146e:	f002 fb81 	bl	8003b74 <HAL_DAC_ConfigChannel>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_DAC3_Init+0x78>
  {
    Error_Handler();
 8001478:	f000 f938 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 800147c:	bf00      	nop
 800147e:	3730      	adds	r7, #48	; 0x30
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000314 	.word	0x20000314
 8001488:	50001000 	.word	0x50001000

0800148c <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001490:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <MX_OPAMP1_Init+0x54>)
 8001492:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <MX_OPAMP1_Init+0x58>)
 8001494:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001496:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <MX_OPAMP1_Init+0x54>)
 8001498:	2200      	movs	r2, #0
 800149a:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 800149c:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <MX_OPAMP1_Init+0x54>)
 800149e:	2240      	movs	r2, #64	; 0x40
 80014a0:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <MX_OPAMP1_Init+0x54>)
 80014a4:	2208      	movs	r2, #8
 80014a6:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 80014a8:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <MX_OPAMP1_Init+0x54>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <MX_OPAMP1_Init+0x54>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80014b4:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <MX_OPAMP1_Init+0x54>)
 80014b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014ba:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = pgaGain;
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <MX_OPAMP1_Init+0x5c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <MX_OPAMP1_Init+0x54>)
 80014c4:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <MX_OPAMP1_Init+0x54>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80014cc:	4804      	ldr	r0, [pc, #16]	; (80014e0 <MX_OPAMP1_Init+0x54>)
 80014ce:	f002 fe7b 	bl	80041c8 <HAL_OPAMP_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_OPAMP1_Init+0x50>
  {
    Error_Handler();
 80014d8:	f000 f908 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000328 	.word	0x20000328
 80014e4:	40010300 	.word	0x40010300
 80014e8:	20000464 	.word	0x20000464

080014ec <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <MX_OPAMP3_Init+0x44>)
 80014f2:	4a10      	ldr	r2, [pc, #64]	; (8001534 <MX_OPAMP3_Init+0x48>)
 80014f4:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <MX_OPAMP3_Init+0x44>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <MX_OPAMP3_Init+0x44>)
 80014fe:	2260      	movs	r2, #96	; 0x60
 8001500:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <MX_OPAMP3_Init+0x44>)
 8001504:	220c      	movs	r2, #12
 8001506:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_OPAMP3_Init+0x44>)
 800150a:	2200      	movs	r2, #0
 800150c:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <MX_OPAMP3_Init+0x44>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <MX_OPAMP3_Init+0x44>)
 8001516:	2200      	movs	r2, #0
 8001518:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_OPAMP3_Init+0x44>)
 800151c:	f002 fe54 	bl	80041c8 <HAL_OPAMP_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 8001526:	f000 f8e1 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000364 	.word	0x20000364
 8001534:	40010308 	.word	0x40010308

08001538 <MX_OPAMP4_Init>:
  * @brief OPAMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP4_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP4_Init 0 */

  /* USER CODE BEGIN OPAMP4_Init 1 */

  /* USER CODE END OPAMP4_Init 1 */
  hopamp4.Instance = OPAMP4;
 800153c:	4b13      	ldr	r3, [pc, #76]	; (800158c <MX_OPAMP4_Init+0x54>)
 800153e:	4a14      	ldr	r2, [pc, #80]	; (8001590 <MX_OPAMP4_Init+0x58>)
 8001540:	601a      	str	r2, [r3, #0]
  hopamp4.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <MX_OPAMP4_Init+0x54>)
 8001544:	2200      	movs	r2, #0
 8001546:	605a      	str	r2, [r3, #4]
  hopamp4.Init.Mode = OPAMP_PGA_MODE;
 8001548:	4b10      	ldr	r3, [pc, #64]	; (800158c <MX_OPAMP4_Init+0x54>)
 800154a:	2240      	movs	r2, #64	; 0x40
 800154c:	609a      	str	r2, [r3, #8]
  hopamp4.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <MX_OPAMP4_Init+0x54>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  hopamp4.Init.InternalOutput = ENABLE;
 8001554:	4b0d      	ldr	r3, [pc, #52]	; (800158c <MX_OPAMP4_Init+0x54>)
 8001556:	2201      	movs	r2, #1
 8001558:	751a      	strb	r2, [r3, #20]
  hopamp4.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_OPAMP4_Init+0x54>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  hopamp4.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8001560:	4b0a      	ldr	r3, [pc, #40]	; (800158c <MX_OPAMP4_Init+0x54>)
 8001562:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001566:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp4.Init.PgaGain = pgaGain;
 8001568:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <MX_OPAMP4_Init+0x5c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	4b07      	ldr	r3, [pc, #28]	; (800158c <MX_OPAMP4_Init+0x54>)
 8001570:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp4.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <MX_OPAMP4_Init+0x54>)
 8001574:	2200      	movs	r2, #0
 8001576:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 8001578:	4804      	ldr	r0, [pc, #16]	; (800158c <MX_OPAMP4_Init+0x54>)
 800157a:	f002 fe25 	bl	80041c8 <HAL_OPAMP_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_OPAMP4_Init+0x50>
  {
    Error_Handler();
 8001584:	f000 f8b2 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP4_Init 2 */

  /* USER CODE END OPAMP4_Init 2 */

}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200003a0 	.word	0x200003a0
 8001590:	4001030c 	.word	0x4001030c
 8001594:	20000464 	.word	0x20000464

08001598 <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_OPAMP6_Init+0x44>)
 800159e:	4a10      	ldr	r2, [pc, #64]	; (80015e0 <MX_OPAMP6_Init+0x48>)
 80015a0:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_OPAMP6_Init+0x44>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_FOLLOWER_MODE;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_OPAMP6_Init+0x44>)
 80015aa:	2260      	movs	r2, #96	; 0x60
 80015ac:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <MX_OPAMP6_Init+0x44>)
 80015b0:	220c      	movs	r2, #12
 80015b2:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = DISABLE;
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_OPAMP6_Init+0x44>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <MX_OPAMP6_Init+0x44>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_OPAMP6_Init+0x44>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 80015c6:	4805      	ldr	r0, [pc, #20]	; (80015dc <MX_OPAMP6_Init+0x44>)
 80015c8:	f002 fdfe 	bl	80041c8 <HAL_OPAMP_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_OPAMP6_Init+0x3e>
  {
    Error_Handler();
 80015d2:	f000 f88b 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200003dc 	.word	0x200003dc
 80015e0:	40010314 	.word	0x40010314

080015e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b088      	sub	sp, #32
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ea:	f107 0310 	add.w	r3, r7, #16
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001602:	4b20      	ldr	r3, [pc, #128]	; (8001684 <MX_TIM1_Init+0xa0>)
 8001604:	4a20      	ldr	r2, [pc, #128]	; (8001688 <MX_TIM1_Init+0xa4>)
 8001606:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 143.75-1;
 8001608:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <MX_TIM1_Init+0xa0>)
 800160a:	228e      	movs	r2, #142	; 0x8e
 800160c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160e:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <MX_TIM1_Init+0xa0>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <MX_TIM1_Init+0xa0>)
 8001616:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800161a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161c:	4b19      	ldr	r3, [pc, #100]	; (8001684 <MX_TIM1_Init+0xa0>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001622:	4b18      	ldr	r3, [pc, #96]	; (8001684 <MX_TIM1_Init+0xa0>)
 8001624:	2200      	movs	r2, #0
 8001626:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001628:	4b16      	ldr	r3, [pc, #88]	; (8001684 <MX_TIM1_Init+0xa0>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800162e:	4815      	ldr	r0, [pc, #84]	; (8001684 <MX_TIM1_Init+0xa0>)
 8001630:	f005 fc32 	bl	8006e98 <HAL_TIM_Base_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800163a:	f000 f857 	bl	80016ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800163e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001642:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001644:	f107 0310 	add.w	r3, r7, #16
 8001648:	4619      	mov	r1, r3
 800164a:	480e      	ldr	r0, [pc, #56]	; (8001684 <MX_TIM1_Init+0xa0>)
 800164c:	f005 fcec 	bl	8007028 <HAL_TIM_ConfigClockSource>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001656:	f000 f849 	bl	80016ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	4619      	mov	r1, r3
 800166a:	4806      	ldr	r0, [pc, #24]	; (8001684 <MX_TIM1_Init+0xa0>)
 800166c:	f005 ff2c 	bl	80074c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001676:	f000 f839 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	3720      	adds	r7, #32
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000418 	.word	0x20000418
 8001688:	40012c00 	.word	0x40012c00

0800168c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <MX_GPIO_Init+0x5c>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	4a14      	ldr	r2, [pc, #80]	; (80016e8 <MX_GPIO_Init+0x5c>)
 8001698:	f043 0320 	orr.w	r3, r3, #32
 800169c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169e:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <MX_GPIO_Init+0x5c>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	f003 0320 	and.w	r3, r3, #32
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <MX_GPIO_Init+0x5c>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	4a0e      	ldr	r2, [pc, #56]	; (80016e8 <MX_GPIO_Init+0x5c>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b6:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <MX_GPIO_Init+0x5c>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <MX_GPIO_Init+0x5c>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	4a08      	ldr	r2, [pc, #32]	; (80016e8 <MX_GPIO_Init+0x5c>)
 80016c8:	f043 0302 	orr.w	r3, r3, #2
 80016cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <MX_GPIO_Init+0x5c>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]

}
 80016da:	bf00      	nop
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000

080016ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f0:	b672      	cpsid	i
}
 80016f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <Error_Handler+0x8>
	...

080016f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fe:	4b0f      	ldr	r3, [pc, #60]	; (800173c <HAL_MspInit+0x44>)
 8001700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001702:	4a0e      	ldr	r2, [pc, #56]	; (800173c <HAL_MspInit+0x44>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6613      	str	r3, [r2, #96]	; 0x60
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <HAL_MspInit+0x44>)
 800170c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <HAL_MspInit+0x44>)
 8001718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171a:	4a08      	ldr	r2, [pc, #32]	; (800173c <HAL_MspInit+0x44>)
 800171c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001720:	6593      	str	r3, [r2, #88]	; 0x58
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_MspInit+0x44>)
 8001724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000

08001740 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b09a      	sub	sp, #104	; 0x68
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	2254      	movs	r2, #84	; 0x54
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f00a fbc5 	bl	800bee0 <memset>
  if(hadc->Instance==ADC1)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800175e:	d11c      	bne.n	800179a <HAL_ADC_MspInit+0x5a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001760:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001764:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001766:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800176a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4618      	mov	r0, r3
 8001772:	f005 f943 	bl	80069fc <HAL_RCCEx_PeriphCLKConfig>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 800177c:	f7ff ffb6 	bl	80016ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001780:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <HAL_ADC_MspInit+0xa4>)
 8001782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001784:	4a17      	ldr	r2, [pc, #92]	; (80017e4 <HAL_ADC_MspInit+0xa4>)
 8001786:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800178a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178c:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_ADC_MspInit+0xa4>)
 800178e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8001798:	e020      	b.n	80017dc <HAL_ADC_MspInit+0x9c>
  else if(hadc->Instance==ADC5)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <HAL_ADC_MspInit+0xa8>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d11b      	bne.n	80017dc <HAL_ADC_MspInit+0x9c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80017a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017a8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80017aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80017ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	4618      	mov	r0, r3
 80017b6:	f005 f921 	bl	80069fc <HAL_RCCEx_PeriphCLKConfig>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <HAL_ADC_MspInit+0x84>
      Error_Handler();
 80017c0:	f7ff ff94 	bl	80016ec <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80017c4:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <HAL_ADC_MspInit+0xa4>)
 80017c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c8:	4a06      	ldr	r2, [pc, #24]	; (80017e4 <HAL_ADC_MspInit+0xa4>)
 80017ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <HAL_ADC_MspInit+0xa4>)
 80017d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]
}
 80017dc:	bf00      	nop
 80017de:	3768      	adds	r7, #104	; 0x68
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40021000 	.word	0x40021000
 80017e8:	50000600 	.word	0x50000600

080017ec <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08c      	sub	sp, #48	; 0x30
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 031c 	add.w	r3, r7, #28
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a34      	ldr	r2, [pc, #208]	; (80018dc <HAL_DAC_MspInit+0xf0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d125      	bne.n	800185a <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800180e:	4b34      	ldr	r3, [pc, #208]	; (80018e0 <HAL_DAC_MspInit+0xf4>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	4a33      	ldr	r2, [pc, #204]	; (80018e0 <HAL_DAC_MspInit+0xf4>)
 8001814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181a:	4b31      	ldr	r3, [pc, #196]	; (80018e0 <HAL_DAC_MspInit+0xf4>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001822:	61bb      	str	r3, [r7, #24]
 8001824:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <HAL_DAC_MspInit+0xf4>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	4a2d      	ldr	r2, [pc, #180]	; (80018e0 <HAL_DAC_MspInit+0xf4>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001832:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <HAL_DAC_MspInit+0xf4>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800183e:	2330      	movs	r3, #48	; 0x30
 8001840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001842:	2303      	movs	r3, #3
 8001844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	f107 031c 	add.w	r3, r7, #28
 800184e:	4619      	mov	r1, r3
 8001850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001854:	f002 fb36 	bl	8003ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 8001858:	e03b      	b.n	80018d2 <HAL_DAC_MspInit+0xe6>
  else if(hdac->Instance==DAC2)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a21      	ldr	r2, [pc, #132]	; (80018e4 <HAL_DAC_MspInit+0xf8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d125      	bne.n	80018b0 <HAL_DAC_MspInit+0xc4>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001864:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <HAL_DAC_MspInit+0xf4>)
 8001866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001868:	4a1d      	ldr	r2, [pc, #116]	; (80018e0 <HAL_DAC_MspInit+0xf4>)
 800186a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800186e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001870:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <HAL_DAC_MspInit+0xf4>)
 8001872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <HAL_DAC_MspInit+0xf4>)
 800187e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001880:	4a17      	ldr	r2, [pc, #92]	; (80018e0 <HAL_DAC_MspInit+0xf4>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001888:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <HAL_DAC_MspInit+0xf4>)
 800188a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001894:	2340      	movs	r3, #64	; 0x40
 8001896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001898:	2303      	movs	r3, #3
 800189a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a0:	f107 031c 	add.w	r3, r7, #28
 80018a4:	4619      	mov	r1, r3
 80018a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018aa:	f002 fb0b 	bl	8003ec4 <HAL_GPIO_Init>
}
 80018ae:	e010      	b.n	80018d2 <HAL_DAC_MspInit+0xe6>
  else if(hdac->Instance==DAC3)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0c      	ldr	r2, [pc, #48]	; (80018e8 <HAL_DAC_MspInit+0xfc>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d10b      	bne.n	80018d2 <HAL_DAC_MspInit+0xe6>
    __HAL_RCC_DAC3_CLK_ENABLE();
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <HAL_DAC_MspInit+0xf4>)
 80018bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018be:	4a08      	ldr	r2, [pc, #32]	; (80018e0 <HAL_DAC_MspInit+0xf4>)
 80018c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_DAC_MspInit+0xf4>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
}
 80018d2:	bf00      	nop
 80018d4:	3730      	adds	r7, #48	; 0x30
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	50000800 	.word	0x50000800
 80018e0:	40021000 	.word	0x40021000
 80018e4:	50000c00 	.word	0x50000c00
 80018e8:	50001000 	.word	0x50001000

080018ec <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08c      	sub	sp, #48	; 0x30
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 031c 	add.w	r3, r7, #28
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a3d      	ldr	r2, [pc, #244]	; (8001a00 <HAL_OPAMP_MspInit+0x114>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d119      	bne.n	8001942 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190e:	4b3d      	ldr	r3, [pc, #244]	; (8001a04 <HAL_OPAMP_MspInit+0x118>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001912:	4a3c      	ldr	r2, [pc, #240]	; (8001a04 <HAL_OPAMP_MspInit+0x118>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800191a:	4b3a      	ldr	r3, [pc, #232]	; (8001a04 <HAL_OPAMP_MspInit+0x118>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	61bb      	str	r3, [r7, #24]
 8001924:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PA3     ------> OPAMP1_VINM0
    PA7     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8001926:	2388      	movs	r3, #136	; 0x88
 8001928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800192a:	2303      	movs	r3, #3
 800192c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001932:	f107 031c 	add.w	r3, r7, #28
 8001936:	4619      	mov	r1, r3
 8001938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800193c:	f002 fac2 	bl	8003ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 8001940:	e05a      	b.n	80019f8 <HAL_OPAMP_MspInit+0x10c>
  else if(hopamp->Instance==OPAMP3)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a30      	ldr	r2, [pc, #192]	; (8001a08 <HAL_OPAMP_MspInit+0x11c>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d118      	bne.n	800197e <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194c:	4b2d      	ldr	r3, [pc, #180]	; (8001a04 <HAL_OPAMP_MspInit+0x118>)
 800194e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001950:	4a2c      	ldr	r2, [pc, #176]	; (8001a04 <HAL_OPAMP_MspInit+0x118>)
 8001952:	f043 0302 	orr.w	r3, r3, #2
 8001956:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001958:	4b2a      	ldr	r3, [pc, #168]	; (8001a04 <HAL_OPAMP_MspInit+0x118>)
 800195a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001964:	2302      	movs	r3, #2
 8001966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001968:	2303      	movs	r3, #3
 800196a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001970:	f107 031c 	add.w	r3, r7, #28
 8001974:	4619      	mov	r1, r3
 8001976:	4825      	ldr	r0, [pc, #148]	; (8001a0c <HAL_OPAMP_MspInit+0x120>)
 8001978:	f002 faa4 	bl	8003ec4 <HAL_GPIO_Init>
}
 800197c:	e03c      	b.n	80019f8 <HAL_OPAMP_MspInit+0x10c>
  else if(hopamp->Instance==OPAMP4)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a23      	ldr	r2, [pc, #140]	; (8001a10 <HAL_OPAMP_MspInit+0x124>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d119      	bne.n	80019bc <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001988:	4b1e      	ldr	r3, [pc, #120]	; (8001a04 <HAL_OPAMP_MspInit+0x118>)
 800198a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198c:	4a1d      	ldr	r2, [pc, #116]	; (8001a04 <HAL_OPAMP_MspInit+0x118>)
 800198e:	f043 0302 	orr.w	r3, r3, #2
 8001992:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <HAL_OPAMP_MspInit+0x118>)
 8001996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13;
 80019a0:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80019a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019a6:	2303      	movs	r3, #3
 80019a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	4619      	mov	r1, r3
 80019b4:	4815      	ldr	r0, [pc, #84]	; (8001a0c <HAL_OPAMP_MspInit+0x120>)
 80019b6:	f002 fa85 	bl	8003ec4 <HAL_GPIO_Init>
}
 80019ba:	e01d      	b.n	80019f8 <HAL_OPAMP_MspInit+0x10c>
  else if(hopamp->Instance==OPAMP6)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a14      	ldr	r2, [pc, #80]	; (8001a14 <HAL_OPAMP_MspInit+0x128>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d118      	bne.n	80019f8 <HAL_OPAMP_MspInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c6:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <HAL_OPAMP_MspInit+0x118>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ca:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <HAL_OPAMP_MspInit+0x118>)
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d2:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_OPAMP_MspInit+0x118>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80019de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019e4:	2303      	movs	r3, #3
 80019e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	4619      	mov	r1, r3
 80019f2:	4806      	ldr	r0, [pc, #24]	; (8001a0c <HAL_OPAMP_MspInit+0x120>)
 80019f4:	f002 fa66 	bl	8003ec4 <HAL_GPIO_Init>
}
 80019f8:	bf00      	nop
 80019fa:	3730      	adds	r7, #48	; 0x30
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40010300 	.word	0x40010300
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40010308 	.word	0x40010308
 8001a0c:	48000400 	.word	0x48000400
 8001a10:	4001030c 	.word	0x4001030c
 8001a14:	40010314 	.word	0x40010314

08001a18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <HAL_TIM_Base_MspInit+0x38>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d10b      	bne.n	8001a42 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <HAL_TIM_Base_MspInit+0x3c>)
 8001a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a2e:	4a09      	ldr	r2, [pc, #36]	; (8001a54 <HAL_TIM_Base_MspInit+0x3c>)
 8001a30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a34:	6613      	str	r3, [r2, #96]	; 0x60
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <HAL_TIM_Base_MspInit+0x3c>)
 8001a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40012c00 	.word	0x40012c00
 8001a54:	40021000 	.word	0x40021000

08001a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <NMI_Handler+0x4>

08001a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <HardFault_Handler+0x4>

08001a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <MemManage_Handler+0x4>

08001a6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <BusFault_Handler+0x4>

08001a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <UsageFault_Handler+0x4>

08001a76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa4:	f000 f922 	bl	8001cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001ab0:	4802      	ldr	r0, [pc, #8]	; (8001abc <USB_LP_IRQHandler+0x10>)
 8001ab2:	f002 fdcb 	bl	800464c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20001990 	.word	0x20001990

08001ac0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	e00a      	b.n	8001ae8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ad2:	f3af 8000 	nop.w
 8001ad6:	4601      	mov	r1, r0
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	1c5a      	adds	r2, r3, #1
 8001adc:	60ba      	str	r2, [r7, #8]
 8001ade:	b2ca      	uxtb	r2, r1
 8001ae0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	dbf0      	blt.n	8001ad2 <_read+0x12>
  }

  return len;
 8001af0:	687b      	ldr	r3, [r7, #4]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <_close>:
  }
  return len;
}

int _close(int file)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b22:	605a      	str	r2, [r3, #4]
  return 0;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <_isatty>:

int _isatty(int file)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b6c:	4a14      	ldr	r2, [pc, #80]	; (8001bc0 <_sbrk+0x5c>)
 8001b6e:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <_sbrk+0x60>)
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b78:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <_sbrk+0x64>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d102      	bne.n	8001b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <_sbrk+0x64>)
 8001b82:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <_sbrk+0x68>)
 8001b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <_sbrk+0x64>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d207      	bcs.n	8001ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b94:	f00a f96c 	bl	800be70 <__errno>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	220c      	movs	r2, #12
 8001b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba2:	e009      	b.n	8001bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <_sbrk+0x64>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001baa:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <_sbrk+0x64>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	4a05      	ldr	r2, [pc, #20]	; (8001bc8 <_sbrk+0x64>)
 8001bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20020000 	.word	0x20020000
 8001bc4:	00000400 	.word	0x00000400
 8001bc8:	200004b4 	.word	0x200004b4
 8001bcc:	20001eb8 	.word	0x20001eb8

08001bd0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <SystemInit+0x20>)
 8001bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bda:	4a05      	ldr	r2, [pc, #20]	; (8001bf0 <SystemInit+0x20>)
 8001bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bf4:	480d      	ldr	r0, [pc, #52]	; (8001c2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bf6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bf8:	480d      	ldr	r0, [pc, #52]	; (8001c30 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bfa:	490e      	ldr	r1, [pc, #56]	; (8001c34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bfc:	4a0e      	ldr	r2, [pc, #56]	; (8001c38 <LoopForever+0xe>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c00:	e002      	b.n	8001c08 <LoopCopyDataInit>

08001c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c06:	3304      	adds	r3, #4

08001c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c0c:	d3f9      	bcc.n	8001c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0e:	4a0b      	ldr	r2, [pc, #44]	; (8001c3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c10:	4c0b      	ldr	r4, [pc, #44]	; (8001c40 <LoopForever+0x16>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c14:	e001      	b.n	8001c1a <LoopFillZerobss>

08001c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c18:	3204      	adds	r2, #4

08001c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c1c:	d3fb      	bcc.n	8001c16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c1e:	f7ff ffd7 	bl	8001bd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c22:	f00a f92b 	bl	800be7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c26:	f7ff f82d 	bl	8000c84 <main>

08001c2a <LoopForever>:

LoopForever:
    b LoopForever
 8001c2a:	e7fe      	b.n	8001c2a <LoopForever>
  ldr   r0, =_estack
 8001c2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c34:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8001c38:	0800d574 	.word	0x0800d574
  ldr r2, =_sbss
 8001c3c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001c40:	20001eb4 	.word	0x20001eb4

08001c44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c44:	e7fe      	b.n	8001c44 <ADC1_2_IRQHandler>

08001c46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c50:	2003      	movs	r0, #3
 8001c52:	f001 feb3 	bl	80039bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c56:	200f      	movs	r0, #15
 8001c58:	f000 f80e 	bl	8001c78 <HAL_InitTick>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d002      	beq.n	8001c68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	71fb      	strb	r3, [r7, #7]
 8001c66:	e001      	b.n	8001c6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c68:	f7ff fd46 	bl	80016f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c6c:	79fb      	ldrb	r3, [r7, #7]

}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c84:	4b16      	ldr	r3, [pc, #88]	; (8001ce0 <HAL_InitTick+0x68>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d022      	beq.n	8001cd2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c8c:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <HAL_InitTick+0x6c>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <HAL_InitTick+0x68>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c98:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f001 febe 	bl	8003a22 <HAL_SYSTICK_Config>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10f      	bne.n	8001ccc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b0f      	cmp	r3, #15
 8001cb0:	d809      	bhi.n	8001cc6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8001cba:	f001 fe8a 	bl	80039d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <HAL_InitTick+0x70>)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	e007      	b.n	8001cd6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	73fb      	strb	r3, [r7, #15]
 8001cca:	e004      	b.n	8001cd6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	73fb      	strb	r3, [r7, #15]
 8001cd0:	e001      	b.n	8001cd6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20000018 	.word	0x20000018
 8001ce4:	20000010 	.word	0x20000010
 8001ce8:	20000014 	.word	0x20000014

08001cec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_IncTick+0x1c>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <HAL_IncTick+0x20>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	4a03      	ldr	r2, [pc, #12]	; (8001d08 <HAL_IncTick+0x1c>)
 8001cfc:	6013      	str	r3, [r2, #0]
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	200004b8 	.word	0x200004b8
 8001d0c:	20000018 	.word	0x20000018

08001d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return uwTick;
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <HAL_GetTick+0x14>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	200004b8 	.word	0x200004b8

08001d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d30:	f7ff ffee 	bl	8001d10 <HAL_GetTick>
 8001d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d40:	d004      	beq.n	8001d4c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_Delay+0x40>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4413      	add	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d4c:	bf00      	nop
 8001d4e:	f7ff ffdf 	bl	8001d10 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d8f7      	bhi.n	8001d4e <HAL_Delay+0x26>
  {
  }
}
 8001d5e:	bf00      	nop
 8001d60:	bf00      	nop
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000018 	.word	0x20000018

08001d6c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	431a      	orrs	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	609a      	str	r2, [r3, #8]
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	609a      	str	r2, [r3, #8]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b087      	sub	sp, #28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
 8001de0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	3360      	adds	r3, #96	; 0x60
 8001de6:	461a      	mov	r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <LL_ADC_SetOffset+0x44>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	4313      	orrs	r3, r2
 8001e04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e0c:	bf00      	nop
 8001e0e:	371c      	adds	r7, #28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	03fff000 	.word	0x03fff000

08001e1c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3360      	adds	r3, #96	; 0x60
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	3360      	adds	r3, #96	; 0x60
 8001e58:	461a      	mov	r2, r3
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e72:	bf00      	nop
 8001e74:	371c      	adds	r7, #28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b087      	sub	sp, #28
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	60f8      	str	r0, [r7, #12]
 8001e86:	60b9      	str	r1, [r7, #8]
 8001e88:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	3360      	adds	r3, #96	; 0x60
 8001e8e:	461a      	mov	r2, r3
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001ea8:	bf00      	nop
 8001eaa:	371c      	adds	r7, #28
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	3360      	adds	r3, #96	; 0x60
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001ede:	bf00      	nop
 8001ee0:	371c      	adds	r7, #28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	615a      	str	r2, [r3, #20]
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b087      	sub	sp, #28
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	3330      	adds	r3, #48	; 0x30
 8001f46:	461a      	mov	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	0a1b      	lsrs	r3, r3, #8
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	f003 030c 	and.w	r3, r3, #12
 8001f52:	4413      	add	r3, r2
 8001f54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	f003 031f 	and.w	r3, r3, #31
 8001f60:	211f      	movs	r1, #31
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	401a      	ands	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	0e9b      	lsrs	r3, r3, #26
 8001f6e:	f003 011f 	and.w	r1, r3, #31
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	f003 031f 	and.w	r3, r3, #31
 8001f78:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f82:	bf00      	nop
 8001f84:	371c      	adds	r7, #28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b087      	sub	sp, #28
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	3314      	adds	r3, #20
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	0e5b      	lsrs	r3, r3, #25
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	4413      	add	r3, r2
 8001fac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	0d1b      	lsrs	r3, r3, #20
 8001fb6:	f003 031f 	and.w	r3, r3, #31
 8001fba:	2107      	movs	r1, #7
 8001fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	0d1b      	lsrs	r3, r3, #20
 8001fc8:	f003 031f 	and.w	r3, r3, #31
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001fd8:	bf00      	nop
 8001fda:	371c      	adds	r7, #28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a0f      	ldr	r2, [pc, #60]	; (8002030 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d10a      	bne.n	800200e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002004:	431a      	orrs	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800200c:	e00a      	b.n	8002024 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800201a:	43db      	mvns	r3, r3
 800201c:	401a      	ands	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002024:	bf00      	nop
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	407f0000 	.word	0x407f0000

08002034 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 031f 	and.w	r3, r3, #31
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800207c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6093      	str	r3, [r2, #8]
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020a4:	d101      	bne.n	80020aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80020c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020f4:	d101      	bne.n	80020fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002118:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800211c:	f043 0201 	orr.w	r2, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002140:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002144:	f043 0202 	orr.w	r2, r3, #2
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <LL_ADC_IsEnabled+0x18>
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <LL_ADC_IsEnabled+0x1a>
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b02      	cmp	r3, #2
 8002190:	d101      	bne.n	8002196 <LL_ADC_IsDisableOngoing+0x18>
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <LL_ADC_IsDisableOngoing+0x1a>
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021b8:	f043 0204 	orr.w	r2, r3, #4
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021e0:	f043 0210 	orr.w	r2, r3, #16
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b04      	cmp	r3, #4
 8002206:	d101      	bne.n	800220c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002208:	2301      	movs	r3, #1
 800220a:	e000      	b.n	800220e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800222a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800222e:	f043 0220 	orr.w	r2, r3, #32
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	2b08      	cmp	r3, #8
 8002254:	d101      	bne.n	800225a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002268:	b590      	push	{r4, r7, lr}
 800226a:	b089      	sub	sp, #36	; 0x24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002270:	2300      	movs	r3, #0
 8002272:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002274:	2300      	movs	r3, #0
 8002276:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e1af      	b.n	80025e2 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228c:	2b00      	cmp	r3, #0
 800228e:	d109      	bne.n	80022a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff fa55 	bl	8001740 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff fef1 	bl	8002090 <LL_ADC_IsDeepPowerDownEnabled>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d004      	beq.n	80022be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fed7 	bl	800206c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff ff0c 	bl	80020e0 <LL_ADC_IsInternalRegulatorEnabled>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d115      	bne.n	80022fa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff fef0 	bl	80020b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022d8:	4b9f      	ldr	r3, [pc, #636]	; (8002558 <HAL_ADC_Init+0x2f0>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	099b      	lsrs	r3, r3, #6
 80022de:	4a9f      	ldr	r2, [pc, #636]	; (800255c <HAL_ADC_Init+0x2f4>)
 80022e0:	fba2 2303 	umull	r2, r3, r2, r3
 80022e4:	099b      	lsrs	r3, r3, #6
 80022e6:	3301      	adds	r3, #1
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022ec:	e002      	b.n	80022f4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	3b01      	subs	r3, #1
 80022f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f9      	bne.n	80022ee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff feee 	bl	80020e0 <LL_ADC_IsInternalRegulatorEnabled>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10d      	bne.n	8002326 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230e:	f043 0210 	orr.w	r2, r3, #16
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231a:	f043 0201 	orr.w	r2, r3, #1
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff ff62 	bl	80021f4 <LL_ADC_REG_IsConversionOngoing>
 8002330:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	2b00      	cmp	r3, #0
 800233c:	f040 8148 	bne.w	80025d0 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	2b00      	cmp	r3, #0
 8002344:	f040 8144 	bne.w	80025d0 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002350:	f043 0202 	orr.w	r2, r3, #2
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fefb 	bl	8002158 <LL_ADC_IsEnabled>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d141      	bne.n	80023ec <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002370:	d004      	beq.n	800237c <HAL_ADC_Init+0x114>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a7a      	ldr	r2, [pc, #488]	; (8002560 <HAL_ADC_Init+0x2f8>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d10f      	bne.n	800239c <HAL_ADC_Init+0x134>
 800237c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002380:	f7ff feea 	bl	8002158 <LL_ADC_IsEnabled>
 8002384:	4604      	mov	r4, r0
 8002386:	4876      	ldr	r0, [pc, #472]	; (8002560 <HAL_ADC_Init+0x2f8>)
 8002388:	f7ff fee6 	bl	8002158 <LL_ADC_IsEnabled>
 800238c:	4603      	mov	r3, r0
 800238e:	4323      	orrs	r3, r4
 8002390:	2b00      	cmp	r3, #0
 8002392:	bf0c      	ite	eq
 8002394:	2301      	moveq	r3, #1
 8002396:	2300      	movne	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	e012      	b.n	80023c2 <HAL_ADC_Init+0x15a>
 800239c:	4871      	ldr	r0, [pc, #452]	; (8002564 <HAL_ADC_Init+0x2fc>)
 800239e:	f7ff fedb 	bl	8002158 <LL_ADC_IsEnabled>
 80023a2:	4604      	mov	r4, r0
 80023a4:	4870      	ldr	r0, [pc, #448]	; (8002568 <HAL_ADC_Init+0x300>)
 80023a6:	f7ff fed7 	bl	8002158 <LL_ADC_IsEnabled>
 80023aa:	4603      	mov	r3, r0
 80023ac:	431c      	orrs	r4, r3
 80023ae:	486f      	ldr	r0, [pc, #444]	; (800256c <HAL_ADC_Init+0x304>)
 80023b0:	f7ff fed2 	bl	8002158 <LL_ADC_IsEnabled>
 80023b4:	4603      	mov	r3, r0
 80023b6:	4323      	orrs	r3, r4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bf0c      	ite	eq
 80023bc:	2301      	moveq	r3, #1
 80023be:	2300      	movne	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d012      	beq.n	80023ec <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023ce:	d004      	beq.n	80023da <HAL_ADC_Init+0x172>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a62      	ldr	r2, [pc, #392]	; (8002560 <HAL_ADC_Init+0x2f8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d101      	bne.n	80023de <HAL_ADC_Init+0x176>
 80023da:	4a65      	ldr	r2, [pc, #404]	; (8002570 <HAL_ADC_Init+0x308>)
 80023dc:	e000      	b.n	80023e0 <HAL_ADC_Init+0x178>
 80023de:	4a65      	ldr	r2, [pc, #404]	; (8002574 <HAL_ADC_Init+0x30c>)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	4619      	mov	r1, r3
 80023e6:	4610      	mov	r0, r2
 80023e8:	f7ff fcc0 	bl	8001d6c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	7f5b      	ldrb	r3, [r3, #29]
 80023f0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023f6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80023fc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002402:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800240a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002416:	2b01      	cmp	r3, #1
 8002418:	d106      	bne.n	8002428 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241e:	3b01      	subs	r3, #1
 8002420:	045b      	lsls	r3, r3, #17
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242c:	2b00      	cmp	r3, #0
 800242e:	d009      	beq.n	8002444 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	4b4b      	ldr	r3, [pc, #300]	; (8002578 <HAL_ADC_Init+0x310>)
 800244c:	4013      	ands	r3, r2
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	69b9      	ldr	r1, [r7, #24]
 8002454:	430b      	orrs	r3, r1
 8002456:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff febe 	bl	80021f4 <LL_ADC_REG_IsConversionOngoing>
 8002478:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff fedf 	bl	8002242 <LL_ADC_INJ_IsConversionOngoing>
 8002484:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d17f      	bne.n	800258c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d17c      	bne.n	800258c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002496:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800249e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024ae:	f023 0302 	bic.w	r3, r3, #2
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6812      	ldr	r2, [r2, #0]
 80024b6:	69b9      	ldr	r1, [r7, #24]
 80024b8:	430b      	orrs	r3, r1
 80024ba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d017      	beq.n	80024f4 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691a      	ldr	r2, [r3, #16]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80024d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80024dc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6911      	ldr	r1, [r2, #16]
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6812      	ldr	r2, [r2, #0]
 80024ec:	430b      	orrs	r3, r1
 80024ee:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80024f2:	e013      	b.n	800251c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691a      	ldr	r2, [r3, #16]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002502:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002514:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002518:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002522:	2b01      	cmp	r3, #1
 8002524:	d12a      	bne.n	800257c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002530:	f023 0304 	bic.w	r3, r3, #4
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800253c:	4311      	orrs	r1, r2
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002542:	4311      	orrs	r1, r2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002548:	430a      	orrs	r2, r1
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0201 	orr.w	r2, r2, #1
 8002554:	611a      	str	r2, [r3, #16]
 8002556:	e019      	b.n	800258c <HAL_ADC_Init+0x324>
 8002558:	20000010 	.word	0x20000010
 800255c:	053e2d63 	.word	0x053e2d63
 8002560:	50000100 	.word	0x50000100
 8002564:	50000400 	.word	0x50000400
 8002568:	50000500 	.word	0x50000500
 800256c:	50000600 	.word	0x50000600
 8002570:	50000300 	.word	0x50000300
 8002574:	50000700 	.word	0x50000700
 8002578:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	691a      	ldr	r2, [r3, #16]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0201 	bic.w	r2, r2, #1
 800258a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d10c      	bne.n	80025ae <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	f023 010f 	bic.w	r1, r3, #15
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	1e5a      	subs	r2, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	631a      	str	r2, [r3, #48]	; 0x30
 80025ac:	e007      	b.n	80025be <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 020f 	bic.w	r2, r2, #15
 80025bc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c2:	f023 0303 	bic.w	r3, r3, #3
 80025c6:	f043 0201 	orr.w	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80025ce:	e007      	b.n	80025e0 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d4:	f043 0210 	orr.w	r2, r3, #16
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3724      	adds	r7, #36	; 0x24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd90      	pop	{r4, r7, pc}
 80025ea:	bf00      	nop

080025ec <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025fc:	d004      	beq.n	8002608 <HAL_ADC_Start+0x1c>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a67      	ldr	r2, [pc, #412]	; (80027a0 <HAL_ADC_Start+0x1b4>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d101      	bne.n	800260c <HAL_ADC_Start+0x20>
 8002608:	4b66      	ldr	r3, [pc, #408]	; (80027a4 <HAL_ADC_Start+0x1b8>)
 800260a:	e000      	b.n	800260e <HAL_ADC_Start+0x22>
 800260c:	4b66      	ldr	r3, [pc, #408]	; (80027a8 <HAL_ADC_Start+0x1bc>)
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff fd10 	bl	8002034 <LL_ADC_GetMultimode>
 8002614:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff fdea 	bl	80021f4 <LL_ADC_REG_IsConversionOngoing>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	f040 80b4 	bne.w	8002790 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_ADC_Start+0x4a>
 8002632:	2302      	movs	r3, #2
 8002634:	e0af      	b.n	8002796 <HAL_ADC_Start+0x1aa>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fefc 	bl	800343c <ADC_Enable>
 8002644:	4603      	mov	r3, r0
 8002646:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002648:	7dfb      	ldrb	r3, [r7, #23]
 800264a:	2b00      	cmp	r3, #0
 800264c:	f040 809b 	bne.w	8002786 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002654:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002658:	f023 0301 	bic.w	r3, r3, #1
 800265c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a4d      	ldr	r2, [pc, #308]	; (80027a0 <HAL_ADC_Start+0x1b4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d009      	beq.n	8002682 <HAL_ADC_Start+0x96>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a4e      	ldr	r2, [pc, #312]	; (80027ac <HAL_ADC_Start+0x1c0>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d002      	beq.n	800267e <HAL_ADC_Start+0x92>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	e003      	b.n	8002686 <HAL_ADC_Start+0x9a>
 800267e:	4b4c      	ldr	r3, [pc, #304]	; (80027b0 <HAL_ADC_Start+0x1c4>)
 8002680:	e001      	b.n	8002686 <HAL_ADC_Start+0x9a>
 8002682:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	4293      	cmp	r3, r2
 800268c:	d002      	beq.n	8002694 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d105      	bne.n	80026a0 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002698:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ac:	d106      	bne.n	80026bc <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026b2:	f023 0206 	bic.w	r2, r3, #6
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	661a      	str	r2, [r3, #96]	; 0x60
 80026ba:	e002      	b.n	80026c2 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	221c      	movs	r2, #28
 80026c8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a32      	ldr	r2, [pc, #200]	; (80027a0 <HAL_ADC_Start+0x1b4>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d009      	beq.n	80026f0 <HAL_ADC_Start+0x104>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a32      	ldr	r2, [pc, #200]	; (80027ac <HAL_ADC_Start+0x1c0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d002      	beq.n	80026ec <HAL_ADC_Start+0x100>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	e003      	b.n	80026f4 <HAL_ADC_Start+0x108>
 80026ec:	4b30      	ldr	r3, [pc, #192]	; (80027b0 <HAL_ADC_Start+0x1c4>)
 80026ee:	e001      	b.n	80026f4 <HAL_ADC_Start+0x108>
 80026f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d008      	beq.n	800270e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d005      	beq.n	800270e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	2b05      	cmp	r3, #5
 8002706:	d002      	beq.n	800270e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	2b09      	cmp	r3, #9
 800270c:	d114      	bne.n	8002738 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d007      	beq.n	800272c <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002720:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002724:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fd37 	bl	80021a4 <LL_ADC_REG_StartConversion>
 8002736:	e02d      	b.n	8002794 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a15      	ldr	r2, [pc, #84]	; (80027a0 <HAL_ADC_Start+0x1b4>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d009      	beq.n	8002762 <HAL_ADC_Start+0x176>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a16      	ldr	r2, [pc, #88]	; (80027ac <HAL_ADC_Start+0x1c0>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d002      	beq.n	800275e <HAL_ADC_Start+0x172>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	e003      	b.n	8002766 <HAL_ADC_Start+0x17a>
 800275e:	4b14      	ldr	r3, [pc, #80]	; (80027b0 <HAL_ADC_Start+0x1c4>)
 8002760:	e001      	b.n	8002766 <HAL_ADC_Start+0x17a>
 8002762:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002766:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00f      	beq.n	8002794 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002778:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800277c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	65da      	str	r2, [r3, #92]	; 0x5c
 8002784:	e006      	b.n	8002794 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800278e:	e001      	b.n	8002794 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002790:	2302      	movs	r3, #2
 8002792:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002794:	7dfb      	ldrb	r3, [r7, #23]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	50000100 	.word	0x50000100
 80027a4:	50000300 	.word	0x50000300
 80027a8:	50000700 	.word	0x50000700
 80027ac:	50000500 	.word	0x50000500
 80027b0:	50000400 	.word	0x50000400

080027b4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d101      	bne.n	80027ca <HAL_ADC_Stop+0x16>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e023      	b.n	8002812 <HAL_ADC_Stop+0x5e>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80027d2:	2103      	movs	r1, #3
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 fd75 	bl	80032c4 <ADC_ConversionStop>
 80027da:	4603      	mov	r3, r0
 80027dc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80027de:	7bfb      	ldrb	r3, [r7, #15]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d111      	bne.n	8002808 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 fe8b 	bl	8003500 <ADC_Disable>
 80027ea:	4603      	mov	r3, r0
 80027ec:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d109      	bne.n	8002808 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027fc:	f023 0301 	bic.w	r3, r3, #1
 8002800:	f043 0201 	orr.w	r2, r3, #1
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002810:	7bfb      	ldrb	r3, [r7, #15]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
	...

0800281c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b088      	sub	sp, #32
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800282e:	d004      	beq.n	800283a <HAL_ADC_PollForConversion+0x1e>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a77      	ldr	r2, [pc, #476]	; (8002a14 <HAL_ADC_PollForConversion+0x1f8>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d101      	bne.n	800283e <HAL_ADC_PollForConversion+0x22>
 800283a:	4b77      	ldr	r3, [pc, #476]	; (8002a18 <HAL_ADC_PollForConversion+0x1fc>)
 800283c:	e000      	b.n	8002840 <HAL_ADC_PollForConversion+0x24>
 800283e:	4b77      	ldr	r3, [pc, #476]	; (8002a1c <HAL_ADC_PollForConversion+0x200>)
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fbf7 	bl	8002034 <LL_ADC_GetMultimode>
 8002846:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	2b08      	cmp	r3, #8
 800284e:	d102      	bne.n	8002856 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002850:	2308      	movs	r3, #8
 8002852:	61fb      	str	r3, [r7, #28]
 8002854:	e037      	b.n	80028c6 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	2b05      	cmp	r3, #5
 8002860:	d002      	beq.n	8002868 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b09      	cmp	r3, #9
 8002866:	d111      	bne.n	800288c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d007      	beq.n	8002886 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287a:	f043 0220 	orr.w	r2, r3, #32
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e0c1      	b.n	8002a0a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002886:	2304      	movs	r3, #4
 8002888:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800288a:	e01c      	b.n	80028c6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002894:	d004      	beq.n	80028a0 <HAL_ADC_PollForConversion+0x84>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a5e      	ldr	r2, [pc, #376]	; (8002a14 <HAL_ADC_PollForConversion+0x1f8>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d101      	bne.n	80028a4 <HAL_ADC_PollForConversion+0x88>
 80028a0:	4b5d      	ldr	r3, [pc, #372]	; (8002a18 <HAL_ADC_PollForConversion+0x1fc>)
 80028a2:	e000      	b.n	80028a6 <HAL_ADC_PollForConversion+0x8a>
 80028a4:	4b5d      	ldr	r3, [pc, #372]	; (8002a1c <HAL_ADC_PollForConversion+0x200>)
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fbd2 	bl	8002050 <LL_ADC_GetMultiDMATransfer>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d007      	beq.n	80028c2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b6:	f043 0220 	orr.w	r2, r3, #32
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e0a3      	b.n	8002a0a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80028c2:	2304      	movs	r3, #4
 80028c4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80028c6:	f7ff fa23 	bl	8001d10 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028cc:	e021      	b.n	8002912 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d4:	d01d      	beq.n	8002912 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80028d6:	f7ff fa1b 	bl	8001d10 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d302      	bcc.n	80028ec <HAL_ADC_PollForConversion+0xd0>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d112      	bne.n	8002912 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	4013      	ands	r3, r2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10b      	bne.n	8002912 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fe:	f043 0204 	orr.w	r2, r3, #4
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e07b      	b.n	8002a0a <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	4013      	ands	r3, r2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0d6      	beq.n	80028ce <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002924:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff faed 	bl	8001f10 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d01c      	beq.n	8002976 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	7f5b      	ldrb	r3, [r3, #29]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d118      	bne.n	8002976 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b08      	cmp	r3, #8
 8002950:	d111      	bne.n	8002976 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002956:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002962:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d105      	bne.n	8002976 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296e:	f043 0201 	orr.w	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a26      	ldr	r2, [pc, #152]	; (8002a14 <HAL_ADC_PollForConversion+0x1f8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d009      	beq.n	8002994 <HAL_ADC_PollForConversion+0x178>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a26      	ldr	r2, [pc, #152]	; (8002a20 <HAL_ADC_PollForConversion+0x204>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d002      	beq.n	8002990 <HAL_ADC_PollForConversion+0x174>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	e003      	b.n	8002998 <HAL_ADC_PollForConversion+0x17c>
 8002990:	4b24      	ldr	r3, [pc, #144]	; (8002a24 <HAL_ADC_PollForConversion+0x208>)
 8002992:	e001      	b.n	8002998 <HAL_ADC_PollForConversion+0x17c>
 8002994:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	4293      	cmp	r3, r2
 800299e:	d008      	beq.n	80029b2 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d005      	beq.n	80029b2 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2b05      	cmp	r3, #5
 80029aa:	d002      	beq.n	80029b2 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2b09      	cmp	r3, #9
 80029b0:	d104      	bne.n	80029bc <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	61bb      	str	r3, [r7, #24]
 80029ba:	e014      	b.n	80029e6 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a14      	ldr	r2, [pc, #80]	; (8002a14 <HAL_ADC_PollForConversion+0x1f8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d009      	beq.n	80029da <HAL_ADC_PollForConversion+0x1be>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a15      	ldr	r2, [pc, #84]	; (8002a20 <HAL_ADC_PollForConversion+0x204>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d002      	beq.n	80029d6 <HAL_ADC_PollForConversion+0x1ba>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	e003      	b.n	80029de <HAL_ADC_PollForConversion+0x1c2>
 80029d6:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <HAL_ADC_PollForConversion+0x208>)
 80029d8:	e001      	b.n	80029de <HAL_ADC_PollForConversion+0x1c2>
 80029da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029de:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d104      	bne.n	80029f6 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2208      	movs	r2, #8
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	e008      	b.n	8002a08 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d103      	bne.n	8002a08 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	220c      	movs	r2, #12
 8002a06:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3720      	adds	r7, #32
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	50000100 	.word	0x50000100
 8002a18:	50000300 	.word	0x50000300
 8002a1c:	50000700 	.word	0x50000700
 8002a20:	50000500 	.word	0x50000500
 8002a24:	50000400 	.word	0x50000400

08002a28 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
	...

08002a44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b0b6      	sub	sp, #216	; 0xd8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d102      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x24>
 8002a62:	2302      	movs	r3, #2
 8002a64:	f000 bc13 	b.w	800328e <HAL_ADC_ConfigChannel+0x84a>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff fbbd 	bl	80021f4 <LL_ADC_REG_IsConversionOngoing>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f040 83f3 	bne.w	8003268 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6818      	ldr	r0, [r3, #0]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6859      	ldr	r1, [r3, #4]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	f7ff fa51 	bl	8001f36 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff fbab 	bl	80021f4 <LL_ADC_REG_IsConversionOngoing>
 8002a9e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff fbcb 	bl	8002242 <LL_ADC_INJ_IsConversionOngoing>
 8002aac:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ab0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f040 81d9 	bne.w	8002e6c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002aba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f040 81d4 	bne.w	8002e6c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002acc:	d10f      	bne.n	8002aee <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6818      	ldr	r0, [r3, #0]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	4619      	mov	r1, r3
 8002ada:	f7ff fa58 	bl	8001f8e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff f9ff 	bl	8001eea <LL_ADC_SetSamplingTimeCommonConfig>
 8002aec:	e00e      	b.n	8002b0c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6818      	ldr	r0, [r3, #0]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	6819      	ldr	r1, [r3, #0]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	461a      	mov	r2, r3
 8002afc:	f7ff fa47 	bl	8001f8e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2100      	movs	r1, #0
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff f9ef 	bl	8001eea <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	695a      	ldr	r2, [r3, #20]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	08db      	lsrs	r3, r3, #3
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d022      	beq.n	8002b74 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6818      	ldr	r0, [r3, #0]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	6919      	ldr	r1, [r3, #16]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b3e:	f7ff f949 	bl	8001dd4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6818      	ldr	r0, [r3, #0]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	6919      	ldr	r1, [r3, #16]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	f7ff f995 	bl	8001e7e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	6919      	ldr	r1, [r3, #16]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	7f1b      	ldrb	r3, [r3, #28]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d102      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x126>
 8002b64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b68:	e000      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x128>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	f7ff f9a1 	bl	8001eb4 <LL_ADC_SetOffsetSaturation>
 8002b72:	e17b      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2100      	movs	r1, #0
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff f94e 	bl	8001e1c <LL_ADC_GetOffsetChannel>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10a      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x15c>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2100      	movs	r1, #0
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff f943 	bl	8001e1c <LL_ADC_GetOffsetChannel>
 8002b96:	4603      	mov	r3, r0
 8002b98:	0e9b      	lsrs	r3, r3, #26
 8002b9a:	f003 021f 	and.w	r2, r3, #31
 8002b9e:	e01e      	b.n	8002bde <HAL_ADC_ConfigChannel+0x19a>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff f938 	bl	8001e1c <LL_ADC_GetOffsetChannel>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002bc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002bce:	2320      	movs	r3, #32
 8002bd0:	e004      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002bd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d105      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x1b2>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	0e9b      	lsrs	r3, r3, #26
 8002bf0:	f003 031f 	and.w	r3, r3, #31
 8002bf4:	e018      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x1e4>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c02:	fa93 f3a3 	rbit	r3, r3
 8002c06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002c0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002c12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002c1a:	2320      	movs	r3, #32
 8002c1c:	e004      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002c1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c22:	fab3 f383 	clz	r3, r3
 8002c26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d106      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2200      	movs	r2, #0
 8002c32:	2100      	movs	r1, #0
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff f907 	bl	8001e48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2101      	movs	r1, #1
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff f8eb 	bl	8001e1c <LL_ADC_GetOffsetChannel>
 8002c46:	4603      	mov	r3, r0
 8002c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10a      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x222>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2101      	movs	r1, #1
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff f8e0 	bl	8001e1c <LL_ADC_GetOffsetChannel>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	0e9b      	lsrs	r3, r3, #26
 8002c60:	f003 021f 	and.w	r2, r3, #31
 8002c64:	e01e      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x260>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff f8d5 	bl	8001e1c <LL_ADC_GetOffsetChannel>
 8002c72:	4603      	mov	r3, r0
 8002c74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c7c:	fa93 f3a3 	rbit	r3, r3
 8002c80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002c84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002c8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002c94:	2320      	movs	r3, #32
 8002c96:	e004      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002c98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c9c:	fab3 f383 	clz	r3, r3
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d105      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x278>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	0e9b      	lsrs	r3, r3, #26
 8002cb6:	f003 031f 	and.w	r3, r3, #31
 8002cba:	e018      	b.n	8002cee <HAL_ADC_ConfigChannel+0x2aa>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cc8:	fa93 f3a3 	rbit	r3, r3
 8002ccc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002cd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002cd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002cd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002ce0:	2320      	movs	r3, #32
 8002ce2:	e004      	b.n	8002cee <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002ce4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ce8:	fab3 f383 	clz	r3, r3
 8002cec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d106      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff f8a4 	bl	8001e48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2102      	movs	r1, #2
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff f888 	bl	8001e1c <LL_ADC_GetOffsetChannel>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10a      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x2e8>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2102      	movs	r1, #2
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff f87d 	bl	8001e1c <LL_ADC_GetOffsetChannel>
 8002d22:	4603      	mov	r3, r0
 8002d24:	0e9b      	lsrs	r3, r3, #26
 8002d26:	f003 021f 	and.w	r2, r3, #31
 8002d2a:	e01e      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x326>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2102      	movs	r1, #2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff f872 	bl	8001e1c <LL_ADC_GetOffsetChannel>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d42:	fa93 f3a3 	rbit	r3, r3
 8002d46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002d4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002d52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002d5a:	2320      	movs	r3, #32
 8002d5c:	e004      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002d5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d62:	fab3 f383 	clz	r3, r3
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d105      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x33e>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	0e9b      	lsrs	r3, r3, #26
 8002d7c:	f003 031f 	and.w	r3, r3, #31
 8002d80:	e016      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x36c>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d8e:	fa93 f3a3 	rbit	r3, r3
 8002d92:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002d94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002d9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002da2:	2320      	movs	r3, #32
 8002da4:	e004      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002da6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002daa:	fab3 f383 	clz	r3, r3
 8002dae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d106      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2200      	movs	r2, #0
 8002dba:	2102      	movs	r1, #2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff f843 	bl	8001e48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2103      	movs	r1, #3
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff f827 	bl	8001e1c <LL_ADC_GetOffsetChannel>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10a      	bne.n	8002dee <HAL_ADC_ConfigChannel+0x3aa>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2103      	movs	r1, #3
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff f81c 	bl	8001e1c <LL_ADC_GetOffsetChannel>
 8002de4:	4603      	mov	r3, r0
 8002de6:	0e9b      	lsrs	r3, r3, #26
 8002de8:	f003 021f 	and.w	r2, r3, #31
 8002dec:	e017      	b.n	8002e1e <HAL_ADC_ConfigChannel+0x3da>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2103      	movs	r1, #3
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff f811 	bl	8001e1c <LL_ADC_GetOffsetChannel>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e00:	fa93 f3a3 	rbit	r3, r3
 8002e04:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002e06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e08:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002e0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002e10:	2320      	movs	r3, #32
 8002e12:	e003      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002e14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e16:	fab3 f383 	clz	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d105      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x3f2>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	0e9b      	lsrs	r3, r3, #26
 8002e30:	f003 031f 	and.w	r3, r3, #31
 8002e34:	e011      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x416>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e3e:	fa93 f3a3 	rbit	r3, r3
 8002e42:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002e44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e46:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002e4e:	2320      	movs	r3, #32
 8002e50:	e003      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e54:	fab3 f383 	clz	r3, r3
 8002e58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d106      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2200      	movs	r2, #0
 8002e64:	2103      	movs	r1, #3
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fe ffee 	bl	8001e48 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff f971 	bl	8002158 <LL_ADC_IsEnabled>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f040 813d 	bne.w	80030f8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	6819      	ldr	r1, [r3, #0]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	f7ff f8aa 	bl	8001fe4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	4aa2      	ldr	r2, [pc, #648]	; (8003120 <HAL_ADC_ConfigChannel+0x6dc>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	f040 812e 	bne.w	80030f8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10b      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x480>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	0e9b      	lsrs	r3, r3, #26
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	f003 031f 	and.w	r3, r3, #31
 8002eb8:	2b09      	cmp	r3, #9
 8002eba:	bf94      	ite	ls
 8002ebc:	2301      	movls	r3, #1
 8002ebe:	2300      	movhi	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	e019      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x4b4>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ecc:	fa93 f3a3 	rbit	r3, r3
 8002ed0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ed2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ed4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002ed6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002edc:	2320      	movs	r3, #32
 8002ede:	e003      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002ee0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ee2:	fab3 f383 	clz	r3, r3
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	3301      	adds	r3, #1
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	2b09      	cmp	r3, #9
 8002ef0:	bf94      	ite	ls
 8002ef2:	2301      	movls	r3, #1
 8002ef4:	2300      	movhi	r3, #0
 8002ef6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d079      	beq.n	8002ff0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d107      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x4d4>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	0e9b      	lsrs	r3, r3, #26
 8002f0e:	3301      	adds	r3, #1
 8002f10:	069b      	lsls	r3, r3, #26
 8002f12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f16:	e015      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x500>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f20:	fa93 f3a3 	rbit	r3, r3
 8002f24:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f28:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002f30:	2320      	movs	r3, #32
 8002f32:	e003      	b.n	8002f3c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f36:	fab3 f383 	clz	r3, r3
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	069b      	lsls	r3, r3, #26
 8002f40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d109      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x520>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	0e9b      	lsrs	r3, r3, #26
 8002f56:	3301      	adds	r3, #1
 8002f58:	f003 031f 	and.w	r3, r3, #31
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f62:	e017      	b.n	8002f94 <HAL_ADC_ConfigChannel+0x550>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f6c:	fa93 f3a3 	rbit	r3, r3
 8002f70:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f74:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002f7c:	2320      	movs	r3, #32
 8002f7e:	e003      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f82:	fab3 f383 	clz	r3, r3
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	3301      	adds	r3, #1
 8002f8a:	f003 031f 	and.w	r3, r3, #31
 8002f8e:	2101      	movs	r1, #1
 8002f90:	fa01 f303 	lsl.w	r3, r1, r3
 8002f94:	ea42 0103 	orr.w	r1, r2, r3
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10a      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x576>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	0e9b      	lsrs	r3, r3, #26
 8002faa:	3301      	adds	r3, #1
 8002fac:	f003 021f 	and.w	r2, r3, #31
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	4413      	add	r3, r2
 8002fb6:	051b      	lsls	r3, r3, #20
 8002fb8:	e018      	b.n	8002fec <HAL_ADC_ConfigChannel+0x5a8>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc2:	fa93 f3a3 	rbit	r3, r3
 8002fc6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002fd2:	2320      	movs	r3, #32
 8002fd4:	e003      	b.n	8002fde <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd8:	fab3 f383 	clz	r3, r3
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	3301      	adds	r3, #1
 8002fe0:	f003 021f 	and.w	r2, r3, #31
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	4413      	add	r3, r2
 8002fea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fec:	430b      	orrs	r3, r1
 8002fee:	e07e      	b.n	80030ee <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d107      	bne.n	800300c <HAL_ADC_ConfigChannel+0x5c8>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	0e9b      	lsrs	r3, r3, #26
 8003002:	3301      	adds	r3, #1
 8003004:	069b      	lsls	r3, r3, #26
 8003006:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800300a:	e015      	b.n	8003038 <HAL_ADC_ConfigChannel+0x5f4>
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003014:	fa93 f3a3 	rbit	r3, r3
 8003018:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800301a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800301e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003024:	2320      	movs	r3, #32
 8003026:	e003      	b.n	8003030 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302a:	fab3 f383 	clz	r3, r3
 800302e:	b2db      	uxtb	r3, r3
 8003030:	3301      	adds	r3, #1
 8003032:	069b      	lsls	r3, r3, #26
 8003034:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003040:	2b00      	cmp	r3, #0
 8003042:	d109      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x614>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	0e9b      	lsrs	r3, r3, #26
 800304a:	3301      	adds	r3, #1
 800304c:	f003 031f 	and.w	r3, r3, #31
 8003050:	2101      	movs	r1, #1
 8003052:	fa01 f303 	lsl.w	r3, r1, r3
 8003056:	e017      	b.n	8003088 <HAL_ADC_ConfigChannel+0x644>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	fa93 f3a3 	rbit	r3, r3
 8003064:	61fb      	str	r3, [r7, #28]
  return result;
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003070:	2320      	movs	r3, #32
 8003072:	e003      	b.n	800307c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	fab3 f383 	clz	r3, r3
 800307a:	b2db      	uxtb	r3, r3
 800307c:	3301      	adds	r3, #1
 800307e:	f003 031f 	and.w	r3, r3, #31
 8003082:	2101      	movs	r1, #1
 8003084:	fa01 f303 	lsl.w	r3, r1, r3
 8003088:	ea42 0103 	orr.w	r1, r2, r3
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10d      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x670>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	0e9b      	lsrs	r3, r3, #26
 800309e:	3301      	adds	r3, #1
 80030a0:	f003 021f 	and.w	r2, r3, #31
 80030a4:	4613      	mov	r3, r2
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	4413      	add	r3, r2
 80030aa:	3b1e      	subs	r3, #30
 80030ac:	051b      	lsls	r3, r3, #20
 80030ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030b2:	e01b      	b.n	80030ec <HAL_ADC_ConfigChannel+0x6a8>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	fa93 f3a3 	rbit	r3, r3
 80030c0:	613b      	str	r3, [r7, #16]
  return result;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80030cc:	2320      	movs	r3, #32
 80030ce:	e003      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	fab3 f383 	clz	r3, r3
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	3301      	adds	r3, #1
 80030da:	f003 021f 	and.w	r2, r3, #31
 80030de:	4613      	mov	r3, r2
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	4413      	add	r3, r2
 80030e4:	3b1e      	subs	r3, #30
 80030e6:	051b      	lsls	r3, r3, #20
 80030e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030ec:	430b      	orrs	r3, r1
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	6892      	ldr	r2, [r2, #8]
 80030f2:	4619      	mov	r1, r3
 80030f4:	f7fe ff4b 	bl	8001f8e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	4b09      	ldr	r3, [pc, #36]	; (8003124 <HAL_ADC_ConfigChannel+0x6e0>)
 80030fe:	4013      	ands	r3, r2
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 80be 	beq.w	8003282 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800310e:	d004      	beq.n	800311a <HAL_ADC_ConfigChannel+0x6d6>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a04      	ldr	r2, [pc, #16]	; (8003128 <HAL_ADC_ConfigChannel+0x6e4>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d10a      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x6ec>
 800311a:	4b04      	ldr	r3, [pc, #16]	; (800312c <HAL_ADC_ConfigChannel+0x6e8>)
 800311c:	e009      	b.n	8003132 <HAL_ADC_ConfigChannel+0x6ee>
 800311e:	bf00      	nop
 8003120:	407f0000 	.word	0x407f0000
 8003124:	80080000 	.word	0x80080000
 8003128:	50000100 	.word	0x50000100
 800312c:	50000300 	.word	0x50000300
 8003130:	4b59      	ldr	r3, [pc, #356]	; (8003298 <HAL_ADC_ConfigChannel+0x854>)
 8003132:	4618      	mov	r0, r3
 8003134:	f7fe fe40 	bl	8001db8 <LL_ADC_GetCommonPathInternalCh>
 8003138:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a56      	ldr	r2, [pc, #344]	; (800329c <HAL_ADC_ConfigChannel+0x858>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d004      	beq.n	8003150 <HAL_ADC_ConfigChannel+0x70c>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a55      	ldr	r2, [pc, #340]	; (80032a0 <HAL_ADC_ConfigChannel+0x85c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d13a      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003150:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003154:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d134      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003164:	d005      	beq.n	8003172 <HAL_ADC_ConfigChannel+0x72e>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a4e      	ldr	r2, [pc, #312]	; (80032a4 <HAL_ADC_ConfigChannel+0x860>)
 800316c:	4293      	cmp	r3, r2
 800316e:	f040 8085 	bne.w	800327c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800317a:	d004      	beq.n	8003186 <HAL_ADC_ConfigChannel+0x742>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a49      	ldr	r2, [pc, #292]	; (80032a8 <HAL_ADC_ConfigChannel+0x864>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d101      	bne.n	800318a <HAL_ADC_ConfigChannel+0x746>
 8003186:	4a49      	ldr	r2, [pc, #292]	; (80032ac <HAL_ADC_ConfigChannel+0x868>)
 8003188:	e000      	b.n	800318c <HAL_ADC_ConfigChannel+0x748>
 800318a:	4a43      	ldr	r2, [pc, #268]	; (8003298 <HAL_ADC_ConfigChannel+0x854>)
 800318c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003190:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003194:	4619      	mov	r1, r3
 8003196:	4610      	mov	r0, r2
 8003198:	f7fe fdfb 	bl	8001d92 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800319c:	4b44      	ldr	r3, [pc, #272]	; (80032b0 <HAL_ADC_ConfigChannel+0x86c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	099b      	lsrs	r3, r3, #6
 80031a2:	4a44      	ldr	r2, [pc, #272]	; (80032b4 <HAL_ADC_ConfigChannel+0x870>)
 80031a4:	fba2 2303 	umull	r2, r3, r2, r3
 80031a8:	099b      	lsrs	r3, r3, #6
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	4613      	mov	r3, r2
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	4413      	add	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031b6:	e002      	b.n	80031be <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	3b01      	subs	r3, #1
 80031bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1f9      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031c4:	e05a      	b.n	800327c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a3b      	ldr	r2, [pc, #236]	; (80032b8 <HAL_ADC_ConfigChannel+0x874>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d125      	bne.n	800321c <HAL_ADC_ConfigChannel+0x7d8>
 80031d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d11f      	bne.n	800321c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a31      	ldr	r2, [pc, #196]	; (80032a8 <HAL_ADC_ConfigChannel+0x864>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d104      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x7ac>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a34      	ldr	r2, [pc, #208]	; (80032bc <HAL_ADC_ConfigChannel+0x878>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d047      	beq.n	8003280 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031f8:	d004      	beq.n	8003204 <HAL_ADC_ConfigChannel+0x7c0>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a2a      	ldr	r2, [pc, #168]	; (80032a8 <HAL_ADC_ConfigChannel+0x864>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d101      	bne.n	8003208 <HAL_ADC_ConfigChannel+0x7c4>
 8003204:	4a29      	ldr	r2, [pc, #164]	; (80032ac <HAL_ADC_ConfigChannel+0x868>)
 8003206:	e000      	b.n	800320a <HAL_ADC_ConfigChannel+0x7c6>
 8003208:	4a23      	ldr	r2, [pc, #140]	; (8003298 <HAL_ADC_ConfigChannel+0x854>)
 800320a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800320e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003212:	4619      	mov	r1, r3
 8003214:	4610      	mov	r0, r2
 8003216:	f7fe fdbc 	bl	8001d92 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800321a:	e031      	b.n	8003280 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a27      	ldr	r2, [pc, #156]	; (80032c0 <HAL_ADC_ConfigChannel+0x87c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d12d      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003226:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800322a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d127      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a1c      	ldr	r2, [pc, #112]	; (80032a8 <HAL_ADC_ConfigChannel+0x864>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d022      	beq.n	8003282 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003244:	d004      	beq.n	8003250 <HAL_ADC_ConfigChannel+0x80c>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a17      	ldr	r2, [pc, #92]	; (80032a8 <HAL_ADC_ConfigChannel+0x864>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d101      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x810>
 8003250:	4a16      	ldr	r2, [pc, #88]	; (80032ac <HAL_ADC_ConfigChannel+0x868>)
 8003252:	e000      	b.n	8003256 <HAL_ADC_ConfigChannel+0x812>
 8003254:	4a10      	ldr	r2, [pc, #64]	; (8003298 <HAL_ADC_ConfigChannel+0x854>)
 8003256:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800325a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800325e:	4619      	mov	r1, r3
 8003260:	4610      	mov	r0, r2
 8003262:	f7fe fd96 	bl	8001d92 <LL_ADC_SetCommonPathInternalCh>
 8003266:	e00c      	b.n	8003282 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326c:	f043 0220 	orr.w	r2, r3, #32
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800327a:	e002      	b.n	8003282 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800327c:	bf00      	nop
 800327e:	e000      	b.n	8003282 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003280:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800328a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800328e:	4618      	mov	r0, r3
 8003290:	37d8      	adds	r7, #216	; 0xd8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	50000700 	.word	0x50000700
 800329c:	c3210000 	.word	0xc3210000
 80032a0:	90c00010 	.word	0x90c00010
 80032a4:	50000600 	.word	0x50000600
 80032a8:	50000100 	.word	0x50000100
 80032ac:	50000300 	.word	0x50000300
 80032b0:	20000010 	.word	0x20000010
 80032b4:	053e2d63 	.word	0x053e2d63
 80032b8:	c7520000 	.word	0xc7520000
 80032bc:	50000500 	.word	0x50000500
 80032c0:	cb840000 	.word	0xcb840000

080032c4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fe ff8a 	bl	80021f4 <LL_ADC_REG_IsConversionOngoing>
 80032e0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fe ffab 	bl	8002242 <LL_ADC_INJ_IsConversionOngoing>
 80032ec:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d103      	bne.n	80032fc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 8098 	beq.w	800342c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d02a      	beq.n	8003360 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	7f5b      	ldrb	r3, [r3, #29]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d126      	bne.n	8003360 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	7f1b      	ldrb	r3, [r3, #28]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d122      	bne.n	8003360 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800331a:	2301      	movs	r3, #1
 800331c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800331e:	e014      	b.n	800334a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	4a45      	ldr	r2, [pc, #276]	; (8003438 <ADC_ConversionStop+0x174>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d90d      	bls.n	8003344 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332c:	f043 0210 	orr.w	r2, r3, #16
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003338:	f043 0201 	orr.w	r2, r3, #1
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e074      	b.n	800342e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	3301      	adds	r3, #1
 8003348:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003354:	2b40      	cmp	r3, #64	; 0x40
 8003356:	d1e3      	bne.n	8003320 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2240      	movs	r2, #64	; 0x40
 800335e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d014      	beq.n	8003390 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f7fe ff42 	bl	80021f4 <LL_ADC_REG_IsConversionOngoing>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00c      	beq.n	8003390 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe feff 	bl	800217e <LL_ADC_IsDisableOngoing>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d104      	bne.n	8003390 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7fe ff1e 	bl	80021cc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d014      	beq.n	80033c0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f7fe ff51 	bl	8002242 <LL_ADC_INJ_IsConversionOngoing>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00c      	beq.n	80033c0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fe fee7 	bl	800217e <LL_ADC_IsDisableOngoing>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d104      	bne.n	80033c0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fe ff2d 	bl	800221a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d005      	beq.n	80033d2 <ADC_ConversionStop+0x10e>
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d105      	bne.n	80033d8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80033cc:	230c      	movs	r3, #12
 80033ce:	617b      	str	r3, [r7, #20]
        break;
 80033d0:	e005      	b.n	80033de <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80033d2:	2308      	movs	r3, #8
 80033d4:	617b      	str	r3, [r7, #20]
        break;
 80033d6:	e002      	b.n	80033de <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80033d8:	2304      	movs	r3, #4
 80033da:	617b      	str	r3, [r7, #20]
        break;
 80033dc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80033de:	f7fe fc97 	bl	8001d10 <HAL_GetTick>
 80033e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80033e4:	e01b      	b.n	800341e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80033e6:	f7fe fc93 	bl	8001d10 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b05      	cmp	r3, #5
 80033f2:	d914      	bls.n	800341e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	4013      	ands	r3, r2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00d      	beq.n	800341e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003406:	f043 0210 	orr.w	r2, r3, #16
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003412:	f043 0201 	orr.w	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e007      	b.n	800342e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	4013      	ands	r3, r2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1dc      	bne.n	80033e6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3720      	adds	r7, #32
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	a33fffff 	.word	0xa33fffff

0800343c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f7fe fe85 	bl	8002158 <LL_ADC_IsEnabled>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d14d      	bne.n	80034f0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	4b28      	ldr	r3, [pc, #160]	; (80034fc <ADC_Enable+0xc0>)
 800345c:	4013      	ands	r3, r2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00d      	beq.n	800347e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003466:	f043 0210 	orr.w	r2, r3, #16
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003472:	f043 0201 	orr.w	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e039      	b.n	80034f2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f7fe fe40 	bl	8002108 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003488:	f7fe fc42 	bl	8001d10 <HAL_GetTick>
 800348c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800348e:	e028      	b.n	80034e2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f7fe fe5f 	bl	8002158 <LL_ADC_IsEnabled>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d104      	bne.n	80034aa <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fe fe2f 	bl	8002108 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034aa:	f7fe fc31 	bl	8001d10 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d914      	bls.n	80034e2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d00d      	beq.n	80034e2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ca:	f043 0210 	orr.w	r2, r3, #16
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d6:	f043 0201 	orr.w	r2, r3, #1
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e007      	b.n	80034f2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d1cf      	bne.n	8003490 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	8000003f 	.word	0x8000003f

08003500 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f7fe fe36 	bl	800217e <LL_ADC_IsDisableOngoing>
 8003512:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f7fe fe1d 	bl	8002158 <LL_ADC_IsEnabled>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d047      	beq.n	80035b4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d144      	bne.n	80035b4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 030d 	and.w	r3, r3, #13
 8003534:	2b01      	cmp	r3, #1
 8003536:	d10c      	bne.n	8003552 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f7fe fdf7 	bl	8002130 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2203      	movs	r2, #3
 8003548:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800354a:	f7fe fbe1 	bl	8001d10 <HAL_GetTick>
 800354e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003550:	e029      	b.n	80035a6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003556:	f043 0210 	orr.w	r2, r3, #16
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003562:	f043 0201 	orr.w	r2, r3, #1
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e023      	b.n	80035b6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800356e:	f7fe fbcf 	bl	8001d10 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d914      	bls.n	80035a6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00d      	beq.n	80035a6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358e:	f043 0210 	orr.w	r2, r3, #16
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800359a:	f043 0201 	orr.w	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e007      	b.n	80035b6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1dc      	bne.n	800356e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <LL_ADC_IsEnabled>:
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <LL_ADC_IsEnabled+0x18>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <LL_ADC_IsEnabled+0x1a>
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <LL_ADC_REG_IsConversionOngoing>:
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d101      	bne.n	80035fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80035f8:	2301      	movs	r3, #1
 80035fa:	e000      	b.n	80035fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
	...

0800360c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800360c:	b590      	push	{r4, r7, lr}
 800360e:	b0a1      	sub	sp, #132	; 0x84
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003626:	2302      	movs	r3, #2
 8003628:	e0e7      	b.n	80037fa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003632:	2300      	movs	r3, #0
 8003634:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003636:	2300      	movs	r3, #0
 8003638:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003642:	d102      	bne.n	800364a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003644:	4b6f      	ldr	r3, [pc, #444]	; (8003804 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003646:	60bb      	str	r3, [r7, #8]
 8003648:	e009      	b.n	800365e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a6e      	ldr	r2, [pc, #440]	; (8003808 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d102      	bne.n	800365a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003654:	4b6d      	ldr	r3, [pc, #436]	; (800380c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003656:	60bb      	str	r3, [r7, #8]
 8003658:	e001      	b.n	800365e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800365a:	2300      	movs	r3, #0
 800365c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10b      	bne.n	800367c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003668:	f043 0220 	orr.w	r2, r3, #32
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e0be      	b.n	80037fa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff ffb0 	bl	80035e4 <LL_ADC_REG_IsConversionOngoing>
 8003684:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff ffaa 	bl	80035e4 <LL_ADC_REG_IsConversionOngoing>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	f040 80a0 	bne.w	80037d8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003698:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800369a:	2b00      	cmp	r3, #0
 800369c:	f040 809c 	bne.w	80037d8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036a8:	d004      	beq.n	80036b4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a55      	ldr	r2, [pc, #340]	; (8003804 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d101      	bne.n	80036b8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80036b4:	4b56      	ldr	r3, [pc, #344]	; (8003810 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80036b6:	e000      	b.n	80036ba <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80036b8:	4b56      	ldr	r3, [pc, #344]	; (8003814 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80036ba:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d04b      	beq.n	800375c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80036c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	6859      	ldr	r1, [r3, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036d6:	035b      	lsls	r3, r3, #13
 80036d8:	430b      	orrs	r3, r1
 80036da:	431a      	orrs	r2, r3
 80036dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036de:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036e8:	d004      	beq.n	80036f4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a45      	ldr	r2, [pc, #276]	; (8003804 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d10f      	bne.n	8003714 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80036f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80036f8:	f7ff ff61 	bl	80035be <LL_ADC_IsEnabled>
 80036fc:	4604      	mov	r4, r0
 80036fe:	4841      	ldr	r0, [pc, #260]	; (8003804 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003700:	f7ff ff5d 	bl	80035be <LL_ADC_IsEnabled>
 8003704:	4603      	mov	r3, r0
 8003706:	4323      	orrs	r3, r4
 8003708:	2b00      	cmp	r3, #0
 800370a:	bf0c      	ite	eq
 800370c:	2301      	moveq	r3, #1
 800370e:	2300      	movne	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	e012      	b.n	800373a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003714:	483c      	ldr	r0, [pc, #240]	; (8003808 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003716:	f7ff ff52 	bl	80035be <LL_ADC_IsEnabled>
 800371a:	4604      	mov	r4, r0
 800371c:	483b      	ldr	r0, [pc, #236]	; (800380c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800371e:	f7ff ff4e 	bl	80035be <LL_ADC_IsEnabled>
 8003722:	4603      	mov	r3, r0
 8003724:	431c      	orrs	r4, r3
 8003726:	483c      	ldr	r0, [pc, #240]	; (8003818 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003728:	f7ff ff49 	bl	80035be <LL_ADC_IsEnabled>
 800372c:	4603      	mov	r3, r0
 800372e:	4323      	orrs	r3, r4
 8003730:	2b00      	cmp	r3, #0
 8003732:	bf0c      	ite	eq
 8003734:	2301      	moveq	r3, #1
 8003736:	2300      	movne	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d056      	beq.n	80037ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800373e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003746:	f023 030f 	bic.w	r3, r3, #15
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	6811      	ldr	r1, [r2, #0]
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	6892      	ldr	r2, [r2, #8]
 8003752:	430a      	orrs	r2, r1
 8003754:	431a      	orrs	r2, r3
 8003756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003758:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800375a:	e047      	b.n	80037ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800375c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003764:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003766:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003770:	d004      	beq.n	800377c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a23      	ldr	r2, [pc, #140]	; (8003804 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d10f      	bne.n	800379c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800377c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003780:	f7ff ff1d 	bl	80035be <LL_ADC_IsEnabled>
 8003784:	4604      	mov	r4, r0
 8003786:	481f      	ldr	r0, [pc, #124]	; (8003804 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003788:	f7ff ff19 	bl	80035be <LL_ADC_IsEnabled>
 800378c:	4603      	mov	r3, r0
 800378e:	4323      	orrs	r3, r4
 8003790:	2b00      	cmp	r3, #0
 8003792:	bf0c      	ite	eq
 8003794:	2301      	moveq	r3, #1
 8003796:	2300      	movne	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	e012      	b.n	80037c2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800379c:	481a      	ldr	r0, [pc, #104]	; (8003808 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800379e:	f7ff ff0e 	bl	80035be <LL_ADC_IsEnabled>
 80037a2:	4604      	mov	r4, r0
 80037a4:	4819      	ldr	r0, [pc, #100]	; (800380c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80037a6:	f7ff ff0a 	bl	80035be <LL_ADC_IsEnabled>
 80037aa:	4603      	mov	r3, r0
 80037ac:	431c      	orrs	r4, r3
 80037ae:	481a      	ldr	r0, [pc, #104]	; (8003818 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80037b0:	f7ff ff05 	bl	80035be <LL_ADC_IsEnabled>
 80037b4:	4603      	mov	r3, r0
 80037b6:	4323      	orrs	r3, r4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	bf0c      	ite	eq
 80037bc:	2301      	moveq	r3, #1
 80037be:	2300      	movne	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d012      	beq.n	80037ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80037c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80037ce:	f023 030f 	bic.w	r3, r3, #15
 80037d2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80037d4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037d6:	e009      	b.n	80037ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037dc:	f043 0220 	orr.w	r2, r3, #32
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80037ea:	e000      	b.n	80037ee <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037ec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80037f6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3784      	adds	r7, #132	; 0x84
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd90      	pop	{r4, r7, pc}
 8003802:	bf00      	nop
 8003804:	50000100 	.word	0x50000100
 8003808:	50000400 	.word	0x50000400
 800380c:	50000500 	.word	0x50000500
 8003810:	50000300 	.word	0x50000300
 8003814:	50000700 	.word	0x50000700
 8003818:	50000600 	.word	0x50000600

0800381c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800382c:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <__NVIC_SetPriorityGrouping+0x44>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003838:	4013      	ands	r3, r2
 800383a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800384c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800384e:	4a04      	ldr	r2, [pc, #16]	; (8003860 <__NVIC_SetPriorityGrouping+0x44>)
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	60d3      	str	r3, [r2, #12]
}
 8003854:	bf00      	nop
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	e000ed00 	.word	0xe000ed00

08003864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003868:	4b04      	ldr	r3, [pc, #16]	; (800387c <__NVIC_GetPriorityGrouping+0x18>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	0a1b      	lsrs	r3, r3, #8
 800386e:	f003 0307 	and.w	r3, r3, #7
}
 8003872:	4618      	mov	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	e000ed00 	.word	0xe000ed00

08003880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800388a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388e:	2b00      	cmp	r3, #0
 8003890:	db0b      	blt.n	80038aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	f003 021f 	and.w	r2, r3, #31
 8003898:	4907      	ldr	r1, [pc, #28]	; (80038b8 <__NVIC_EnableIRQ+0x38>)
 800389a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389e:	095b      	lsrs	r3, r3, #5
 80038a0:	2001      	movs	r0, #1
 80038a2:	fa00 f202 	lsl.w	r2, r0, r2
 80038a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	e000e100 	.word	0xe000e100

080038bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	6039      	str	r1, [r7, #0]
 80038c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	db0a      	blt.n	80038e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	490c      	ldr	r1, [pc, #48]	; (8003908 <__NVIC_SetPriority+0x4c>)
 80038d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038da:	0112      	lsls	r2, r2, #4
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	440b      	add	r3, r1
 80038e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038e4:	e00a      	b.n	80038fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	4908      	ldr	r1, [pc, #32]	; (800390c <__NVIC_SetPriority+0x50>)
 80038ec:	79fb      	ldrb	r3, [r7, #7]
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	3b04      	subs	r3, #4
 80038f4:	0112      	lsls	r2, r2, #4
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	440b      	add	r3, r1
 80038fa:	761a      	strb	r2, [r3, #24]
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	e000e100 	.word	0xe000e100
 800390c:	e000ed00 	.word	0xe000ed00

08003910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003910:	b480      	push	{r7}
 8003912:	b089      	sub	sp, #36	; 0x24
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f1c3 0307 	rsb	r3, r3, #7
 800392a:	2b04      	cmp	r3, #4
 800392c:	bf28      	it	cs
 800392e:	2304      	movcs	r3, #4
 8003930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	3304      	adds	r3, #4
 8003936:	2b06      	cmp	r3, #6
 8003938:	d902      	bls.n	8003940 <NVIC_EncodePriority+0x30>
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	3b03      	subs	r3, #3
 800393e:	e000      	b.n	8003942 <NVIC_EncodePriority+0x32>
 8003940:	2300      	movs	r3, #0
 8003942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003944:	f04f 32ff 	mov.w	r2, #4294967295
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	43da      	mvns	r2, r3
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	401a      	ands	r2, r3
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003958:	f04f 31ff 	mov.w	r1, #4294967295
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	fa01 f303 	lsl.w	r3, r1, r3
 8003962:	43d9      	mvns	r1, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003968:	4313      	orrs	r3, r2
         );
}
 800396a:	4618      	mov	r0, r3
 800396c:	3724      	adds	r7, #36	; 0x24
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
	...

08003978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3b01      	subs	r3, #1
 8003984:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003988:	d301      	bcc.n	800398e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800398a:	2301      	movs	r3, #1
 800398c:	e00f      	b.n	80039ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800398e:	4a0a      	ldr	r2, [pc, #40]	; (80039b8 <SysTick_Config+0x40>)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3b01      	subs	r3, #1
 8003994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003996:	210f      	movs	r1, #15
 8003998:	f04f 30ff 	mov.w	r0, #4294967295
 800399c:	f7ff ff8e 	bl	80038bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039a0:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <SysTick_Config+0x40>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039a6:	4b04      	ldr	r3, [pc, #16]	; (80039b8 <SysTick_Config+0x40>)
 80039a8:	2207      	movs	r2, #7
 80039aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	e000e010 	.word	0xe000e010

080039bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7ff ff29 	bl	800381c <__NVIC_SetPriorityGrouping>
}
 80039ca:	bf00      	nop
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b086      	sub	sp, #24
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	4603      	mov	r3, r0
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039e0:	f7ff ff40 	bl	8003864 <__NVIC_GetPriorityGrouping>
 80039e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	68b9      	ldr	r1, [r7, #8]
 80039ea:	6978      	ldr	r0, [r7, #20]
 80039ec:	f7ff ff90 	bl	8003910 <NVIC_EncodePriority>
 80039f0:	4602      	mov	r2, r0
 80039f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039f6:	4611      	mov	r1, r2
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff ff5f 	bl	80038bc <__NVIC_SetPriority>
}
 80039fe:	bf00      	nop
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff ff33 	bl	8003880 <__NVIC_EnableIRQ>
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b082      	sub	sp, #8
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7ff ffa4 	bl	8003978 <SysTick_Config>
 8003a30:	4603      	mov	r3, r0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e014      	b.n	8003a76 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	791b      	ldrb	r3, [r3, #4]
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d105      	bne.n	8003a62 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7fd fec5 	bl	80017ec <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2202      	movs	r2, #2
 8003a66:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b082      	sub	sp, #8
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
 8003a86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	795b      	ldrb	r3, [r3, #5]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_DAC_Start+0x16>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e043      	b.n	8003b1c <HAL_DAC_Start+0x9e>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6819      	ldr	r1, [r3, #0]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	f003 0310 	and.w	r3, r3, #16
 8003aac:	2201      	movs	r2, #1
 8003aae:	409a      	lsls	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8003ab8:	2001      	movs	r0, #1
 8003aba:	f7fe f935 	bl	8001d28 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10f      	bne.n	8003ae4 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d11d      	bne.n	8003b0e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f042 0201 	orr.w	r2, r2, #1
 8003ae0:	605a      	str	r2, [r3, #4]
 8003ae2:	e014      	b.n	8003b0e <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	f003 0310 	and.w	r3, r3, #16
 8003af4:	2102      	movs	r1, #2
 8003af6:	fa01 f303 	lsl.w	r3, r1, r3
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d107      	bne.n	8003b0e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f042 0202 	orr.w	r2, r2, #2
 8003b0c:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
 8003b30:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d105      	bne.n	8003b54 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	3308      	adds	r3, #8
 8003b50:	617b      	str	r3, [r7, #20]
 8003b52:	e004      	b.n	8003b5e <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4413      	add	r3, r2
 8003b5a:	3314      	adds	r3, #20
 8003b5c:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	461a      	mov	r2, r3
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	371c      	adds	r7, #28
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08a      	sub	sp, #40	; 0x28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	795b      	ldrb	r3, [r3, #5]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d101      	bne.n	8003b8c <HAL_DAC_ConfigChannel+0x18>
 8003b88:	2302      	movs	r3, #2
 8003b8a:	e192      	b.n	8003eb2 <HAL_DAC_ConfigChannel+0x33e>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2202      	movs	r2, #2
 8003b96:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d174      	bne.n	8003c8a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003ba0:	f7fe f8b6 	bl	8001d10 <HAL_GetTick>
 8003ba4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d134      	bne.n	8003c16 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003bac:	e011      	b.n	8003bd2 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003bae:	f7fe f8af 	bl	8001d10 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d90a      	bls.n	8003bd2 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	f043 0208 	orr.w	r2, r3, #8
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2203      	movs	r2, #3
 8003bcc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e16f      	b.n	8003eb2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1e6      	bne.n	8003bae <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003be0:	2001      	movs	r0, #1
 8003be2:	f7fe f8a1 	bl	8001d28 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bee:	641a      	str	r2, [r3, #64]	; 0x40
 8003bf0:	e01e      	b.n	8003c30 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003bf2:	f7fe f88d 	bl	8001d10 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d90a      	bls.n	8003c16 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	f043 0208 	orr.w	r2, r3, #8
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2203      	movs	r2, #3
 8003c10:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e14d      	b.n	8003eb2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	dbe8      	blt.n	8003bf2 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003c20:	2001      	movs	r0, #1
 8003c22:	f7fe f881 	bl	8001d28 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c2e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f003 0310 	and.w	r3, r3, #16
 8003c3c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003c40:	fa01 f303 	lsl.w	r3, r1, r3
 8003c44:	43db      	mvns	r3, r3
 8003c46:	ea02 0103 	and.w	r1, r2, r3
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f003 0310 	and.w	r3, r3, #16
 8003c54:	409a      	lsls	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f003 0310 	and.w	r3, r3, #16
 8003c6a:	21ff      	movs	r1, #255	; 0xff
 8003c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c70:	43db      	mvns	r3, r3
 8003c72:	ea02 0103 	and.w	r1, r2, r3
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	409a      	lsls	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d11d      	bne.n	8003cce <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f003 0310 	and.w	r3, r3, #16
 8003ca0:	221f      	movs	r2, #31
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43db      	mvns	r3, r3
 8003ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003caa:	4013      	ands	r3, r2
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f003 0310 	and.w	r3, r3, #16
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ccc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f003 0310 	and.w	r3, r3, #16
 8003cdc:	2207      	movs	r2, #7
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	43db      	mvns	r3, r3
 8003ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d102      	bne.n	8003cf8 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	623b      	str	r3, [r7, #32]
 8003cf6:	e00f      	b.n	8003d18 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d102      	bne.n	8003d06 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003d00:	2301      	movs	r3, #1
 8003d02:	623b      	str	r3, [r7, #32]
 8003d04:	e008      	b.n	8003d18 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d102      	bne.n	8003d14 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	623b      	str	r3, [r7, #32]
 8003d12:	e001      	b.n	8003d18 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003d14:	2300      	movs	r3, #0
 8003d16:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	6a3a      	ldr	r2, [r7, #32]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f003 0310 	and.w	r3, r3, #16
 8003d2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43db      	mvns	r3, r3
 8003d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	791b      	ldrb	r3, [r3, #4]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d102      	bne.n	8003d4c <HAL_DAC_ConfigChannel+0x1d8>
 8003d46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d4a:	e000      	b.n	8003d4e <HAL_DAC_ConfigChannel+0x1da>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f003 0310 	and.w	r3, r3, #16
 8003d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	43db      	mvns	r3, r3
 8003d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d66:	4013      	ands	r3, r2
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	795b      	ldrb	r3, [r3, #5]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d102      	bne.n	8003d78 <HAL_DAC_ConfigChannel+0x204>
 8003d72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d76:	e000      	b.n	8003d7a <HAL_DAC_ConfigChannel+0x206>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003d86:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d114      	bne.n	8003dba <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003d90:	f002 fde2 	bl	8006958 <HAL_RCC_GetHCLKFreq>
 8003d94:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	4a48      	ldr	r2, [pc, #288]	; (8003ebc <HAL_DAC_ConfigChannel+0x348>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d904      	bls.n	8003da8 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003da4:	627b      	str	r3, [r7, #36]	; 0x24
 8003da6:	e00f      	b.n	8003dc8 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	4a45      	ldr	r2, [pc, #276]	; (8003ec0 <HAL_DAC_ConfigChannel+0x34c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d90a      	bls.n	8003dc6 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
 8003db8:	e006      	b.n	8003dc8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc4:	e000      	b.n	8003dc8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003dc6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f003 0310 	and.w	r3, r3, #16
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6819      	ldr	r1, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	43da      	mvns	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	400a      	ands	r2, r1
 8003dfe:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f003 0310 	and.w	r3, r3, #16
 8003e0e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	43db      	mvns	r3, r3
 8003e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f003 0310 	and.w	r3, r3, #16
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e32:	4313      	orrs	r3, r2
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e3c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6819      	ldr	r1, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f003 0310 	and.w	r3, r3, #16
 8003e4a:	22c0      	movs	r2, #192	; 0xc0
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	43da      	mvns	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	400a      	ands	r2, r1
 8003e58:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	089b      	lsrs	r3, r3, #2
 8003e60:	f003 030f 	and.w	r3, r3, #15
 8003e64:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	089b      	lsrs	r3, r3, #2
 8003e6c:	021b      	lsls	r3, r3, #8
 8003e6e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f003 0310 	and.w	r3, r3, #16
 8003e84:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003e88:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	ea02 0103 	and.w	r1, r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f003 0310 	and.w	r3, r3, #16
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	409a      	lsls	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3728      	adds	r7, #40	; 0x28
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	09896800 	.word	0x09896800
 8003ec0:	04c4b400 	.word	0x04c4b400

08003ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003ed2:	e15a      	b.n	800418a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	2101      	movs	r1, #1
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 814c 	beq.w	8004184 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f003 0303 	and.w	r3, r3, #3
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d005      	beq.n	8003f04 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d130      	bne.n	8003f66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	2203      	movs	r2, #3
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	43db      	mvns	r3, r3
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	68da      	ldr	r2, [r3, #12]
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	43db      	mvns	r3, r3
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4013      	ands	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	091b      	lsrs	r3, r3, #4
 8003f50:	f003 0201 	and.w	r2, r3, #1
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	2b03      	cmp	r3, #3
 8003f70:	d017      	beq.n	8003fa2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	2203      	movs	r2, #3
 8003f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f82:	43db      	mvns	r3, r3
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	4013      	ands	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	fa02 f303 	lsl.w	r3, r2, r3
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d123      	bne.n	8003ff6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	08da      	lsrs	r2, r3, #3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3208      	adds	r2, #8
 8003fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	220f      	movs	r2, #15
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	43db      	mvns	r3, r3
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	691a      	ldr	r2, [r3, #16]
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	08da      	lsrs	r2, r3, #3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3208      	adds	r2, #8
 8003ff0:	6939      	ldr	r1, [r7, #16]
 8003ff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	2203      	movs	r2, #3
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	43db      	mvns	r3, r3
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	4013      	ands	r3, r2
 800400c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f003 0203 	and.w	r2, r3, #3
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4313      	orrs	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 80a6 	beq.w	8004184 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004038:	4b5b      	ldr	r3, [pc, #364]	; (80041a8 <HAL_GPIO_Init+0x2e4>)
 800403a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800403c:	4a5a      	ldr	r2, [pc, #360]	; (80041a8 <HAL_GPIO_Init+0x2e4>)
 800403e:	f043 0301 	orr.w	r3, r3, #1
 8004042:	6613      	str	r3, [r2, #96]	; 0x60
 8004044:	4b58      	ldr	r3, [pc, #352]	; (80041a8 <HAL_GPIO_Init+0x2e4>)
 8004046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	60bb      	str	r3, [r7, #8]
 800404e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004050:	4a56      	ldr	r2, [pc, #344]	; (80041ac <HAL_GPIO_Init+0x2e8>)
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	089b      	lsrs	r3, r3, #2
 8004056:	3302      	adds	r3, #2
 8004058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800405c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f003 0303 	and.w	r3, r3, #3
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	220f      	movs	r2, #15
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	43db      	mvns	r3, r3
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	4013      	ands	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800407a:	d01f      	beq.n	80040bc <HAL_GPIO_Init+0x1f8>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a4c      	ldr	r2, [pc, #304]	; (80041b0 <HAL_GPIO_Init+0x2ec>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d019      	beq.n	80040b8 <HAL_GPIO_Init+0x1f4>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a4b      	ldr	r2, [pc, #300]	; (80041b4 <HAL_GPIO_Init+0x2f0>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d013      	beq.n	80040b4 <HAL_GPIO_Init+0x1f0>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a4a      	ldr	r2, [pc, #296]	; (80041b8 <HAL_GPIO_Init+0x2f4>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d00d      	beq.n	80040b0 <HAL_GPIO_Init+0x1ec>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a49      	ldr	r2, [pc, #292]	; (80041bc <HAL_GPIO_Init+0x2f8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d007      	beq.n	80040ac <HAL_GPIO_Init+0x1e8>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a48      	ldr	r2, [pc, #288]	; (80041c0 <HAL_GPIO_Init+0x2fc>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d101      	bne.n	80040a8 <HAL_GPIO_Init+0x1e4>
 80040a4:	2305      	movs	r3, #5
 80040a6:	e00a      	b.n	80040be <HAL_GPIO_Init+0x1fa>
 80040a8:	2306      	movs	r3, #6
 80040aa:	e008      	b.n	80040be <HAL_GPIO_Init+0x1fa>
 80040ac:	2304      	movs	r3, #4
 80040ae:	e006      	b.n	80040be <HAL_GPIO_Init+0x1fa>
 80040b0:	2303      	movs	r3, #3
 80040b2:	e004      	b.n	80040be <HAL_GPIO_Init+0x1fa>
 80040b4:	2302      	movs	r3, #2
 80040b6:	e002      	b.n	80040be <HAL_GPIO_Init+0x1fa>
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <HAL_GPIO_Init+0x1fa>
 80040bc:	2300      	movs	r3, #0
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	f002 0203 	and.w	r2, r2, #3
 80040c4:	0092      	lsls	r2, r2, #2
 80040c6:	4093      	lsls	r3, r2
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040ce:	4937      	ldr	r1, [pc, #220]	; (80041ac <HAL_GPIO_Init+0x2e8>)
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	089b      	lsrs	r3, r3, #2
 80040d4:	3302      	adds	r3, #2
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040dc:	4b39      	ldr	r3, [pc, #228]	; (80041c4 <HAL_GPIO_Init+0x300>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	43db      	mvns	r3, r3
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4013      	ands	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004100:	4a30      	ldr	r2, [pc, #192]	; (80041c4 <HAL_GPIO_Init+0x300>)
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004106:	4b2f      	ldr	r3, [pc, #188]	; (80041c4 <HAL_GPIO_Init+0x300>)
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	43db      	mvns	r3, r3
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	4013      	ands	r3, r2
 8004114:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4313      	orrs	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800412a:	4a26      	ldr	r2, [pc, #152]	; (80041c4 <HAL_GPIO_Init+0x300>)
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004130:	4b24      	ldr	r3, [pc, #144]	; (80041c4 <HAL_GPIO_Init+0x300>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	43db      	mvns	r3, r3
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4013      	ands	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004154:	4a1b      	ldr	r2, [pc, #108]	; (80041c4 <HAL_GPIO_Init+0x300>)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800415a:	4b1a      	ldr	r3, [pc, #104]	; (80041c4 <HAL_GPIO_Init+0x300>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	43db      	mvns	r3, r3
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	4013      	ands	r3, r2
 8004168:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800417e:	4a11      	ldr	r2, [pc, #68]	; (80041c4 <HAL_GPIO_Init+0x300>)
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	3301      	adds	r3, #1
 8004188:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	fa22 f303 	lsr.w	r3, r2, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	f47f ae9d 	bne.w	8003ed4 <HAL_GPIO_Init+0x10>
  }
}
 800419a:	bf00      	nop
 800419c:	bf00      	nop
 800419e:	371c      	adds	r7, #28
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	40021000 	.word	0x40021000
 80041ac:	40010000 	.word	0x40010000
 80041b0:	48000400 	.word	0x48000400
 80041b4:	48000800 	.word	0x48000800
 80041b8:	48000c00 	.word	0x48000c00
 80041bc:	48001000 	.word	0x48001000
 80041c0:	48001400 	.word	0x48001400
 80041c4:	40010400 	.word	0x40010400

080041c8 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041d0:	2300      	movs	r3, #0
 80041d2:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e0bb      	b.n	8004356 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b05      	cmp	r3, #5
 80041e8:	d101      	bne.n	80041ee <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e0b3      	b.n	8004356 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d101      	bne.n	80041fe <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e0ab      	b.n	8004356 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041fe:	4b58      	ldr	r3, [pc, #352]	; (8004360 <HAL_OPAMP_Init+0x198>)
 8004200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004202:	4a57      	ldr	r2, [pc, #348]	; (8004360 <HAL_OPAMP_Init+0x198>)
 8004204:	f043 0301 	orr.w	r3, r3, #1
 8004208:	6613      	str	r3, [r2, #96]	; 0x60
 800420a:	4b55      	ldr	r3, [pc, #340]	; (8004360 <HAL_OPAMP_Init+0x198>)
 800420c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	60bb      	str	r3, [r7, #8]
 8004214:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d103      	bne.n	800422a <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7fd fb5e 	bl	80018ec <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	2b40      	cmp	r3, #64	; 0x40
 8004236:	d003      	beq.n	8004240 <HAL_OPAMP_Init+0x78>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2b60      	cmp	r3, #96	; 0x60
 800423e:	d133      	bne.n	80042a8 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f023 0110 	bic.w	r1, r3, #16
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	4b41      	ldr	r3, [pc, #260]	; (8004364 <HAL_OPAMP_Init+0x19c>)
 800425e:	4013      	ands	r3, r2
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6851      	ldr	r1, [r2, #4]
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6892      	ldr	r2, [r2, #8]
 8004268:	4311      	orrs	r1, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6912      	ldr	r2, [r2, #16]
 800426e:	430a      	orrs	r2, r1
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	7d09      	ldrb	r1, [r1, #20]
 8004274:	2901      	cmp	r1, #1
 8004276:	d102      	bne.n	800427e <HAL_OPAMP_Init+0xb6>
 8004278:	f44f 7180 	mov.w	r1, #256	; 0x100
 800427c:	e000      	b.n	8004280 <HAL_OPAMP_Init+0xb8>
 800427e:	2100      	movs	r1, #0
 8004280:	4311      	orrs	r1, r2
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004286:	4311      	orrs	r1, r2
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800428c:	4311      	orrs	r1, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004292:	04d2      	lsls	r2, r2, #19
 8004294:	4311      	orrs	r1, r2
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800429a:	0612      	lsls	r2, r2, #24
 800429c:	4311      	orrs	r1, r2
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6812      	ldr	r2, [r2, #0]
 80042a2:	430b      	orrs	r3, r1
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	e035      	b.n	8004314 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f023 0110 	bic.w	r1, r3, #16
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	4b27      	ldr	r3, [pc, #156]	; (8004364 <HAL_OPAMP_Init+0x19c>)
 80042c6:	4013      	ands	r3, r2
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6851      	ldr	r1, [r2, #4]
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6892      	ldr	r2, [r2, #8]
 80042d0:	4311      	orrs	r1, r2
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	68d2      	ldr	r2, [r2, #12]
 80042d6:	4311      	orrs	r1, r2
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6912      	ldr	r2, [r2, #16]
 80042dc:	430a      	orrs	r2, r1
 80042de:	6879      	ldr	r1, [r7, #4]
 80042e0:	7d09      	ldrb	r1, [r1, #20]
 80042e2:	2901      	cmp	r1, #1
 80042e4:	d102      	bne.n	80042ec <HAL_OPAMP_Init+0x124>
 80042e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042ea:	e000      	b.n	80042ee <HAL_OPAMP_Init+0x126>
 80042ec:	2100      	movs	r1, #0
 80042ee:	4311      	orrs	r1, r2
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042f4:	4311      	orrs	r1, r2
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80042fa:	4311      	orrs	r1, r2
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004300:	04d2      	lsls	r2, r2, #19
 8004302:	4311      	orrs	r1, r2
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004308:	0612      	lsls	r2, r2, #24
 800430a:	4311      	orrs	r1, r2
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6812      	ldr	r2, [r2, #0]
 8004310:	430b      	orrs	r3, r1
 8004312:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	2b00      	cmp	r3, #0
 800431c:	db10      	blt.n	8004340 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	699a      	ldr	r2, [r3, #24]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	431a      	orrs	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	d103      	bne.n	8004354 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004354:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	40021000 	.word	0x40021000
 8004364:	e0003e11 	.word	0xe0003e11

08004368 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004370:	2300      	movs	r3, #0
 8004372:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d102      	bne.n	8004380 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	73fb      	strb	r3, [r7, #15]
 800437e:	e01d      	b.n	80043bc <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b05      	cmp	r3, #5
 800438a:	d102      	bne.n	8004392 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
 8004390:	e014      	b.n	80043bc <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b01      	cmp	r3, #1
 800439c:	d10c      	bne.n	80043b8 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0201 	orr.w	r2, r2, #1
 80043ac:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2204      	movs	r2, #4
 80043b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80043b6:	e001      	b.n	80043bc <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <HAL_OPAMP_Stop>:
  * @brief  Stop the opamp
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Stop(OPAMP_HandleTypeDef *hopamp)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b085      	sub	sp, #20
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  /* Check if OPAMP calibration ongoing */
  if (hopamp == NULL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d102      	bne.n	80043e2 <HAL_OPAMP_Stop+0x18>
  {
    status = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	73fb      	strb	r3, [r7, #15]
 80043e0:	e026      	b.n	8004430 <HAL_OPAMP_Stop+0x66>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b05      	cmp	r3, #5
 80043ec:	d102      	bne.n	80043f4 <HAL_OPAMP_Stop+0x2a>
  {
    status = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	73fb      	strb	r3, [r7, #15]
 80043f2:	e01d      	b.n	8004430 <HAL_OPAMP_Stop+0x66>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d102      	bne.n	8004406 <HAL_OPAMP_Stop+0x3c>
  {
    status = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	73fb      	strb	r3, [r7, #15]
 8004404:	e014      	b.n	8004430 <HAL_OPAMP_Stop+0x66>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_BUSY)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b04      	cmp	r3, #4
 8004410:	d10c      	bne.n	800442c <HAL_OPAMP_Stop+0x62>
    {
      /* Disable the selected opamp */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0201 	bic.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From  HAL_OPAMP_STATE_BUSY to HAL_OPAMP_STATE_READY*/
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800442a:	e001      	b.n	8004430 <HAL_OPAMP_Stop+0x66>
    }
    else
    {
      status = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8004430:	7bfb      	ldrb	r3, [r7, #15]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800443e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004440:	b08b      	sub	sp, #44	; 0x2c
 8004442:	af06      	add	r7, sp, #24
 8004444:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e0d7      	b.n	8004600 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d106      	bne.n	800446a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f007 f9fd 	bl	800b864 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2203      	movs	r2, #3
 800446e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f003 f8d3 	bl	8007622 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800447c:	2300      	movs	r3, #0
 800447e:	73fb      	strb	r3, [r7, #15]
 8004480:	e04c      	b.n	800451c <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004482:	7bfb      	ldrb	r3, [r7, #15]
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	1c5a      	adds	r2, r3, #1
 8004488:	4613      	mov	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	440b      	add	r3, r1
 8004492:	3301      	adds	r3, #1
 8004494:	2201      	movs	r2, #1
 8004496:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004498:	7bfb      	ldrb	r3, [r7, #15]
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	4613      	mov	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	440b      	add	r3, r1
 80044a8:	7bfa      	ldrb	r2, [r7, #15]
 80044aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80044ac:	7bfa      	ldrb	r2, [r7, #15]
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
 80044b0:	b298      	uxth	r0, r3
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	4613      	mov	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	440b      	add	r3, r1
 80044be:	3336      	adds	r3, #54	; 0x36
 80044c0:	4602      	mov	r2, r0
 80044c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80044c4:	7bfb      	ldrb	r3, [r7, #15]
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	1c5a      	adds	r2, r3, #1
 80044ca:	4613      	mov	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4413      	add	r3, r2
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	440b      	add	r3, r1
 80044d4:	3303      	adds	r3, #3
 80044d6:	2200      	movs	r2, #0
 80044d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80044da:	7bfa      	ldrb	r2, [r7, #15]
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	4613      	mov	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	440b      	add	r3, r1
 80044e8:	3338      	adds	r3, #56	; 0x38
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80044ee:	7bfa      	ldrb	r2, [r7, #15]
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	4613      	mov	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	440b      	add	r3, r1
 80044fc:	333c      	adds	r3, #60	; 0x3c
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004502:	7bfa      	ldrb	r2, [r7, #15]
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	4613      	mov	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	440b      	add	r3, r1
 8004510:	3340      	adds	r3, #64	; 0x40
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004516:	7bfb      	ldrb	r3, [r7, #15]
 8004518:	3301      	adds	r3, #1
 800451a:	73fb      	strb	r3, [r7, #15]
 800451c:	7bfa      	ldrb	r2, [r7, #15]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	429a      	cmp	r2, r3
 8004524:	d3ad      	bcc.n	8004482 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004526:	2300      	movs	r3, #0
 8004528:	73fb      	strb	r3, [r7, #15]
 800452a:	e044      	b.n	80045b6 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800452c:	7bfa      	ldrb	r2, [r7, #15]
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	4613      	mov	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	440b      	add	r3, r1
 800453a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800453e:	2200      	movs	r2, #0
 8004540:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004542:	7bfa      	ldrb	r2, [r7, #15]
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	4613      	mov	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	440b      	add	r3, r1
 8004550:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004554:	7bfa      	ldrb	r2, [r7, #15]
 8004556:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004558:	7bfa      	ldrb	r2, [r7, #15]
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	4613      	mov	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	440b      	add	r3, r1
 8004566:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800456a:	2200      	movs	r2, #0
 800456c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800456e:	7bfa      	ldrb	r2, [r7, #15]
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	440b      	add	r3, r1
 800457c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004584:	7bfa      	ldrb	r2, [r7, #15]
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	440b      	add	r3, r1
 8004592:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800459a:	7bfa      	ldrb	r2, [r7, #15]
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	4613      	mov	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	440b      	add	r3, r1
 80045a8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
 80045b2:	3301      	adds	r3, #1
 80045b4:	73fb      	strb	r3, [r7, #15]
 80045b6:	7bfa      	ldrb	r2, [r7, #15]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d3b5      	bcc.n	800452c <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	603b      	str	r3, [r7, #0]
 80045c6:	687e      	ldr	r6, [r7, #4]
 80045c8:	466d      	mov	r5, sp
 80045ca:	f106 0410 	add.w	r4, r6, #16
 80045ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	602b      	str	r3, [r5, #0]
 80045d6:	1d33      	adds	r3, r6, #4
 80045d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045da:	6838      	ldr	r0, [r7, #0]
 80045dc:	f003 f83c 	bl	8007658 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d102      	bne.n	80045fe <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f001 fc29 	bl	8005e50 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004608 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004616:	2b01      	cmp	r3, #1
 8004618:	d101      	bne.n	800461e <HAL_PCD_Start+0x16>
 800461a:	2302      	movs	r3, #2
 800461c:	e012      	b.n	8004644 <HAL_PCD_Start+0x3c>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	f002 ffe2 	bl	80075f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4618      	mov	r0, r3
 8004636:	f005 f9fb 	bl	8009a30 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4618      	mov	r0, r3
 800465a:	f005 fa00 	bl	8009a5e <USB_ReadInterrupts>
 800465e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fb26 	bl	8004cbc <PCD_EP_ISR_Handler>

    return;
 8004670:	e110      	b.n	8004894 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004678:	2b00      	cmp	r3, #0
 800467a:	d013      	beq.n	80046a4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004684:	b29a      	uxth	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800468e:	b292      	uxth	r2, r2
 8004690:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f007 f976 	bl	800b986 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800469a:	2100      	movs	r1, #0
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 f8fc 	bl	800489a <HAL_PCD_SetAddress>

    return;
 80046a2:	e0f7      	b.n	8004894 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00c      	beq.n	80046c8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046c0:	b292      	uxth	r2, r2
 80046c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80046c6:	e0e5      	b.n	8004894 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00c      	beq.n	80046ec <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046da:	b29a      	uxth	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046e4:	b292      	uxth	r2, r2
 80046e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80046ea:	e0d3      	b.n	8004894 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d034      	beq.n	8004760 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80046fe:	b29a      	uxth	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0204 	bic.w	r2, r2, #4
 8004708:	b292      	uxth	r2, r2
 800470a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004716:	b29a      	uxth	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0208 	bic.w	r2, r2, #8
 8004720:	b292      	uxth	r2, r2
 8004722:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800472c:	2b01      	cmp	r3, #1
 800472e:	d107      	bne.n	8004740 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004738:	2100      	movs	r1, #0
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f007 fb18 	bl	800bd70 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f007 f959 	bl	800b9f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800474e:	b29a      	uxth	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004758:	b292      	uxth	r2, r2
 800475a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800475e:	e099      	b.n	8004894 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004766:	2b00      	cmp	r3, #0
 8004768:	d027      	beq.n	80047ba <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004772:	b29a      	uxth	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f042 0208 	orr.w	r2, r2, #8
 800477c:	b292      	uxth	r2, r2
 800477e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800478a:	b29a      	uxth	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004794:	b292      	uxth	r2, r2
 8004796:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f042 0204 	orr.w	r2, r2, #4
 80047ac:	b292      	uxth	r2, r2
 80047ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f007 f906 	bl	800b9c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80047b8:	e06c      	b.n	8004894 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d040      	beq.n	8004846 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047d6:	b292      	uxth	r2, r2
 80047d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d12b      	bne.n	800483e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f042 0204 	orr.w	r2, r2, #4
 80047f8:	b292      	uxth	r2, r2
 80047fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004806:	b29a      	uxth	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f042 0208 	orr.w	r2, r2, #8
 8004810:	b292      	uxth	r2, r2
 8004812:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004826:	b29b      	uxth	r3, r3
 8004828:	089b      	lsrs	r3, r3, #2
 800482a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004834:	2101      	movs	r1, #1
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f007 fa9a 	bl	800bd70 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800483c:	e02a      	b.n	8004894 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f007 f8c0 	bl	800b9c4 <HAL_PCD_SuspendCallback>
    return;
 8004844:	e026      	b.n	8004894 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00f      	beq.n	8004870 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004858:	b29a      	uxth	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004862:	b292      	uxth	r2, r2
 8004864:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f007 f87e 	bl	800b96a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800486e:	e011      	b.n	8004894 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00c      	beq.n	8004894 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004882:	b29a      	uxth	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800488c:	b292      	uxth	r2, r2
 800488e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004892:	bf00      	nop
  }
}
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b082      	sub	sp, #8
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
 80048a2:	460b      	mov	r3, r1
 80048a4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d101      	bne.n	80048b4 <HAL_PCD_SetAddress+0x1a>
 80048b0:	2302      	movs	r3, #2
 80048b2:	e013      	b.n	80048dc <HAL_PCD_SetAddress+0x42>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	78fa      	ldrb	r2, [r7, #3]
 80048c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	78fa      	ldrb	r2, [r7, #3]
 80048ca:	4611      	mov	r1, r2
 80048cc:	4618      	mov	r0, r3
 80048ce:	f005 f89b 	bl	8009a08 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	4608      	mov	r0, r1
 80048ee:	4611      	mov	r1, r2
 80048f0:	461a      	mov	r2, r3
 80048f2:	4603      	mov	r3, r0
 80048f4:	70fb      	strb	r3, [r7, #3]
 80048f6:	460b      	mov	r3, r1
 80048f8:	803b      	strh	r3, [r7, #0]
 80048fa:	4613      	mov	r3, r2
 80048fc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004902:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004906:	2b00      	cmp	r3, #0
 8004908:	da0e      	bge.n	8004928 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800490a:	78fb      	ldrb	r3, [r7, #3]
 800490c:	f003 0307 	and.w	r3, r3, #7
 8004910:	1c5a      	adds	r2, r3, #1
 8004912:	4613      	mov	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	00db      	lsls	r3, r3, #3
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	4413      	add	r3, r2
 800491e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2201      	movs	r2, #1
 8004924:	705a      	strb	r2, [r3, #1]
 8004926:	e00e      	b.n	8004946 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004928:	78fb      	ldrb	r3, [r7, #3]
 800492a:	f003 0207 	and.w	r2, r3, #7
 800492e:	4613      	mov	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	4413      	add	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004946:	78fb      	ldrb	r3, [r7, #3]
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	b2da      	uxtb	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004952:	883a      	ldrh	r2, [r7, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	78ba      	ldrb	r2, [r7, #2]
 800495c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	785b      	ldrb	r3, [r3, #1]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d004      	beq.n	8004970 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	b29a      	uxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004970:	78bb      	ldrb	r3, [r7, #2]
 8004972:	2b02      	cmp	r3, #2
 8004974:	d102      	bne.n	800497c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004982:	2b01      	cmp	r3, #1
 8004984:	d101      	bne.n	800498a <HAL_PCD_EP_Open+0xa6>
 8004986:	2302      	movs	r3, #2
 8004988:	e00e      	b.n	80049a8 <HAL_PCD_EP_Open+0xc4>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68f9      	ldr	r1, [r7, #12]
 8004998:	4618      	mov	r0, r3
 800499a:	f002 fe7f 	bl	800769c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80049a6:	7afb      	ldrb	r3, [r7, #11]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	da0e      	bge.n	80049e2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049c4:	78fb      	ldrb	r3, [r7, #3]
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	4613      	mov	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	4413      	add	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2201      	movs	r2, #1
 80049de:	705a      	strb	r2, [r3, #1]
 80049e0:	e00e      	b.n	8004a00 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049e2:	78fb      	ldrb	r3, [r7, #3]
 80049e4:	f003 0207 	and.w	r2, r3, #7
 80049e8:	4613      	mov	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4413      	add	r3, r2
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	4413      	add	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004a00:	78fb      	ldrb	r3, [r7, #3]
 8004a02:	f003 0307 	and.w	r3, r3, #7
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d101      	bne.n	8004a1a <HAL_PCD_EP_Close+0x6a>
 8004a16:	2302      	movs	r3, #2
 8004a18:	e00e      	b.n	8004a38 <HAL_PCD_EP_Close+0x88>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68f9      	ldr	r1, [r7, #12]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f003 f9cb 	bl	8007dc4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	607a      	str	r2, [r7, #4]
 8004a4a:	603b      	str	r3, [r7, #0]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a50:	7afb      	ldrb	r3, [r7, #11]
 8004a52:	f003 0207 	and.w	r2, r3, #7
 8004a56:	4613      	mov	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	4413      	add	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	2200      	movs	r2, #0
 8004a78:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a80:	7afb      	ldrb	r3, [r7, #11]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a8c:	7afb      	ldrb	r3, [r7, #11]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d106      	bne.n	8004aa4 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6979      	ldr	r1, [r7, #20]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f003 fb7e 	bl	800819e <USB_EPStartXfer>
 8004aa2:	e005      	b.n	8004ab0 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6979      	ldr	r1, [r7, #20]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f003 fb77 	bl	800819e <USB_EPStartXfer>
  }

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3718      	adds	r7, #24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004ac6:	78fb      	ldrb	r3, [r7, #3]
 8004ac8:	f003 0207 	and.w	r2, r3, #7
 8004acc:	6879      	ldr	r1, [r7, #4]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	440b      	add	r3, r1
 8004ad8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004adc:	681b      	ldr	r3, [r3, #0]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b086      	sub	sp, #24
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	60f8      	str	r0, [r7, #12]
 8004af2:	607a      	str	r2, [r7, #4]
 8004af4:	603b      	str	r3, [r7, #0]
 8004af6:	460b      	mov	r3, r1
 8004af8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004afa:	7afb      	ldrb	r3, [r7, #11]
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	4613      	mov	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	2201      	movs	r2, #1
 8004b34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b36:	7afb      	ldrb	r3, [r7, #11]
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b42:	7afb      	ldrb	r3, [r7, #11]
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d106      	bne.n	8004b5a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6979      	ldr	r1, [r7, #20]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f003 fb23 	bl	800819e <USB_EPStartXfer>
 8004b58:	e005      	b.n	8004b66 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6979      	ldr	r1, [r7, #20]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f003 fb1c 	bl	800819e <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004b7c:	78fb      	ldrb	r3, [r7, #3]
 8004b7e:	f003 0207 	and.w	r2, r3, #7
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d901      	bls.n	8004b8e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e03e      	b.n	8004c0c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	da0e      	bge.n	8004bb4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b96:	78fb      	ldrb	r3, [r7, #3]
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	4413      	add	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	705a      	strb	r2, [r3, #1]
 8004bb2:	e00c      	b.n	8004bce <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004bb4:	78fa      	ldrb	r2, [r7, #3]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bd4:	78fb      	ldrb	r3, [r7, #3]
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	b2da      	uxtb	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d101      	bne.n	8004bee <HAL_PCD_EP_SetStall+0x7e>
 8004bea:	2302      	movs	r3, #2
 8004bec:	e00e      	b.n	8004c0c <HAL_PCD_EP_SetStall+0x9c>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68f9      	ldr	r1, [r7, #12]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f004 fe04 	bl	800980a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c20:	78fb      	ldrb	r3, [r7, #3]
 8004c22:	f003 020f 	and.w	r2, r3, #15
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d901      	bls.n	8004c32 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e040      	b.n	8004cb4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	da0e      	bge.n	8004c58 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c3a:	78fb      	ldrb	r3, [r7, #3]
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	4613      	mov	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4413      	add	r3, r2
 8004c48:	00db      	lsls	r3, r3, #3
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2201      	movs	r2, #1
 8004c54:	705a      	strb	r2, [r3, #1]
 8004c56:	e00e      	b.n	8004c76 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c58:	78fb      	ldrb	r3, [r7, #3]
 8004c5a:	f003 0207 	and.w	r2, r3, #7
 8004c5e:	4613      	mov	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	00db      	lsls	r3, r3, #3
 8004c66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c7c:	78fb      	ldrb	r3, [r7, #3]
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d101      	bne.n	8004c96 <HAL_PCD_EP_ClrStall+0x82>
 8004c92:	2302      	movs	r3, #2
 8004c94:	e00e      	b.n	8004cb4 <HAL_PCD_EP_ClrStall+0xa0>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68f9      	ldr	r1, [r7, #12]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f004 fe01 	bl	80098ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b096      	sub	sp, #88	; 0x58
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004cc4:	e39c      	b.n	8005400 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004cce:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004cd2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	f003 030f 	and.w	r3, r3, #15
 8004cdc:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8004ce0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f040 815e 	bne.w	8004fa6 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004cea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004cee:	f003 0310 	and.w	r3, r3, #16
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d150      	bne.n	8004d98 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	881b      	ldrh	r3, [r3, #0]
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d06:	81fb      	strh	r3, [r7, #14]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	89fb      	ldrh	r3, [r7, #14]
 8004d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	3328      	adds	r3, #40	; 0x28
 8004d1e:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	4413      	add	r3, r2
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6812      	ldr	r2, [r2, #0]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d3e:	881b      	ldrh	r3, [r3, #0]
 8004d40:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d46:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d4a:	695a      	ldr	r2, [r3, #20]
 8004d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	441a      	add	r2, r3
 8004d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d54:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004d56:	2100      	movs	r1, #0
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f006 fdec 	bl	800b936 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 834a 	beq.w	8005400 <PCD_EP_ISR_Handler+0x744>
 8004d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f040 8345 	bne.w	8005400 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	b292      	uxth	r2, r2
 8004d8a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004d96:	e333      	b.n	8005400 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004daa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004dae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d032      	beq.n	8004e1c <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	4413      	add	r3, r2
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	6812      	ldr	r2, [r2, #0]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ddc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6818      	ldr	r0, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dea:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dee:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	f004 fe86 	bl	8009b02 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004e02:	4013      	ands	r3, r2
 8004e04:	823b      	strh	r3, [r7, #16]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	8a3a      	ldrh	r2, [r7, #16]
 8004e0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e10:	b292      	uxth	r2, r2
 8004e12:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f006 fd61 	bl	800b8dc <HAL_PCD_SetupStageCallback>
 8004e1a:	e2f1      	b.n	8005400 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004e1c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f280 82ed 	bge.w	8005400 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004e32:	4013      	ands	r3, r2
 8004e34:	83fb      	strh	r3, [r7, #30]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	8bfa      	ldrh	r2, [r7, #30]
 8004e3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e40:	b292      	uxth	r2, r2
 8004e42:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	461a      	mov	r2, r3
 8004e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	4413      	add	r3, r2
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6812      	ldr	r2, [r2, #0]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e62:	881b      	ldrh	r3, [r3, #0]
 8004e64:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e6a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d019      	beq.n	8004ea8 <PCD_EP_ISR_Handler+0x1ec>
 8004e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d015      	beq.n	8004ea8 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6818      	ldr	r0, [r3, #0]
 8004e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e82:	6959      	ldr	r1, [r3, #20]
 8004e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e86:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e8a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	f004 fe38 	bl	8009b02 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e94:	695a      	ldr	r2, [r3, #20]
 8004e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	441a      	add	r2, r3
 8004e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e9e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f006 fd2c 	bl	800b900 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f040 82a3 	bne.w	8005400 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	61bb      	str	r3, [r7, #24]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	461a      	mov	r2, r3
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	4413      	add	r3, r2
 8004ed0:	61bb      	str	r3, [r7, #24]
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ed8:	617b      	str	r3, [r7, #20]
 8004eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	2b3e      	cmp	r3, #62	; 0x3e
 8004ee0:	d918      	bls.n	8004f14 <PCD_EP_ISR_Handler+0x258>
 8004ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	095b      	lsrs	r3, r3, #5
 8004ee8:	647b      	str	r3, [r7, #68]	; 0x44
 8004eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f003 031f 	and.w	r3, r3, #31
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d102      	bne.n	8004efc <PCD_EP_ISR_Handler+0x240>
 8004ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	647b      	str	r3, [r7, #68]	; 0x44
 8004efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	029b      	lsls	r3, r3, #10
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	801a      	strh	r2, [r3, #0]
 8004f12:	e029      	b.n	8004f68 <PCD_EP_ISR_Handler+0x2ac>
 8004f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d112      	bne.n	8004f42 <PCD_EP_ISR_Handler+0x286>
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	801a      	strh	r2, [r3, #0]
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	801a      	strh	r2, [r3, #0]
 8004f40:	e012      	b.n	8004f68 <PCD_EP_ISR_Handler+0x2ac>
 8004f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	085b      	lsrs	r3, r3, #1
 8004f48:	647b      	str	r3, [r7, #68]	; 0x44
 8004f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d002      	beq.n	8004f5c <PCD_EP_ISR_Handler+0x2a0>
 8004f56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f58:	3301      	adds	r3, #1
 8004f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8004f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	029b      	lsls	r3, r3, #10
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f78:	827b      	strh	r3, [r7, #18]
 8004f7a:	8a7b      	ldrh	r3, [r7, #18]
 8004f7c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004f80:	827b      	strh	r3, [r7, #18]
 8004f82:	8a7b      	ldrh	r3, [r7, #18]
 8004f84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f88:	827b      	strh	r3, [r7, #18]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	8a7b      	ldrh	r3, [r7, #18]
 8004f90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	8013      	strh	r3, [r2, #0]
 8004fa4:	e22c      	b.n	8005400 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	461a      	mov	r2, r3
 8004fac:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	881b      	ldrh	r3, [r3, #0]
 8004fb6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004fba:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f280 80f6 	bge.w	80051b0 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	881b      	ldrh	r3, [r3, #0]
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004fda:	4013      	ands	r3, r2
 8004fdc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004ff2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ff6:	b292      	uxth	r2, r2
 8004ff8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004ffa:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8004ffe:	4613      	mov	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	4413      	add	r3, r2
 800500e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005012:	7b1b      	ldrb	r3, [r3, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d123      	bne.n	8005060 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005020:	b29b      	uxth	r3, r3
 8005022:	461a      	mov	r2, r3
 8005024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	4413      	add	r3, r2
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6812      	ldr	r2, [r2, #0]
 8005030:	4413      	add	r3, r2
 8005032:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800503c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8005040:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 808e 	beq.w	8005166 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6818      	ldr	r0, [r3, #0]
 800504e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005050:	6959      	ldr	r1, [r3, #20]
 8005052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005054:	88da      	ldrh	r2, [r3, #6]
 8005056:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800505a:	f004 fd52 	bl	8009b02 <USB_ReadPMA>
 800505e:	e082      	b.n	8005166 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005062:	78db      	ldrb	r3, [r3, #3]
 8005064:	2b02      	cmp	r3, #2
 8005066:	d10a      	bne.n	800507e <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005068:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800506c:	461a      	mov	r2, r3
 800506e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f9d3 	bl	800541c <HAL_PCD_EP_DB_Receive>
 8005076:	4603      	mov	r3, r0
 8005078:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800507c:	e073      	b.n	8005166 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	461a      	mov	r2, r3
 8005084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4413      	add	r3, r2
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	b29b      	uxth	r3, r3
 8005090:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005098:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	461a      	mov	r2, r3
 80050a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	441a      	add	r2, r3
 80050aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80050ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050be:	b29b      	uxth	r3, r3
 80050c0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	461a      	mov	r2, r3
 80050c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	881b      	ldrh	r3, [r3, #0]
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d022      	beq.n	8005122 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	461a      	mov	r2, r3
 80050e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	4413      	add	r3, r2
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6812      	ldr	r2, [r2, #0]
 80050f4:	4413      	add	r3, r2
 80050f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005100:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8005104:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005108:	2b00      	cmp	r3, #0
 800510a:	d02c      	beq.n	8005166 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6818      	ldr	r0, [r3, #0]
 8005110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005112:	6959      	ldr	r1, [r3, #20]
 8005114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005116:	891a      	ldrh	r2, [r3, #8]
 8005118:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800511c:	f004 fcf1 	bl	8009b02 <USB_ReadPMA>
 8005120:	e021      	b.n	8005166 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800512a:	b29b      	uxth	r3, r3
 800512c:	461a      	mov	r2, r3
 800512e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	4413      	add	r3, r2
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6812      	ldr	r2, [r2, #0]
 800513a:	4413      	add	r3, r2
 800513c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005140:	881b      	ldrh	r3, [r3, #0]
 8005142:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005146:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800514a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800514e:	2b00      	cmp	r3, #0
 8005150:	d009      	beq.n	8005166 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6818      	ldr	r0, [r3, #0]
 8005156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005158:	6959      	ldr	r1, [r3, #20]
 800515a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800515c:	895a      	ldrh	r2, [r3, #10]
 800515e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005162:	f004 fcce 	bl	8009b02 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005168:	69da      	ldr	r2, [r3, #28]
 800516a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800516e:	441a      	add	r2, r3
 8005170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005172:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005176:	695a      	ldr	r2, [r3, #20]
 8005178:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800517c:	441a      	add	r2, r3
 800517e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005180:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d005      	beq.n	8005196 <PCD_EP_ISR_Handler+0x4da>
 800518a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800518e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	429a      	cmp	r2, r3
 8005194:	d206      	bcs.n	80051a4 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	4619      	mov	r1, r3
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f006 fbaf 	bl	800b900 <HAL_PCD_DataOutStageCallback>
 80051a2:	e005      	b.n	80051b0 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80051aa:	4618      	mov	r0, r3
 80051ac:	f002 fff7 	bl	800819e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80051b0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80051b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 8121 	beq.w	8005400 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 80051be:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80051c2:	1c5a      	adds	r2, r3, #1
 80051c4:	4613      	mov	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4413      	add	r3, r2
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	4413      	add	r3, r2
 80051d0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	461a      	mov	r2, r3
 80051d8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	881b      	ldrh	r3, [r3, #0]
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80051e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	461a      	mov	r2, r3
 80051f6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	441a      	add	r2, r3
 80051fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800520a:	b29b      	uxth	r3, r3
 800520c:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800520e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005210:	78db      	ldrb	r3, [r3, #3]
 8005212:	2b02      	cmp	r3, #2
 8005214:	f000 80a2 	beq.w	800535c <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8005218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800521a:	2200      	movs	r2, #0
 800521c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800521e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005220:	7b1b      	ldrb	r3, [r3, #12]
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 8093 	beq.w	800534e <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005228:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800522c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005230:	2b00      	cmp	r3, #0
 8005232:	d046      	beq.n	80052c2 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005236:	785b      	ldrb	r3, [r3, #1]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d126      	bne.n	800528a <PCD_EP_ISR_Handler+0x5ce>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	627b      	str	r3, [r7, #36]	; 0x24
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800524a:	b29b      	uxth	r3, r3
 800524c:	461a      	mov	r2, r3
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	4413      	add	r3, r2
 8005252:	627b      	str	r3, [r7, #36]	; 0x24
 8005254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	00da      	lsls	r2, r3, #3
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	4413      	add	r3, r2
 800525e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005262:	623b      	str	r3, [r7, #32]
 8005264:	6a3b      	ldr	r3, [r7, #32]
 8005266:	881b      	ldrh	r3, [r3, #0]
 8005268:	b29b      	uxth	r3, r3
 800526a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800526e:	b29a      	uxth	r2, r3
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	801a      	strh	r2, [r3, #0]
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	881b      	ldrh	r3, [r3, #0]
 8005278:	b29b      	uxth	r3, r3
 800527a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800527e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005282:	b29a      	uxth	r2, r3
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	801a      	strh	r2, [r3, #0]
 8005288:	e061      	b.n	800534e <PCD_EP_ISR_Handler+0x692>
 800528a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800528c:	785b      	ldrb	r3, [r3, #1]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d15d      	bne.n	800534e <PCD_EP_ISR_Handler+0x692>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	461a      	mov	r2, r3
 80052a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a6:	4413      	add	r3, r2
 80052a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	00da      	lsls	r2, r3, #3
 80052b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b2:	4413      	add	r3, r2
 80052b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80052b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052bc:	2200      	movs	r2, #0
 80052be:	801a      	strh	r2, [r3, #0]
 80052c0:	e045      	b.n	800534e <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ca:	785b      	ldrb	r3, [r3, #1]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d126      	bne.n	800531e <PCD_EP_ISR_Handler+0x662>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	637b      	str	r3, [r7, #52]	; 0x34
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052de:	b29b      	uxth	r3, r3
 80052e0:	461a      	mov	r2, r3
 80052e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e4:	4413      	add	r3, r2
 80052e6:	637b      	str	r3, [r7, #52]	; 0x34
 80052e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	00da      	lsls	r2, r3, #3
 80052ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f0:	4413      	add	r3, r2
 80052f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052f6:	633b      	str	r3, [r7, #48]	; 0x30
 80052f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005302:	b29a      	uxth	r2, r3
 8005304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005306:	801a      	strh	r2, [r3, #0]
 8005308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530a:	881b      	ldrh	r3, [r3, #0]
 800530c:	b29b      	uxth	r3, r3
 800530e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005316:	b29a      	uxth	r2, r3
 8005318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531a:	801a      	strh	r2, [r3, #0]
 800531c:	e017      	b.n	800534e <PCD_EP_ISR_Handler+0x692>
 800531e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005320:	785b      	ldrb	r3, [r3, #1]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d113      	bne.n	800534e <PCD_EP_ISR_Handler+0x692>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800532e:	b29b      	uxth	r3, r3
 8005330:	461a      	mov	r2, r3
 8005332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005334:	4413      	add	r3, r2
 8005336:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	00da      	lsls	r2, r3, #3
 800533e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005340:	4413      	add	r3, r2
 8005342:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005346:	63bb      	str	r3, [r7, #56]	; 0x38
 8005348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534a:	2200      	movs	r2, #0
 800534c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800534e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	4619      	mov	r1, r3
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f006 faee 	bl	800b936 <HAL_PCD_DataInStageCallback>
 800535a:	e051      	b.n	8005400 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800535c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005364:	2b00      	cmp	r3, #0
 8005366:	d144      	bne.n	80053f2 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005370:	b29b      	uxth	r3, r3
 8005372:	461a      	mov	r2, r3
 8005374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	00db      	lsls	r3, r3, #3
 800537a:	4413      	add	r3, r2
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	6812      	ldr	r2, [r2, #0]
 8005380:	4413      	add	r3, r2
 8005382:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800538c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8005390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005392:	699a      	ldr	r2, [r3, #24]
 8005394:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005398:	429a      	cmp	r2, r3
 800539a:	d907      	bls.n	80053ac <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800539c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800539e:	699a      	ldr	r2, [r3, #24]
 80053a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80053a4:	1ad2      	subs	r2, r2, r3
 80053a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a8:	619a      	str	r2, [r3, #24]
 80053aa:	e002      	b.n	80053b2 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 80053ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ae:	2200      	movs	r2, #0
 80053b0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80053b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d106      	bne.n	80053c8 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80053ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	4619      	mov	r1, r3
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f006 fab8 	bl	800b936 <HAL_PCD_DataInStageCallback>
 80053c6:	e01b      	b.n	8005400 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80053c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ca:	695a      	ldr	r2, [r3, #20]
 80053cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80053d0:	441a      	add	r2, r3
 80053d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053d4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80053d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053d8:	69da      	ldr	r2, [r3, #28]
 80053da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80053de:	441a      	add	r2, r3
 80053e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053e2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80053ea:	4618      	mov	r0, r3
 80053ec:	f002 fed7 	bl	800819e <USB_EPStartXfer>
 80053f0:	e006      	b.n	8005400 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80053f2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80053f6:	461a      	mov	r2, r3
 80053f8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f917 	bl	800562e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005408:	b29b      	uxth	r3, r3
 800540a:	b21b      	sxth	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	f6ff ac5a 	blt.w	8004cc6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3758      	adds	r7, #88	; 0x58
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b088      	sub	sp, #32
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	4613      	mov	r3, r2
 8005428:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800542a:	88fb      	ldrh	r3, [r7, #6]
 800542c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d07c      	beq.n	800552e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800543c:	b29b      	uxth	r3, r3
 800543e:	461a      	mov	r2, r3
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	00db      	lsls	r3, r3, #3
 8005446:	4413      	add	r3, r2
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	6812      	ldr	r2, [r2, #0]
 800544c:	4413      	add	r3, r2
 800544e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005458:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	699a      	ldr	r2, [r3, #24]
 800545e:	8b7b      	ldrh	r3, [r7, #26]
 8005460:	429a      	cmp	r2, r3
 8005462:	d306      	bcc.n	8005472 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	699a      	ldr	r2, [r3, #24]
 8005468:	8b7b      	ldrh	r3, [r7, #26]
 800546a:	1ad2      	subs	r2, r2, r3
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	619a      	str	r2, [r3, #24]
 8005470:	e002      	b.n	8005478 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2200      	movs	r2, #0
 8005476:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d123      	bne.n	80054c8 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	461a      	mov	r2, r3
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	b29b      	uxth	r3, r3
 8005492:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549a:	833b      	strh	r3, [r7, #24]
 800549c:	8b3b      	ldrh	r3, [r7, #24]
 800549e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80054a2:	833b      	strh	r3, [r7, #24]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	461a      	mov	r2, r3
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	441a      	add	r2, r3
 80054b2:	8b3b      	ldrh	r3, [r7, #24]
 80054b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80054c8:	88fb      	ldrh	r3, [r7, #6]
 80054ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d01f      	beq.n	8005512 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	461a      	mov	r2, r3
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4413      	add	r3, r2
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ec:	82fb      	strh	r3, [r7, #22]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	461a      	mov	r2, r3
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	441a      	add	r2, r3
 80054fc:	8afb      	ldrh	r3, [r7, #22]
 80054fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005502:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800550a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800550e:	b29b      	uxth	r3, r3
 8005510:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005512:	8b7b      	ldrh	r3, [r7, #26]
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 8085 	beq.w	8005624 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6818      	ldr	r0, [r3, #0]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	6959      	ldr	r1, [r3, #20]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	891a      	ldrh	r2, [r3, #8]
 8005526:	8b7b      	ldrh	r3, [r7, #26]
 8005528:	f004 faeb 	bl	8009b02 <USB_ReadPMA>
 800552c:	e07a      	b.n	8005624 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005536:	b29b      	uxth	r3, r3
 8005538:	461a      	mov	r2, r3
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	4413      	add	r3, r2
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	6812      	ldr	r2, [r2, #0]
 8005546:	4413      	add	r3, r2
 8005548:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005552:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	699a      	ldr	r2, [r3, #24]
 8005558:	8b7b      	ldrh	r3, [r7, #26]
 800555a:	429a      	cmp	r2, r3
 800555c:	d306      	bcc.n	800556c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	699a      	ldr	r2, [r3, #24]
 8005562:	8b7b      	ldrh	r3, [r7, #26]
 8005564:	1ad2      	subs	r2, r2, r3
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	619a      	str	r2, [r3, #24]
 800556a:	e002      	b.n	8005572 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2200      	movs	r2, #0
 8005570:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d123      	bne.n	80055c2 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	461a      	mov	r2, r3
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	b29b      	uxth	r3, r3
 800558c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005594:	83fb      	strh	r3, [r7, #30]
 8005596:	8bfb      	ldrh	r3, [r7, #30]
 8005598:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800559c:	83fb      	strh	r3, [r7, #30]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	461a      	mov	r2, r3
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	441a      	add	r2, r3
 80055ac:	8bfb      	ldrh	r3, [r7, #30]
 80055ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055be:	b29b      	uxth	r3, r3
 80055c0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80055c2:	88fb      	ldrh	r3, [r7, #6]
 80055c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d11f      	bne.n	800560c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	461a      	mov	r2, r3
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	b29b      	uxth	r3, r3
 80055de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e6:	83bb      	strh	r3, [r7, #28]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	461a      	mov	r2, r3
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	441a      	add	r2, r3
 80055f6:	8bbb      	ldrh	r3, [r7, #28]
 80055f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005604:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005608:	b29b      	uxth	r3, r3
 800560a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800560c:	8b7b      	ldrh	r3, [r7, #26]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d008      	beq.n	8005624 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6818      	ldr	r0, [r3, #0]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	6959      	ldr	r1, [r3, #20]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	895a      	ldrh	r2, [r3, #10]
 800561e:	8b7b      	ldrh	r3, [r7, #26]
 8005620:	f004 fa6f 	bl	8009b02 <USB_ReadPMA>
    }
  }

  return count;
 8005624:	8b7b      	ldrh	r3, [r7, #26]
}
 8005626:	4618      	mov	r0, r3
 8005628:	3720      	adds	r7, #32
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b0a2      	sub	sp, #136	; 0x88
 8005632:	af00      	add	r7, sp, #0
 8005634:	60f8      	str	r0, [r7, #12]
 8005636:	60b9      	str	r1, [r7, #8]
 8005638:	4613      	mov	r3, r2
 800563a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800563c:	88fb      	ldrh	r3, [r7, #6]
 800563e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 81c5 	beq.w	80059d2 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005650:	b29b      	uxth	r3, r3
 8005652:	461a      	mov	r2, r3
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	4413      	add	r3, r2
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	6812      	ldr	r2, [r2, #0]
 8005660:	4413      	add	r3, r2
 8005662:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005666:	881b      	ldrh	r3, [r3, #0]
 8005668:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800566c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	699a      	ldr	r2, [r3, #24]
 8005674:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005678:	429a      	cmp	r2, r3
 800567a:	d907      	bls.n	800568c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	699a      	ldr	r2, [r3, #24]
 8005680:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005684:	1ad2      	subs	r2, r2, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	619a      	str	r2, [r3, #24]
 800568a:	e002      	b.n	8005692 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	2200      	movs	r2, #0
 8005690:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	2b00      	cmp	r3, #0
 8005698:	f040 80b9 	bne.w	800580e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	785b      	ldrb	r3, [r3, #1]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d126      	bne.n	80056f2 <HAL_PCD_EP_DB_Transmit+0xc4>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	461a      	mov	r2, r3
 80056b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b8:	4413      	add	r3, r2
 80056ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	00da      	lsls	r2, r3, #3
 80056c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c4:	4413      	add	r3, r2
 80056c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80056ca:	627b      	str	r3, [r7, #36]	; 0x24
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	801a      	strh	r2, [r3, #0]
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	801a      	strh	r2, [r3, #0]
 80056f0:	e01a      	b.n	8005728 <HAL_PCD_EP_DB_Transmit+0xfa>
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	785b      	ldrb	r3, [r3, #1]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d116      	bne.n	8005728 <HAL_PCD_EP_DB_Transmit+0xfa>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	633b      	str	r3, [r7, #48]	; 0x30
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005708:	b29b      	uxth	r3, r3
 800570a:	461a      	mov	r2, r3
 800570c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570e:	4413      	add	r3, r2
 8005710:	633b      	str	r3, [r7, #48]	; 0x30
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	00da      	lsls	r2, r3, #3
 8005718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571a:	4413      	add	r3, r2
 800571c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005724:	2200      	movs	r2, #0
 8005726:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	623b      	str	r3, [r7, #32]
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	785b      	ldrb	r3, [r3, #1]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d126      	bne.n	8005784 <HAL_PCD_EP_DB_Transmit+0x156>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	61bb      	str	r3, [r7, #24]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005744:	b29b      	uxth	r3, r3
 8005746:	461a      	mov	r2, r3
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	4413      	add	r3, r2
 800574c:	61bb      	str	r3, [r7, #24]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	00da      	lsls	r2, r3, #3
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	4413      	add	r3, r2
 8005758:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800575c:	617b      	str	r3, [r7, #20]
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	b29b      	uxth	r3, r3
 8005764:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005768:	b29a      	uxth	r2, r3
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	801a      	strh	r2, [r3, #0]
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	b29b      	uxth	r3, r3
 8005774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800577c:	b29a      	uxth	r2, r3
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	801a      	strh	r2, [r3, #0]
 8005782:	e017      	b.n	80057b4 <HAL_PCD_EP_DB_Transmit+0x186>
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	785b      	ldrb	r3, [r3, #1]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d113      	bne.n	80057b4 <HAL_PCD_EP_DB_Transmit+0x186>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005794:	b29b      	uxth	r3, r3
 8005796:	461a      	mov	r2, r3
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	4413      	add	r3, r2
 800579c:	623b      	str	r3, [r7, #32]
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	00da      	lsls	r2, r3, #3
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	4413      	add	r3, r2
 80057a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057ac:	61fb      	str	r3, [r7, #28]
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	2200      	movs	r2, #0
 80057b2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	4619      	mov	r1, r3
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f006 f8bb 	bl	800b936 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80057c0:	88fb      	ldrh	r3, [r7, #6]
 80057c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f000 82d2 	beq.w	8005d70 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	461a      	mov	r2, r3
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	b29b      	uxth	r3, r3
 80057de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e6:	827b      	strh	r3, [r7, #18]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	461a      	mov	r2, r3
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	441a      	add	r2, r3
 80057f6:	8a7b      	ldrh	r3, [r7, #18]
 80057f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005800:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005808:	b29b      	uxth	r3, r3
 800580a:	8013      	strh	r3, [r2, #0]
 800580c:	e2b0      	b.n	8005d70 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800580e:	88fb      	ldrh	r3, [r7, #6]
 8005810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d021      	beq.n	800585c <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	461a      	mov	r2, r3
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	881b      	ldrh	r3, [r3, #0]
 8005828:	b29b      	uxth	r3, r3
 800582a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800582e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005832:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	461a      	mov	r2, r3
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	441a      	add	r2, r3
 8005844:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005848:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800584c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005850:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005858:	b29b      	uxth	r3, r3
 800585a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005862:	2b01      	cmp	r3, #1
 8005864:	f040 8284 	bne.w	8005d70 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	695a      	ldr	r2, [r3, #20]
 800586c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005870:	441a      	add	r2, r3
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	69da      	ldr	r2, [r3, #28]
 800587a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800587e:	441a      	add	r2, r3
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	6a1a      	ldr	r2, [r3, #32]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	429a      	cmp	r2, r3
 800588e:	d309      	bcc.n	80058a4 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	6a1a      	ldr	r2, [r3, #32]
 800589a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800589c:	1ad2      	subs	r2, r2, r3
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	621a      	str	r2, [r3, #32]
 80058a2:	e015      	b.n	80058d0 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d107      	bne.n	80058bc <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80058ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80058b0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80058ba:	e009      	b.n	80058d0 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	2200      	movs	r2, #0
 80058ce:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	785b      	ldrb	r3, [r3, #1]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d155      	bne.n	8005984 <HAL_PCD_EP_DB_Transmit+0x356>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	461a      	mov	r2, r3
 80058ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ec:	4413      	add	r3, r2
 80058ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	00da      	lsls	r2, r3, #3
 80058f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f8:	4413      	add	r3, r2
 80058fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80058fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005902:	2b3e      	cmp	r3, #62	; 0x3e
 8005904:	d916      	bls.n	8005934 <HAL_PCD_EP_DB_Transmit+0x306>
 8005906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005908:	095b      	lsrs	r3, r3, #5
 800590a:	64bb      	str	r3, [r7, #72]	; 0x48
 800590c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800590e:	f003 031f 	and.w	r3, r3, #31
 8005912:	2b00      	cmp	r3, #0
 8005914:	d102      	bne.n	800591c <HAL_PCD_EP_DB_Transmit+0x2ee>
 8005916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005918:	3b01      	subs	r3, #1
 800591a:	64bb      	str	r3, [r7, #72]	; 0x48
 800591c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800591e:	b29b      	uxth	r3, r3
 8005920:	029b      	lsls	r3, r3, #10
 8005922:	b29b      	uxth	r3, r3
 8005924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800592c:	b29a      	uxth	r2, r3
 800592e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005930:	801a      	strh	r2, [r3, #0]
 8005932:	e043      	b.n	80059bc <HAL_PCD_EP_DB_Transmit+0x38e>
 8005934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005936:	2b00      	cmp	r3, #0
 8005938:	d112      	bne.n	8005960 <HAL_PCD_EP_DB_Transmit+0x332>
 800593a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	b29b      	uxth	r3, r3
 8005940:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005944:	b29a      	uxth	r2, r3
 8005946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005948:	801a      	strh	r2, [r3, #0]
 800594a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	b29b      	uxth	r3, r3
 8005950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005958:	b29a      	uxth	r2, r3
 800595a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595c:	801a      	strh	r2, [r3, #0]
 800595e:	e02d      	b.n	80059bc <HAL_PCD_EP_DB_Transmit+0x38e>
 8005960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005962:	085b      	lsrs	r3, r3, #1
 8005964:	64bb      	str	r3, [r7, #72]	; 0x48
 8005966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b00      	cmp	r3, #0
 800596e:	d002      	beq.n	8005976 <HAL_PCD_EP_DB_Transmit+0x348>
 8005970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005972:	3301      	adds	r3, #1
 8005974:	64bb      	str	r3, [r7, #72]	; 0x48
 8005976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005978:	b29b      	uxth	r3, r3
 800597a:	029b      	lsls	r3, r3, #10
 800597c:	b29a      	uxth	r2, r3
 800597e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005980:	801a      	strh	r2, [r3, #0]
 8005982:	e01b      	b.n	80059bc <HAL_PCD_EP_DB_Transmit+0x38e>
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	785b      	ldrb	r3, [r3, #1]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d117      	bne.n	80059bc <HAL_PCD_EP_DB_Transmit+0x38e>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	643b      	str	r3, [r7, #64]	; 0x40
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800599a:	b29b      	uxth	r3, r3
 800599c:	461a      	mov	r2, r3
 800599e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059a0:	4413      	add	r3, r2
 80059a2:	643b      	str	r3, [r7, #64]	; 0x40
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	00da      	lsls	r2, r3, #3
 80059aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ac:	4413      	add	r3, r2
 80059ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ba:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6818      	ldr	r0, [r3, #0]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	6959      	ldr	r1, [r3, #20]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	891a      	ldrh	r2, [r3, #8]
 80059c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	f004 f857 	bl	8009a7e <USB_WritePMA>
 80059d0:	e1ce      	b.n	8005d70 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059da:	b29b      	uxth	r3, r3
 80059dc:	461a      	mov	r2, r3
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	4413      	add	r3, r2
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	6812      	ldr	r2, [r2, #0]
 80059ea:	4413      	add	r3, r2
 80059ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80059f0:	881b      	ldrh	r3, [r3, #0]
 80059f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	699a      	ldr	r2, [r3, #24]
 80059fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d307      	bcc.n	8005a16 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	699a      	ldr	r2, [r3, #24]
 8005a0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005a0e:	1ad2      	subs	r2, r2, r3
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	619a      	str	r2, [r3, #24]
 8005a14:	e002      	b.n	8005a1c <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f040 80c4 	bne.w	8005bae <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	785b      	ldrb	r3, [r3, #1]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d126      	bne.n	8005a7c <HAL_PCD_EP_DB_Transmit+0x44e>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	461a      	mov	r2, r3
 8005a40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a42:	4413      	add	r3, r2
 8005a44:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	00da      	lsls	r2, r3, #3
 8005a4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a4e:	4413      	add	r3, r2
 8005a50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a54:	667b      	str	r3, [r7, #100]	; 0x64
 8005a56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a58:	881b      	ldrh	r3, [r3, #0]
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a64:	801a      	strh	r2, [r3, #0]
 8005a66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a78:	801a      	strh	r2, [r3, #0]
 8005a7a:	e01a      	b.n	8005ab2 <HAL_PCD_EP_DB_Transmit+0x484>
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	785b      	ldrb	r3, [r3, #1]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d116      	bne.n	8005ab2 <HAL_PCD_EP_DB_Transmit+0x484>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	673b      	str	r3, [r7, #112]	; 0x70
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	461a      	mov	r2, r3
 8005a96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a98:	4413      	add	r3, r2
 8005a9a:	673b      	str	r3, [r7, #112]	; 0x70
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	00da      	lsls	r2, r3, #3
 8005aa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005aaa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aae:	2200      	movs	r2, #0
 8005ab0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	785b      	ldrb	r3, [r3, #1]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d12f      	bne.n	8005b20 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ad8:	4413      	add	r3, r2
 8005ada:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	00da      	lsls	r2, r3, #3
 8005ae4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ae8:	4413      	add	r3, r2
 8005aea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005aee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005af2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b04:	801a      	strh	r2, [r3, #0]
 8005b06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b1c:	801a      	strh	r2, [r3, #0]
 8005b1e:	e017      	b.n	8005b50 <HAL_PCD_EP_DB_Transmit+0x522>
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	785b      	ldrb	r3, [r3, #1]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d113      	bne.n	8005b50 <HAL_PCD_EP_DB_Transmit+0x522>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	461a      	mov	r2, r3
 8005b34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b36:	4413      	add	r3, r2
 8005b38:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	00da      	lsls	r2, r3, #3
 8005b40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b42:	4413      	add	r3, r2
 8005b44:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b48:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	4619      	mov	r1, r3
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f005 feed 	bl	800b936 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005b5c:	88fb      	ldrh	r3, [r7, #6]
 8005b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f040 8104 	bne.w	8005d70 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b82:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	441a      	add	r2, r3
 8005b94:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ba0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	8013      	strh	r3, [r2, #0]
 8005bac:	e0e0      	b.n	8005d70 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005bae:	88fb      	ldrh	r3, [r7, #6]
 8005bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d121      	bne.n	8005bfc <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	441a      	add	r2, r3
 8005be4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005be8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	f040 80b4 	bne.w	8005d70 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	695a      	ldr	r2, [r3, #20]
 8005c0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005c10:	441a      	add	r2, r3
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	69da      	ldr	r2, [r3, #28]
 8005c1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005c1e:	441a      	add	r2, r3
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	6a1a      	ldr	r2, [r3, #32]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d309      	bcc.n	8005c44 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	6a1a      	ldr	r2, [r3, #32]
 8005c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c3c:	1ad2      	subs	r2, r2, r3
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	621a      	str	r2, [r3, #32]
 8005c42:	e015      	b.n	8005c70 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d107      	bne.n	8005c5c <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8005c4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005c50:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005c5a:	e009      	b.n	8005c70 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2200      	movs	r2, #0
 8005c66:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	663b      	str	r3, [r7, #96]	; 0x60
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	785b      	ldrb	r3, [r3, #1]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d155      	bne.n	8005d2a <HAL_PCD_EP_DB_Transmit+0x6fc>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	461a      	mov	r2, r3
 8005c90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c92:	4413      	add	r3, r2
 8005c94:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	00da      	lsls	r2, r3, #3
 8005c9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ca4:	657b      	str	r3, [r7, #84]	; 0x54
 8005ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ca8:	2b3e      	cmp	r3, #62	; 0x3e
 8005caa:	d916      	bls.n	8005cda <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cae:	095b      	lsrs	r3, r3, #5
 8005cb0:	677b      	str	r3, [r7, #116]	; 0x74
 8005cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cb4:	f003 031f 	and.w	r3, r3, #31
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d102      	bne.n	8005cc2 <HAL_PCD_EP_DB_Transmit+0x694>
 8005cbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	677b      	str	r3, [r7, #116]	; 0x74
 8005cc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	029b      	lsls	r3, r3, #10
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cd6:	801a      	strh	r2, [r3, #0]
 8005cd8:	e040      	b.n	8005d5c <HAL_PCD_EP_DB_Transmit+0x72e>
 8005cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d112      	bne.n	8005d06 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8005ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cee:	801a      	strh	r2, [r3, #0]
 8005cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d02:	801a      	strh	r2, [r3, #0]
 8005d04:	e02a      	b.n	8005d5c <HAL_PCD_EP_DB_Transmit+0x72e>
 8005d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d08:	085b      	lsrs	r3, r3, #1
 8005d0a:	677b      	str	r3, [r7, #116]	; 0x74
 8005d0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <HAL_PCD_EP_DB_Transmit+0x6ee>
 8005d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d18:	3301      	adds	r3, #1
 8005d1a:	677b      	str	r3, [r7, #116]	; 0x74
 8005d1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	029b      	lsls	r3, r3, #10
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d26:	801a      	strh	r2, [r3, #0]
 8005d28:	e018      	b.n	8005d5c <HAL_PCD_EP_DB_Transmit+0x72e>
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	785b      	ldrb	r3, [r3, #1]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d114      	bne.n	8005d5c <HAL_PCD_EP_DB_Transmit+0x72e>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d40:	4413      	add	r3, r2
 8005d42:	663b      	str	r3, [r7, #96]	; 0x60
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	00da      	lsls	r2, r3, #3
 8005d4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d5a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6818      	ldr	r0, [r3, #0]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	6959      	ldr	r1, [r3, #20]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	895a      	ldrh	r2, [r3, #10]
 8005d68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	f003 fe87 	bl	8009a7e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	461a      	mov	r2, r3
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d8a:	823b      	strh	r3, [r7, #16]
 8005d8c:	8a3b      	ldrh	r3, [r7, #16]
 8005d8e:	f083 0310 	eor.w	r3, r3, #16
 8005d92:	823b      	strh	r3, [r7, #16]
 8005d94:	8a3b      	ldrh	r3, [r7, #16]
 8005d96:	f083 0320 	eor.w	r3, r3, #32
 8005d9a:	823b      	strh	r3, [r7, #16]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	461a      	mov	r2, r3
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	441a      	add	r2, r3
 8005daa:	8a3b      	ldrh	r3, [r7, #16]
 8005dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005db4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3788      	adds	r7, #136	; 0x88
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b087      	sub	sp, #28
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	60f8      	str	r0, [r7, #12]
 8005dd2:	607b      	str	r3, [r7, #4]
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	817b      	strh	r3, [r7, #10]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005ddc:	897b      	ldrh	r3, [r7, #10]
 8005dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00b      	beq.n	8005e00 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005de8:	897b      	ldrh	r3, [r7, #10]
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	1c5a      	adds	r2, r3, #1
 8005df0:	4613      	mov	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	617b      	str	r3, [r7, #20]
 8005dfe:	e009      	b.n	8005e14 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e00:	897a      	ldrh	r2, [r7, #10]
 8005e02:	4613      	mov	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	4413      	add	r3, r2
 8005e12:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005e14:	893b      	ldrh	r3, [r7, #8]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d107      	bne.n	8005e2a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	80da      	strh	r2, [r3, #6]
 8005e28:	e00b      	b.n	8005e42 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	0c1b      	lsrs	r3, r3, #16
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	371c      	adds	r7, #28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	f043 0301 	orr.w	r3, r3, #1
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	f043 0302 	orr.w	r3, r3, #2
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3714      	adds	r7, #20
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d141      	bne.n	8005f36 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005eb2:	4b4b      	ldr	r3, [pc, #300]	; (8005fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ebe:	d131      	bne.n	8005f24 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ec0:	4b47      	ldr	r3, [pc, #284]	; (8005fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ec6:	4a46      	ldr	r2, [pc, #280]	; (8005fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ecc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ed0:	4b43      	ldr	r3, [pc, #268]	; (8005fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005ed8:	4a41      	ldr	r2, [pc, #260]	; (8005fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ede:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ee0:	4b40      	ldr	r3, [pc, #256]	; (8005fe4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2232      	movs	r2, #50	; 0x32
 8005ee6:	fb02 f303 	mul.w	r3, r2, r3
 8005eea:	4a3f      	ldr	r2, [pc, #252]	; (8005fe8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005eec:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef0:	0c9b      	lsrs	r3, r3, #18
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ef6:	e002      	b.n	8005efe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	3b01      	subs	r3, #1
 8005efc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005efe:	4b38      	ldr	r3, [pc, #224]	; (8005fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f0a:	d102      	bne.n	8005f12 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1f2      	bne.n	8005ef8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f12:	4b33      	ldr	r3, [pc, #204]	; (8005fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f1e:	d158      	bne.n	8005fd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e057      	b.n	8005fd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f24:	4b2e      	ldr	r3, [pc, #184]	; (8005fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f2a:	4a2d      	ldr	r2, [pc, #180]	; (8005fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005f34:	e04d      	b.n	8005fd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f3c:	d141      	bne.n	8005fc2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f3e:	4b28      	ldr	r3, [pc, #160]	; (8005fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f4a:	d131      	bne.n	8005fb0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f4c:	4b24      	ldr	r3, [pc, #144]	; (8005fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f52:	4a23      	ldr	r2, [pc, #140]	; (8005fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f5c:	4b20      	ldr	r3, [pc, #128]	; (8005fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f64:	4a1e      	ldr	r2, [pc, #120]	; (8005fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f6c:	4b1d      	ldr	r3, [pc, #116]	; (8005fe4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2232      	movs	r2, #50	; 0x32
 8005f72:	fb02 f303 	mul.w	r3, r2, r3
 8005f76:	4a1c      	ldr	r2, [pc, #112]	; (8005fe8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005f78:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7c:	0c9b      	lsrs	r3, r3, #18
 8005f7e:	3301      	adds	r3, #1
 8005f80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f82:	e002      	b.n	8005f8a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	3b01      	subs	r3, #1
 8005f88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f8a:	4b15      	ldr	r3, [pc, #84]	; (8005fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f96:	d102      	bne.n	8005f9e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1f2      	bne.n	8005f84 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f9e:	4b10      	ldr	r3, [pc, #64]	; (8005fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005faa:	d112      	bne.n	8005fd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e011      	b.n	8005fd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005fb0:	4b0b      	ldr	r3, [pc, #44]	; (8005fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fb6:	4a0a      	ldr	r2, [pc, #40]	; (8005fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005fc0:	e007      	b.n	8005fd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005fc2:	4b07      	ldr	r3, [pc, #28]	; (8005fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005fca:	4a05      	ldr	r2, [pc, #20]	; (8005fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fcc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005fd0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	40007000 	.word	0x40007000
 8005fe4:	20000010 	.word	0x20000010
 8005fe8:	431bde83 	.word	0x431bde83

08005fec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b088      	sub	sp, #32
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e306      	b.n	800660c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d075      	beq.n	80060f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800600a:	4b97      	ldr	r3, [pc, #604]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f003 030c 	and.w	r3, r3, #12
 8006012:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006014:	4b94      	ldr	r3, [pc, #592]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f003 0303 	and.w	r3, r3, #3
 800601c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	2b0c      	cmp	r3, #12
 8006022:	d102      	bne.n	800602a <HAL_RCC_OscConfig+0x3e>
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	2b03      	cmp	r3, #3
 8006028:	d002      	beq.n	8006030 <HAL_RCC_OscConfig+0x44>
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	2b08      	cmp	r3, #8
 800602e:	d10b      	bne.n	8006048 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006030:	4b8d      	ldr	r3, [pc, #564]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d05b      	beq.n	80060f4 <HAL_RCC_OscConfig+0x108>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d157      	bne.n	80060f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e2e1      	b.n	800660c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006050:	d106      	bne.n	8006060 <HAL_RCC_OscConfig+0x74>
 8006052:	4b85      	ldr	r3, [pc, #532]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a84      	ldr	r2, [pc, #528]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 8006058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800605c:	6013      	str	r3, [r2, #0]
 800605e:	e01d      	b.n	800609c <HAL_RCC_OscConfig+0xb0>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006068:	d10c      	bne.n	8006084 <HAL_RCC_OscConfig+0x98>
 800606a:	4b7f      	ldr	r3, [pc, #508]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a7e      	ldr	r2, [pc, #504]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 8006070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006074:	6013      	str	r3, [r2, #0]
 8006076:	4b7c      	ldr	r3, [pc, #496]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a7b      	ldr	r2, [pc, #492]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 800607c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006080:	6013      	str	r3, [r2, #0]
 8006082:	e00b      	b.n	800609c <HAL_RCC_OscConfig+0xb0>
 8006084:	4b78      	ldr	r3, [pc, #480]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a77      	ldr	r2, [pc, #476]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 800608a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800608e:	6013      	str	r3, [r2, #0]
 8006090:	4b75      	ldr	r3, [pc, #468]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a74      	ldr	r2, [pc, #464]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 8006096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800609a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d013      	beq.n	80060cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a4:	f7fb fe34 	bl	8001d10 <HAL_GetTick>
 80060a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060aa:	e008      	b.n	80060be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060ac:	f7fb fe30 	bl	8001d10 <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2b64      	cmp	r3, #100	; 0x64
 80060b8:	d901      	bls.n	80060be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e2a6      	b.n	800660c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060be:	4b6a      	ldr	r3, [pc, #424]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d0f0      	beq.n	80060ac <HAL_RCC_OscConfig+0xc0>
 80060ca:	e014      	b.n	80060f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060cc:	f7fb fe20 	bl	8001d10 <HAL_GetTick>
 80060d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060d2:	e008      	b.n	80060e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060d4:	f7fb fe1c 	bl	8001d10 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	2b64      	cmp	r3, #100	; 0x64
 80060e0:	d901      	bls.n	80060e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e292      	b.n	800660c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060e6:	4b60      	ldr	r3, [pc, #384]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1f0      	bne.n	80060d4 <HAL_RCC_OscConfig+0xe8>
 80060f2:	e000      	b.n	80060f6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d075      	beq.n	80061ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006102:	4b59      	ldr	r3, [pc, #356]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f003 030c 	and.w	r3, r3, #12
 800610a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800610c:	4b56      	ldr	r3, [pc, #344]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	f003 0303 	and.w	r3, r3, #3
 8006114:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	2b0c      	cmp	r3, #12
 800611a:	d102      	bne.n	8006122 <HAL_RCC_OscConfig+0x136>
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	2b02      	cmp	r3, #2
 8006120:	d002      	beq.n	8006128 <HAL_RCC_OscConfig+0x13c>
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	2b04      	cmp	r3, #4
 8006126:	d11f      	bne.n	8006168 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006128:	4b4f      	ldr	r3, [pc, #316]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006130:	2b00      	cmp	r3, #0
 8006132:	d005      	beq.n	8006140 <HAL_RCC_OscConfig+0x154>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e265      	b.n	800660c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006140:	4b49      	ldr	r3, [pc, #292]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	061b      	lsls	r3, r3, #24
 800614e:	4946      	ldr	r1, [pc, #280]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 8006150:	4313      	orrs	r3, r2
 8006152:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006154:	4b45      	ldr	r3, [pc, #276]	; (800626c <HAL_RCC_OscConfig+0x280>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4618      	mov	r0, r3
 800615a:	f7fb fd8d 	bl	8001c78 <HAL_InitTick>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d043      	beq.n	80061ec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e251      	b.n	800660c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d023      	beq.n	80061b8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006170:	4b3d      	ldr	r3, [pc, #244]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a3c      	ldr	r2, [pc, #240]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 8006176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800617a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800617c:	f7fb fdc8 	bl	8001d10 <HAL_GetTick>
 8006180:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006182:	e008      	b.n	8006196 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006184:	f7fb fdc4 	bl	8001d10 <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	2b02      	cmp	r3, #2
 8006190:	d901      	bls.n	8006196 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e23a      	b.n	800660c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006196:	4b34      	ldr	r3, [pc, #208]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d0f0      	beq.n	8006184 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061a2:	4b31      	ldr	r3, [pc, #196]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	061b      	lsls	r3, r3, #24
 80061b0:	492d      	ldr	r1, [pc, #180]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	604b      	str	r3, [r1, #4]
 80061b6:	e01a      	b.n	80061ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061b8:	4b2b      	ldr	r3, [pc, #172]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a2a      	ldr	r2, [pc, #168]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 80061be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c4:	f7fb fda4 	bl	8001d10 <HAL_GetTick>
 80061c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80061ca:	e008      	b.n	80061de <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061cc:	f7fb fda0 	bl	8001d10 <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d901      	bls.n	80061de <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e216      	b.n	800660c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80061de:	4b22      	ldr	r3, [pc, #136]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1f0      	bne.n	80061cc <HAL_RCC_OscConfig+0x1e0>
 80061ea:	e000      	b.n	80061ee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0308 	and.w	r3, r3, #8
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d041      	beq.n	800627e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d01c      	beq.n	800623c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006202:	4b19      	ldr	r3, [pc, #100]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 8006204:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006208:	4a17      	ldr	r2, [pc, #92]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 800620a:	f043 0301 	orr.w	r3, r3, #1
 800620e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006212:	f7fb fd7d 	bl	8001d10 <HAL_GetTick>
 8006216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006218:	e008      	b.n	800622c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800621a:	f7fb fd79 	bl	8001d10 <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	2b02      	cmp	r3, #2
 8006226:	d901      	bls.n	800622c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e1ef      	b.n	800660c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800622c:	4b0e      	ldr	r3, [pc, #56]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 800622e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d0ef      	beq.n	800621a <HAL_RCC_OscConfig+0x22e>
 800623a:	e020      	b.n	800627e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800623c:	4b0a      	ldr	r3, [pc, #40]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 800623e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006242:	4a09      	ldr	r2, [pc, #36]	; (8006268 <HAL_RCC_OscConfig+0x27c>)
 8006244:	f023 0301 	bic.w	r3, r3, #1
 8006248:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800624c:	f7fb fd60 	bl	8001d10 <HAL_GetTick>
 8006250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006252:	e00d      	b.n	8006270 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006254:	f7fb fd5c 	bl	8001d10 <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	2b02      	cmp	r3, #2
 8006260:	d906      	bls.n	8006270 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e1d2      	b.n	800660c <HAL_RCC_OscConfig+0x620>
 8006266:	bf00      	nop
 8006268:	40021000 	.word	0x40021000
 800626c:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006270:	4b8c      	ldr	r3, [pc, #560]	; (80064a4 <HAL_RCC_OscConfig+0x4b8>)
 8006272:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1ea      	bne.n	8006254 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0304 	and.w	r3, r3, #4
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 80a6 	beq.w	80063d8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800628c:	2300      	movs	r3, #0
 800628e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006290:	4b84      	ldr	r3, [pc, #528]	; (80064a4 <HAL_RCC_OscConfig+0x4b8>)
 8006292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <HAL_RCC_OscConfig+0x2b4>
 800629c:	2301      	movs	r3, #1
 800629e:	e000      	b.n	80062a2 <HAL_RCC_OscConfig+0x2b6>
 80062a0:	2300      	movs	r3, #0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00d      	beq.n	80062c2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062a6:	4b7f      	ldr	r3, [pc, #508]	; (80064a4 <HAL_RCC_OscConfig+0x4b8>)
 80062a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062aa:	4a7e      	ldr	r2, [pc, #504]	; (80064a4 <HAL_RCC_OscConfig+0x4b8>)
 80062ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062b0:	6593      	str	r3, [r2, #88]	; 0x58
 80062b2:	4b7c      	ldr	r3, [pc, #496]	; (80064a4 <HAL_RCC_OscConfig+0x4b8>)
 80062b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80062be:	2301      	movs	r3, #1
 80062c0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062c2:	4b79      	ldr	r3, [pc, #484]	; (80064a8 <HAL_RCC_OscConfig+0x4bc>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d118      	bne.n	8006300 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062ce:	4b76      	ldr	r3, [pc, #472]	; (80064a8 <HAL_RCC_OscConfig+0x4bc>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a75      	ldr	r2, [pc, #468]	; (80064a8 <HAL_RCC_OscConfig+0x4bc>)
 80062d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062da:	f7fb fd19 	bl	8001d10 <HAL_GetTick>
 80062de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062e0:	e008      	b.n	80062f4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062e2:	f7fb fd15 	bl	8001d10 <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d901      	bls.n	80062f4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e18b      	b.n	800660c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062f4:	4b6c      	ldr	r3, [pc, #432]	; (80064a8 <HAL_RCC_OscConfig+0x4bc>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0f0      	beq.n	80062e2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d108      	bne.n	800631a <HAL_RCC_OscConfig+0x32e>
 8006308:	4b66      	ldr	r3, [pc, #408]	; (80064a4 <HAL_RCC_OscConfig+0x4b8>)
 800630a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630e:	4a65      	ldr	r2, [pc, #404]	; (80064a4 <HAL_RCC_OscConfig+0x4b8>)
 8006310:	f043 0301 	orr.w	r3, r3, #1
 8006314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006318:	e024      	b.n	8006364 <HAL_RCC_OscConfig+0x378>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	2b05      	cmp	r3, #5
 8006320:	d110      	bne.n	8006344 <HAL_RCC_OscConfig+0x358>
 8006322:	4b60      	ldr	r3, [pc, #384]	; (80064a4 <HAL_RCC_OscConfig+0x4b8>)
 8006324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006328:	4a5e      	ldr	r2, [pc, #376]	; (80064a4 <HAL_RCC_OscConfig+0x4b8>)
 800632a:	f043 0304 	orr.w	r3, r3, #4
 800632e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006332:	4b5c      	ldr	r3, [pc, #368]	; (80064a4 <HAL_RCC_OscConfig+0x4b8>)
 8006334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006338:	4a5a      	ldr	r2, [pc, #360]	; (80064a4 <HAL_RCC_OscConfig+0x4b8>)
 800633a:	f043 0301 	orr.w	r3, r3, #1
 800633e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006342:	e00f      	b.n	8006364 <HAL_RCC_OscConfig+0x378>
 8006344:	4b57      	ldr	r3, [pc, #348]	; (80064a4 <HAL_RCC_OscConfig+0x4b8>)
 8006346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800634a:	4a56      	ldr	r2, [pc, #344]	; (80064a4 <HAL_RCC_OscConfig+0x4b8>)
 800634c:	f023 0301 	bic.w	r3, r3, #1
 8006350:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006354:	4b53      	ldr	r3, [pc, #332]	; (80064a4 <HAL_RCC_OscConfig+0x4b8>)
 8006356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800635a:	4a52      	ldr	r2, [pc, #328]	; (80064a4 <HAL_RCC_OscConfig+0x4b8>)
 800635c:	f023 0304 	bic.w	r3, r3, #4
 8006360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d016      	beq.n	800639a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800636c:	f7fb fcd0 	bl	8001d10 <HAL_GetTick>
 8006370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006372:	e00a      	b.n	800638a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006374:	f7fb fccc 	bl	8001d10 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006382:	4293      	cmp	r3, r2
 8006384:	d901      	bls.n	800638a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e140      	b.n	800660c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800638a:	4b46      	ldr	r3, [pc, #280]	; (80064a4 <HAL_RCC_OscConfig+0x4b8>)
 800638c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006390:	f003 0302 	and.w	r3, r3, #2
 8006394:	2b00      	cmp	r3, #0
 8006396:	d0ed      	beq.n	8006374 <HAL_RCC_OscConfig+0x388>
 8006398:	e015      	b.n	80063c6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800639a:	f7fb fcb9 	bl	8001d10 <HAL_GetTick>
 800639e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80063a0:	e00a      	b.n	80063b8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063a2:	f7fb fcb5 	bl	8001d10 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d901      	bls.n	80063b8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e129      	b.n	800660c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80063b8:	4b3a      	ldr	r3, [pc, #232]	; (80064a4 <HAL_RCC_OscConfig+0x4b8>)
 80063ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1ed      	bne.n	80063a2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80063c6:	7ffb      	ldrb	r3, [r7, #31]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d105      	bne.n	80063d8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063cc:	4b35      	ldr	r3, [pc, #212]	; (80064a4 <HAL_RCC_OscConfig+0x4b8>)
 80063ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d0:	4a34      	ldr	r2, [pc, #208]	; (80064a4 <HAL_RCC_OscConfig+0x4b8>)
 80063d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0320 	and.w	r3, r3, #32
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d03c      	beq.n	800645e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d01c      	beq.n	8006426 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80063ec:	4b2d      	ldr	r3, [pc, #180]	; (80064a4 <HAL_RCC_OscConfig+0x4b8>)
 80063ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063f2:	4a2c      	ldr	r2, [pc, #176]	; (80064a4 <HAL_RCC_OscConfig+0x4b8>)
 80063f4:	f043 0301 	orr.w	r3, r3, #1
 80063f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063fc:	f7fb fc88 	bl	8001d10 <HAL_GetTick>
 8006400:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006402:	e008      	b.n	8006416 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006404:	f7fb fc84 	bl	8001d10 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	2b02      	cmp	r3, #2
 8006410:	d901      	bls.n	8006416 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e0fa      	b.n	800660c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006416:	4b23      	ldr	r3, [pc, #140]	; (80064a4 <HAL_RCC_OscConfig+0x4b8>)
 8006418:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800641c:	f003 0302 	and.w	r3, r3, #2
 8006420:	2b00      	cmp	r3, #0
 8006422:	d0ef      	beq.n	8006404 <HAL_RCC_OscConfig+0x418>
 8006424:	e01b      	b.n	800645e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006426:	4b1f      	ldr	r3, [pc, #124]	; (80064a4 <HAL_RCC_OscConfig+0x4b8>)
 8006428:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800642c:	4a1d      	ldr	r2, [pc, #116]	; (80064a4 <HAL_RCC_OscConfig+0x4b8>)
 800642e:	f023 0301 	bic.w	r3, r3, #1
 8006432:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006436:	f7fb fc6b 	bl	8001d10 <HAL_GetTick>
 800643a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800643c:	e008      	b.n	8006450 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800643e:	f7fb fc67 	bl	8001d10 <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	2b02      	cmp	r3, #2
 800644a:	d901      	bls.n	8006450 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e0dd      	b.n	800660c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006450:	4b14      	ldr	r3, [pc, #80]	; (80064a4 <HAL_RCC_OscConfig+0x4b8>)
 8006452:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006456:	f003 0302 	and.w	r3, r3, #2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1ef      	bne.n	800643e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	2b00      	cmp	r3, #0
 8006464:	f000 80d1 	beq.w	800660a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006468:	4b0e      	ldr	r3, [pc, #56]	; (80064a4 <HAL_RCC_OscConfig+0x4b8>)
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f003 030c 	and.w	r3, r3, #12
 8006470:	2b0c      	cmp	r3, #12
 8006472:	f000 808b 	beq.w	800658c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	2b02      	cmp	r3, #2
 800647c:	d15e      	bne.n	800653c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800647e:	4b09      	ldr	r3, [pc, #36]	; (80064a4 <HAL_RCC_OscConfig+0x4b8>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a08      	ldr	r2, [pc, #32]	; (80064a4 <HAL_RCC_OscConfig+0x4b8>)
 8006484:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800648a:	f7fb fc41 	bl	8001d10 <HAL_GetTick>
 800648e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006490:	e00c      	b.n	80064ac <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006492:	f7fb fc3d 	bl	8001d10 <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	2b02      	cmp	r3, #2
 800649e:	d905      	bls.n	80064ac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e0b3      	b.n	800660c <HAL_RCC_OscConfig+0x620>
 80064a4:	40021000 	.word	0x40021000
 80064a8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064ac:	4b59      	ldr	r3, [pc, #356]	; (8006614 <HAL_RCC_OscConfig+0x628>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1ec      	bne.n	8006492 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064b8:	4b56      	ldr	r3, [pc, #344]	; (8006614 <HAL_RCC_OscConfig+0x628>)
 80064ba:	68da      	ldr	r2, [r3, #12]
 80064bc:	4b56      	ldr	r3, [pc, #344]	; (8006618 <HAL_RCC_OscConfig+0x62c>)
 80064be:	4013      	ands	r3, r2
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	6a11      	ldr	r1, [r2, #32]
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80064c8:	3a01      	subs	r2, #1
 80064ca:	0112      	lsls	r2, r2, #4
 80064cc:	4311      	orrs	r1, r2
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80064d2:	0212      	lsls	r2, r2, #8
 80064d4:	4311      	orrs	r1, r2
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80064da:	0852      	lsrs	r2, r2, #1
 80064dc:	3a01      	subs	r2, #1
 80064de:	0552      	lsls	r2, r2, #21
 80064e0:	4311      	orrs	r1, r2
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80064e6:	0852      	lsrs	r2, r2, #1
 80064e8:	3a01      	subs	r2, #1
 80064ea:	0652      	lsls	r2, r2, #25
 80064ec:	4311      	orrs	r1, r2
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80064f2:	06d2      	lsls	r2, r2, #27
 80064f4:	430a      	orrs	r2, r1
 80064f6:	4947      	ldr	r1, [pc, #284]	; (8006614 <HAL_RCC_OscConfig+0x628>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064fc:	4b45      	ldr	r3, [pc, #276]	; (8006614 <HAL_RCC_OscConfig+0x628>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a44      	ldr	r2, [pc, #272]	; (8006614 <HAL_RCC_OscConfig+0x628>)
 8006502:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006506:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006508:	4b42      	ldr	r3, [pc, #264]	; (8006614 <HAL_RCC_OscConfig+0x628>)
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	4a41      	ldr	r2, [pc, #260]	; (8006614 <HAL_RCC_OscConfig+0x628>)
 800650e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006512:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006514:	f7fb fbfc 	bl	8001d10 <HAL_GetTick>
 8006518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800651a:	e008      	b.n	800652e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800651c:	f7fb fbf8 	bl	8001d10 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	2b02      	cmp	r3, #2
 8006528:	d901      	bls.n	800652e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e06e      	b.n	800660c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800652e:	4b39      	ldr	r3, [pc, #228]	; (8006614 <HAL_RCC_OscConfig+0x628>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d0f0      	beq.n	800651c <HAL_RCC_OscConfig+0x530>
 800653a:	e066      	b.n	800660a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800653c:	4b35      	ldr	r3, [pc, #212]	; (8006614 <HAL_RCC_OscConfig+0x628>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a34      	ldr	r2, [pc, #208]	; (8006614 <HAL_RCC_OscConfig+0x628>)
 8006542:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006546:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006548:	4b32      	ldr	r3, [pc, #200]	; (8006614 <HAL_RCC_OscConfig+0x628>)
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	4a31      	ldr	r2, [pc, #196]	; (8006614 <HAL_RCC_OscConfig+0x628>)
 800654e:	f023 0303 	bic.w	r3, r3, #3
 8006552:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006554:	4b2f      	ldr	r3, [pc, #188]	; (8006614 <HAL_RCC_OscConfig+0x628>)
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	4a2e      	ldr	r2, [pc, #184]	; (8006614 <HAL_RCC_OscConfig+0x628>)
 800655a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800655e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006562:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006564:	f7fb fbd4 	bl	8001d10 <HAL_GetTick>
 8006568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800656a:	e008      	b.n	800657e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800656c:	f7fb fbd0 	bl	8001d10 <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	2b02      	cmp	r3, #2
 8006578:	d901      	bls.n	800657e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e046      	b.n	800660c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800657e:	4b25      	ldr	r3, [pc, #148]	; (8006614 <HAL_RCC_OscConfig+0x628>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1f0      	bne.n	800656c <HAL_RCC_OscConfig+0x580>
 800658a:	e03e      	b.n	800660a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d101      	bne.n	8006598 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e039      	b.n	800660c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006598:	4b1e      	ldr	r3, [pc, #120]	; (8006614 <HAL_RCC_OscConfig+0x628>)
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f003 0203 	and.w	r2, r3, #3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a1b      	ldr	r3, [r3, #32]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d12c      	bne.n	8006606 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b6:	3b01      	subs	r3, #1
 80065b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d123      	bne.n	8006606 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d11b      	bne.n	8006606 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80065da:	429a      	cmp	r2, r3
 80065dc:	d113      	bne.n	8006606 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e8:	085b      	lsrs	r3, r3, #1
 80065ea:	3b01      	subs	r3, #1
 80065ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d109      	bne.n	8006606 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065fc:	085b      	lsrs	r3, r3, #1
 80065fe:	3b01      	subs	r3, #1
 8006600:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006602:	429a      	cmp	r2, r3
 8006604:	d001      	beq.n	800660a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e000      	b.n	800660c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3720      	adds	r7, #32
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	40021000 	.word	0x40021000
 8006618:	019f800c 	.word	0x019f800c

0800661c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006626:	2300      	movs	r3, #0
 8006628:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d101      	bne.n	8006634 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e11e      	b.n	8006872 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006634:	4b91      	ldr	r3, [pc, #580]	; (800687c <HAL_RCC_ClockConfig+0x260>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 030f 	and.w	r3, r3, #15
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	429a      	cmp	r2, r3
 8006640:	d910      	bls.n	8006664 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006642:	4b8e      	ldr	r3, [pc, #568]	; (800687c <HAL_RCC_ClockConfig+0x260>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f023 020f 	bic.w	r2, r3, #15
 800664a:	498c      	ldr	r1, [pc, #560]	; (800687c <HAL_RCC_ClockConfig+0x260>)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	4313      	orrs	r3, r2
 8006650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006652:	4b8a      	ldr	r3, [pc, #552]	; (800687c <HAL_RCC_ClockConfig+0x260>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 030f 	and.w	r3, r3, #15
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	429a      	cmp	r2, r3
 800665e:	d001      	beq.n	8006664 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e106      	b.n	8006872 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	2b00      	cmp	r3, #0
 800666e:	d073      	beq.n	8006758 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	2b03      	cmp	r3, #3
 8006676:	d129      	bne.n	80066cc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006678:	4b81      	ldr	r3, [pc, #516]	; (8006880 <HAL_RCC_ClockConfig+0x264>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d101      	bne.n	8006688 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e0f4      	b.n	8006872 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006688:	f000 f972 	bl	8006970 <RCC_GetSysClockFreqFromPLLSource>
 800668c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	4a7c      	ldr	r2, [pc, #496]	; (8006884 <HAL_RCC_ClockConfig+0x268>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d93f      	bls.n	8006716 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006696:	4b7a      	ldr	r3, [pc, #488]	; (8006880 <HAL_RCC_ClockConfig+0x264>)
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d009      	beq.n	80066b6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d033      	beq.n	8006716 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d12f      	bne.n	8006716 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80066b6:	4b72      	ldr	r3, [pc, #456]	; (8006880 <HAL_RCC_ClockConfig+0x264>)
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066be:	4a70      	ldr	r2, [pc, #448]	; (8006880 <HAL_RCC_ClockConfig+0x264>)
 80066c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80066c6:	2380      	movs	r3, #128	; 0x80
 80066c8:	617b      	str	r3, [r7, #20]
 80066ca:	e024      	b.n	8006716 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d107      	bne.n	80066e4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066d4:	4b6a      	ldr	r3, [pc, #424]	; (8006880 <HAL_RCC_ClockConfig+0x264>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d109      	bne.n	80066f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e0c6      	b.n	8006872 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066e4:	4b66      	ldr	r3, [pc, #408]	; (8006880 <HAL_RCC_ClockConfig+0x264>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e0be      	b.n	8006872 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80066f4:	f000 f8ce 	bl	8006894 <HAL_RCC_GetSysClockFreq>
 80066f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	4a61      	ldr	r2, [pc, #388]	; (8006884 <HAL_RCC_ClockConfig+0x268>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d909      	bls.n	8006716 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006702:	4b5f      	ldr	r3, [pc, #380]	; (8006880 <HAL_RCC_ClockConfig+0x264>)
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800670a:	4a5d      	ldr	r2, [pc, #372]	; (8006880 <HAL_RCC_ClockConfig+0x264>)
 800670c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006710:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006712:	2380      	movs	r3, #128	; 0x80
 8006714:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006716:	4b5a      	ldr	r3, [pc, #360]	; (8006880 <HAL_RCC_ClockConfig+0x264>)
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f023 0203 	bic.w	r2, r3, #3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	4957      	ldr	r1, [pc, #348]	; (8006880 <HAL_RCC_ClockConfig+0x264>)
 8006724:	4313      	orrs	r3, r2
 8006726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006728:	f7fb faf2 	bl	8001d10 <HAL_GetTick>
 800672c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800672e:	e00a      	b.n	8006746 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006730:	f7fb faee 	bl	8001d10 <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	f241 3288 	movw	r2, #5000	; 0x1388
 800673e:	4293      	cmp	r3, r2
 8006740:	d901      	bls.n	8006746 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e095      	b.n	8006872 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006746:	4b4e      	ldr	r3, [pc, #312]	; (8006880 <HAL_RCC_ClockConfig+0x264>)
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f003 020c 	and.w	r2, r3, #12
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	429a      	cmp	r2, r3
 8006756:	d1eb      	bne.n	8006730 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0302 	and.w	r3, r3, #2
 8006760:	2b00      	cmp	r3, #0
 8006762:	d023      	beq.n	80067ac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0304 	and.w	r3, r3, #4
 800676c:	2b00      	cmp	r3, #0
 800676e:	d005      	beq.n	800677c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006770:	4b43      	ldr	r3, [pc, #268]	; (8006880 <HAL_RCC_ClockConfig+0x264>)
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	4a42      	ldr	r2, [pc, #264]	; (8006880 <HAL_RCC_ClockConfig+0x264>)
 8006776:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800677a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0308 	and.w	r3, r3, #8
 8006784:	2b00      	cmp	r3, #0
 8006786:	d007      	beq.n	8006798 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006788:	4b3d      	ldr	r3, [pc, #244]	; (8006880 <HAL_RCC_ClockConfig+0x264>)
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006790:	4a3b      	ldr	r2, [pc, #236]	; (8006880 <HAL_RCC_ClockConfig+0x264>)
 8006792:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006796:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006798:	4b39      	ldr	r3, [pc, #228]	; (8006880 <HAL_RCC_ClockConfig+0x264>)
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	4936      	ldr	r1, [pc, #216]	; (8006880 <HAL_RCC_ClockConfig+0x264>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	608b      	str	r3, [r1, #8]
 80067aa:	e008      	b.n	80067be <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	2b80      	cmp	r3, #128	; 0x80
 80067b0:	d105      	bne.n	80067be <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80067b2:	4b33      	ldr	r3, [pc, #204]	; (8006880 <HAL_RCC_ClockConfig+0x264>)
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	4a32      	ldr	r2, [pc, #200]	; (8006880 <HAL_RCC_ClockConfig+0x264>)
 80067b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067bc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067be:	4b2f      	ldr	r3, [pc, #188]	; (800687c <HAL_RCC_ClockConfig+0x260>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 030f 	and.w	r3, r3, #15
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d21d      	bcs.n	8006808 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067cc:	4b2b      	ldr	r3, [pc, #172]	; (800687c <HAL_RCC_ClockConfig+0x260>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f023 020f 	bic.w	r2, r3, #15
 80067d4:	4929      	ldr	r1, [pc, #164]	; (800687c <HAL_RCC_ClockConfig+0x260>)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	4313      	orrs	r3, r2
 80067da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80067dc:	f7fb fa98 	bl	8001d10 <HAL_GetTick>
 80067e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067e2:	e00a      	b.n	80067fa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067e4:	f7fb fa94 	bl	8001d10 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d901      	bls.n	80067fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e03b      	b.n	8006872 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067fa:	4b20      	ldr	r3, [pc, #128]	; (800687c <HAL_RCC_ClockConfig+0x260>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 030f 	and.w	r3, r3, #15
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	429a      	cmp	r2, r3
 8006806:	d1ed      	bne.n	80067e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	2b00      	cmp	r3, #0
 8006812:	d008      	beq.n	8006826 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006814:	4b1a      	ldr	r3, [pc, #104]	; (8006880 <HAL_RCC_ClockConfig+0x264>)
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	4917      	ldr	r1, [pc, #92]	; (8006880 <HAL_RCC_ClockConfig+0x264>)
 8006822:	4313      	orrs	r3, r2
 8006824:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0308 	and.w	r3, r3, #8
 800682e:	2b00      	cmp	r3, #0
 8006830:	d009      	beq.n	8006846 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006832:	4b13      	ldr	r3, [pc, #76]	; (8006880 <HAL_RCC_ClockConfig+0x264>)
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	00db      	lsls	r3, r3, #3
 8006840:	490f      	ldr	r1, [pc, #60]	; (8006880 <HAL_RCC_ClockConfig+0x264>)
 8006842:	4313      	orrs	r3, r2
 8006844:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006846:	f000 f825 	bl	8006894 <HAL_RCC_GetSysClockFreq>
 800684a:	4602      	mov	r2, r0
 800684c:	4b0c      	ldr	r3, [pc, #48]	; (8006880 <HAL_RCC_ClockConfig+0x264>)
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	091b      	lsrs	r3, r3, #4
 8006852:	f003 030f 	and.w	r3, r3, #15
 8006856:	490c      	ldr	r1, [pc, #48]	; (8006888 <HAL_RCC_ClockConfig+0x26c>)
 8006858:	5ccb      	ldrb	r3, [r1, r3]
 800685a:	f003 031f 	and.w	r3, r3, #31
 800685e:	fa22 f303 	lsr.w	r3, r2, r3
 8006862:	4a0a      	ldr	r2, [pc, #40]	; (800688c <HAL_RCC_ClockConfig+0x270>)
 8006864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006866:	4b0a      	ldr	r3, [pc, #40]	; (8006890 <HAL_RCC_ClockConfig+0x274>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4618      	mov	r0, r3
 800686c:	f7fb fa04 	bl	8001c78 <HAL_InitTick>
 8006870:	4603      	mov	r3, r0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3718      	adds	r7, #24
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	40022000 	.word	0x40022000
 8006880:	40021000 	.word	0x40021000
 8006884:	04c4b400 	.word	0x04c4b400
 8006888:	0800d3c0 	.word	0x0800d3c0
 800688c:	20000010 	.word	0x20000010
 8006890:	20000014 	.word	0x20000014

08006894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006894:	b480      	push	{r7}
 8006896:	b087      	sub	sp, #28
 8006898:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800689a:	4b2c      	ldr	r3, [pc, #176]	; (800694c <HAL_RCC_GetSysClockFreq+0xb8>)
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	f003 030c 	and.w	r3, r3, #12
 80068a2:	2b04      	cmp	r3, #4
 80068a4:	d102      	bne.n	80068ac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80068a6:	4b2a      	ldr	r3, [pc, #168]	; (8006950 <HAL_RCC_GetSysClockFreq+0xbc>)
 80068a8:	613b      	str	r3, [r7, #16]
 80068aa:	e047      	b.n	800693c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80068ac:	4b27      	ldr	r3, [pc, #156]	; (800694c <HAL_RCC_GetSysClockFreq+0xb8>)
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f003 030c 	and.w	r3, r3, #12
 80068b4:	2b08      	cmp	r3, #8
 80068b6:	d102      	bne.n	80068be <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80068b8:	4b26      	ldr	r3, [pc, #152]	; (8006954 <HAL_RCC_GetSysClockFreq+0xc0>)
 80068ba:	613b      	str	r3, [r7, #16]
 80068bc:	e03e      	b.n	800693c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80068be:	4b23      	ldr	r3, [pc, #140]	; (800694c <HAL_RCC_GetSysClockFreq+0xb8>)
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f003 030c 	and.w	r3, r3, #12
 80068c6:	2b0c      	cmp	r3, #12
 80068c8:	d136      	bne.n	8006938 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80068ca:	4b20      	ldr	r3, [pc, #128]	; (800694c <HAL_RCC_GetSysClockFreq+0xb8>)
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	f003 0303 	and.w	r3, r3, #3
 80068d2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80068d4:	4b1d      	ldr	r3, [pc, #116]	; (800694c <HAL_RCC_GetSysClockFreq+0xb8>)
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	091b      	lsrs	r3, r3, #4
 80068da:	f003 030f 	and.w	r3, r3, #15
 80068de:	3301      	adds	r3, #1
 80068e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2b03      	cmp	r3, #3
 80068e6:	d10c      	bne.n	8006902 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80068e8:	4a1a      	ldr	r2, [pc, #104]	; (8006954 <HAL_RCC_GetSysClockFreq+0xc0>)
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f0:	4a16      	ldr	r2, [pc, #88]	; (800694c <HAL_RCC_GetSysClockFreq+0xb8>)
 80068f2:	68d2      	ldr	r2, [r2, #12]
 80068f4:	0a12      	lsrs	r2, r2, #8
 80068f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80068fa:	fb02 f303 	mul.w	r3, r2, r3
 80068fe:	617b      	str	r3, [r7, #20]
      break;
 8006900:	e00c      	b.n	800691c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006902:	4a13      	ldr	r2, [pc, #76]	; (8006950 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	fbb2 f3f3 	udiv	r3, r2, r3
 800690a:	4a10      	ldr	r2, [pc, #64]	; (800694c <HAL_RCC_GetSysClockFreq+0xb8>)
 800690c:	68d2      	ldr	r2, [r2, #12]
 800690e:	0a12      	lsrs	r2, r2, #8
 8006910:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006914:	fb02 f303 	mul.w	r3, r2, r3
 8006918:	617b      	str	r3, [r7, #20]
      break;
 800691a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800691c:	4b0b      	ldr	r3, [pc, #44]	; (800694c <HAL_RCC_GetSysClockFreq+0xb8>)
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	0e5b      	lsrs	r3, r3, #25
 8006922:	f003 0303 	and.w	r3, r3, #3
 8006926:	3301      	adds	r3, #1
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	fbb2 f3f3 	udiv	r3, r2, r3
 8006934:	613b      	str	r3, [r7, #16]
 8006936:	e001      	b.n	800693c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006938:	2300      	movs	r3, #0
 800693a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800693c:	693b      	ldr	r3, [r7, #16]
}
 800693e:	4618      	mov	r0, r3
 8006940:	371c      	adds	r7, #28
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	40021000 	.word	0x40021000
 8006950:	00f42400 	.word	0x00f42400
 8006954:	017d7840 	.word	0x017d7840

08006958 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006958:	b480      	push	{r7}
 800695a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800695c:	4b03      	ldr	r3, [pc, #12]	; (800696c <HAL_RCC_GetHCLKFreq+0x14>)
 800695e:	681b      	ldr	r3, [r3, #0]
}
 8006960:	4618      	mov	r0, r3
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	20000010 	.word	0x20000010

08006970 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006976:	4b1e      	ldr	r3, [pc, #120]	; (80069f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	f003 0303 	and.w	r3, r3, #3
 800697e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006980:	4b1b      	ldr	r3, [pc, #108]	; (80069f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	091b      	lsrs	r3, r3, #4
 8006986:	f003 030f 	and.w	r3, r3, #15
 800698a:	3301      	adds	r3, #1
 800698c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	2b03      	cmp	r3, #3
 8006992:	d10c      	bne.n	80069ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006994:	4a17      	ldr	r2, [pc, #92]	; (80069f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	fbb2 f3f3 	udiv	r3, r2, r3
 800699c:	4a14      	ldr	r2, [pc, #80]	; (80069f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800699e:	68d2      	ldr	r2, [r2, #12]
 80069a0:	0a12      	lsrs	r2, r2, #8
 80069a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80069a6:	fb02 f303 	mul.w	r3, r2, r3
 80069aa:	617b      	str	r3, [r7, #20]
    break;
 80069ac:	e00c      	b.n	80069c8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069ae:	4a12      	ldr	r2, [pc, #72]	; (80069f8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b6:	4a0e      	ldr	r2, [pc, #56]	; (80069f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069b8:	68d2      	ldr	r2, [r2, #12]
 80069ba:	0a12      	lsrs	r2, r2, #8
 80069bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80069c0:	fb02 f303 	mul.w	r3, r2, r3
 80069c4:	617b      	str	r3, [r7, #20]
    break;
 80069c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80069c8:	4b09      	ldr	r3, [pc, #36]	; (80069f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	0e5b      	lsrs	r3, r3, #25
 80069ce:	f003 0303 	and.w	r3, r3, #3
 80069d2:	3301      	adds	r3, #1
 80069d4:	005b      	lsls	r3, r3, #1
 80069d6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80069e2:	687b      	ldr	r3, [r7, #4]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	371c      	adds	r7, #28
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr
 80069f0:	40021000 	.word	0x40021000
 80069f4:	017d7840 	.word	0x017d7840
 80069f8:	00f42400 	.word	0x00f42400

080069fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a04:	2300      	movs	r3, #0
 8006a06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a08:	2300      	movs	r3, #0
 8006a0a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 8098 	beq.w	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a1e:	4b43      	ldr	r3, [pc, #268]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10d      	bne.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a2a:	4b40      	ldr	r3, [pc, #256]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a2e:	4a3f      	ldr	r2, [pc, #252]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a34:	6593      	str	r3, [r2, #88]	; 0x58
 8006a36:	4b3d      	ldr	r3, [pc, #244]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a3e:	60bb      	str	r3, [r7, #8]
 8006a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a42:	2301      	movs	r3, #1
 8006a44:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a46:	4b3a      	ldr	r3, [pc, #232]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a39      	ldr	r2, [pc, #228]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a52:	f7fb f95d 	bl	8001d10 <HAL_GetTick>
 8006a56:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a58:	e009      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a5a:	f7fb f959 	bl	8001d10 <HAL_GetTick>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d902      	bls.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	74fb      	strb	r3, [r7, #19]
        break;
 8006a6c:	e005      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a6e:	4b30      	ldr	r3, [pc, #192]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d0ef      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006a7a:	7cfb      	ldrb	r3, [r7, #19]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d159      	bne.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006a80:	4b2a      	ldr	r3, [pc, #168]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a8a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d01e      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d019      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006a9c:	4b23      	ldr	r3, [pc, #140]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aa6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006aa8:	4b20      	ldr	r3, [pc, #128]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aae:	4a1f      	ldr	r2, [pc, #124]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ab8:	4b1c      	ldr	r3, [pc, #112]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006abe:	4a1b      	ldr	r2, [pc, #108]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006ac8:	4a18      	ldr	r2, [pc, #96]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d016      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ada:	f7fb f919 	bl	8001d10 <HAL_GetTick>
 8006ade:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ae0:	e00b      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ae2:	f7fb f915 	bl	8001d10 <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d902      	bls.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	74fb      	strb	r3, [r7, #19]
            break;
 8006af8:	e006      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006afa:	4b0c      	ldr	r3, [pc, #48]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d0ec      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006b08:	7cfb      	ldrb	r3, [r7, #19]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10b      	bne.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b0e:	4b07      	ldr	r3, [pc, #28]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b1c:	4903      	ldr	r1, [pc, #12]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006b24:	e008      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b26:	7cfb      	ldrb	r3, [r7, #19]
 8006b28:	74bb      	strb	r3, [r7, #18]
 8006b2a:	e005      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006b2c:	40021000 	.word	0x40021000
 8006b30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b34:	7cfb      	ldrb	r3, [r7, #19]
 8006b36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b38:	7c7b      	ldrb	r3, [r7, #17]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d105      	bne.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b3e:	4ba7      	ldr	r3, [pc, #668]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b42:	4aa6      	ldr	r2, [pc, #664]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b48:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00a      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b56:	4ba1      	ldr	r3, [pc, #644]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b5c:	f023 0203 	bic.w	r2, r3, #3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	499d      	ldr	r1, [pc, #628]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0302 	and.w	r3, r3, #2
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00a      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b78:	4b98      	ldr	r3, [pc, #608]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b7e:	f023 020c 	bic.w	r2, r3, #12
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	4995      	ldr	r1, [pc, #596]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0304 	and.w	r3, r3, #4
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00a      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b9a:	4b90      	ldr	r3, [pc, #576]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ba0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	498c      	ldr	r1, [pc, #560]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0308 	and.w	r3, r3, #8
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00a      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006bbc:	4b87      	ldr	r3, [pc, #540]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	4984      	ldr	r1, [pc, #528]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0310 	and.w	r3, r3, #16
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00a      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006bde:	4b7f      	ldr	r3, [pc, #508]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	695b      	ldr	r3, [r3, #20]
 8006bec:	497b      	ldr	r1, [pc, #492]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0320 	and.w	r3, r3, #32
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00a      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c00:	4b76      	ldr	r3, [pc, #472]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	4973      	ldr	r1, [pc, #460]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00a      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c22:	4b6e      	ldr	r3, [pc, #440]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	69db      	ldr	r3, [r3, #28]
 8006c30:	496a      	ldr	r1, [pc, #424]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00a      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c44:	4b65      	ldr	r3, [pc, #404]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	4962      	ldr	r1, [pc, #392]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c54:	4313      	orrs	r3, r2
 8006c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00a      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c66:	4b5d      	ldr	r3, [pc, #372]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c74:	4959      	ldr	r1, [pc, #356]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c76:	4313      	orrs	r3, r2
 8006c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00a      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c88:	4b54      	ldr	r3, [pc, #336]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c8e:	f023 0203 	bic.w	r2, r3, #3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c96:	4951      	ldr	r1, [pc, #324]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00a      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006caa:	4b4c      	ldr	r3, [pc, #304]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb8:	4948      	ldr	r1, [pc, #288]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d015      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ccc:	4b43      	ldr	r3, [pc, #268]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cda:	4940      	ldr	r1, [pc, #256]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cea:	d105      	bne.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cec:	4b3b      	ldr	r3, [pc, #236]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	4a3a      	ldr	r2, [pc, #232]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cf6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d015      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006d04:	4b35      	ldr	r3, [pc, #212]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d12:	4932      	ldr	r1, [pc, #200]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d22:	d105      	bne.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d24:	4b2d      	ldr	r3, [pc, #180]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	4a2c      	ldr	r2, [pc, #176]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d2e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d015      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006d3c:	4b27      	ldr	r3, [pc, #156]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d42:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4a:	4924      	ldr	r1, [pc, #144]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d5a:	d105      	bne.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d5c:	4b1f      	ldr	r3, [pc, #124]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	4a1e      	ldr	r2, [pc, #120]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d66:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d015      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d74:	4b19      	ldr	r3, [pc, #100]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d82:	4916      	ldr	r1, [pc, #88]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d92:	d105      	bne.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d94:	4b11      	ldr	r3, [pc, #68]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	4a10      	ldr	r2, [pc, #64]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d9e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d019      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006dac:	4b0b      	ldr	r3, [pc, #44]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dba:	4908      	ldr	r1, [pc, #32]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dca:	d109      	bne.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006dcc:	4b03      	ldr	r3, [pc, #12]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	4a02      	ldr	r2, [pc, #8]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006dd6:	60d3      	str	r3, [r2, #12]
 8006dd8:	e002      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006dda:	bf00      	nop
 8006ddc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d015      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006dec:	4b29      	ldr	r3, [pc, #164]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006df2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dfa:	4926      	ldr	r1, [pc, #152]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e0a:	d105      	bne.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006e0c:	4b21      	ldr	r3, [pc, #132]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	4a20      	ldr	r2, [pc, #128]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e16:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d015      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006e24:	4b1b      	ldr	r3, [pc, #108]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e2a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e32:	4918      	ldr	r1, [pc, #96]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e42:	d105      	bne.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006e44:	4b13      	ldr	r3, [pc, #76]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	4a12      	ldr	r2, [pc, #72]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e4e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d015      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006e5c:	4b0d      	ldr	r3, [pc, #52]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e6a:	490a      	ldr	r1, [pc, #40]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e7a:	d105      	bne.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e7c:	4b05      	ldr	r3, [pc, #20]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	4a04      	ldr	r2, [pc, #16]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e86:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006e88:	7cbb      	ldrb	r3, [r7, #18]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3718      	adds	r7, #24
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	40021000 	.word	0x40021000

08006e98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e049      	b.n	8006f3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d106      	bne.n	8006ec4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f7fa fdaa 	bl	8001a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	3304      	adds	r3, #4
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	4610      	mov	r0, r2
 8006ed8:	f000 f9b2 	bl	8007240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
	...

08006f48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d001      	beq.n	8006f60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e04c      	b.n	8006ffa <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2202      	movs	r2, #2
 8006f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a26      	ldr	r2, [pc, #152]	; (8007008 <HAL_TIM_Base_Start+0xc0>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d022      	beq.n	8006fb8 <HAL_TIM_Base_Start+0x70>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f7a:	d01d      	beq.n	8006fb8 <HAL_TIM_Base_Start+0x70>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a22      	ldr	r2, [pc, #136]	; (800700c <HAL_TIM_Base_Start+0xc4>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d018      	beq.n	8006fb8 <HAL_TIM_Base_Start+0x70>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a21      	ldr	r2, [pc, #132]	; (8007010 <HAL_TIM_Base_Start+0xc8>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d013      	beq.n	8006fb8 <HAL_TIM_Base_Start+0x70>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a1f      	ldr	r2, [pc, #124]	; (8007014 <HAL_TIM_Base_Start+0xcc>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d00e      	beq.n	8006fb8 <HAL_TIM_Base_Start+0x70>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a1e      	ldr	r2, [pc, #120]	; (8007018 <HAL_TIM_Base_Start+0xd0>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d009      	beq.n	8006fb8 <HAL_TIM_Base_Start+0x70>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a1c      	ldr	r2, [pc, #112]	; (800701c <HAL_TIM_Base_Start+0xd4>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d004      	beq.n	8006fb8 <HAL_TIM_Base_Start+0x70>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a1b      	ldr	r2, [pc, #108]	; (8007020 <HAL_TIM_Base_Start+0xd8>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d115      	bne.n	8006fe4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689a      	ldr	r2, [r3, #8]
 8006fbe:	4b19      	ldr	r3, [pc, #100]	; (8007024 <HAL_TIM_Base_Start+0xdc>)
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2b06      	cmp	r3, #6
 8006fc8:	d015      	beq.n	8006ff6 <HAL_TIM_Base_Start+0xae>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fd0:	d011      	beq.n	8006ff6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f042 0201 	orr.w	r2, r2, #1
 8006fe0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fe2:	e008      	b.n	8006ff6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f042 0201 	orr.w	r2, r2, #1
 8006ff2:	601a      	str	r2, [r3, #0]
 8006ff4:	e000      	b.n	8006ff8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ff6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	40012c00 	.word	0x40012c00
 800700c:	40000400 	.word	0x40000400
 8007010:	40000800 	.word	0x40000800
 8007014:	40000c00 	.word	0x40000c00
 8007018:	40013400 	.word	0x40013400
 800701c:	40014000 	.word	0x40014000
 8007020:	40015000 	.word	0x40015000
 8007024:	00010007 	.word	0x00010007

08007028 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007032:	2300      	movs	r3, #0
 8007034:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800703c:	2b01      	cmp	r3, #1
 800703e:	d101      	bne.n	8007044 <HAL_TIM_ConfigClockSource+0x1c>
 8007040:	2302      	movs	r3, #2
 8007042:	e0ee      	b.n	8007222 <HAL_TIM_ConfigClockSource+0x1fa>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2202      	movs	r2, #2
 8007050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007062:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007066:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800706e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a6b      	ldr	r2, [pc, #428]	; (800722c <HAL_TIM_ConfigClockSource+0x204>)
 800707e:	4293      	cmp	r3, r2
 8007080:	f000 80b9 	beq.w	80071f6 <HAL_TIM_ConfigClockSource+0x1ce>
 8007084:	4a69      	ldr	r2, [pc, #420]	; (800722c <HAL_TIM_ConfigClockSource+0x204>)
 8007086:	4293      	cmp	r3, r2
 8007088:	f200 80be 	bhi.w	8007208 <HAL_TIM_ConfigClockSource+0x1e0>
 800708c:	4a68      	ldr	r2, [pc, #416]	; (8007230 <HAL_TIM_ConfigClockSource+0x208>)
 800708e:	4293      	cmp	r3, r2
 8007090:	f000 80b1 	beq.w	80071f6 <HAL_TIM_ConfigClockSource+0x1ce>
 8007094:	4a66      	ldr	r2, [pc, #408]	; (8007230 <HAL_TIM_ConfigClockSource+0x208>)
 8007096:	4293      	cmp	r3, r2
 8007098:	f200 80b6 	bhi.w	8007208 <HAL_TIM_ConfigClockSource+0x1e0>
 800709c:	4a65      	ldr	r2, [pc, #404]	; (8007234 <HAL_TIM_ConfigClockSource+0x20c>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	f000 80a9 	beq.w	80071f6 <HAL_TIM_ConfigClockSource+0x1ce>
 80070a4:	4a63      	ldr	r2, [pc, #396]	; (8007234 <HAL_TIM_ConfigClockSource+0x20c>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	f200 80ae 	bhi.w	8007208 <HAL_TIM_ConfigClockSource+0x1e0>
 80070ac:	4a62      	ldr	r2, [pc, #392]	; (8007238 <HAL_TIM_ConfigClockSource+0x210>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	f000 80a1 	beq.w	80071f6 <HAL_TIM_ConfigClockSource+0x1ce>
 80070b4:	4a60      	ldr	r2, [pc, #384]	; (8007238 <HAL_TIM_ConfigClockSource+0x210>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	f200 80a6 	bhi.w	8007208 <HAL_TIM_ConfigClockSource+0x1e0>
 80070bc:	4a5f      	ldr	r2, [pc, #380]	; (800723c <HAL_TIM_ConfigClockSource+0x214>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	f000 8099 	beq.w	80071f6 <HAL_TIM_ConfigClockSource+0x1ce>
 80070c4:	4a5d      	ldr	r2, [pc, #372]	; (800723c <HAL_TIM_ConfigClockSource+0x214>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	f200 809e 	bhi.w	8007208 <HAL_TIM_ConfigClockSource+0x1e0>
 80070cc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80070d0:	f000 8091 	beq.w	80071f6 <HAL_TIM_ConfigClockSource+0x1ce>
 80070d4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80070d8:	f200 8096 	bhi.w	8007208 <HAL_TIM_ConfigClockSource+0x1e0>
 80070dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070e0:	f000 8089 	beq.w	80071f6 <HAL_TIM_ConfigClockSource+0x1ce>
 80070e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070e8:	f200 808e 	bhi.w	8007208 <HAL_TIM_ConfigClockSource+0x1e0>
 80070ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070f0:	d03e      	beq.n	8007170 <HAL_TIM_ConfigClockSource+0x148>
 80070f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070f6:	f200 8087 	bhi.w	8007208 <HAL_TIM_ConfigClockSource+0x1e0>
 80070fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070fe:	f000 8086 	beq.w	800720e <HAL_TIM_ConfigClockSource+0x1e6>
 8007102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007106:	d87f      	bhi.n	8007208 <HAL_TIM_ConfigClockSource+0x1e0>
 8007108:	2b70      	cmp	r3, #112	; 0x70
 800710a:	d01a      	beq.n	8007142 <HAL_TIM_ConfigClockSource+0x11a>
 800710c:	2b70      	cmp	r3, #112	; 0x70
 800710e:	d87b      	bhi.n	8007208 <HAL_TIM_ConfigClockSource+0x1e0>
 8007110:	2b60      	cmp	r3, #96	; 0x60
 8007112:	d050      	beq.n	80071b6 <HAL_TIM_ConfigClockSource+0x18e>
 8007114:	2b60      	cmp	r3, #96	; 0x60
 8007116:	d877      	bhi.n	8007208 <HAL_TIM_ConfigClockSource+0x1e0>
 8007118:	2b50      	cmp	r3, #80	; 0x50
 800711a:	d03c      	beq.n	8007196 <HAL_TIM_ConfigClockSource+0x16e>
 800711c:	2b50      	cmp	r3, #80	; 0x50
 800711e:	d873      	bhi.n	8007208 <HAL_TIM_ConfigClockSource+0x1e0>
 8007120:	2b40      	cmp	r3, #64	; 0x40
 8007122:	d058      	beq.n	80071d6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007124:	2b40      	cmp	r3, #64	; 0x40
 8007126:	d86f      	bhi.n	8007208 <HAL_TIM_ConfigClockSource+0x1e0>
 8007128:	2b30      	cmp	r3, #48	; 0x30
 800712a:	d064      	beq.n	80071f6 <HAL_TIM_ConfigClockSource+0x1ce>
 800712c:	2b30      	cmp	r3, #48	; 0x30
 800712e:	d86b      	bhi.n	8007208 <HAL_TIM_ConfigClockSource+0x1e0>
 8007130:	2b20      	cmp	r3, #32
 8007132:	d060      	beq.n	80071f6 <HAL_TIM_ConfigClockSource+0x1ce>
 8007134:	2b20      	cmp	r3, #32
 8007136:	d867      	bhi.n	8007208 <HAL_TIM_ConfigClockSource+0x1e0>
 8007138:	2b00      	cmp	r3, #0
 800713a:	d05c      	beq.n	80071f6 <HAL_TIM_ConfigClockSource+0x1ce>
 800713c:	2b10      	cmp	r3, #16
 800713e:	d05a      	beq.n	80071f6 <HAL_TIM_ConfigClockSource+0x1ce>
 8007140:	e062      	b.n	8007208 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6818      	ldr	r0, [r3, #0]
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	6899      	ldr	r1, [r3, #8]
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	685a      	ldr	r2, [r3, #4]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	f000 f999 	bl	8007488 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007164:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	609a      	str	r2, [r3, #8]
      break;
 800716e:	e04f      	b.n	8007210 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6818      	ldr	r0, [r3, #0]
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	6899      	ldr	r1, [r3, #8]
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	f000 f982 	bl	8007488 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689a      	ldr	r2, [r3, #8]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007192:	609a      	str	r2, [r3, #8]
      break;
 8007194:	e03c      	b.n	8007210 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6818      	ldr	r0, [r3, #0]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	6859      	ldr	r1, [r3, #4]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	461a      	mov	r2, r3
 80071a4:	f000 f8f4 	bl	8007390 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2150      	movs	r1, #80	; 0x50
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 f94d 	bl	800744e <TIM_ITRx_SetConfig>
      break;
 80071b4:	e02c      	b.n	8007210 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6818      	ldr	r0, [r3, #0]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	6859      	ldr	r1, [r3, #4]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	461a      	mov	r2, r3
 80071c4:	f000 f913 	bl	80073ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2160      	movs	r1, #96	; 0x60
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 f93d 	bl	800744e <TIM_ITRx_SetConfig>
      break;
 80071d4:	e01c      	b.n	8007210 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6818      	ldr	r0, [r3, #0]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	6859      	ldr	r1, [r3, #4]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	461a      	mov	r2, r3
 80071e4:	f000 f8d4 	bl	8007390 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2140      	movs	r1, #64	; 0x40
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 f92d 	bl	800744e <TIM_ITRx_SetConfig>
      break;
 80071f4:	e00c      	b.n	8007210 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4619      	mov	r1, r3
 8007200:	4610      	mov	r0, r2
 8007202:	f000 f924 	bl	800744e <TIM_ITRx_SetConfig>
      break;
 8007206:	e003      	b.n	8007210 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	73fb      	strb	r3, [r7, #15]
      break;
 800720c:	e000      	b.n	8007210 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 800720e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007220:	7bfb      	ldrb	r3, [r7, #15]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	00100070 	.word	0x00100070
 8007230:	00100050 	.word	0x00100050
 8007234:	00100040 	.word	0x00100040
 8007238:	00100030 	.word	0x00100030
 800723c:	00100020 	.word	0x00100020

08007240 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a46      	ldr	r2, [pc, #280]	; (800736c <TIM_Base_SetConfig+0x12c>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d017      	beq.n	8007288 <TIM_Base_SetConfig+0x48>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800725e:	d013      	beq.n	8007288 <TIM_Base_SetConfig+0x48>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a43      	ldr	r2, [pc, #268]	; (8007370 <TIM_Base_SetConfig+0x130>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d00f      	beq.n	8007288 <TIM_Base_SetConfig+0x48>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a42      	ldr	r2, [pc, #264]	; (8007374 <TIM_Base_SetConfig+0x134>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d00b      	beq.n	8007288 <TIM_Base_SetConfig+0x48>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a41      	ldr	r2, [pc, #260]	; (8007378 <TIM_Base_SetConfig+0x138>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d007      	beq.n	8007288 <TIM_Base_SetConfig+0x48>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a40      	ldr	r2, [pc, #256]	; (800737c <TIM_Base_SetConfig+0x13c>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d003      	beq.n	8007288 <TIM_Base_SetConfig+0x48>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a3f      	ldr	r2, [pc, #252]	; (8007380 <TIM_Base_SetConfig+0x140>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d108      	bne.n	800729a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800728e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	4313      	orrs	r3, r2
 8007298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a33      	ldr	r2, [pc, #204]	; (800736c <TIM_Base_SetConfig+0x12c>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d023      	beq.n	80072ea <TIM_Base_SetConfig+0xaa>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072a8:	d01f      	beq.n	80072ea <TIM_Base_SetConfig+0xaa>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a30      	ldr	r2, [pc, #192]	; (8007370 <TIM_Base_SetConfig+0x130>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d01b      	beq.n	80072ea <TIM_Base_SetConfig+0xaa>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a2f      	ldr	r2, [pc, #188]	; (8007374 <TIM_Base_SetConfig+0x134>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d017      	beq.n	80072ea <TIM_Base_SetConfig+0xaa>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a2e      	ldr	r2, [pc, #184]	; (8007378 <TIM_Base_SetConfig+0x138>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d013      	beq.n	80072ea <TIM_Base_SetConfig+0xaa>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a2d      	ldr	r2, [pc, #180]	; (800737c <TIM_Base_SetConfig+0x13c>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d00f      	beq.n	80072ea <TIM_Base_SetConfig+0xaa>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a2d      	ldr	r2, [pc, #180]	; (8007384 <TIM_Base_SetConfig+0x144>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d00b      	beq.n	80072ea <TIM_Base_SetConfig+0xaa>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a2c      	ldr	r2, [pc, #176]	; (8007388 <TIM_Base_SetConfig+0x148>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d007      	beq.n	80072ea <TIM_Base_SetConfig+0xaa>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a2b      	ldr	r2, [pc, #172]	; (800738c <TIM_Base_SetConfig+0x14c>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d003      	beq.n	80072ea <TIM_Base_SetConfig+0xaa>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a26      	ldr	r2, [pc, #152]	; (8007380 <TIM_Base_SetConfig+0x140>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d108      	bne.n	80072fc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	4313      	orrs	r3, r2
 8007308:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	689a      	ldr	r2, [r3, #8]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a12      	ldr	r2, [pc, #72]	; (800736c <TIM_Base_SetConfig+0x12c>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d013      	beq.n	8007350 <TIM_Base_SetConfig+0x110>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a14      	ldr	r2, [pc, #80]	; (800737c <TIM_Base_SetConfig+0x13c>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d00f      	beq.n	8007350 <TIM_Base_SetConfig+0x110>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a14      	ldr	r2, [pc, #80]	; (8007384 <TIM_Base_SetConfig+0x144>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d00b      	beq.n	8007350 <TIM_Base_SetConfig+0x110>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a13      	ldr	r2, [pc, #76]	; (8007388 <TIM_Base_SetConfig+0x148>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d007      	beq.n	8007350 <TIM_Base_SetConfig+0x110>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a12      	ldr	r2, [pc, #72]	; (800738c <TIM_Base_SetConfig+0x14c>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d003      	beq.n	8007350 <TIM_Base_SetConfig+0x110>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a0d      	ldr	r2, [pc, #52]	; (8007380 <TIM_Base_SetConfig+0x140>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d103      	bne.n	8007358 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	691a      	ldr	r2, [r3, #16]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	615a      	str	r2, [r3, #20]
}
 800735e:	bf00      	nop
 8007360:	3714      	adds	r7, #20
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	40012c00 	.word	0x40012c00
 8007370:	40000400 	.word	0x40000400
 8007374:	40000800 	.word	0x40000800
 8007378:	40000c00 	.word	0x40000c00
 800737c:	40013400 	.word	0x40013400
 8007380:	40015000 	.word	0x40015000
 8007384:	40014000 	.word	0x40014000
 8007388:	40014400 	.word	0x40014400
 800738c:	40014800 	.word	0x40014800

08007390 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007390:	b480      	push	{r7}
 8007392:	b087      	sub	sp, #28
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6a1b      	ldr	r3, [r3, #32]
 80073a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	f023 0201 	bic.w	r2, r3, #1
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	011b      	lsls	r3, r3, #4
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	f023 030a 	bic.w	r3, r3, #10
 80073cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	621a      	str	r2, [r3, #32]
}
 80073e2:	bf00      	nop
 80073e4:	371c      	adds	r7, #28
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b087      	sub	sp, #28
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	60f8      	str	r0, [r7, #12]
 80073f6:	60b9      	str	r1, [r7, #8]
 80073f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	f023 0210 	bic.w	r2, r3, #16
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6a1b      	ldr	r3, [r3, #32]
 8007410:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007418:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	031b      	lsls	r3, r3, #12
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	4313      	orrs	r3, r2
 8007422:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800742a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	011b      	lsls	r3, r3, #4
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	4313      	orrs	r3, r2
 8007434:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	621a      	str	r2, [r3, #32]
}
 8007442:	bf00      	nop
 8007444:	371c      	adds	r7, #28
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr

0800744e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800744e:	b480      	push	{r7}
 8007450:	b085      	sub	sp, #20
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
 8007456:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007468:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	4313      	orrs	r3, r2
 8007470:	f043 0307 	orr.w	r3, r3, #7
 8007474:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	609a      	str	r2, [r3, #8]
}
 800747c:	bf00      	nop
 800747e:	3714      	adds	r7, #20
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007488:	b480      	push	{r7}
 800748a:	b087      	sub	sp, #28
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]
 8007494:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	021a      	lsls	r2, r3, #8
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	431a      	orrs	r2, r3
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	697a      	ldr	r2, [r7, #20]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	697a      	ldr	r2, [r7, #20]
 80074ba:	609a      	str	r2, [r3, #8]
}
 80074bc:	bf00      	nop
 80074be:	371c      	adds	r7, #28
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d101      	bne.n	80074e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074dc:	2302      	movs	r3, #2
 80074de:	e074      	b.n	80075ca <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2202      	movs	r2, #2
 80074ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a34      	ldr	r2, [pc, #208]	; (80075d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d009      	beq.n	800751e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a33      	ldr	r2, [pc, #204]	; (80075dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d004      	beq.n	800751e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a31      	ldr	r2, [pc, #196]	; (80075e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d108      	bne.n	8007530 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007524:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	4313      	orrs	r3, r2
 800752e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800753a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	4313      	orrs	r3, r2
 8007544:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a21      	ldr	r2, [pc, #132]	; (80075d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d022      	beq.n	800759e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007560:	d01d      	beq.n	800759e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a1f      	ldr	r2, [pc, #124]	; (80075e4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d018      	beq.n	800759e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a1d      	ldr	r2, [pc, #116]	; (80075e8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d013      	beq.n	800759e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a1c      	ldr	r2, [pc, #112]	; (80075ec <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d00e      	beq.n	800759e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a15      	ldr	r2, [pc, #84]	; (80075dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d009      	beq.n	800759e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a18      	ldr	r2, [pc, #96]	; (80075f0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d004      	beq.n	800759e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a11      	ldr	r2, [pc, #68]	; (80075e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d10c      	bne.n	80075b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	68ba      	ldr	r2, [r7, #8]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68ba      	ldr	r2, [r7, #8]
 80075b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	40012c00 	.word	0x40012c00
 80075dc:	40013400 	.word	0x40013400
 80075e0:	40015000 	.word	0x40015000
 80075e4:	40000400 	.word	0x40000400
 80075e8:	40000800 	.word	0x40000800
 80075ec:	40000c00 	.word	0x40000c00
 80075f0:	40014000 	.word	0x40014000

080075f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007604:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007608:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	b29a      	uxth	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3714      	adds	r7, #20
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr

08007622 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007622:	b480      	push	{r7}
 8007624:	b085      	sub	sp, #20
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800762a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800762e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007636:	b29a      	uxth	r2, r3
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	b29b      	uxth	r3, r3
 800763c:	43db      	mvns	r3, r3
 800763e:	b29b      	uxth	r3, r3
 8007640:	4013      	ands	r3, r2
 8007642:	b29a      	uxth	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	3714      	adds	r7, #20
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007658:	b084      	sub	sp, #16
 800765a:	b480      	push	{r7}
 800765c:	b083      	sub	sp, #12
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	f107 0014 	add.w	r0, r7, #20
 8007666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	b004      	add	sp, #16
 8007698:	4770      	bx	lr
	...

0800769c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800769c:	b480      	push	{r7}
 800769e:	b09d      	sub	sp, #116	; 0x74
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80076a6:	2300      	movs	r3, #0
 80076a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4413      	add	r3, r2
 80076b6:	881b      	ldrh	r3, [r3, #0]
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80076be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076c2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	78db      	ldrb	r3, [r3, #3]
 80076ca:	2b03      	cmp	r3, #3
 80076cc:	d81f      	bhi.n	800770e <USB_ActivateEndpoint+0x72>
 80076ce:	a201      	add	r2, pc, #4	; (adr r2, 80076d4 <USB_ActivateEndpoint+0x38>)
 80076d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d4:	080076e5 	.word	0x080076e5
 80076d8:	08007701 	.word	0x08007701
 80076dc:	08007717 	.word	0x08007717
 80076e0:	080076f3 	.word	0x080076f3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80076e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80076e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80076ec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80076f0:	e012      	b.n	8007718 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80076f2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80076f6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80076fa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80076fe:	e00b      	b.n	8007718 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007700:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007704:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007708:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800770c:	e004      	b.n	8007718 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007714:	e000      	b.n	8007718 <USB_ActivateEndpoint+0x7c>
      break;
 8007716:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	441a      	add	r2, r3
 8007722:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800772a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800772e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007736:	b29b      	uxth	r3, r3
 8007738:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	b29b      	uxth	r3, r3
 8007748:	b21b      	sxth	r3, r3
 800774a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800774e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007752:	b21a      	sxth	r2, r3
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	b21b      	sxth	r3, r3
 800775a:	4313      	orrs	r3, r2
 800775c:	b21b      	sxth	r3, r3
 800775e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	441a      	add	r2, r3
 800776c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007770:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007774:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007778:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800777c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007780:	b29b      	uxth	r3, r3
 8007782:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	7b1b      	ldrb	r3, [r3, #12]
 8007788:	2b00      	cmp	r3, #0
 800778a:	f040 8149 	bne.w	8007a20 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	785b      	ldrb	r3, [r3, #1]
 8007792:	2b00      	cmp	r3, #0
 8007794:	f000 8084 	beq.w	80078a0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	61bb      	str	r3, [r7, #24]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	461a      	mov	r2, r3
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	4413      	add	r3, r2
 80077aa:	61bb      	str	r3, [r7, #24]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	00da      	lsls	r2, r3, #3
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	4413      	add	r3, r2
 80077b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077ba:	617b      	str	r3, [r7, #20]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	88db      	ldrh	r3, [r3, #6]
 80077c0:	085b      	lsrs	r3, r3, #1
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	005b      	lsls	r3, r3, #1
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	881b      	ldrh	r3, [r3, #0]
 80077d8:	827b      	strh	r3, [r7, #18]
 80077da:	8a7b      	ldrh	r3, [r7, #18]
 80077dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d01b      	beq.n	800781c <USB_ActivateEndpoint+0x180>
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	4413      	add	r3, r2
 80077ee:	881b      	ldrh	r3, [r3, #0]
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077fa:	823b      	strh	r3, [r7, #16]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	441a      	add	r2, r3
 8007806:	8a3b      	ldrh	r3, [r7, #16]
 8007808:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800780c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007810:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007814:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007818:	b29b      	uxth	r3, r3
 800781a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	78db      	ldrb	r3, [r3, #3]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d020      	beq.n	8007866 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4413      	add	r3, r2
 800782e:	881b      	ldrh	r3, [r3, #0]
 8007830:	b29b      	uxth	r3, r3
 8007832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800783a:	81bb      	strh	r3, [r7, #12]
 800783c:	89bb      	ldrh	r3, [r7, #12]
 800783e:	f083 0320 	eor.w	r3, r3, #32
 8007842:	81bb      	strh	r3, [r7, #12]
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	441a      	add	r2, r3
 800784e:	89bb      	ldrh	r3, [r7, #12]
 8007850:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007854:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800785c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007860:	b29b      	uxth	r3, r3
 8007862:	8013      	strh	r3, [r2, #0]
 8007864:	e2a6      	b.n	8007db4 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	881b      	ldrh	r3, [r3, #0]
 8007872:	b29b      	uxth	r3, r3
 8007874:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800787c:	81fb      	strh	r3, [r7, #14]
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	441a      	add	r2, r3
 8007888:	89fb      	ldrh	r3, [r7, #14]
 800788a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800788e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800789a:	b29b      	uxth	r3, r3
 800789c:	8013      	strh	r3, [r2, #0]
 800789e:	e289      	b.n	8007db4 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	633b      	str	r3, [r7, #48]	; 0x30
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	461a      	mov	r2, r3
 80078ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b0:	4413      	add	r3, r2
 80078b2:	633b      	str	r3, [r7, #48]	; 0x30
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	00da      	lsls	r2, r3, #3
 80078ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078bc:	4413      	add	r3, r2
 80078be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	88db      	ldrh	r3, [r3, #6]
 80078c8:	085b      	lsrs	r3, r3, #1
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	005b      	lsls	r3, r3, #1
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078de:	b29b      	uxth	r3, r3
 80078e0:	461a      	mov	r2, r3
 80078e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e4:	4413      	add	r3, r2
 80078e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	00da      	lsls	r2, r3, #3
 80078ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f0:	4413      	add	r3, r2
 80078f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078f6:	627b      	str	r3, [r7, #36]	; 0x24
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	2b3e      	cmp	r3, #62	; 0x3e
 80078fe:	d918      	bls.n	8007932 <USB_ActivateEndpoint+0x296>
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	095b      	lsrs	r3, r3, #5
 8007906:	66bb      	str	r3, [r7, #104]	; 0x68
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	f003 031f 	and.w	r3, r3, #31
 8007910:	2b00      	cmp	r3, #0
 8007912:	d102      	bne.n	800791a <USB_ActivateEndpoint+0x27e>
 8007914:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007916:	3b01      	subs	r3, #1
 8007918:	66bb      	str	r3, [r7, #104]	; 0x68
 800791a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800791c:	b29b      	uxth	r3, r3
 800791e:	029b      	lsls	r3, r3, #10
 8007920:	b29b      	uxth	r3, r3
 8007922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800792a:	b29a      	uxth	r2, r3
 800792c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792e:	801a      	strh	r2, [r3, #0]
 8007930:	e029      	b.n	8007986 <USB_ActivateEndpoint+0x2ea>
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d112      	bne.n	8007960 <USB_ActivateEndpoint+0x2c4>
 800793a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793c:	881b      	ldrh	r3, [r3, #0]
 800793e:	b29b      	uxth	r3, r3
 8007940:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007944:	b29a      	uxth	r2, r3
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	801a      	strh	r2, [r3, #0]
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794c:	881b      	ldrh	r3, [r3, #0]
 800794e:	b29b      	uxth	r3, r3
 8007950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007958:	b29a      	uxth	r2, r3
 800795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795c:	801a      	strh	r2, [r3, #0]
 800795e:	e012      	b.n	8007986 <USB_ActivateEndpoint+0x2ea>
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	085b      	lsrs	r3, r3, #1
 8007966:	66bb      	str	r3, [r7, #104]	; 0x68
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	f003 0301 	and.w	r3, r3, #1
 8007970:	2b00      	cmp	r3, #0
 8007972:	d002      	beq.n	800797a <USB_ActivateEndpoint+0x2de>
 8007974:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007976:	3301      	adds	r3, #1
 8007978:	66bb      	str	r3, [r7, #104]	; 0x68
 800797a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800797c:	b29b      	uxth	r3, r3
 800797e:	029b      	lsls	r3, r3, #10
 8007980:	b29a      	uxth	r2, r3
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4413      	add	r3, r2
 8007990:	881b      	ldrh	r3, [r3, #0]
 8007992:	847b      	strh	r3, [r7, #34]	; 0x22
 8007994:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d01b      	beq.n	80079d6 <USB_ActivateEndpoint+0x33a>
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	4413      	add	r3, r2
 80079a8:	881b      	ldrh	r3, [r3, #0]
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079b4:	843b      	strh	r3, [r7, #32]
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	441a      	add	r2, r3
 80079c0:	8c3b      	ldrh	r3, [r7, #32]
 80079c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	4413      	add	r3, r2
 80079e0:	881b      	ldrh	r3, [r3, #0]
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ec:	83fb      	strh	r3, [r7, #30]
 80079ee:	8bfb      	ldrh	r3, [r7, #30]
 80079f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80079f4:	83fb      	strh	r3, [r7, #30]
 80079f6:	8bfb      	ldrh	r3, [r7, #30]
 80079f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80079fc:	83fb      	strh	r3, [r7, #30]
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	441a      	add	r2, r3
 8007a08:	8bfb      	ldrh	r3, [r7, #30]
 8007a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	8013      	strh	r3, [r2, #0]
 8007a1e:	e1c9      	b.n	8007db4 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	78db      	ldrb	r3, [r3, #3]
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d11e      	bne.n	8007a66 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	4413      	add	r3, r2
 8007a32:	881b      	ldrh	r3, [r3, #0]
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a3e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	441a      	add	r2, r3
 8007a4c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007a50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a58:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	8013      	strh	r3, [r2, #0]
 8007a64:	e01d      	b.n	8007aa2 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	4413      	add	r3, r2
 8007a70:	881b      	ldrh	r3, [r3, #0]
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a7c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	441a      	add	r2, r3
 8007a8a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	461a      	mov	r2, r3
 8007ab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ab2:	4413      	add	r3, r2
 8007ab4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	00da      	lsls	r2, r3, #3
 8007abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007abe:	4413      	add	r3, r2
 8007ac0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ac4:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	891b      	ldrh	r3, [r3, #8]
 8007aca:	085b      	lsrs	r3, r3, #1
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	005b      	lsls	r3, r3, #1
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ad4:	801a      	strh	r2, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	657b      	str	r3, [r7, #84]	; 0x54
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ae6:	4413      	add	r3, r2
 8007ae8:	657b      	str	r3, [r7, #84]	; 0x54
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	00da      	lsls	r2, r3, #3
 8007af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007af2:	4413      	add	r3, r2
 8007af4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007af8:	653b      	str	r3, [r7, #80]	; 0x50
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	895b      	ldrh	r3, [r3, #10]
 8007afe:	085b      	lsrs	r3, r3, #1
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	005b      	lsls	r3, r3, #1
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b08:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	785b      	ldrb	r3, [r3, #1]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f040 8093 	bne.w	8007c3a <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	4413      	add	r3, r2
 8007b1e:	881b      	ldrh	r3, [r3, #0]
 8007b20:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007b24:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d01b      	beq.n	8007b68 <USB_ActivateEndpoint+0x4cc>
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	881b      	ldrh	r3, [r3, #0]
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b46:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	441a      	add	r2, r3
 8007b52:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007b54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	4413      	add	r3, r2
 8007b72:	881b      	ldrh	r3, [r3, #0]
 8007b74:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007b76:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d01b      	beq.n	8007bb8 <USB_ActivateEndpoint+0x51c>
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4413      	add	r3, r2
 8007b8a:	881b      	ldrh	r3, [r3, #0]
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b96:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	441a      	add	r2, r3
 8007ba2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4413      	add	r3, r2
 8007bc2:	881b      	ldrh	r3, [r3, #0]
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bce:	873b      	strh	r3, [r7, #56]	; 0x38
 8007bd0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007bd2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007bd6:	873b      	strh	r3, [r7, #56]	; 0x38
 8007bd8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007bda:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007bde:	873b      	strh	r3, [r7, #56]	; 0x38
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	441a      	add	r2, r3
 8007bea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4413      	add	r3, r2
 8007c0a:	881b      	ldrh	r3, [r3, #0]
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c16:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	441a      	add	r2, r3
 8007c22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	8013      	strh	r3, [r2, #0]
 8007c38:	e0bc      	b.n	8007db4 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	4413      	add	r3, r2
 8007c44:	881b      	ldrh	r3, [r3, #0]
 8007c46:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007c4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d01d      	beq.n	8007c92 <USB_ActivateEndpoint+0x5f6>
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	4413      	add	r3, r2
 8007c60:	881b      	ldrh	r3, [r3, #0]
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c6c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	441a      	add	r2, r3
 8007c7a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007c7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	4413      	add	r3, r2
 8007c9c:	881b      	ldrh	r3, [r3, #0]
 8007c9e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007ca2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d01d      	beq.n	8007cea <USB_ActivateEndpoint+0x64e>
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	4413      	add	r3, r2
 8007cb8:	881b      	ldrh	r3, [r3, #0]
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cc4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	441a      	add	r2, r3
 8007cd2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007cd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ce2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	78db      	ldrb	r3, [r3, #3]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d024      	beq.n	8007d3c <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4413      	add	r3, r2
 8007cfc:	881b      	ldrh	r3, [r3, #0]
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d08:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007d0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007d10:	f083 0320 	eor.w	r3, r3, #32
 8007d14:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	441a      	add	r2, r3
 8007d22:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007d26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	8013      	strh	r3, [r2, #0]
 8007d3a:	e01d      	b.n	8007d78 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	4413      	add	r3, r2
 8007d46:	881b      	ldrh	r3, [r3, #0]
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d52:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	441a      	add	r2, r3
 8007d60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007d64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4413      	add	r3, r2
 8007d82:	881b      	ldrh	r3, [r3, #0]
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d8e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	441a      	add	r2, r3
 8007d9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007db4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3774      	adds	r7, #116	; 0x74
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b08d      	sub	sp, #52	; 0x34
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	7b1b      	ldrb	r3, [r3, #12]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f040 808e 	bne.w	8007ef4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	785b      	ldrb	r3, [r3, #1]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d044      	beq.n	8007e6a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4413      	add	r3, r2
 8007dea:	881b      	ldrh	r3, [r3, #0]
 8007dec:	81bb      	strh	r3, [r7, #12]
 8007dee:	89bb      	ldrh	r3, [r7, #12]
 8007df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d01b      	beq.n	8007e30 <USB_DeactivateEndpoint+0x6c>
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4413      	add	r3, r2
 8007e02:	881b      	ldrh	r3, [r3, #0]
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e0e:	817b      	strh	r3, [r7, #10]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	441a      	add	r2, r3
 8007e1a:	897b      	ldrh	r3, [r7, #10]
 8007e1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	4413      	add	r3, r2
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e46:	813b      	strh	r3, [r7, #8]
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	441a      	add	r2, r3
 8007e52:	893b      	ldrh	r3, [r7, #8]
 8007e54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	8013      	strh	r3, [r2, #0]
 8007e68:	e192      	b.n	8008190 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4413      	add	r3, r2
 8007e74:	881b      	ldrh	r3, [r3, #0]
 8007e76:	827b      	strh	r3, [r7, #18]
 8007e78:	8a7b      	ldrh	r3, [r7, #18]
 8007e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d01b      	beq.n	8007eba <USB_DeactivateEndpoint+0xf6>
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4413      	add	r3, r2
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e98:	823b      	strh	r3, [r7, #16]
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	441a      	add	r2, r3
 8007ea4:	8a3b      	ldrh	r3, [r7, #16]
 8007ea6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4413      	add	r3, r2
 8007ec4:	881b      	ldrh	r3, [r3, #0]
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ed0:	81fb      	strh	r3, [r7, #14]
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	441a      	add	r2, r3
 8007edc:	89fb      	ldrh	r3, [r7, #14]
 8007ede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ee2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	8013      	strh	r3, [r2, #0]
 8007ef2:	e14d      	b.n	8008190 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	785b      	ldrb	r3, [r3, #1]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f040 80a5 	bne.w	8008048 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4413      	add	r3, r2
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	843b      	strh	r3, [r7, #32]
 8007f0c:	8c3b      	ldrh	r3, [r7, #32]
 8007f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d01b      	beq.n	8007f4e <USB_DeactivateEndpoint+0x18a>
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	881b      	ldrh	r3, [r3, #0]
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f2c:	83fb      	strh	r3, [r7, #30]
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	441a      	add	r2, r3
 8007f38:	8bfb      	ldrh	r3, [r7, #30]
 8007f3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	881b      	ldrh	r3, [r3, #0]
 8007f5a:	83bb      	strh	r3, [r7, #28]
 8007f5c:	8bbb      	ldrh	r3, [r7, #28]
 8007f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d01b      	beq.n	8007f9e <USB_DeactivateEndpoint+0x1da>
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	881b      	ldrh	r3, [r3, #0]
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f7c:	837b      	strh	r3, [r7, #26]
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	441a      	add	r2, r3
 8007f88:	8b7b      	ldrh	r3, [r7, #26]
 8007f8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	4413      	add	r3, r2
 8007fa8:	881b      	ldrh	r3, [r3, #0]
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fb4:	833b      	strh	r3, [r7, #24]
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	441a      	add	r2, r3
 8007fc0:	8b3b      	ldrh	r3, [r7, #24]
 8007fc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	4413      	add	r3, r2
 8007fe0:	881b      	ldrh	r3, [r3, #0]
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fec:	82fb      	strh	r3, [r7, #22]
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	441a      	add	r2, r3
 8007ff8:	8afb      	ldrh	r3, [r7, #22]
 8007ffa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ffe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800800a:	b29b      	uxth	r3, r3
 800800c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4413      	add	r3, r2
 8008018:	881b      	ldrh	r3, [r3, #0]
 800801a:	b29b      	uxth	r3, r3
 800801c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008020:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008024:	82bb      	strh	r3, [r7, #20]
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	441a      	add	r2, r3
 8008030:	8abb      	ldrh	r3, [r7, #20]
 8008032:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008036:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800803a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800803e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008042:	b29b      	uxth	r3, r3
 8008044:	8013      	strh	r3, [r2, #0]
 8008046:	e0a3      	b.n	8008190 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	4413      	add	r3, r2
 8008052:	881b      	ldrh	r3, [r3, #0]
 8008054:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008056:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d01b      	beq.n	8008098 <USB_DeactivateEndpoint+0x2d4>
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4413      	add	r3, r2
 800806a:	881b      	ldrh	r3, [r3, #0]
 800806c:	b29b      	uxth	r3, r3
 800806e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008076:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	441a      	add	r2, r3
 8008082:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800808c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008094:	b29b      	uxth	r3, r3
 8008096:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	4413      	add	r3, r2
 80080a2:	881b      	ldrh	r3, [r3, #0]
 80080a4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80080a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80080a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d01b      	beq.n	80080e8 <USB_DeactivateEndpoint+0x324>
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	4413      	add	r3, r2
 80080ba:	881b      	ldrh	r3, [r3, #0]
 80080bc:	b29b      	uxth	r3, r3
 80080be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080c6:	853b      	strh	r3, [r7, #40]	; 0x28
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	441a      	add	r2, r3
 80080d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80080d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4413      	add	r3, r2
 80080f2:	881b      	ldrh	r3, [r3, #0]
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080fe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	441a      	add	r2, r3
 800810a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800810c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008114:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800811c:	b29b      	uxth	r3, r3
 800811e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	4413      	add	r3, r2
 800812a:	881b      	ldrh	r3, [r3, #0]
 800812c:	b29b      	uxth	r3, r3
 800812e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008136:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	441a      	add	r2, r3
 8008142:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008144:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008148:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800814c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008154:	b29b      	uxth	r3, r3
 8008156:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	4413      	add	r3, r2
 8008162:	881b      	ldrh	r3, [r3, #0]
 8008164:	b29b      	uxth	r3, r3
 8008166:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800816a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800816e:	847b      	strh	r3, [r7, #34]	; 0x22
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	441a      	add	r2, r3
 800817a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800817c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008180:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008184:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800818c:	b29b      	uxth	r3, r3
 800818e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3734      	adds	r7, #52	; 0x34
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr

0800819e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b0c2      	sub	sp, #264	; 0x108
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081ac:	6018      	str	r0, [r3, #0]
 80081ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081b6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80081b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	785b      	ldrb	r3, [r3, #1]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	f040 867b 	bne.w	8008ec0 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80081ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	699a      	ldr	r2, [r3, #24]
 80081d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d908      	bls.n	80081f8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80081e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80081f6:	e007      	b.n	8008208 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80081f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800820c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	7b1b      	ldrb	r3, [r3, #12]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d13a      	bne.n	800828e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800821c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	6959      	ldr	r1, [r3, #20]
 8008224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	88da      	ldrh	r2, [r3, #6]
 8008230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008234:	b29b      	uxth	r3, r3
 8008236:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800823a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800823e:	6800      	ldr	r0, [r0, #0]
 8008240:	f001 fc1d 	bl	8009a7e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008248:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	613b      	str	r3, [r7, #16]
 8008250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008254:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800825e:	b29b      	uxth	r3, r3
 8008260:	461a      	mov	r2, r3
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	4413      	add	r3, r2
 8008266:	613b      	str	r3, [r7, #16]
 8008268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800826c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	00da      	lsls	r2, r3, #3
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	4413      	add	r3, r2
 800827a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800827e:	60fb      	str	r3, [r7, #12]
 8008280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008284:	b29a      	uxth	r2, r3
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	801a      	strh	r2, [r3, #0]
 800828a:	f000 bde3 	b.w	8008e54 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800828e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	78db      	ldrb	r3, [r3, #3]
 800829a:	2b02      	cmp	r3, #2
 800829c:	f040 843a 	bne.w	8008b14 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80082a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	6a1a      	ldr	r2, [r3, #32]
 80082ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	f240 83b7 	bls.w	8008a2c <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80082be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	4413      	add	r3, r2
 80082d8:	881b      	ldrh	r3, [r3, #0]
 80082da:	b29b      	uxth	r3, r3
 80082dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082e4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80082e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	441a      	add	r2, r3
 8008302:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800830a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800830e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008316:	b29b      	uxth	r3, r3
 8008318:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800831a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800831e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	6a1a      	ldr	r2, [r3, #32]
 8008326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800832a:	1ad2      	subs	r2, r2, r3
 800832c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008330:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800833c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	4413      	add	r3, r2
 8008352:	881b      	ldrh	r3, [r3, #0]
 8008354:	b29b      	uxth	r3, r3
 8008356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800835a:	2b00      	cmp	r3, #0
 800835c:	f000 81b3 	beq.w	80086c6 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008364:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	633b      	str	r3, [r7, #48]	; 0x30
 800836c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	785b      	ldrb	r3, [r3, #1]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d16d      	bne.n	8008458 <USB_EPStartXfer+0x2ba>
 800837c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008380:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	62bb      	str	r3, [r7, #40]	; 0x28
 8008388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800838c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008396:	b29b      	uxth	r3, r3
 8008398:	461a      	mov	r2, r3
 800839a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839c:	4413      	add	r3, r2
 800839e:	62bb      	str	r3, [r7, #40]	; 0x28
 80083a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	00da      	lsls	r2, r3, #3
 80083ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b0:	4413      	add	r3, r2
 80083b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80083b6:	627b      	str	r3, [r7, #36]	; 0x24
 80083b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083bc:	2b3e      	cmp	r3, #62	; 0x3e
 80083be:	d91c      	bls.n	80083fa <USB_EPStartXfer+0x25c>
 80083c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083c4:	095b      	lsrs	r3, r3, #5
 80083c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80083ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083ce:	f003 031f 	and.w	r3, r3, #31
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d104      	bne.n	80083e0 <USB_EPStartXfer+0x242>
 80083d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80083da:	3b01      	subs	r3, #1
 80083dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80083e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	029b      	lsls	r3, r3, #10
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f6:	801a      	strh	r2, [r3, #0]
 80083f8:	e053      	b.n	80084a2 <USB_EPStartXfer+0x304>
 80083fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d112      	bne.n	8008428 <USB_EPStartXfer+0x28a>
 8008402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008404:	881b      	ldrh	r3, [r3, #0]
 8008406:	b29b      	uxth	r3, r3
 8008408:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800840c:	b29a      	uxth	r2, r3
 800840e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008410:	801a      	strh	r2, [r3, #0]
 8008412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008414:	881b      	ldrh	r3, [r3, #0]
 8008416:	b29b      	uxth	r3, r3
 8008418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800841c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008420:	b29a      	uxth	r2, r3
 8008422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008424:	801a      	strh	r2, [r3, #0]
 8008426:	e03c      	b.n	80084a2 <USB_EPStartXfer+0x304>
 8008428:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800842c:	085b      	lsrs	r3, r3, #1
 800842e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008436:	f003 0301 	and.w	r3, r3, #1
 800843a:	2b00      	cmp	r3, #0
 800843c:	d004      	beq.n	8008448 <USB_EPStartXfer+0x2aa>
 800843e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008442:	3301      	adds	r3, #1
 8008444:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008448:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800844c:	b29b      	uxth	r3, r3
 800844e:	029b      	lsls	r3, r3, #10
 8008450:	b29a      	uxth	r2, r3
 8008452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008454:	801a      	strh	r2, [r3, #0]
 8008456:	e024      	b.n	80084a2 <USB_EPStartXfer+0x304>
 8008458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800845c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	785b      	ldrb	r3, [r3, #1]
 8008464:	2b01      	cmp	r3, #1
 8008466:	d11c      	bne.n	80084a2 <USB_EPStartXfer+0x304>
 8008468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800846c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008476:	b29b      	uxth	r3, r3
 8008478:	461a      	mov	r2, r3
 800847a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847c:	4413      	add	r3, r2
 800847e:	633b      	str	r3, [r7, #48]	; 0x30
 8008480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	00da      	lsls	r2, r3, #3
 800848e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008490:	4413      	add	r3, r2
 8008492:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008496:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800849c:	b29a      	uxth	r2, r3
 800849e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80084a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	895b      	ldrh	r3, [r3, #10]
 80084ae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80084b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	6959      	ldr	r1, [r3, #20]
 80084be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80084c8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80084cc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80084d0:	6800      	ldr	r0, [r0, #0]
 80084d2:	f001 fad4 	bl	8009a7e <USB_WritePMA>
            ep->xfer_buff += len;
 80084d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	695a      	ldr	r2, [r3, #20]
 80084e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084e6:	441a      	add	r2, r3
 80084e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80084f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	6a1a      	ldr	r2, [r3, #32]
 8008500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	429a      	cmp	r2, r3
 800850e:	d90f      	bls.n	8008530 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8008510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	6a1a      	ldr	r2, [r3, #32]
 800851c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008520:	1ad2      	subs	r2, r2, r3
 8008522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	621a      	str	r2, [r3, #32]
 800852e:	e00e      	b.n	800854e <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8008530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2200      	movs	r2, #0
 800854c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800854e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	785b      	ldrb	r3, [r3, #1]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d16d      	bne.n	800863a <USB_EPStartXfer+0x49c>
 800855e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008562:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	61bb      	str	r3, [r7, #24]
 800856a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800856e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008578:	b29b      	uxth	r3, r3
 800857a:	461a      	mov	r2, r3
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	4413      	add	r3, r2
 8008580:	61bb      	str	r3, [r7, #24]
 8008582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	00da      	lsls	r2, r3, #3
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	4413      	add	r3, r2
 8008594:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008598:	617b      	str	r3, [r7, #20]
 800859a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800859e:	2b3e      	cmp	r3, #62	; 0x3e
 80085a0:	d91c      	bls.n	80085dc <USB_EPStartXfer+0x43e>
 80085a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085a6:	095b      	lsrs	r3, r3, #5
 80085a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80085ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085b0:	f003 031f 	and.w	r3, r3, #31
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d104      	bne.n	80085c2 <USB_EPStartXfer+0x424>
 80085b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085bc:	3b01      	subs	r3, #1
 80085be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80085c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	029b      	lsls	r3, r3, #10
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085d4:	b29a      	uxth	r2, r3
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	801a      	strh	r2, [r3, #0]
 80085da:	e059      	b.n	8008690 <USB_EPStartXfer+0x4f2>
 80085dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d112      	bne.n	800860a <USB_EPStartXfer+0x46c>
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	881b      	ldrh	r3, [r3, #0]
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	801a      	strh	r2, [r3, #0]
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	881b      	ldrh	r3, [r3, #0]
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008602:	b29a      	uxth	r2, r3
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	801a      	strh	r2, [r3, #0]
 8008608:	e042      	b.n	8008690 <USB_EPStartXfer+0x4f2>
 800860a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800860e:	085b      	lsrs	r3, r3, #1
 8008610:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008618:	f003 0301 	and.w	r3, r3, #1
 800861c:	2b00      	cmp	r3, #0
 800861e:	d004      	beq.n	800862a <USB_EPStartXfer+0x48c>
 8008620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008624:	3301      	adds	r3, #1
 8008626:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800862a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800862e:	b29b      	uxth	r3, r3
 8008630:	029b      	lsls	r3, r3, #10
 8008632:	b29a      	uxth	r2, r3
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	801a      	strh	r2, [r3, #0]
 8008638:	e02a      	b.n	8008690 <USB_EPStartXfer+0x4f2>
 800863a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800863e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	785b      	ldrb	r3, [r3, #1]
 8008646:	2b01      	cmp	r3, #1
 8008648:	d122      	bne.n	8008690 <USB_EPStartXfer+0x4f2>
 800864a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800864e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	623b      	str	r3, [r7, #32]
 8008656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800865a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008664:	b29b      	uxth	r3, r3
 8008666:	461a      	mov	r2, r3
 8008668:	6a3b      	ldr	r3, [r7, #32]
 800866a:	4413      	add	r3, r2
 800866c:	623b      	str	r3, [r7, #32]
 800866e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	00da      	lsls	r2, r3, #3
 800867c:	6a3b      	ldr	r3, [r7, #32]
 800867e:	4413      	add	r3, r2
 8008680:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008684:	61fb      	str	r3, [r7, #28]
 8008686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800868a:	b29a      	uxth	r2, r3
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	891b      	ldrh	r3, [r3, #8]
 800869c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	6959      	ldr	r1, [r3, #20]
 80086ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80086b6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80086ba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80086be:	6800      	ldr	r0, [r0, #0]
 80086c0:	f001 f9dd 	bl	8009a7e <USB_WritePMA>
 80086c4:	e3c6      	b.n	8008e54 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80086c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	785b      	ldrb	r3, [r3, #1]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d16d      	bne.n	80087b2 <USB_EPStartXfer+0x614>
 80086d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80086e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	461a      	mov	r2, r3
 80086f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086f6:	4413      	add	r3, r2
 80086f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80086fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	00da      	lsls	r2, r3, #3
 8008708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800870a:	4413      	add	r3, r2
 800870c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008710:	647b      	str	r3, [r7, #68]	; 0x44
 8008712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008716:	2b3e      	cmp	r3, #62	; 0x3e
 8008718:	d91c      	bls.n	8008754 <USB_EPStartXfer+0x5b6>
 800871a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800871e:	095b      	lsrs	r3, r3, #5
 8008720:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008728:	f003 031f 	and.w	r3, r3, #31
 800872c:	2b00      	cmp	r3, #0
 800872e:	d104      	bne.n	800873a <USB_EPStartXfer+0x59c>
 8008730:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008734:	3b01      	subs	r3, #1
 8008736:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800873a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800873e:	b29b      	uxth	r3, r3
 8008740:	029b      	lsls	r3, r3, #10
 8008742:	b29b      	uxth	r3, r3
 8008744:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008748:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800874c:	b29a      	uxth	r2, r3
 800874e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008750:	801a      	strh	r2, [r3, #0]
 8008752:	e059      	b.n	8008808 <USB_EPStartXfer+0x66a>
 8008754:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008758:	2b00      	cmp	r3, #0
 800875a:	d112      	bne.n	8008782 <USB_EPStartXfer+0x5e4>
 800875c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800875e:	881b      	ldrh	r3, [r3, #0]
 8008760:	b29b      	uxth	r3, r3
 8008762:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008766:	b29a      	uxth	r2, r3
 8008768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800876a:	801a      	strh	r2, [r3, #0]
 800876c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800876e:	881b      	ldrh	r3, [r3, #0]
 8008770:	b29b      	uxth	r3, r3
 8008772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800877a:	b29a      	uxth	r2, r3
 800877c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800877e:	801a      	strh	r2, [r3, #0]
 8008780:	e042      	b.n	8008808 <USB_EPStartXfer+0x66a>
 8008782:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008786:	085b      	lsrs	r3, r3, #1
 8008788:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800878c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008790:	f003 0301 	and.w	r3, r3, #1
 8008794:	2b00      	cmp	r3, #0
 8008796:	d004      	beq.n	80087a2 <USB_EPStartXfer+0x604>
 8008798:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800879c:	3301      	adds	r3, #1
 800879e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80087a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	029b      	lsls	r3, r3, #10
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087ae:	801a      	strh	r2, [r3, #0]
 80087b0:	e02a      	b.n	8008808 <USB_EPStartXfer+0x66a>
 80087b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	785b      	ldrb	r3, [r3, #1]
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d122      	bne.n	8008808 <USB_EPStartXfer+0x66a>
 80087c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	653b      	str	r3, [r7, #80]	; 0x50
 80087ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087dc:	b29b      	uxth	r3, r3
 80087de:	461a      	mov	r2, r3
 80087e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087e2:	4413      	add	r3, r2
 80087e4:	653b      	str	r3, [r7, #80]	; 0x50
 80087e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	00da      	lsls	r2, r3, #3
 80087f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087f6:	4413      	add	r3, r2
 80087f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80087fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008802:	b29a      	uxth	r2, r3
 8008804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008806:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800880c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	891b      	ldrh	r3, [r3, #8]
 8008814:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800881c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	6959      	ldr	r1, [r3, #20]
 8008824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008828:	b29b      	uxth	r3, r3
 800882a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800882e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008832:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008836:	6800      	ldr	r0, [r0, #0]
 8008838:	f001 f921 	bl	8009a7e <USB_WritePMA>
            ep->xfer_buff += len;
 800883c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	695a      	ldr	r2, [r3, #20]
 8008848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800884c:	441a      	add	r2, r3
 800884e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800885a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800885e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	6a1a      	ldr	r2, [r3, #32]
 8008866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800886a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	691b      	ldr	r3, [r3, #16]
 8008872:	429a      	cmp	r2, r3
 8008874:	d90f      	bls.n	8008896 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8008876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800887a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	6a1a      	ldr	r2, [r3, #32]
 8008882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008886:	1ad2      	subs	r2, r2, r3
 8008888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800888c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	621a      	str	r2, [r3, #32]
 8008894:	e00e      	b.n	80088b4 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8008896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800889a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6a1b      	ldr	r3, [r3, #32]
 80088a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80088a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2200      	movs	r2, #0
 80088b2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80088b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	643b      	str	r3, [r7, #64]	; 0x40
 80088c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	785b      	ldrb	r3, [r3, #1]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d16d      	bne.n	80089ac <USB_EPStartXfer+0x80e>
 80088d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	63bb      	str	r3, [r7, #56]	; 0x38
 80088dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	461a      	mov	r2, r3
 80088ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f0:	4413      	add	r3, r2
 80088f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80088f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	00da      	lsls	r2, r3, #3
 8008902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008904:	4413      	add	r3, r2
 8008906:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800890a:	637b      	str	r3, [r7, #52]	; 0x34
 800890c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008910:	2b3e      	cmp	r3, #62	; 0x3e
 8008912:	d91c      	bls.n	800894e <USB_EPStartXfer+0x7b0>
 8008914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008918:	095b      	lsrs	r3, r3, #5
 800891a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800891e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008922:	f003 031f 	and.w	r3, r3, #31
 8008926:	2b00      	cmp	r3, #0
 8008928:	d104      	bne.n	8008934 <USB_EPStartXfer+0x796>
 800892a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800892e:	3b01      	subs	r3, #1
 8008930:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008938:	b29b      	uxth	r3, r3
 800893a:	029b      	lsls	r3, r3, #10
 800893c:	b29b      	uxth	r3, r3
 800893e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008946:	b29a      	uxth	r2, r3
 8008948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800894a:	801a      	strh	r2, [r3, #0]
 800894c:	e053      	b.n	80089f6 <USB_EPStartXfer+0x858>
 800894e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008952:	2b00      	cmp	r3, #0
 8008954:	d112      	bne.n	800897c <USB_EPStartXfer+0x7de>
 8008956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008958:	881b      	ldrh	r3, [r3, #0]
 800895a:	b29b      	uxth	r3, r3
 800895c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008960:	b29a      	uxth	r2, r3
 8008962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008964:	801a      	strh	r2, [r3, #0]
 8008966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008968:	881b      	ldrh	r3, [r3, #0]
 800896a:	b29b      	uxth	r3, r3
 800896c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008970:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008974:	b29a      	uxth	r2, r3
 8008976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008978:	801a      	strh	r2, [r3, #0]
 800897a:	e03c      	b.n	80089f6 <USB_EPStartXfer+0x858>
 800897c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008980:	085b      	lsrs	r3, r3, #1
 8008982:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800898a:	f003 0301 	and.w	r3, r3, #1
 800898e:	2b00      	cmp	r3, #0
 8008990:	d004      	beq.n	800899c <USB_EPStartXfer+0x7fe>
 8008992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008996:	3301      	adds	r3, #1
 8008998:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800899c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	029b      	lsls	r3, r3, #10
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a8:	801a      	strh	r2, [r3, #0]
 80089aa:	e024      	b.n	80089f6 <USB_EPStartXfer+0x858>
 80089ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	785b      	ldrb	r3, [r3, #1]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d11c      	bne.n	80089f6 <USB_EPStartXfer+0x858>
 80089bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	461a      	mov	r2, r3
 80089ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089d0:	4413      	add	r3, r2
 80089d2:	643b      	str	r3, [r7, #64]	; 0x40
 80089d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	00da      	lsls	r2, r3, #3
 80089e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089e4:	4413      	add	r3, r2
 80089e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80089ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80089f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	895b      	ldrh	r3, [r3, #10]
 8008a02:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	6959      	ldr	r1, [r3, #20]
 8008a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008a1c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008a20:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008a24:	6800      	ldr	r0, [r0, #0]
 8008a26:	f001 f82a 	bl	8009a7e <USB_WritePMA>
 8008a2a:	e213      	b.n	8008e54 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008a2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	6a1b      	ldr	r3, [r3, #32]
 8008a38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008a3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	4413      	add	r3, r2
 8008a56:	881b      	ldrh	r3, [r3, #0]
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a62:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	441a      	add	r2, r3
 8008a80:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008a84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aa8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ab8:	4413      	add	r3, r2
 8008aba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ac0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	00da      	lsls	r2, r3, #3
 8008aca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008acc:	4413      	add	r3, r2
 8008ace:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008ad2:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ad8:	b29a      	uxth	r2, r3
 8008ada:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008adc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ae2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	891b      	ldrh	r3, [r3, #8]
 8008aea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008af2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	6959      	ldr	r1, [r3, #20]
 8008afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008b04:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008b08:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008b0c:	6800      	ldr	r0, [r0, #0]
 8008b0e:	f000 ffb6 	bl	8009a7e <USB_WritePMA>
 8008b12:	e19f      	b.n	8008e54 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	6a1a      	ldr	r2, [r3, #32]
 8008b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b24:	1ad2      	subs	r2, r2, r3
 8008b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	4413      	add	r3, r2
 8008b4c:	881b      	ldrh	r3, [r3, #0]
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	f000 80bc 	beq.w	8008cd2 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	673b      	str	r3, [r7, #112]	; 0x70
 8008b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	785b      	ldrb	r3, [r3, #1]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d16d      	bne.n	8008c52 <USB_EPStartXfer+0xab4>
 8008b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	461a      	mov	r2, r3
 8008b94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b96:	4413      	add	r3, r2
 8008b98:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	00da      	lsls	r2, r3, #3
 8008ba8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008baa:	4413      	add	r3, r2
 8008bac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008bb0:	667b      	str	r3, [r7, #100]	; 0x64
 8008bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bb6:	2b3e      	cmp	r3, #62	; 0x3e
 8008bb8:	d91c      	bls.n	8008bf4 <USB_EPStartXfer+0xa56>
 8008bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bbe:	095b      	lsrs	r3, r3, #5
 8008bc0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bc8:	f003 031f 	and.w	r3, r3, #31
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d104      	bne.n	8008bda <USB_EPStartXfer+0xa3c>
 8008bd0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008bd4:	3b01      	subs	r3, #1
 8008bd6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008bda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	029b      	lsls	r3, r3, #10
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bf0:	801a      	strh	r2, [r3, #0]
 8008bf2:	e053      	b.n	8008c9c <USB_EPStartXfer+0xafe>
 8008bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d112      	bne.n	8008c22 <USB_EPStartXfer+0xa84>
 8008bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bfe:	881b      	ldrh	r3, [r3, #0]
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c0a:	801a      	strh	r2, [r3, #0]
 8008c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c0e:	881b      	ldrh	r3, [r3, #0]
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c1a:	b29a      	uxth	r2, r3
 8008c1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c1e:	801a      	strh	r2, [r3, #0]
 8008c20:	e03c      	b.n	8008c9c <USB_EPStartXfer+0xafe>
 8008c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c26:	085b      	lsrs	r3, r3, #1
 8008c28:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c30:	f003 0301 	and.w	r3, r3, #1
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d004      	beq.n	8008c42 <USB_EPStartXfer+0xaa4>
 8008c38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008c42:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	029b      	lsls	r3, r3, #10
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c4e:	801a      	strh	r2, [r3, #0]
 8008c50:	e024      	b.n	8008c9c <USB_EPStartXfer+0xafe>
 8008c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	785b      	ldrb	r3, [r3, #1]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d11c      	bne.n	8008c9c <USB_EPStartXfer+0xafe>
 8008c62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	461a      	mov	r2, r3
 8008c74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c76:	4413      	add	r3, r2
 8008c78:	673b      	str	r3, [r7, #112]	; 0x70
 8008c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	00da      	lsls	r2, r3, #3
 8008c88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c8a:	4413      	add	r3, r2
 8008c8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008c90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c9a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008c9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ca0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	895b      	ldrh	r3, [r3, #10]
 8008ca8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008cac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	6959      	ldr	r1, [r3, #20]
 8008cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008cc2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008cc6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008cca:	6800      	ldr	r0, [r0, #0]
 8008ccc:	f000 fed7 	bl	8009a7e <USB_WritePMA>
 8008cd0:	e0c0      	b.n	8008e54 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008cd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	785b      	ldrb	r3, [r3, #1]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d16d      	bne.n	8008dbe <USB_EPStartXfer+0xc20>
 8008ce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ce6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008cee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	461a      	mov	r2, r3
 8008d00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d02:	4413      	add	r3, r2
 8008d04:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	00da      	lsls	r2, r3, #3
 8008d14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d16:	4413      	add	r3, r2
 8008d18:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008d1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d22:	2b3e      	cmp	r3, #62	; 0x3e
 8008d24:	d91c      	bls.n	8008d60 <USB_EPStartXfer+0xbc2>
 8008d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d2a:	095b      	lsrs	r3, r3, #5
 8008d2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d34:	f003 031f 	and.w	r3, r3, #31
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d104      	bne.n	8008d46 <USB_EPStartXfer+0xba8>
 8008d3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008d40:	3b01      	subs	r3, #1
 8008d42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008d46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	029b      	lsls	r3, r3, #10
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d58:	b29a      	uxth	r2, r3
 8008d5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d5c:	801a      	strh	r2, [r3, #0]
 8008d5e:	e05f      	b.n	8008e20 <USB_EPStartXfer+0xc82>
 8008d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d112      	bne.n	8008d8e <USB_EPStartXfer+0xbf0>
 8008d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d6a:	881b      	ldrh	r3, [r3, #0]
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d76:	801a      	strh	r2, [r3, #0]
 8008d78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d7a:	881b      	ldrh	r3, [r3, #0]
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d86:	b29a      	uxth	r2, r3
 8008d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d8a:	801a      	strh	r2, [r3, #0]
 8008d8c:	e048      	b.n	8008e20 <USB_EPStartXfer+0xc82>
 8008d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d92:	085b      	lsrs	r3, r3, #1
 8008d94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d9c:	f003 0301 	and.w	r3, r3, #1
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d004      	beq.n	8008dae <USB_EPStartXfer+0xc10>
 8008da4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008da8:	3301      	adds	r3, #1
 8008daa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008dae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	029b      	lsls	r3, r3, #10
 8008db6:	b29a      	uxth	r2, r3
 8008db8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dba:	801a      	strh	r2, [r3, #0]
 8008dbc:	e030      	b.n	8008e20 <USB_EPStartXfer+0xc82>
 8008dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	785b      	ldrb	r3, [r3, #1]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d128      	bne.n	8008e20 <USB_EPStartXfer+0xc82>
 8008dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008de0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	461a      	mov	r2, r3
 8008dee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008df2:	4413      	add	r3, r2
 8008df4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	00da      	lsls	r2, r3, #3
 8008e06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e0a:	4413      	add	r3, r2
 8008e0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008e10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e18:	b29a      	uxth	r2, r3
 8008e1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008e1e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	891b      	ldrh	r3, [r3, #8]
 8008e2c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	6959      	ldr	r1, [r3, #20]
 8008e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008e46:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008e4a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008e4e:	6800      	ldr	r0, [r0, #0]
 8008e50:	f000 fe15 	bl	8009a7e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	4413      	add	r3, r2
 8008e6e:	881b      	ldrh	r3, [r3, #0]
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e7a:	817b      	strh	r3, [r7, #10]
 8008e7c:	897b      	ldrh	r3, [r7, #10]
 8008e7e:	f083 0310 	eor.w	r3, r3, #16
 8008e82:	817b      	strh	r3, [r7, #10]
 8008e84:	897b      	ldrh	r3, [r7, #10]
 8008e86:	f083 0320 	eor.w	r3, r3, #32
 8008e8a:	817b      	strh	r3, [r7, #10]
 8008e8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	441a      	add	r2, r3
 8008ea6:	897b      	ldrh	r3, [r7, #10]
 8008ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	8013      	strh	r3, [r2, #0]
 8008ebc:	f000 bc9f 	b.w	80097fe <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008ec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	7b1b      	ldrb	r3, [r3, #12]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f040 80ae 	bne.w	800902e <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008ed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ed6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	699a      	ldr	r2, [r3, #24]
 8008ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d917      	bls.n	8008f1e <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8008eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	699a      	ldr	r2, [r3, #24]
 8008f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f0e:	1ad2      	subs	r2, r2, r3
 8008f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	619a      	str	r2, [r3, #24]
 8008f1c:	e00e      	b.n	8008f3c <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8008f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008f60:	4413      	add	r3, r2
 8008f62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	00da      	lsls	r2, r3, #3
 8008f74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008f78:	4413      	add	r3, r2
 8008f7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008f7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f86:	2b3e      	cmp	r3, #62	; 0x3e
 8008f88:	d91d      	bls.n	8008fc6 <USB_EPStartXfer+0xe28>
 8008f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f8e:	095b      	lsrs	r3, r3, #5
 8008f90:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f98:	f003 031f 	and.w	r3, r3, #31
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d104      	bne.n	8008faa <USB_EPStartXfer+0xe0c>
 8008fa0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008fa4:	3b01      	subs	r3, #1
 8008fa6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008faa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	029b      	lsls	r3, r3, #10
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fc2:	801a      	strh	r2, [r3, #0]
 8008fc4:	e3e1      	b.n	800978a <USB_EPStartXfer+0x15ec>
 8008fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d116      	bne.n	8008ffc <USB_EPStartXfer+0xe5e>
 8008fce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fd2:	881b      	ldrh	r3, [r3, #0]
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fe0:	801a      	strh	r2, [r3, #0]
 8008fe2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fe6:	881b      	ldrh	r3, [r3, #0]
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ff8:	801a      	strh	r2, [r3, #0]
 8008ffa:	e3c6      	b.n	800978a <USB_EPStartXfer+0x15ec>
 8008ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009000:	085b      	lsrs	r3, r3, #1
 8009002:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800900a:	f003 0301 	and.w	r3, r3, #1
 800900e:	2b00      	cmp	r3, #0
 8009010:	d004      	beq.n	800901c <USB_EPStartXfer+0xe7e>
 8009012:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009016:	3301      	adds	r3, #1
 8009018:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800901c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009020:	b29b      	uxth	r3, r3
 8009022:	029b      	lsls	r3, r3, #10
 8009024:	b29a      	uxth	r2, r3
 8009026:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800902a:	801a      	strh	r2, [r3, #0]
 800902c:	e3ad      	b.n	800978a <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800902e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	78db      	ldrb	r3, [r3, #3]
 800903a:	2b02      	cmp	r3, #2
 800903c:	f040 8200 	bne.w	8009440 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	785b      	ldrb	r3, [r3, #1]
 800904c:	2b00      	cmp	r3, #0
 800904e:	f040 8091 	bne.w	8009174 <USB_EPStartXfer+0xfd6>
 8009052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009056:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009064:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800906e:	b29b      	uxth	r3, r3
 8009070:	461a      	mov	r2, r3
 8009072:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009076:	4413      	add	r3, r2
 8009078:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800907c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	00da      	lsls	r2, r3, #3
 800908a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800908e:	4413      	add	r3, r2
 8009090:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009094:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800909c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	2b3e      	cmp	r3, #62	; 0x3e
 80090a6:	d925      	bls.n	80090f4 <USB_EPStartXfer+0xf56>
 80090a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	095b      	lsrs	r3, r3, #5
 80090b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80090ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	691b      	ldr	r3, [r3, #16]
 80090c6:	f003 031f 	and.w	r3, r3, #31
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d104      	bne.n	80090d8 <USB_EPStartXfer+0xf3a>
 80090ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090d2:	3b01      	subs	r3, #1
 80090d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80090d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090dc:	b29b      	uxth	r3, r3
 80090de:	029b      	lsls	r3, r3, #10
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090ea:	b29a      	uxth	r2, r3
 80090ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80090f0:	801a      	strh	r2, [r3, #0]
 80090f2:	e074      	b.n	80091de <USB_EPStartXfer+0x1040>
 80090f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d116      	bne.n	8009132 <USB_EPStartXfer+0xf94>
 8009104:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009108:	881b      	ldrh	r3, [r3, #0]
 800910a:	b29b      	uxth	r3, r3
 800910c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009110:	b29a      	uxth	r2, r3
 8009112:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009116:	801a      	strh	r2, [r3, #0]
 8009118:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800911c:	881b      	ldrh	r3, [r3, #0]
 800911e:	b29b      	uxth	r3, r3
 8009120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009128:	b29a      	uxth	r2, r3
 800912a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800912e:	801a      	strh	r2, [r3, #0]
 8009130:	e055      	b.n	80091de <USB_EPStartXfer+0x1040>
 8009132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	691b      	ldr	r3, [r3, #16]
 800913e:	085b      	lsrs	r3, r3, #1
 8009140:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	691b      	ldr	r3, [r3, #16]
 8009150:	f003 0301 	and.w	r3, r3, #1
 8009154:	2b00      	cmp	r3, #0
 8009156:	d004      	beq.n	8009162 <USB_EPStartXfer+0xfc4>
 8009158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800915c:	3301      	adds	r3, #1
 800915e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009166:	b29b      	uxth	r3, r3
 8009168:	029b      	lsls	r3, r3, #10
 800916a:	b29a      	uxth	r2, r3
 800916c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009170:	801a      	strh	r2, [r3, #0]
 8009172:	e034      	b.n	80091de <USB_EPStartXfer+0x1040>
 8009174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	785b      	ldrb	r3, [r3, #1]
 8009180:	2b01      	cmp	r3, #1
 8009182:	d12c      	bne.n	80091de <USB_EPStartXfer+0x1040>
 8009184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009188:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009196:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	461a      	mov	r2, r3
 80091a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80091a8:	4413      	add	r3, r2
 80091aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80091ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	00da      	lsls	r2, r3, #3
 80091bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80091c0:	4413      	add	r3, r2
 80091c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80091c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80091ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	b29a      	uxth	r2, r3
 80091d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80091dc:	801a      	strh	r2, [r3, #0]
 80091de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80091ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	785b      	ldrb	r3, [r3, #1]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	f040 8091 	bne.w	8009320 <USB_EPStartXfer+0x1182>
 80091fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009202:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800920c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009210:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800921a:	b29b      	uxth	r3, r3
 800921c:	461a      	mov	r2, r3
 800921e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009222:	4413      	add	r3, r2
 8009224:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800922c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	00da      	lsls	r2, r3, #3
 8009236:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800923a:	4413      	add	r3, r2
 800923c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009240:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	2b3e      	cmp	r3, #62	; 0x3e
 8009252:	d925      	bls.n	80092a0 <USB_EPStartXfer+0x1102>
 8009254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009258:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	691b      	ldr	r3, [r3, #16]
 8009260:	095b      	lsrs	r3, r3, #5
 8009262:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009266:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800926a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	f003 031f 	and.w	r3, r3, #31
 8009276:	2b00      	cmp	r3, #0
 8009278:	d104      	bne.n	8009284 <USB_EPStartXfer+0x10e6>
 800927a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800927e:	3b01      	subs	r3, #1
 8009280:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009288:	b29b      	uxth	r3, r3
 800928a:	029b      	lsls	r3, r3, #10
 800928c:	b29b      	uxth	r3, r3
 800928e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009296:	b29a      	uxth	r2, r3
 8009298:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800929c:	801a      	strh	r2, [r3, #0]
 800929e:	e06d      	b.n	800937c <USB_EPStartXfer+0x11de>
 80092a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d116      	bne.n	80092de <USB_EPStartXfer+0x1140>
 80092b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092b4:	881b      	ldrh	r3, [r3, #0]
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80092bc:	b29a      	uxth	r2, r3
 80092be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092c2:	801a      	strh	r2, [r3, #0]
 80092c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092c8:	881b      	ldrh	r3, [r3, #0]
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092d4:	b29a      	uxth	r2, r3
 80092d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092da:	801a      	strh	r2, [r3, #0]
 80092dc:	e04e      	b.n	800937c <USB_EPStartXfer+0x11de>
 80092de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	085b      	lsrs	r3, r3, #1
 80092ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80092f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	f003 0301 	and.w	r3, r3, #1
 8009300:	2b00      	cmp	r3, #0
 8009302:	d004      	beq.n	800930e <USB_EPStartXfer+0x1170>
 8009304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009308:	3301      	adds	r3, #1
 800930a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800930e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009312:	b29b      	uxth	r3, r3
 8009314:	029b      	lsls	r3, r3, #10
 8009316:	b29a      	uxth	r2, r3
 8009318:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800931c:	801a      	strh	r2, [r3, #0]
 800931e:	e02d      	b.n	800937c <USB_EPStartXfer+0x11de>
 8009320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	785b      	ldrb	r3, [r3, #1]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d125      	bne.n	800937c <USB_EPStartXfer+0x11de>
 8009330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009334:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800933e:	b29b      	uxth	r3, r3
 8009340:	461a      	mov	r2, r3
 8009342:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009346:	4413      	add	r3, r2
 8009348:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800934c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	00da      	lsls	r2, r3, #3
 800935a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800935e:	4413      	add	r3, r2
 8009360:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009364:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800936c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	b29a      	uxth	r2, r3
 8009376:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800937a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800937c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	69db      	ldr	r3, [r3, #28]
 8009388:	2b00      	cmp	r3, #0
 800938a:	f000 81fe 	beq.w	800978a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800938e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009392:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800939c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	4413      	add	r3, r2
 80093a8:	881b      	ldrh	r3, [r3, #0]
 80093aa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80093ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80093b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d005      	beq.n	80093c6 <USB_EPStartXfer+0x1228>
 80093ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80093be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d10d      	bne.n	80093e2 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80093c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80093ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	f040 81db 	bne.w	800978a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80093d4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80093d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f040 81d4 	bne.w	800978a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80093e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	4413      	add	r3, r2
 80093fc:	881b      	ldrh	r3, [r3, #0]
 80093fe:	b29b      	uxth	r3, r3
 8009400:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009408:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800940c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009410:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800941a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	441a      	add	r2, r3
 8009426:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800942a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800942e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009436:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800943a:	b29b      	uxth	r3, r3
 800943c:	8013      	strh	r3, [r2, #0]
 800943e:	e1a4      	b.n	800978a <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	78db      	ldrb	r3, [r3, #3]
 800944c:	2b01      	cmp	r3, #1
 800944e:	f040 819a 	bne.w	8009786 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	699a      	ldr	r2, [r3, #24]
 800945e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	429a      	cmp	r2, r3
 800946c:	d917      	bls.n	800949e <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800946e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	691b      	ldr	r3, [r3, #16]
 800947a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800947e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	699a      	ldr	r2, [r3, #24]
 800948a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800948e:	1ad2      	subs	r2, r2, r3
 8009490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	619a      	str	r2, [r3, #24]
 800949c:	e00e      	b.n	80094bc <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800949e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	699b      	ldr	r3, [r3, #24]
 80094aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80094ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2200      	movs	r2, #0
 80094ba:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80094bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	785b      	ldrb	r3, [r3, #1]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d178      	bne.n	80095be <USB_EPStartXfer+0x1420>
 80094cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80094da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	461a      	mov	r2, r3
 80094ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80094f0:	4413      	add	r3, r2
 80094f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80094f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	00da      	lsls	r2, r3, #3
 8009504:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009508:	4413      	add	r3, r2
 800950a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800950e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009516:	2b3e      	cmp	r3, #62	; 0x3e
 8009518:	d91d      	bls.n	8009556 <USB_EPStartXfer+0x13b8>
 800951a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800951e:	095b      	lsrs	r3, r3, #5
 8009520:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009528:	f003 031f 	and.w	r3, r3, #31
 800952c:	2b00      	cmp	r3, #0
 800952e:	d104      	bne.n	800953a <USB_EPStartXfer+0x139c>
 8009530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009534:	3b01      	subs	r3, #1
 8009536:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800953a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800953e:	b29b      	uxth	r3, r3
 8009540:	029b      	lsls	r3, r3, #10
 8009542:	b29b      	uxth	r3, r3
 8009544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800954c:	b29a      	uxth	r2, r3
 800954e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009552:	801a      	strh	r2, [r3, #0]
 8009554:	e064      	b.n	8009620 <USB_EPStartXfer+0x1482>
 8009556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800955a:	2b00      	cmp	r3, #0
 800955c:	d116      	bne.n	800958c <USB_EPStartXfer+0x13ee>
 800955e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009562:	881b      	ldrh	r3, [r3, #0]
 8009564:	b29b      	uxth	r3, r3
 8009566:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800956a:	b29a      	uxth	r2, r3
 800956c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009570:	801a      	strh	r2, [r3, #0]
 8009572:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009576:	881b      	ldrh	r3, [r3, #0]
 8009578:	b29b      	uxth	r3, r3
 800957a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800957e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009582:	b29a      	uxth	r2, r3
 8009584:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009588:	801a      	strh	r2, [r3, #0]
 800958a:	e049      	b.n	8009620 <USB_EPStartXfer+0x1482>
 800958c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009590:	085b      	lsrs	r3, r3, #1
 8009592:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800959a:	f003 0301 	and.w	r3, r3, #1
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d004      	beq.n	80095ac <USB_EPStartXfer+0x140e>
 80095a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095a6:	3301      	adds	r3, #1
 80095a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80095ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	029b      	lsls	r3, r3, #10
 80095b4:	b29a      	uxth	r2, r3
 80095b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095ba:	801a      	strh	r2, [r3, #0]
 80095bc:	e030      	b.n	8009620 <USB_EPStartXfer+0x1482>
 80095be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	785b      	ldrb	r3, [r3, #1]
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d128      	bne.n	8009620 <USB_EPStartXfer+0x1482>
 80095ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80095dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	461a      	mov	r2, r3
 80095ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80095f2:	4413      	add	r3, r2
 80095f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80095f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	00da      	lsls	r2, r3, #3
 8009606:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800960a:	4413      	add	r3, r2
 800960c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009610:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009618:	b29a      	uxth	r2, r3
 800961a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800961e:	801a      	strh	r2, [r3, #0]
 8009620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009624:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800962e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	785b      	ldrb	r3, [r3, #1]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d178      	bne.n	8009730 <USB_EPStartXfer+0x1592>
 800963e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009642:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800964c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009650:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800965a:	b29b      	uxth	r3, r3
 800965c:	461a      	mov	r2, r3
 800965e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009662:	4413      	add	r3, r2
 8009664:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800966c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	00da      	lsls	r2, r3, #3
 8009676:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800967a:	4413      	add	r3, r2
 800967c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009680:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009688:	2b3e      	cmp	r3, #62	; 0x3e
 800968a:	d91d      	bls.n	80096c8 <USB_EPStartXfer+0x152a>
 800968c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009690:	095b      	lsrs	r3, r3, #5
 8009692:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800969a:	f003 031f 	and.w	r3, r3, #31
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d104      	bne.n	80096ac <USB_EPStartXfer+0x150e>
 80096a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096a6:	3b01      	subs	r3, #1
 80096a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80096ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	029b      	lsls	r3, r3, #10
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096be:	b29a      	uxth	r2, r3
 80096c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096c4:	801a      	strh	r2, [r3, #0]
 80096c6:	e060      	b.n	800978a <USB_EPStartXfer+0x15ec>
 80096c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d116      	bne.n	80096fe <USB_EPStartXfer+0x1560>
 80096d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096d4:	881b      	ldrh	r3, [r3, #0]
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80096dc:	b29a      	uxth	r2, r3
 80096de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096e2:	801a      	strh	r2, [r3, #0]
 80096e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096e8:	881b      	ldrh	r3, [r3, #0]
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096f4:	b29a      	uxth	r2, r3
 80096f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096fa:	801a      	strh	r2, [r3, #0]
 80096fc:	e045      	b.n	800978a <USB_EPStartXfer+0x15ec>
 80096fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009702:	085b      	lsrs	r3, r3, #1
 8009704:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800970c:	f003 0301 	and.w	r3, r3, #1
 8009710:	2b00      	cmp	r3, #0
 8009712:	d004      	beq.n	800971e <USB_EPStartXfer+0x1580>
 8009714:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009718:	3301      	adds	r3, #1
 800971a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800971e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009722:	b29b      	uxth	r3, r3
 8009724:	029b      	lsls	r3, r3, #10
 8009726:	b29a      	uxth	r2, r3
 8009728:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800972c:	801a      	strh	r2, [r3, #0]
 800972e:	e02c      	b.n	800978a <USB_EPStartXfer+0x15ec>
 8009730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009734:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	785b      	ldrb	r3, [r3, #1]
 800973c:	2b01      	cmp	r3, #1
 800973e:	d124      	bne.n	800978a <USB_EPStartXfer+0x15ec>
 8009740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009744:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800974e:	b29b      	uxth	r3, r3
 8009750:	461a      	mov	r2, r3
 8009752:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009756:	4413      	add	r3, r2
 8009758:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800975c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	00da      	lsls	r2, r3, #3
 800976a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800976e:	4413      	add	r3, r2
 8009770:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009774:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800977c:	b29a      	uxth	r2, r3
 800977e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009782:	801a      	strh	r2, [r3, #0]
 8009784:	e001      	b.n	800978a <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8009786:	2301      	movs	r3, #1
 8009788:	e03a      	b.n	8009800 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800978a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800978e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009798:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	4413      	add	r3, r2
 80097a4:	881b      	ldrh	r3, [r3, #0]
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097b0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80097b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80097b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80097bc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80097c0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80097c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80097c8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80097cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	441a      	add	r2, r3
 80097e6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80097ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800980a:	b480      	push	{r7}
 800980c:	b085      	sub	sp, #20
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
 8009812:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	785b      	ldrb	r3, [r3, #1]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d020      	beq.n	800985e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	4413      	add	r3, r2
 8009826:	881b      	ldrh	r3, [r3, #0]
 8009828:	b29b      	uxth	r3, r3
 800982a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800982e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009832:	81bb      	strh	r3, [r7, #12]
 8009834:	89bb      	ldrh	r3, [r7, #12]
 8009836:	f083 0310 	eor.w	r3, r3, #16
 800983a:	81bb      	strh	r3, [r7, #12]
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	441a      	add	r2, r3
 8009846:	89bb      	ldrh	r3, [r7, #12]
 8009848:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800984c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009850:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009858:	b29b      	uxth	r3, r3
 800985a:	8013      	strh	r3, [r2, #0]
 800985c:	e01f      	b.n	800989e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	4413      	add	r3, r2
 8009868:	881b      	ldrh	r3, [r3, #0]
 800986a:	b29b      	uxth	r3, r3
 800986c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009874:	81fb      	strh	r3, [r7, #14]
 8009876:	89fb      	ldrh	r3, [r7, #14]
 8009878:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800987c:	81fb      	strh	r3, [r7, #14]
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	441a      	add	r2, r3
 8009888:	89fb      	ldrh	r3, [r7, #14]
 800988a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800988e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800989a:	b29b      	uxth	r3, r3
 800989c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800989e:	2300      	movs	r3, #0
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3714      	adds	r7, #20
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b087      	sub	sp, #28
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	7b1b      	ldrb	r3, [r3, #12]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f040 809d 	bne.w	80099fa <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	785b      	ldrb	r3, [r3, #1]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d04c      	beq.n	8009962 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	4413      	add	r3, r2
 80098d2:	881b      	ldrh	r3, [r3, #0]
 80098d4:	823b      	strh	r3, [r7, #16]
 80098d6:	8a3b      	ldrh	r3, [r7, #16]
 80098d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d01b      	beq.n	8009918 <USB_EPClearStall+0x6c>
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	4413      	add	r3, r2
 80098ea:	881b      	ldrh	r3, [r3, #0]
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098f6:	81fb      	strh	r3, [r7, #14]
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	441a      	add	r2, r3
 8009902:	89fb      	ldrh	r3, [r7, #14]
 8009904:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009908:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800990c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009910:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009914:	b29b      	uxth	r3, r3
 8009916:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	78db      	ldrb	r3, [r3, #3]
 800991c:	2b01      	cmp	r3, #1
 800991e:	d06c      	beq.n	80099fa <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4413      	add	r3, r2
 800992a:	881b      	ldrh	r3, [r3, #0]
 800992c:	b29b      	uxth	r3, r3
 800992e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009936:	81bb      	strh	r3, [r7, #12]
 8009938:	89bb      	ldrh	r3, [r7, #12]
 800993a:	f083 0320 	eor.w	r3, r3, #32
 800993e:	81bb      	strh	r3, [r7, #12]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	441a      	add	r2, r3
 800994a:	89bb      	ldrh	r3, [r7, #12]
 800994c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009950:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800995c:	b29b      	uxth	r3, r3
 800995e:	8013      	strh	r3, [r2, #0]
 8009960:	e04b      	b.n	80099fa <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	4413      	add	r3, r2
 800996c:	881b      	ldrh	r3, [r3, #0]
 800996e:	82fb      	strh	r3, [r7, #22]
 8009970:	8afb      	ldrh	r3, [r7, #22]
 8009972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009976:	2b00      	cmp	r3, #0
 8009978:	d01b      	beq.n	80099b2 <USB_EPClearStall+0x106>
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	4413      	add	r3, r2
 8009984:	881b      	ldrh	r3, [r3, #0]
 8009986:	b29b      	uxth	r3, r3
 8009988:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800998c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009990:	82bb      	strh	r3, [r7, #20]
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	441a      	add	r2, r3
 800999c:	8abb      	ldrh	r3, [r7, #20]
 800999e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80099aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4413      	add	r3, r2
 80099bc:	881b      	ldrh	r3, [r3, #0]
 80099be:	b29b      	uxth	r3, r3
 80099c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099c8:	827b      	strh	r3, [r7, #18]
 80099ca:	8a7b      	ldrh	r3, [r7, #18]
 80099cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80099d0:	827b      	strh	r3, [r7, #18]
 80099d2:	8a7b      	ldrh	r3, [r7, #18]
 80099d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80099d8:	827b      	strh	r3, [r7, #18]
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	441a      	add	r2, r3
 80099e4:	8a7b      	ldrh	r3, [r7, #18]
 80099e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80099fa:	2300      	movs	r3, #0
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	371c      	adds	r7, #28
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr

08009a08 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	460b      	mov	r3, r1
 8009a12:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009a14:	78fb      	ldrb	r3, [r7, #3]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d103      	bne.n	8009a22 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2280      	movs	r2, #128	; 0x80
 8009a1e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009a22:	2300      	movs	r3, #0
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a48:	b29a      	uxth	r2, r3
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	370c      	adds	r7, #12
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr

08009a5e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009a5e:	b480      	push	{r7}
 8009a60:	b085      	sub	sp, #20
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009a70:	68fb      	ldr	r3, [r7, #12]
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3714      	adds	r7, #20
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr

08009a7e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009a7e:	b480      	push	{r7}
 8009a80:	b08d      	sub	sp, #52	; 0x34
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	60f8      	str	r0, [r7, #12]
 8009a86:	60b9      	str	r1, [r7, #8]
 8009a88:	4611      	mov	r1, r2
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	80fb      	strh	r3, [r7, #6]
 8009a90:	4613      	mov	r3, r2
 8009a92:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009a94:	88bb      	ldrh	r3, [r7, #4]
 8009a96:	3301      	adds	r3, #1
 8009a98:	085b      	lsrs	r3, r3, #1
 8009a9a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009aa4:	88fa      	ldrh	r2, [r7, #6]
 8009aa6:	69fb      	ldr	r3, [r7, #28]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009aae:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009ab0:	6a3b      	ldr	r3, [r7, #32]
 8009ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ab4:	e01b      	b.n	8009aee <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8009ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009abe:	3301      	adds	r3, #1
 8009ac0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	021b      	lsls	r3, r3, #8
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	461a      	mov	r2, r3
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	b29a      	uxth	r2, r3
 8009ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ada:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ade:	3302      	adds	r3, #2
 8009ae0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aea:	3b01      	subs	r3, #1
 8009aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d1e0      	bne.n	8009ab6 <USB_WritePMA+0x38>
  }
}
 8009af4:	bf00      	nop
 8009af6:	bf00      	nop
 8009af8:	3734      	adds	r7, #52	; 0x34
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr

08009b02 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009b02:	b480      	push	{r7}
 8009b04:	b08b      	sub	sp, #44	; 0x2c
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	60f8      	str	r0, [r7, #12]
 8009b0a:	60b9      	str	r1, [r7, #8]
 8009b0c:	4611      	mov	r1, r2
 8009b0e:	461a      	mov	r2, r3
 8009b10:	460b      	mov	r3, r1
 8009b12:	80fb      	strh	r3, [r7, #6]
 8009b14:	4613      	mov	r3, r2
 8009b16:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009b18:	88bb      	ldrh	r3, [r7, #4]
 8009b1a:	085b      	lsrs	r3, r3, #1
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009b28:	88fa      	ldrh	r2, [r7, #6]
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b32:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	627b      	str	r3, [r7, #36]	; 0x24
 8009b38:	e018      	b.n	8009b6c <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009b3a:	6a3b      	ldr	r3, [r7, #32]
 8009b3c:	881b      	ldrh	r3, [r3, #0]
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009b42:	6a3b      	ldr	r3, [r7, #32]
 8009b44:	3302      	adds	r3, #2
 8009b46:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	b2da      	uxtb	r2, r3
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	3301      	adds	r3, #1
 8009b54:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	0a1b      	lsrs	r3, r3, #8
 8009b5a:	b2da      	uxtb	r2, r3
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009b60:	69fb      	ldr	r3, [r7, #28]
 8009b62:	3301      	adds	r3, #1
 8009b64:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8009b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b68:	3b01      	subs	r3, #1
 8009b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8009b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d1e3      	bne.n	8009b3a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009b72:	88bb      	ldrh	r3, [r7, #4]
 8009b74:	f003 0301 	and.w	r3, r3, #1
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d007      	beq.n	8009b8e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8009b7e:	6a3b      	ldr	r3, [r7, #32]
 8009b80:	881b      	ldrh	r3, [r3, #0]
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	b2da      	uxtb	r2, r3
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	701a      	strb	r2, [r3, #0]
  }
}
 8009b8e:	bf00      	nop
 8009b90:	372c      	adds	r7, #44	; 0x2c
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr

08009b9a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b084      	sub	sp, #16
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009ba6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009baa:	f002 f917 	bl	800bddc <USBD_static_malloc>
 8009bae:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d105      	bne.n	8009bc2 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009bbe:	2302      	movs	r3, #2
 8009bc0:	e066      	b.n	8009c90 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	68fa      	ldr	r2, [r7, #12]
 8009bc6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	7c1b      	ldrb	r3, [r3, #16]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d119      	bne.n	8009c06 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009bd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bd6:	2202      	movs	r2, #2
 8009bd8:	2181      	movs	r1, #129	; 0x81
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f001 ffa3 	bl	800bb26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2201      	movs	r2, #1
 8009be4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bea:	2202      	movs	r2, #2
 8009bec:	2101      	movs	r1, #1
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f001 ff99 	bl	800bb26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2210      	movs	r2, #16
 8009c00:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009c04:	e016      	b.n	8009c34 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009c06:	2340      	movs	r3, #64	; 0x40
 8009c08:	2202      	movs	r2, #2
 8009c0a:	2181      	movs	r1, #129	; 0x81
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f001 ff8a 	bl	800bb26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2201      	movs	r2, #1
 8009c16:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009c18:	2340      	movs	r3, #64	; 0x40
 8009c1a:	2202      	movs	r2, #2
 8009c1c:	2101      	movs	r1, #1
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f001 ff81 	bl	800bb26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2201      	movs	r2, #1
 8009c28:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2210      	movs	r2, #16
 8009c30:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009c34:	2308      	movs	r3, #8
 8009c36:	2203      	movs	r2, #3
 8009c38:	2182      	movs	r1, #130	; 0x82
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f001 ff73 	bl	800bb26 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2200      	movs	r2, #0
 8009c56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	7c1b      	ldrb	r3, [r3, #16]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d109      	bne.n	8009c7e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c74:	2101      	movs	r1, #1
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f002 f845 	bl	800bd06 <USBD_LL_PrepareReceive>
 8009c7c:	e007      	b.n	8009c8e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c84:	2340      	movs	r3, #64	; 0x40
 8009c86:	2101      	movs	r1, #1
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f002 f83c 	bl	800bd06 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009c8e:	2300      	movs	r3, #0
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3710      	adds	r7, #16
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009ca4:	2181      	movs	r1, #129	; 0x81
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f001 ff63 	bl	800bb72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009cb2:	2101      	movs	r1, #1
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f001 ff5c 	bl	800bb72 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009cc2:	2182      	movs	r1, #130	; 0x82
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f001 ff54 	bl	800bb72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d00e      	beq.n	8009d02 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f002 f87f 	bl	800bdf8 <USBD_static_free>
    pdev->pClassData = NULL;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3708      	adds	r7, #8
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b086      	sub	sp, #24
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d1c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009d22:	2300      	movs	r3, #0
 8009d24:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d26:	2300      	movs	r3, #0
 8009d28:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d101      	bne.n	8009d34 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009d30:	2303      	movs	r3, #3
 8009d32:	e0af      	b.n	8009e94 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d03f      	beq.n	8009dc0 <USBD_CDC_Setup+0xb4>
 8009d40:	2b20      	cmp	r3, #32
 8009d42:	f040 809f 	bne.w	8009e84 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	88db      	ldrh	r3, [r3, #6]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d02e      	beq.n	8009dac <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	b25b      	sxtb	r3, r3
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	da16      	bge.n	8009d86 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	683a      	ldr	r2, [r7, #0]
 8009d62:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009d64:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d66:	683a      	ldr	r2, [r7, #0]
 8009d68:	88d2      	ldrh	r2, [r2, #6]
 8009d6a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	88db      	ldrh	r3, [r3, #6]
 8009d70:	2b07      	cmp	r3, #7
 8009d72:	bf28      	it	cs
 8009d74:	2307      	movcs	r3, #7
 8009d76:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	89fa      	ldrh	r2, [r7, #14]
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f001 facf 	bl	800b322 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009d84:	e085      	b.n	8009e92 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	785a      	ldrb	r2, [r3, #1]
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	88db      	ldrh	r3, [r3, #6]
 8009d94:	b2da      	uxtb	r2, r3
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009d9c:	6939      	ldr	r1, [r7, #16]
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	88db      	ldrh	r3, [r3, #6]
 8009da2:	461a      	mov	r2, r3
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f001 fae8 	bl	800b37a <USBD_CtlPrepareRx>
      break;
 8009daa:	e072      	b.n	8009e92 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	683a      	ldr	r2, [r7, #0]
 8009db6:	7850      	ldrb	r0, [r2, #1]
 8009db8:	2200      	movs	r2, #0
 8009dba:	6839      	ldr	r1, [r7, #0]
 8009dbc:	4798      	blx	r3
      break;
 8009dbe:	e068      	b.n	8009e92 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	785b      	ldrb	r3, [r3, #1]
 8009dc4:	2b0b      	cmp	r3, #11
 8009dc6:	d852      	bhi.n	8009e6e <USBD_CDC_Setup+0x162>
 8009dc8:	a201      	add	r2, pc, #4	; (adr r2, 8009dd0 <USBD_CDC_Setup+0xc4>)
 8009dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dce:	bf00      	nop
 8009dd0:	08009e01 	.word	0x08009e01
 8009dd4:	08009e7d 	.word	0x08009e7d
 8009dd8:	08009e6f 	.word	0x08009e6f
 8009ddc:	08009e6f 	.word	0x08009e6f
 8009de0:	08009e6f 	.word	0x08009e6f
 8009de4:	08009e6f 	.word	0x08009e6f
 8009de8:	08009e6f 	.word	0x08009e6f
 8009dec:	08009e6f 	.word	0x08009e6f
 8009df0:	08009e6f 	.word	0x08009e6f
 8009df4:	08009e6f 	.word	0x08009e6f
 8009df8:	08009e2b 	.word	0x08009e2b
 8009dfc:	08009e55 	.word	0x08009e55
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	2b03      	cmp	r3, #3
 8009e0a:	d107      	bne.n	8009e1c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009e0c:	f107 030a 	add.w	r3, r7, #10
 8009e10:	2202      	movs	r2, #2
 8009e12:	4619      	mov	r1, r3
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f001 fa84 	bl	800b322 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e1a:	e032      	b.n	8009e82 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009e1c:	6839      	ldr	r1, [r7, #0]
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f001 fa0e 	bl	800b240 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e24:	2303      	movs	r3, #3
 8009e26:	75fb      	strb	r3, [r7, #23]
          break;
 8009e28:	e02b      	b.n	8009e82 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	2b03      	cmp	r3, #3
 8009e34:	d107      	bne.n	8009e46 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009e36:	f107 030d 	add.w	r3, r7, #13
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f001 fa6f 	bl	800b322 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e44:	e01d      	b.n	8009e82 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009e46:	6839      	ldr	r1, [r7, #0]
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f001 f9f9 	bl	800b240 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e4e:	2303      	movs	r3, #3
 8009e50:	75fb      	strb	r3, [r7, #23]
          break;
 8009e52:	e016      	b.n	8009e82 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	2b03      	cmp	r3, #3
 8009e5e:	d00f      	beq.n	8009e80 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009e60:	6839      	ldr	r1, [r7, #0]
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f001 f9ec 	bl	800b240 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e68:	2303      	movs	r3, #3
 8009e6a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009e6c:	e008      	b.n	8009e80 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009e6e:	6839      	ldr	r1, [r7, #0]
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f001 f9e5 	bl	800b240 <USBD_CtlError>
          ret = USBD_FAIL;
 8009e76:	2303      	movs	r3, #3
 8009e78:	75fb      	strb	r3, [r7, #23]
          break;
 8009e7a:	e002      	b.n	8009e82 <USBD_CDC_Setup+0x176>
          break;
 8009e7c:	bf00      	nop
 8009e7e:	e008      	b.n	8009e92 <USBD_CDC_Setup+0x186>
          break;
 8009e80:	bf00      	nop
      }
      break;
 8009e82:	e006      	b.n	8009e92 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009e84:	6839      	ldr	r1, [r7, #0]
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f001 f9da 	bl	800b240 <USBD_CtlError>
      ret = USBD_FAIL;
 8009e8c:	2303      	movs	r3, #3
 8009e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8009e90:	bf00      	nop
  }

  return (uint8_t)ret;
 8009e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3718      	adds	r7, #24
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009eae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d101      	bne.n	8009ebe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009eba:	2303      	movs	r3, #3
 8009ebc:	e04f      	b.n	8009f5e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ec4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009ec6:	78fa      	ldrb	r2, [r7, #3]
 8009ec8:	6879      	ldr	r1, [r7, #4]
 8009eca:	4613      	mov	r3, r2
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	4413      	add	r3, r2
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	440b      	add	r3, r1
 8009ed4:	3318      	adds	r3, #24
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d029      	beq.n	8009f30 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009edc:	78fa      	ldrb	r2, [r7, #3]
 8009ede:	6879      	ldr	r1, [r7, #4]
 8009ee0:	4613      	mov	r3, r2
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	4413      	add	r3, r2
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	440b      	add	r3, r1
 8009eea:	3318      	adds	r3, #24
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	78f9      	ldrb	r1, [r7, #3]
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	440b      	add	r3, r1
 8009ef8:	00db      	lsls	r3, r3, #3
 8009efa:	4403      	add	r3, r0
 8009efc:	3338      	adds	r3, #56	; 0x38
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	fbb2 f1f3 	udiv	r1, r2, r3
 8009f04:	fb01 f303 	mul.w	r3, r1, r3
 8009f08:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d110      	bne.n	8009f30 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009f0e:	78fa      	ldrb	r2, [r7, #3]
 8009f10:	6879      	ldr	r1, [r7, #4]
 8009f12:	4613      	mov	r3, r2
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	4413      	add	r3, r2
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	440b      	add	r3, r1
 8009f1c:	3318      	adds	r3, #24
 8009f1e:	2200      	movs	r2, #0
 8009f20:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009f22:	78f9      	ldrb	r1, [r7, #3]
 8009f24:	2300      	movs	r3, #0
 8009f26:	2200      	movs	r2, #0
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f001 fecb 	bl	800bcc4 <USBD_LL_Transmit>
 8009f2e:	e015      	b.n	8009f5c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f3e:	691b      	ldr	r3, [r3, #16]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00b      	beq.n	8009f5c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	68ba      	ldr	r2, [r7, #8]
 8009f4e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009f52:	68ba      	ldr	r2, [r7, #8]
 8009f54:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009f58:	78fa      	ldrb	r2, [r7, #3]
 8009f5a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f66:	b580      	push	{r7, lr}
 8009f68:	b084      	sub	sp, #16
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
 8009f6e:	460b      	mov	r3, r1
 8009f70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f78:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d101      	bne.n	8009f88 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009f84:	2303      	movs	r3, #3
 8009f86:	e015      	b.n	8009fb4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009f88:	78fb      	ldrb	r3, [r7, #3]
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f001 fedb 	bl	800bd48 <USBD_LL_GetRxDataSize>
 8009f92:	4602      	mov	r2, r0
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	68fa      	ldr	r2, [r7, #12]
 8009fa4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009fae:	4611      	mov	r1, r2
 8009fb0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009fb2:	2300      	movs	r3, #0
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3710      	adds	r7, #16
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fca:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d101      	bne.n	8009fd6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009fd2:	2303      	movs	r3, #3
 8009fd4:	e01b      	b.n	800a00e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d015      	beq.n	800a00c <USBD_CDC_EP0_RxReady+0x50>
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009fe6:	2bff      	cmp	r3, #255	; 0xff
 8009fe8:	d010      	beq.n	800a00c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	68fa      	ldr	r2, [r7, #12]
 8009ff4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009ff8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a000:	b292      	uxth	r2, r2
 800a002:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	22ff      	movs	r2, #255	; 0xff
 800a008:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
	...

0800a018 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2243      	movs	r2, #67	; 0x43
 800a024:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a026:	4b03      	ldr	r3, [pc, #12]	; (800a034 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a028:	4618      	mov	r0, r3
 800a02a:	370c      	adds	r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr
 800a034:	200000a4 	.word	0x200000a4

0800a038 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2243      	movs	r2, #67	; 0x43
 800a044:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a046:	4b03      	ldr	r3, [pc, #12]	; (800a054 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a048:	4618      	mov	r0, r3
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr
 800a054:	20000060 	.word	0x20000060

0800a058 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2243      	movs	r2, #67	; 0x43
 800a064:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a066:	4b03      	ldr	r3, [pc, #12]	; (800a074 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a068:	4618      	mov	r0, r3
 800a06a:	370c      	adds	r7, #12
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr
 800a074:	200000e8 	.word	0x200000e8

0800a078 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	220a      	movs	r2, #10
 800a084:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a086:	4b03      	ldr	r3, [pc, #12]	; (800a094 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a088:	4618      	mov	r0, r3
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr
 800a094:	2000001c 	.word	0x2000001c

0800a098 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d101      	bne.n	800a0ac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a0a8:	2303      	movs	r3, #3
 800a0aa:	e004      	b.n	800a0b6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	683a      	ldr	r2, [r7, #0]
 800a0b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	370c      	adds	r7, #12
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr

0800a0c2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a0c2:	b480      	push	{r7}
 800a0c4:	b087      	sub	sp, #28
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	60f8      	str	r0, [r7, #12]
 800a0ca:	60b9      	str	r1, [r7, #8]
 800a0cc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0d4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d101      	bne.n	800a0e0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a0dc:	2303      	movs	r3, #3
 800a0de:	e008      	b.n	800a0f2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	371c      	adds	r7, #28
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr

0800a0fe <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a0fe:	b480      	push	{r7}
 800a100:	b085      	sub	sp, #20
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
 800a106:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a10e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d101      	bne.n	800a11a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a116:	2303      	movs	r3, #3
 800a118:	e004      	b.n	800a124 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	683a      	ldr	r2, [r7, #0]
 800a11e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3714      	adds	r7, #20
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a13e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a140:	2301      	movs	r3, #1
 800a142:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d101      	bne.n	800a152 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a14e:	2303      	movs	r3, #3
 800a150:	e01a      	b.n	800a188 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d114      	bne.n	800a186 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	2201      	movs	r2, #1
 800a160:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a17a:	2181      	movs	r1, #129	; 0x81
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f001 fda1 	bl	800bcc4 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a182:	2300      	movs	r3, #0
 800a184:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a186:	7bfb      	ldrb	r3, [r7, #15]
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3710      	adds	r7, #16
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a19e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d101      	bne.n	800a1ae <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a1aa:	2303      	movs	r3, #3
 800a1ac:	e016      	b.n	800a1dc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	7c1b      	ldrb	r3, [r3, #16]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d109      	bne.n	800a1ca <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1c0:	2101      	movs	r1, #1
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f001 fd9f 	bl	800bd06 <USBD_LL_PrepareReceive>
 800a1c8:	e007      	b.n	800a1da <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1d0:	2340      	movs	r3, #64	; 0x40
 800a1d2:	2101      	movs	r1, #1
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f001 fd96 	bl	800bd06 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a1da:	2300      	movs	r3, #0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3710      	adds	r7, #16
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b086      	sub	sp, #24
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
 800a1ee:	4613      	mov	r3, r2
 800a1f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d101      	bne.n	800a1fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a1f8:	2303      	movs	r3, #3
 800a1fa:	e01f      	b.n	800a23c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2200      	movs	r2, #0
 800a200:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2200      	movs	r2, #0
 800a208:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2200      	movs	r2, #0
 800a210:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d003      	beq.n	800a222 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	68ba      	ldr	r2, [r7, #8]
 800a21e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2201      	movs	r2, #1
 800a226:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	79fa      	ldrb	r2, [r7, #7]
 800a22e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a230:	68f8      	ldr	r0, [r7, #12]
 800a232:	f001 fbfd 	bl	800ba30 <USBD_LL_Init>
 800a236:	4603      	mov	r3, r0
 800a238:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a23a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3718      	adds	r7, #24
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a24e:	2300      	movs	r3, #0
 800a250:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d101      	bne.n	800a25c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a258:	2303      	movs	r3, #3
 800a25a:	e016      	b.n	800a28a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	683a      	ldr	r2, [r7, #0]
 800a260:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00b      	beq.n	800a288 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a278:	f107 020e 	add.w	r2, r7, #14
 800a27c:	4610      	mov	r0, r2
 800a27e:	4798      	blx	r3
 800a280:	4602      	mov	r2, r0
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a288:	2300      	movs	r3, #0
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3710      	adds	r7, #16
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b082      	sub	sp, #8
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f001 fc28 	bl	800baf0 <USBD_LL_Start>
 800a2a0:	4603      	mov	r3, r0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3708      	adds	r7, #8
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a2aa:	b480      	push	{r7}
 800a2ac:	b083      	sub	sp, #12
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	370c      	adds	r7, #12
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b084      	sub	sp, #16
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a2cc:	2303      	movs	r3, #3
 800a2ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d009      	beq.n	800a2ee <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	78fa      	ldrb	r2, [r7, #3]
 800a2e4:	4611      	mov	r1, r2
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	4798      	blx	r3
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a2ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3710      	adds	r7, #16
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	460b      	mov	r3, r1
 800a302:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d007      	beq.n	800a31e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	78fa      	ldrb	r2, [r7, #3]
 800a318:	4611      	mov	r1, r2
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	4798      	blx	r3
  }

  return USBD_OK;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	3708      	adds	r7, #8
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a338:	6839      	ldr	r1, [r7, #0]
 800a33a:	4618      	mov	r0, r3
 800a33c:	f000 ff46 	bl	800b1cc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2201      	movs	r2, #1
 800a344:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a34e:	461a      	mov	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a35c:	f003 031f 	and.w	r3, r3, #31
 800a360:	2b02      	cmp	r3, #2
 800a362:	d01a      	beq.n	800a39a <USBD_LL_SetupStage+0x72>
 800a364:	2b02      	cmp	r3, #2
 800a366:	d822      	bhi.n	800a3ae <USBD_LL_SetupStage+0x86>
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d002      	beq.n	800a372 <USBD_LL_SetupStage+0x4a>
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d00a      	beq.n	800a386 <USBD_LL_SetupStage+0x5e>
 800a370:	e01d      	b.n	800a3ae <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a378:	4619      	mov	r1, r3
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 f9ee 	bl	800a75c <USBD_StdDevReq>
 800a380:	4603      	mov	r3, r0
 800a382:	73fb      	strb	r3, [r7, #15]
      break;
 800a384:	e020      	b.n	800a3c8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a38c:	4619      	mov	r1, r3
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 fa52 	bl	800a838 <USBD_StdItfReq>
 800a394:	4603      	mov	r3, r0
 800a396:	73fb      	strb	r3, [r7, #15]
      break;
 800a398:	e016      	b.n	800a3c8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 fa91 	bl	800a8ca <USBD_StdEPReq>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	73fb      	strb	r3, [r7, #15]
      break;
 800a3ac:	e00c      	b.n	800a3c8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a3b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f001 fbf7 	bl	800bbb0 <USBD_LL_StallEP>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	73fb      	strb	r3, [r7, #15]
      break;
 800a3c6:	bf00      	nop
  }

  return ret;
 800a3c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3710      	adds	r7, #16
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b086      	sub	sp, #24
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	60f8      	str	r0, [r7, #12]
 800a3da:	460b      	mov	r3, r1
 800a3dc:	607a      	str	r2, [r7, #4]
 800a3de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a3e0:	7afb      	ldrb	r3, [r7, #11]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d138      	bne.n	800a458 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a3ec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a3f4:	2b03      	cmp	r3, #3
 800a3f6:	d14a      	bne.n	800a48e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	689a      	ldr	r2, [r3, #8]
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	429a      	cmp	r2, r3
 800a402:	d913      	bls.n	800a42c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	689a      	ldr	r2, [r3, #8]
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	68db      	ldr	r3, [r3, #12]
 800a40c:	1ad2      	subs	r2, r2, r3
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	68da      	ldr	r2, [r3, #12]
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	4293      	cmp	r3, r2
 800a41c:	bf28      	it	cs
 800a41e:	4613      	movcs	r3, r2
 800a420:	461a      	mov	r2, r3
 800a422:	6879      	ldr	r1, [r7, #4]
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f000 ffc5 	bl	800b3b4 <USBD_CtlContinueRx>
 800a42a:	e030      	b.n	800a48e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a432:	b2db      	uxtb	r3, r3
 800a434:	2b03      	cmp	r3, #3
 800a436:	d10b      	bne.n	800a450 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a43e:	691b      	ldr	r3, [r3, #16]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d005      	beq.n	800a450 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a44a:	691b      	ldr	r3, [r3, #16]
 800a44c:	68f8      	ldr	r0, [r7, #12]
 800a44e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f000 ffc0 	bl	800b3d6 <USBD_CtlSendStatus>
 800a456:	e01a      	b.n	800a48e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	2b03      	cmp	r3, #3
 800a462:	d114      	bne.n	800a48e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a46a:	699b      	ldr	r3, [r3, #24]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d00e      	beq.n	800a48e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a476:	699b      	ldr	r3, [r3, #24]
 800a478:	7afa      	ldrb	r2, [r7, #11]
 800a47a:	4611      	mov	r1, r2
 800a47c:	68f8      	ldr	r0, [r7, #12]
 800a47e:	4798      	blx	r3
 800a480:	4603      	mov	r3, r0
 800a482:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a484:	7dfb      	ldrb	r3, [r7, #23]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d001      	beq.n	800a48e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a48a:	7dfb      	ldrb	r3, [r7, #23]
 800a48c:	e000      	b.n	800a490 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	3718      	adds	r7, #24
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b086      	sub	sp, #24
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	607a      	str	r2, [r7, #4]
 800a4a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a4a6:	7afb      	ldrb	r3, [r7, #11]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d16b      	bne.n	800a584 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	3314      	adds	r3, #20
 800a4b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a4b8:	2b02      	cmp	r3, #2
 800a4ba:	d156      	bne.n	800a56a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	689a      	ldr	r2, [r3, #8]
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d914      	bls.n	800a4f2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	689a      	ldr	r2, [r3, #8]
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	1ad2      	subs	r2, r2, r3
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	461a      	mov	r2, r3
 800a4dc:	6879      	ldr	r1, [r7, #4]
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	f000 ff3a 	bl	800b358 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f001 fc0b 	bl	800bd06 <USBD_LL_PrepareReceive>
 800a4f0:	e03b      	b.n	800a56a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	68da      	ldr	r2, [r3, #12]
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d11c      	bne.n	800a538 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	685a      	ldr	r2, [r3, #4]
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a506:	429a      	cmp	r2, r3
 800a508:	d316      	bcc.n	800a538 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	685a      	ldr	r2, [r3, #4]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a514:	429a      	cmp	r2, r3
 800a516:	d20f      	bcs.n	800a538 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a518:	2200      	movs	r2, #0
 800a51a:	2100      	movs	r1, #0
 800a51c:	68f8      	ldr	r0, [r7, #12]
 800a51e:	f000 ff1b 	bl	800b358 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2200      	movs	r2, #0
 800a526:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a52a:	2300      	movs	r3, #0
 800a52c:	2200      	movs	r2, #0
 800a52e:	2100      	movs	r1, #0
 800a530:	68f8      	ldr	r0, [r7, #12]
 800a532:	f001 fbe8 	bl	800bd06 <USBD_LL_PrepareReceive>
 800a536:	e018      	b.n	800a56a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	2b03      	cmp	r3, #3
 800a542:	d10b      	bne.n	800a55c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d005      	beq.n	800a55c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a556:	68db      	ldr	r3, [r3, #12]
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a55c:	2180      	movs	r1, #128	; 0x80
 800a55e:	68f8      	ldr	r0, [r7, #12]
 800a560:	f001 fb26 	bl	800bbb0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f000 ff49 	bl	800b3fc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a570:	2b01      	cmp	r3, #1
 800a572:	d122      	bne.n	800a5ba <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a574:	68f8      	ldr	r0, [r7, #12]
 800a576:	f7ff fe98 	bl	800a2aa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a582:	e01a      	b.n	800a5ba <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	2b03      	cmp	r3, #3
 800a58e:	d114      	bne.n	800a5ba <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a596:	695b      	ldr	r3, [r3, #20]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00e      	beq.n	800a5ba <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5a2:	695b      	ldr	r3, [r3, #20]
 800a5a4:	7afa      	ldrb	r2, [r7, #11]
 800a5a6:	4611      	mov	r1, r2
 800a5a8:	68f8      	ldr	r0, [r7, #12]
 800a5aa:	4798      	blx	r3
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a5b0:	7dfb      	ldrb	r3, [r7, #23]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d001      	beq.n	800a5ba <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a5b6:	7dfb      	ldrb	r3, [r7, #23]
 800a5b8:	e000      	b.n	800a5bc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a5ba:	2300      	movs	r3, #0
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3718      	adds	r7, #24
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d101      	bne.n	800a5f8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a5f4:	2303      	movs	r3, #3
 800a5f6:	e02f      	b.n	800a658 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00f      	beq.n	800a622 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d009      	beq.n	800a622 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	6852      	ldr	r2, [r2, #4]
 800a61a:	b2d2      	uxtb	r2, r2
 800a61c:	4611      	mov	r1, r2
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a622:	2340      	movs	r3, #64	; 0x40
 800a624:	2200      	movs	r2, #0
 800a626:	2100      	movs	r1, #0
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f001 fa7c 	bl	800bb26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2201      	movs	r2, #1
 800a632:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2240      	movs	r2, #64	; 0x40
 800a63a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a63e:	2340      	movs	r3, #64	; 0x40
 800a640:	2200      	movs	r2, #0
 800a642:	2180      	movs	r1, #128	; 0x80
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f001 fa6e 	bl	800bb26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2201      	movs	r2, #1
 800a64e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2240      	movs	r2, #64	; 0x40
 800a654:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3708      	adds	r7, #8
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a660:	b480      	push	{r7}
 800a662:	b083      	sub	sp, #12
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	460b      	mov	r3, r1
 800a66a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	78fa      	ldrb	r2, [r7, #3]
 800a670:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a672:	2300      	movs	r3, #0
}
 800a674:	4618      	mov	r0, r3
 800a676:	370c      	adds	r7, #12
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a68e:	b2da      	uxtb	r2, r3
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2204      	movs	r2, #4
 800a69a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a69e:	2300      	movs	r3, #0
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	2b04      	cmp	r3, #4
 800a6be:	d106      	bne.n	800a6ce <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a6c6:	b2da      	uxtb	r2, r3
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a6ce:	2300      	movs	r3, #0
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d101      	bne.n	800a6f2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	e012      	b.n	800a718 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	2b03      	cmp	r3, #3
 800a6fc:	d10b      	bne.n	800a716 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a704:	69db      	ldr	r3, [r3, #28]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d005      	beq.n	800a716 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a710:	69db      	ldr	r3, [r3, #28]
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a716:	2300      	movs	r3, #0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3708      	adds	r7, #8
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a720:	b480      	push	{r7}
 800a722:	b087      	sub	sp, #28
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	3301      	adds	r3, #1
 800a736:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a73e:	8a3b      	ldrh	r3, [r7, #16]
 800a740:	021b      	lsls	r3, r3, #8
 800a742:	b21a      	sxth	r2, r3
 800a744:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a748:	4313      	orrs	r3, r2
 800a74a:	b21b      	sxth	r3, r3
 800a74c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a74e:	89fb      	ldrh	r3, [r7, #14]
}
 800a750:	4618      	mov	r0, r3
 800a752:	371c      	adds	r7, #28
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a766:	2300      	movs	r3, #0
 800a768:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a772:	2b40      	cmp	r3, #64	; 0x40
 800a774:	d005      	beq.n	800a782 <USBD_StdDevReq+0x26>
 800a776:	2b40      	cmp	r3, #64	; 0x40
 800a778:	d853      	bhi.n	800a822 <USBD_StdDevReq+0xc6>
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d00b      	beq.n	800a796 <USBD_StdDevReq+0x3a>
 800a77e:	2b20      	cmp	r3, #32
 800a780:	d14f      	bne.n	800a822 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a788:	689b      	ldr	r3, [r3, #8]
 800a78a:	6839      	ldr	r1, [r7, #0]
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	4798      	blx	r3
 800a790:	4603      	mov	r3, r0
 800a792:	73fb      	strb	r3, [r7, #15]
      break;
 800a794:	e04a      	b.n	800a82c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	785b      	ldrb	r3, [r3, #1]
 800a79a:	2b09      	cmp	r3, #9
 800a79c:	d83b      	bhi.n	800a816 <USBD_StdDevReq+0xba>
 800a79e:	a201      	add	r2, pc, #4	; (adr r2, 800a7a4 <USBD_StdDevReq+0x48>)
 800a7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a4:	0800a7f9 	.word	0x0800a7f9
 800a7a8:	0800a80d 	.word	0x0800a80d
 800a7ac:	0800a817 	.word	0x0800a817
 800a7b0:	0800a803 	.word	0x0800a803
 800a7b4:	0800a817 	.word	0x0800a817
 800a7b8:	0800a7d7 	.word	0x0800a7d7
 800a7bc:	0800a7cd 	.word	0x0800a7cd
 800a7c0:	0800a817 	.word	0x0800a817
 800a7c4:	0800a7ef 	.word	0x0800a7ef
 800a7c8:	0800a7e1 	.word	0x0800a7e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a7cc:	6839      	ldr	r1, [r7, #0]
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 f9de 	bl	800ab90 <USBD_GetDescriptor>
          break;
 800a7d4:	e024      	b.n	800a820 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a7d6:	6839      	ldr	r1, [r7, #0]
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 fb6d 	bl	800aeb8 <USBD_SetAddress>
          break;
 800a7de:	e01f      	b.n	800a820 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a7e0:	6839      	ldr	r1, [r7, #0]
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 fbac 	bl	800af40 <USBD_SetConfig>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	73fb      	strb	r3, [r7, #15]
          break;
 800a7ec:	e018      	b.n	800a820 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a7ee:	6839      	ldr	r1, [r7, #0]
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 fc4b 	bl	800b08c <USBD_GetConfig>
          break;
 800a7f6:	e013      	b.n	800a820 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a7f8:	6839      	ldr	r1, [r7, #0]
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 fc7c 	bl	800b0f8 <USBD_GetStatus>
          break;
 800a800:	e00e      	b.n	800a820 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a802:	6839      	ldr	r1, [r7, #0]
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 fcab 	bl	800b160 <USBD_SetFeature>
          break;
 800a80a:	e009      	b.n	800a820 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a80c:	6839      	ldr	r1, [r7, #0]
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 fcba 	bl	800b188 <USBD_ClrFeature>
          break;
 800a814:	e004      	b.n	800a820 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a816:	6839      	ldr	r1, [r7, #0]
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 fd11 	bl	800b240 <USBD_CtlError>
          break;
 800a81e:	bf00      	nop
      }
      break;
 800a820:	e004      	b.n	800a82c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a822:	6839      	ldr	r1, [r7, #0]
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 fd0b 	bl	800b240 <USBD_CtlError>
      break;
 800a82a:	bf00      	nop
  }

  return ret;
 800a82c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop

0800a838 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a842:	2300      	movs	r3, #0
 800a844:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a84e:	2b40      	cmp	r3, #64	; 0x40
 800a850:	d005      	beq.n	800a85e <USBD_StdItfReq+0x26>
 800a852:	2b40      	cmp	r3, #64	; 0x40
 800a854:	d82f      	bhi.n	800a8b6 <USBD_StdItfReq+0x7e>
 800a856:	2b00      	cmp	r3, #0
 800a858:	d001      	beq.n	800a85e <USBD_StdItfReq+0x26>
 800a85a:	2b20      	cmp	r3, #32
 800a85c:	d12b      	bne.n	800a8b6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a864:	b2db      	uxtb	r3, r3
 800a866:	3b01      	subs	r3, #1
 800a868:	2b02      	cmp	r3, #2
 800a86a:	d81d      	bhi.n	800a8a8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	889b      	ldrh	r3, [r3, #4]
 800a870:	b2db      	uxtb	r3, r3
 800a872:	2b01      	cmp	r3, #1
 800a874:	d813      	bhi.n	800a89e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a87c:	689b      	ldr	r3, [r3, #8]
 800a87e:	6839      	ldr	r1, [r7, #0]
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	4798      	blx	r3
 800a884:	4603      	mov	r3, r0
 800a886:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	88db      	ldrh	r3, [r3, #6]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d110      	bne.n	800a8b2 <USBD_StdItfReq+0x7a>
 800a890:	7bfb      	ldrb	r3, [r7, #15]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d10d      	bne.n	800a8b2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fd9d 	bl	800b3d6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a89c:	e009      	b.n	800a8b2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a89e:	6839      	ldr	r1, [r7, #0]
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 fccd 	bl	800b240 <USBD_CtlError>
          break;
 800a8a6:	e004      	b.n	800a8b2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a8a8:	6839      	ldr	r1, [r7, #0]
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 fcc8 	bl	800b240 <USBD_CtlError>
          break;
 800a8b0:	e000      	b.n	800a8b4 <USBD_StdItfReq+0x7c>
          break;
 800a8b2:	bf00      	nop
      }
      break;
 800a8b4:	e004      	b.n	800a8c0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a8b6:	6839      	ldr	r1, [r7, #0]
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 fcc1 	bl	800b240 <USBD_CtlError>
      break;
 800a8be:	bf00      	nop
  }

  return ret;
 800a8c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3710      	adds	r7, #16
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}

0800a8ca <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b084      	sub	sp, #16
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
 800a8d2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	889b      	ldrh	r3, [r3, #4]
 800a8dc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8e6:	2b40      	cmp	r3, #64	; 0x40
 800a8e8:	d007      	beq.n	800a8fa <USBD_StdEPReq+0x30>
 800a8ea:	2b40      	cmp	r3, #64	; 0x40
 800a8ec:	f200 8145 	bhi.w	800ab7a <USBD_StdEPReq+0x2b0>
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d00c      	beq.n	800a90e <USBD_StdEPReq+0x44>
 800a8f4:	2b20      	cmp	r3, #32
 800a8f6:	f040 8140 	bne.w	800ab7a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	6839      	ldr	r1, [r7, #0]
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	4798      	blx	r3
 800a908:	4603      	mov	r3, r0
 800a90a:	73fb      	strb	r3, [r7, #15]
      break;
 800a90c:	e13a      	b.n	800ab84 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	785b      	ldrb	r3, [r3, #1]
 800a912:	2b03      	cmp	r3, #3
 800a914:	d007      	beq.n	800a926 <USBD_StdEPReq+0x5c>
 800a916:	2b03      	cmp	r3, #3
 800a918:	f300 8129 	bgt.w	800ab6e <USBD_StdEPReq+0x2a4>
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d07f      	beq.n	800aa20 <USBD_StdEPReq+0x156>
 800a920:	2b01      	cmp	r3, #1
 800a922:	d03c      	beq.n	800a99e <USBD_StdEPReq+0xd4>
 800a924:	e123      	b.n	800ab6e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	2b02      	cmp	r3, #2
 800a930:	d002      	beq.n	800a938 <USBD_StdEPReq+0x6e>
 800a932:	2b03      	cmp	r3, #3
 800a934:	d016      	beq.n	800a964 <USBD_StdEPReq+0x9a>
 800a936:	e02c      	b.n	800a992 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a938:	7bbb      	ldrb	r3, [r7, #14]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00d      	beq.n	800a95a <USBD_StdEPReq+0x90>
 800a93e:	7bbb      	ldrb	r3, [r7, #14]
 800a940:	2b80      	cmp	r3, #128	; 0x80
 800a942:	d00a      	beq.n	800a95a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a944:	7bbb      	ldrb	r3, [r7, #14]
 800a946:	4619      	mov	r1, r3
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f001 f931 	bl	800bbb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a94e:	2180      	movs	r1, #128	; 0x80
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f001 f92d 	bl	800bbb0 <USBD_LL_StallEP>
 800a956:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a958:	e020      	b.n	800a99c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a95a:	6839      	ldr	r1, [r7, #0]
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 fc6f 	bl	800b240 <USBD_CtlError>
              break;
 800a962:	e01b      	b.n	800a99c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	885b      	ldrh	r3, [r3, #2]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d10e      	bne.n	800a98a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a96c:	7bbb      	ldrb	r3, [r7, #14]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d00b      	beq.n	800a98a <USBD_StdEPReq+0xc0>
 800a972:	7bbb      	ldrb	r3, [r7, #14]
 800a974:	2b80      	cmp	r3, #128	; 0x80
 800a976:	d008      	beq.n	800a98a <USBD_StdEPReq+0xc0>
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	88db      	ldrh	r3, [r3, #6]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d104      	bne.n	800a98a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a980:	7bbb      	ldrb	r3, [r7, #14]
 800a982:	4619      	mov	r1, r3
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f001 f913 	bl	800bbb0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 fd23 	bl	800b3d6 <USBD_CtlSendStatus>

              break;
 800a990:	e004      	b.n	800a99c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a992:	6839      	ldr	r1, [r7, #0]
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 fc53 	bl	800b240 <USBD_CtlError>
              break;
 800a99a:	bf00      	nop
          }
          break;
 800a99c:	e0ec      	b.n	800ab78 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	2b02      	cmp	r3, #2
 800a9a8:	d002      	beq.n	800a9b0 <USBD_StdEPReq+0xe6>
 800a9aa:	2b03      	cmp	r3, #3
 800a9ac:	d016      	beq.n	800a9dc <USBD_StdEPReq+0x112>
 800a9ae:	e030      	b.n	800aa12 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9b0:	7bbb      	ldrb	r3, [r7, #14]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d00d      	beq.n	800a9d2 <USBD_StdEPReq+0x108>
 800a9b6:	7bbb      	ldrb	r3, [r7, #14]
 800a9b8:	2b80      	cmp	r3, #128	; 0x80
 800a9ba:	d00a      	beq.n	800a9d2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9bc:	7bbb      	ldrb	r3, [r7, #14]
 800a9be:	4619      	mov	r1, r3
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f001 f8f5 	bl	800bbb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9c6:	2180      	movs	r1, #128	; 0x80
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f001 f8f1 	bl	800bbb0 <USBD_LL_StallEP>
 800a9ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a9d0:	e025      	b.n	800aa1e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a9d2:	6839      	ldr	r1, [r7, #0]
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 fc33 	bl	800b240 <USBD_CtlError>
              break;
 800a9da:	e020      	b.n	800aa1e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	885b      	ldrh	r3, [r3, #2]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d11b      	bne.n	800aa1c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a9e4:	7bbb      	ldrb	r3, [r7, #14]
 800a9e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d004      	beq.n	800a9f8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a9ee:	7bbb      	ldrb	r3, [r7, #14]
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f001 f8fb 	bl	800bbee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 fcec 	bl	800b3d6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa04:	689b      	ldr	r3, [r3, #8]
 800aa06:	6839      	ldr	r1, [r7, #0]
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	4798      	blx	r3
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800aa10:	e004      	b.n	800aa1c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800aa12:	6839      	ldr	r1, [r7, #0]
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 fc13 	bl	800b240 <USBD_CtlError>
              break;
 800aa1a:	e000      	b.n	800aa1e <USBD_StdEPReq+0x154>
              break;
 800aa1c:	bf00      	nop
          }
          break;
 800aa1e:	e0ab      	b.n	800ab78 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	2b02      	cmp	r3, #2
 800aa2a:	d002      	beq.n	800aa32 <USBD_StdEPReq+0x168>
 800aa2c:	2b03      	cmp	r3, #3
 800aa2e:	d032      	beq.n	800aa96 <USBD_StdEPReq+0x1cc>
 800aa30:	e097      	b.n	800ab62 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa32:	7bbb      	ldrb	r3, [r7, #14]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d007      	beq.n	800aa48 <USBD_StdEPReq+0x17e>
 800aa38:	7bbb      	ldrb	r3, [r7, #14]
 800aa3a:	2b80      	cmp	r3, #128	; 0x80
 800aa3c:	d004      	beq.n	800aa48 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800aa3e:	6839      	ldr	r1, [r7, #0]
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 fbfd 	bl	800b240 <USBD_CtlError>
                break;
 800aa46:	e091      	b.n	800ab6c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	da0b      	bge.n	800aa68 <USBD_StdEPReq+0x19e>
 800aa50:	7bbb      	ldrb	r3, [r7, #14]
 800aa52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa56:	4613      	mov	r3, r2
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	4413      	add	r3, r2
 800aa5c:	009b      	lsls	r3, r3, #2
 800aa5e:	3310      	adds	r3, #16
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	4413      	add	r3, r2
 800aa64:	3304      	adds	r3, #4
 800aa66:	e00b      	b.n	800aa80 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa68:	7bbb      	ldrb	r3, [r7, #14]
 800aa6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa6e:	4613      	mov	r3, r2
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	4413      	add	r3, r2
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	4413      	add	r3, r2
 800aa7e:	3304      	adds	r3, #4
 800aa80:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	2200      	movs	r2, #0
 800aa86:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	2202      	movs	r2, #2
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 fc47 	bl	800b322 <USBD_CtlSendData>
              break;
 800aa94:	e06a      	b.n	800ab6c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aa96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	da11      	bge.n	800aac2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aa9e:	7bbb      	ldrb	r3, [r7, #14]
 800aaa0:	f003 020f 	and.w	r2, r3, #15
 800aaa4:	6879      	ldr	r1, [r7, #4]
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	4413      	add	r3, r2
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	440b      	add	r3, r1
 800aab0:	3324      	adds	r3, #36	; 0x24
 800aab2:	881b      	ldrh	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d117      	bne.n	800aae8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800aab8:	6839      	ldr	r1, [r7, #0]
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 fbc0 	bl	800b240 <USBD_CtlError>
                  break;
 800aac0:	e054      	b.n	800ab6c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aac2:	7bbb      	ldrb	r3, [r7, #14]
 800aac4:	f003 020f 	and.w	r2, r3, #15
 800aac8:	6879      	ldr	r1, [r7, #4]
 800aaca:	4613      	mov	r3, r2
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	4413      	add	r3, r2
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	440b      	add	r3, r1
 800aad4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aad8:	881b      	ldrh	r3, [r3, #0]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d104      	bne.n	800aae8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800aade:	6839      	ldr	r1, [r7, #0]
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 fbad 	bl	800b240 <USBD_CtlError>
                  break;
 800aae6:	e041      	b.n	800ab6c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aae8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	da0b      	bge.n	800ab08 <USBD_StdEPReq+0x23e>
 800aaf0:	7bbb      	ldrb	r3, [r7, #14]
 800aaf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aaf6:	4613      	mov	r3, r2
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	4413      	add	r3, r2
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	3310      	adds	r3, #16
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	4413      	add	r3, r2
 800ab04:	3304      	adds	r3, #4
 800ab06:	e00b      	b.n	800ab20 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab08:	7bbb      	ldrb	r3, [r7, #14]
 800ab0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab0e:	4613      	mov	r3, r2
 800ab10:	009b      	lsls	r3, r3, #2
 800ab12:	4413      	add	r3, r2
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	3304      	adds	r3, #4
 800ab20:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ab22:	7bbb      	ldrb	r3, [r7, #14]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d002      	beq.n	800ab2e <USBD_StdEPReq+0x264>
 800ab28:	7bbb      	ldrb	r3, [r7, #14]
 800ab2a:	2b80      	cmp	r3, #128	; 0x80
 800ab2c:	d103      	bne.n	800ab36 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	2200      	movs	r2, #0
 800ab32:	601a      	str	r2, [r3, #0]
 800ab34:	e00e      	b.n	800ab54 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ab36:	7bbb      	ldrb	r3, [r7, #14]
 800ab38:	4619      	mov	r1, r3
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f001 f876 	bl	800bc2c <USBD_LL_IsStallEP>
 800ab40:	4603      	mov	r3, r0
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d003      	beq.n	800ab4e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	2201      	movs	r2, #1
 800ab4a:	601a      	str	r2, [r3, #0]
 800ab4c:	e002      	b.n	800ab54 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	2200      	movs	r2, #0
 800ab52:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	2202      	movs	r2, #2
 800ab58:	4619      	mov	r1, r3
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 fbe1 	bl	800b322 <USBD_CtlSendData>
              break;
 800ab60:	e004      	b.n	800ab6c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ab62:	6839      	ldr	r1, [r7, #0]
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f000 fb6b 	bl	800b240 <USBD_CtlError>
              break;
 800ab6a:	bf00      	nop
          }
          break;
 800ab6c:	e004      	b.n	800ab78 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ab6e:	6839      	ldr	r1, [r7, #0]
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 fb65 	bl	800b240 <USBD_CtlError>
          break;
 800ab76:	bf00      	nop
      }
      break;
 800ab78:	e004      	b.n	800ab84 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ab7a:	6839      	ldr	r1, [r7, #0]
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f000 fb5f 	bl	800b240 <USBD_CtlError>
      break;
 800ab82:	bf00      	nop
  }

  return ret;
 800ab84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
	...

0800ab90 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aba2:	2300      	movs	r3, #0
 800aba4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	885b      	ldrh	r3, [r3, #2]
 800abaa:	0a1b      	lsrs	r3, r3, #8
 800abac:	b29b      	uxth	r3, r3
 800abae:	3b01      	subs	r3, #1
 800abb0:	2b0e      	cmp	r3, #14
 800abb2:	f200 8152 	bhi.w	800ae5a <USBD_GetDescriptor+0x2ca>
 800abb6:	a201      	add	r2, pc, #4	; (adr r2, 800abbc <USBD_GetDescriptor+0x2c>)
 800abb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abbc:	0800ac2d 	.word	0x0800ac2d
 800abc0:	0800ac45 	.word	0x0800ac45
 800abc4:	0800ac85 	.word	0x0800ac85
 800abc8:	0800ae5b 	.word	0x0800ae5b
 800abcc:	0800ae5b 	.word	0x0800ae5b
 800abd0:	0800adfb 	.word	0x0800adfb
 800abd4:	0800ae27 	.word	0x0800ae27
 800abd8:	0800ae5b 	.word	0x0800ae5b
 800abdc:	0800ae5b 	.word	0x0800ae5b
 800abe0:	0800ae5b 	.word	0x0800ae5b
 800abe4:	0800ae5b 	.word	0x0800ae5b
 800abe8:	0800ae5b 	.word	0x0800ae5b
 800abec:	0800ae5b 	.word	0x0800ae5b
 800abf0:	0800ae5b 	.word	0x0800ae5b
 800abf4:	0800abf9 	.word	0x0800abf9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abfe:	69db      	ldr	r3, [r3, #28]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d00b      	beq.n	800ac1c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac0a:	69db      	ldr	r3, [r3, #28]
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	7c12      	ldrb	r2, [r2, #16]
 800ac10:	f107 0108 	add.w	r1, r7, #8
 800ac14:	4610      	mov	r0, r2
 800ac16:	4798      	blx	r3
 800ac18:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac1a:	e126      	b.n	800ae6a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ac1c:	6839      	ldr	r1, [r7, #0]
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 fb0e 	bl	800b240 <USBD_CtlError>
        err++;
 800ac24:	7afb      	ldrb	r3, [r7, #11]
 800ac26:	3301      	adds	r3, #1
 800ac28:	72fb      	strb	r3, [r7, #11]
      break;
 800ac2a:	e11e      	b.n	800ae6a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	7c12      	ldrb	r2, [r2, #16]
 800ac38:	f107 0108 	add.w	r1, r7, #8
 800ac3c:	4610      	mov	r0, r2
 800ac3e:	4798      	blx	r3
 800ac40:	60f8      	str	r0, [r7, #12]
      break;
 800ac42:	e112      	b.n	800ae6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	7c1b      	ldrb	r3, [r3, #16]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d10d      	bne.n	800ac68 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac54:	f107 0208 	add.w	r2, r7, #8
 800ac58:	4610      	mov	r0, r2
 800ac5a:	4798      	blx	r3
 800ac5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	3301      	adds	r3, #1
 800ac62:	2202      	movs	r2, #2
 800ac64:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ac66:	e100      	b.n	800ae6a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac70:	f107 0208 	add.w	r2, r7, #8
 800ac74:	4610      	mov	r0, r2
 800ac76:	4798      	blx	r3
 800ac78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	2202      	movs	r2, #2
 800ac80:	701a      	strb	r2, [r3, #0]
      break;
 800ac82:	e0f2      	b.n	800ae6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	885b      	ldrh	r3, [r3, #2]
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	2b05      	cmp	r3, #5
 800ac8c:	f200 80ac 	bhi.w	800ade8 <USBD_GetDescriptor+0x258>
 800ac90:	a201      	add	r2, pc, #4	; (adr r2, 800ac98 <USBD_GetDescriptor+0x108>)
 800ac92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac96:	bf00      	nop
 800ac98:	0800acb1 	.word	0x0800acb1
 800ac9c:	0800ace5 	.word	0x0800ace5
 800aca0:	0800ad19 	.word	0x0800ad19
 800aca4:	0800ad4d 	.word	0x0800ad4d
 800aca8:	0800ad81 	.word	0x0800ad81
 800acac:	0800adb5 	.word	0x0800adb5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d00b      	beq.n	800acd4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	7c12      	ldrb	r2, [r2, #16]
 800acc8:	f107 0108 	add.w	r1, r7, #8
 800accc:	4610      	mov	r0, r2
 800acce:	4798      	blx	r3
 800acd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acd2:	e091      	b.n	800adf8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800acd4:	6839      	ldr	r1, [r7, #0]
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 fab2 	bl	800b240 <USBD_CtlError>
            err++;
 800acdc:	7afb      	ldrb	r3, [r7, #11]
 800acde:	3301      	adds	r3, #1
 800ace0:	72fb      	strb	r3, [r7, #11]
          break;
 800ace2:	e089      	b.n	800adf8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d00b      	beq.n	800ad08 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	7c12      	ldrb	r2, [r2, #16]
 800acfc:	f107 0108 	add.w	r1, r7, #8
 800ad00:	4610      	mov	r0, r2
 800ad02:	4798      	blx	r3
 800ad04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad06:	e077      	b.n	800adf8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad08:	6839      	ldr	r1, [r7, #0]
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 fa98 	bl	800b240 <USBD_CtlError>
            err++;
 800ad10:	7afb      	ldrb	r3, [r7, #11]
 800ad12:	3301      	adds	r3, #1
 800ad14:	72fb      	strb	r3, [r7, #11]
          break;
 800ad16:	e06f      	b.n	800adf8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad1e:	68db      	ldr	r3, [r3, #12]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d00b      	beq.n	800ad3c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad2a:	68db      	ldr	r3, [r3, #12]
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	7c12      	ldrb	r2, [r2, #16]
 800ad30:	f107 0108 	add.w	r1, r7, #8
 800ad34:	4610      	mov	r0, r2
 800ad36:	4798      	blx	r3
 800ad38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad3a:	e05d      	b.n	800adf8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad3c:	6839      	ldr	r1, [r7, #0]
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 fa7e 	bl	800b240 <USBD_CtlError>
            err++;
 800ad44:	7afb      	ldrb	r3, [r7, #11]
 800ad46:	3301      	adds	r3, #1
 800ad48:	72fb      	strb	r3, [r7, #11]
          break;
 800ad4a:	e055      	b.n	800adf8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad52:	691b      	ldr	r3, [r3, #16]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d00b      	beq.n	800ad70 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad5e:	691b      	ldr	r3, [r3, #16]
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	7c12      	ldrb	r2, [r2, #16]
 800ad64:	f107 0108 	add.w	r1, r7, #8
 800ad68:	4610      	mov	r0, r2
 800ad6a:	4798      	blx	r3
 800ad6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad6e:	e043      	b.n	800adf8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad70:	6839      	ldr	r1, [r7, #0]
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 fa64 	bl	800b240 <USBD_CtlError>
            err++;
 800ad78:	7afb      	ldrb	r3, [r7, #11]
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad7e:	e03b      	b.n	800adf8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad86:	695b      	ldr	r3, [r3, #20]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d00b      	beq.n	800ada4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad92:	695b      	ldr	r3, [r3, #20]
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	7c12      	ldrb	r2, [r2, #16]
 800ad98:	f107 0108 	add.w	r1, r7, #8
 800ad9c:	4610      	mov	r0, r2
 800ad9e:	4798      	blx	r3
 800ada0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ada2:	e029      	b.n	800adf8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ada4:	6839      	ldr	r1, [r7, #0]
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 fa4a 	bl	800b240 <USBD_CtlError>
            err++;
 800adac:	7afb      	ldrb	r3, [r7, #11]
 800adae:	3301      	adds	r3, #1
 800adb0:	72fb      	strb	r3, [r7, #11]
          break;
 800adb2:	e021      	b.n	800adf8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adba:	699b      	ldr	r3, [r3, #24]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d00b      	beq.n	800add8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adc6:	699b      	ldr	r3, [r3, #24]
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	7c12      	ldrb	r2, [r2, #16]
 800adcc:	f107 0108 	add.w	r1, r7, #8
 800add0:	4610      	mov	r0, r2
 800add2:	4798      	blx	r3
 800add4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800add6:	e00f      	b.n	800adf8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800add8:	6839      	ldr	r1, [r7, #0]
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 fa30 	bl	800b240 <USBD_CtlError>
            err++;
 800ade0:	7afb      	ldrb	r3, [r7, #11]
 800ade2:	3301      	adds	r3, #1
 800ade4:	72fb      	strb	r3, [r7, #11]
          break;
 800ade6:	e007      	b.n	800adf8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ade8:	6839      	ldr	r1, [r7, #0]
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 fa28 	bl	800b240 <USBD_CtlError>
          err++;
 800adf0:	7afb      	ldrb	r3, [r7, #11]
 800adf2:	3301      	adds	r3, #1
 800adf4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800adf6:	bf00      	nop
      }
      break;
 800adf8:	e037      	b.n	800ae6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	7c1b      	ldrb	r3, [r3, #16]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d109      	bne.n	800ae16 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae0a:	f107 0208 	add.w	r2, r7, #8
 800ae0e:	4610      	mov	r0, r2
 800ae10:	4798      	blx	r3
 800ae12:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae14:	e029      	b.n	800ae6a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ae16:	6839      	ldr	r1, [r7, #0]
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 fa11 	bl	800b240 <USBD_CtlError>
        err++;
 800ae1e:	7afb      	ldrb	r3, [r7, #11]
 800ae20:	3301      	adds	r3, #1
 800ae22:	72fb      	strb	r3, [r7, #11]
      break;
 800ae24:	e021      	b.n	800ae6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	7c1b      	ldrb	r3, [r3, #16]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d10d      	bne.n	800ae4a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae36:	f107 0208 	add.w	r2, r7, #8
 800ae3a:	4610      	mov	r0, r2
 800ae3c:	4798      	blx	r3
 800ae3e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	3301      	adds	r3, #1
 800ae44:	2207      	movs	r2, #7
 800ae46:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae48:	e00f      	b.n	800ae6a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ae4a:	6839      	ldr	r1, [r7, #0]
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 f9f7 	bl	800b240 <USBD_CtlError>
        err++;
 800ae52:	7afb      	ldrb	r3, [r7, #11]
 800ae54:	3301      	adds	r3, #1
 800ae56:	72fb      	strb	r3, [r7, #11]
      break;
 800ae58:	e007      	b.n	800ae6a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ae5a:	6839      	ldr	r1, [r7, #0]
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 f9ef 	bl	800b240 <USBD_CtlError>
      err++;
 800ae62:	7afb      	ldrb	r3, [r7, #11]
 800ae64:	3301      	adds	r3, #1
 800ae66:	72fb      	strb	r3, [r7, #11]
      break;
 800ae68:	bf00      	nop
  }

  if (err != 0U)
 800ae6a:	7afb      	ldrb	r3, [r7, #11]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d11e      	bne.n	800aeae <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	88db      	ldrh	r3, [r3, #6]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d016      	beq.n	800aea6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ae78:	893b      	ldrh	r3, [r7, #8]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d00e      	beq.n	800ae9c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	88da      	ldrh	r2, [r3, #6]
 800ae82:	893b      	ldrh	r3, [r7, #8]
 800ae84:	4293      	cmp	r3, r2
 800ae86:	bf28      	it	cs
 800ae88:	4613      	movcs	r3, r2
 800ae8a:	b29b      	uxth	r3, r3
 800ae8c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ae8e:	893b      	ldrh	r3, [r7, #8]
 800ae90:	461a      	mov	r2, r3
 800ae92:	68f9      	ldr	r1, [r7, #12]
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 fa44 	bl	800b322 <USBD_CtlSendData>
 800ae9a:	e009      	b.n	800aeb0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ae9c:	6839      	ldr	r1, [r7, #0]
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 f9ce 	bl	800b240 <USBD_CtlError>
 800aea4:	e004      	b.n	800aeb0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 fa95 	bl	800b3d6 <USBD_CtlSendStatus>
 800aeac:	e000      	b.n	800aeb0 <USBD_GetDescriptor+0x320>
    return;
 800aeae:	bf00      	nop
  }
}
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop

0800aeb8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	889b      	ldrh	r3, [r3, #4]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d131      	bne.n	800af2e <USBD_SetAddress+0x76>
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	88db      	ldrh	r3, [r3, #6]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d12d      	bne.n	800af2e <USBD_SetAddress+0x76>
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	885b      	ldrh	r3, [r3, #2]
 800aed6:	2b7f      	cmp	r3, #127	; 0x7f
 800aed8:	d829      	bhi.n	800af2e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	885b      	ldrh	r3, [r3, #2]
 800aede:	b2db      	uxtb	r3, r3
 800aee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aee4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	2b03      	cmp	r3, #3
 800aef0:	d104      	bne.n	800aefc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aef2:	6839      	ldr	r1, [r7, #0]
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 f9a3 	bl	800b240 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aefa:	e01d      	b.n	800af38 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	7bfa      	ldrb	r2, [r7, #15]
 800af00:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800af04:	7bfb      	ldrb	r3, [r7, #15]
 800af06:	4619      	mov	r1, r3
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 febc 	bl	800bc86 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 fa61 	bl	800b3d6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800af14:	7bfb      	ldrb	r3, [r7, #15]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d004      	beq.n	800af24 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2202      	movs	r2, #2
 800af1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af22:	e009      	b.n	800af38 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2201      	movs	r2, #1
 800af28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af2c:	e004      	b.n	800af38 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800af2e:	6839      	ldr	r1, [r7, #0]
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 f985 	bl	800b240 <USBD_CtlError>
  }
}
 800af36:	bf00      	nop
 800af38:	bf00      	nop
 800af3a:	3710      	adds	r7, #16
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af4a:	2300      	movs	r3, #0
 800af4c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	885b      	ldrh	r3, [r3, #2]
 800af52:	b2da      	uxtb	r2, r3
 800af54:	4b4c      	ldr	r3, [pc, #304]	; (800b088 <USBD_SetConfig+0x148>)
 800af56:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800af58:	4b4b      	ldr	r3, [pc, #300]	; (800b088 <USBD_SetConfig+0x148>)
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d905      	bls.n	800af6c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800af60:	6839      	ldr	r1, [r7, #0]
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 f96c 	bl	800b240 <USBD_CtlError>
    return USBD_FAIL;
 800af68:	2303      	movs	r3, #3
 800af6a:	e088      	b.n	800b07e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af72:	b2db      	uxtb	r3, r3
 800af74:	2b02      	cmp	r3, #2
 800af76:	d002      	beq.n	800af7e <USBD_SetConfig+0x3e>
 800af78:	2b03      	cmp	r3, #3
 800af7a:	d025      	beq.n	800afc8 <USBD_SetConfig+0x88>
 800af7c:	e071      	b.n	800b062 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800af7e:	4b42      	ldr	r3, [pc, #264]	; (800b088 <USBD_SetConfig+0x148>)
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d01c      	beq.n	800afc0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800af86:	4b40      	ldr	r3, [pc, #256]	; (800b088 <USBD_SetConfig+0x148>)
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	461a      	mov	r2, r3
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af90:	4b3d      	ldr	r3, [pc, #244]	; (800b088 <USBD_SetConfig+0x148>)
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	4619      	mov	r1, r3
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f7ff f992 	bl	800a2c0 <USBD_SetClassConfig>
 800af9c:	4603      	mov	r3, r0
 800af9e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800afa0:	7bfb      	ldrb	r3, [r7, #15]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d004      	beq.n	800afb0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800afa6:	6839      	ldr	r1, [r7, #0]
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 f949 	bl	800b240 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800afae:	e065      	b.n	800b07c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 fa10 	bl	800b3d6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2203      	movs	r2, #3
 800afba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800afbe:	e05d      	b.n	800b07c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 fa08 	bl	800b3d6 <USBD_CtlSendStatus>
      break;
 800afc6:	e059      	b.n	800b07c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800afc8:	4b2f      	ldr	r3, [pc, #188]	; (800b088 <USBD_SetConfig+0x148>)
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d112      	bne.n	800aff6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2202      	movs	r2, #2
 800afd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800afd8:	4b2b      	ldr	r3, [pc, #172]	; (800b088 <USBD_SetConfig+0x148>)
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	461a      	mov	r2, r3
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800afe2:	4b29      	ldr	r3, [pc, #164]	; (800b088 <USBD_SetConfig+0x148>)
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	4619      	mov	r1, r3
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f7ff f985 	bl	800a2f8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 f9f1 	bl	800b3d6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aff4:	e042      	b.n	800b07c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800aff6:	4b24      	ldr	r3, [pc, #144]	; (800b088 <USBD_SetConfig+0x148>)
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	461a      	mov	r2, r3
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	429a      	cmp	r2, r3
 800b002:	d02a      	beq.n	800b05a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	4619      	mov	r1, r3
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f7ff f973 	bl	800a2f8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b012:	4b1d      	ldr	r3, [pc, #116]	; (800b088 <USBD_SetConfig+0x148>)
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	461a      	mov	r2, r3
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b01c:	4b1a      	ldr	r3, [pc, #104]	; (800b088 <USBD_SetConfig+0x148>)
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	4619      	mov	r1, r3
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f7ff f94c 	bl	800a2c0 <USBD_SetClassConfig>
 800b028:	4603      	mov	r3, r0
 800b02a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b02c:	7bfb      	ldrb	r3, [r7, #15]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00f      	beq.n	800b052 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b032:	6839      	ldr	r1, [r7, #0]
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 f903 	bl	800b240 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	4619      	mov	r1, r3
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f7ff f958 	bl	800a2f8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2202      	movs	r2, #2
 800b04c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b050:	e014      	b.n	800b07c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 f9bf 	bl	800b3d6 <USBD_CtlSendStatus>
      break;
 800b058:	e010      	b.n	800b07c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 f9bb 	bl	800b3d6 <USBD_CtlSendStatus>
      break;
 800b060:	e00c      	b.n	800b07c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b062:	6839      	ldr	r1, [r7, #0]
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f000 f8eb 	bl	800b240 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b06a:	4b07      	ldr	r3, [pc, #28]	; (800b088 <USBD_SetConfig+0x148>)
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	4619      	mov	r1, r3
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f7ff f941 	bl	800a2f8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b076:	2303      	movs	r3, #3
 800b078:	73fb      	strb	r3, [r7, #15]
      break;
 800b07a:	bf00      	nop
  }

  return ret;
 800b07c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3710      	adds	r7, #16
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	200004bc 	.word	0x200004bc

0800b08c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	88db      	ldrh	r3, [r3, #6]
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d004      	beq.n	800b0a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b09e:	6839      	ldr	r1, [r7, #0]
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 f8cd 	bl	800b240 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b0a6:	e023      	b.n	800b0f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	2b02      	cmp	r3, #2
 800b0b2:	dc02      	bgt.n	800b0ba <USBD_GetConfig+0x2e>
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	dc03      	bgt.n	800b0c0 <USBD_GetConfig+0x34>
 800b0b8:	e015      	b.n	800b0e6 <USBD_GetConfig+0x5a>
 800b0ba:	2b03      	cmp	r3, #3
 800b0bc:	d00b      	beq.n	800b0d6 <USBD_GetConfig+0x4a>
 800b0be:	e012      	b.n	800b0e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	3308      	adds	r3, #8
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 f927 	bl	800b322 <USBD_CtlSendData>
        break;
 800b0d4:	e00c      	b.n	800b0f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	3304      	adds	r3, #4
 800b0da:	2201      	movs	r2, #1
 800b0dc:	4619      	mov	r1, r3
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f000 f91f 	bl	800b322 <USBD_CtlSendData>
        break;
 800b0e4:	e004      	b.n	800b0f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b0e6:	6839      	ldr	r1, [r7, #0]
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f000 f8a9 	bl	800b240 <USBD_CtlError>
        break;
 800b0ee:	bf00      	nop
}
 800b0f0:	bf00      	nop
 800b0f2:	3708      	adds	r7, #8
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	3b01      	subs	r3, #1
 800b10c:	2b02      	cmp	r3, #2
 800b10e:	d81e      	bhi.n	800b14e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	88db      	ldrh	r3, [r3, #6]
 800b114:	2b02      	cmp	r3, #2
 800b116:	d004      	beq.n	800b122 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b118:	6839      	ldr	r1, [r7, #0]
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 f890 	bl	800b240 <USBD_CtlError>
        break;
 800b120:	e01a      	b.n	800b158 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2201      	movs	r2, #1
 800b126:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d005      	beq.n	800b13e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	68db      	ldr	r3, [r3, #12]
 800b136:	f043 0202 	orr.w	r2, r3, #2
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	330c      	adds	r3, #12
 800b142:	2202      	movs	r2, #2
 800b144:	4619      	mov	r1, r3
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 f8eb 	bl	800b322 <USBD_CtlSendData>
      break;
 800b14c:	e004      	b.n	800b158 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b14e:	6839      	ldr	r1, [r7, #0]
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f000 f875 	bl	800b240 <USBD_CtlError>
      break;
 800b156:	bf00      	nop
  }
}
 800b158:	bf00      	nop
 800b15a:	3708      	adds	r7, #8
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b082      	sub	sp, #8
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	885b      	ldrh	r3, [r3, #2]
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d106      	bne.n	800b180 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2201      	movs	r2, #1
 800b176:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f000 f92b 	bl	800b3d6 <USBD_CtlSendStatus>
  }
}
 800b180:	bf00      	nop
 800b182:	3708      	adds	r7, #8
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b082      	sub	sp, #8
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	3b01      	subs	r3, #1
 800b19c:	2b02      	cmp	r3, #2
 800b19e:	d80b      	bhi.n	800b1b8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	885b      	ldrh	r3, [r3, #2]
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d10c      	bne.n	800b1c2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 f910 	bl	800b3d6 <USBD_CtlSendStatus>
      }
      break;
 800b1b6:	e004      	b.n	800b1c2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b1b8:	6839      	ldr	r1, [r7, #0]
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 f840 	bl	800b240 <USBD_CtlError>
      break;
 800b1c0:	e000      	b.n	800b1c4 <USBD_ClrFeature+0x3c>
      break;
 800b1c2:	bf00      	nop
  }
}
 800b1c4:	bf00      	nop
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	781a      	ldrb	r2, [r3, #0]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	3301      	adds	r3, #1
 800b1e6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	781a      	ldrb	r2, [r3, #0]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b1f6:	68f8      	ldr	r0, [r7, #12]
 800b1f8:	f7ff fa92 	bl	800a720 <SWAPBYTE>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	461a      	mov	r2, r3
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	3301      	adds	r3, #1
 800b208:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	3301      	adds	r3, #1
 800b20e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b210:	68f8      	ldr	r0, [r7, #12]
 800b212:	f7ff fa85 	bl	800a720 <SWAPBYTE>
 800b216:	4603      	mov	r3, r0
 800b218:	461a      	mov	r2, r3
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	3301      	adds	r3, #1
 800b222:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	3301      	adds	r3, #1
 800b228:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b22a:	68f8      	ldr	r0, [r7, #12]
 800b22c:	f7ff fa78 	bl	800a720 <SWAPBYTE>
 800b230:	4603      	mov	r3, r0
 800b232:	461a      	mov	r2, r3
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	80da      	strh	r2, [r3, #6]
}
 800b238:	bf00      	nop
 800b23a:	3710      	adds	r7, #16
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b24a:	2180      	movs	r1, #128	; 0x80
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f000 fcaf 	bl	800bbb0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b252:	2100      	movs	r1, #0
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 fcab 	bl	800bbb0 <USBD_LL_StallEP>
}
 800b25a:	bf00      	nop
 800b25c:	3708      	adds	r7, #8
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}

0800b262 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b262:	b580      	push	{r7, lr}
 800b264:	b086      	sub	sp, #24
 800b266:	af00      	add	r7, sp, #0
 800b268:	60f8      	str	r0, [r7, #12]
 800b26a:	60b9      	str	r1, [r7, #8]
 800b26c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b26e:	2300      	movs	r3, #0
 800b270:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d036      	beq.n	800b2e6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b27c:	6938      	ldr	r0, [r7, #16]
 800b27e:	f000 f836 	bl	800b2ee <USBD_GetLen>
 800b282:	4603      	mov	r3, r0
 800b284:	3301      	adds	r3, #1
 800b286:	b29b      	uxth	r3, r3
 800b288:	005b      	lsls	r3, r3, #1
 800b28a:	b29a      	uxth	r2, r3
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b290:	7dfb      	ldrb	r3, [r7, #23]
 800b292:	68ba      	ldr	r2, [r7, #8]
 800b294:	4413      	add	r3, r2
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	7812      	ldrb	r2, [r2, #0]
 800b29a:	701a      	strb	r2, [r3, #0]
  idx++;
 800b29c:	7dfb      	ldrb	r3, [r7, #23]
 800b29e:	3301      	adds	r3, #1
 800b2a0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b2a2:	7dfb      	ldrb	r3, [r7, #23]
 800b2a4:	68ba      	ldr	r2, [r7, #8]
 800b2a6:	4413      	add	r3, r2
 800b2a8:	2203      	movs	r2, #3
 800b2aa:	701a      	strb	r2, [r3, #0]
  idx++;
 800b2ac:	7dfb      	ldrb	r3, [r7, #23]
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b2b2:	e013      	b.n	800b2dc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b2b4:	7dfb      	ldrb	r3, [r7, #23]
 800b2b6:	68ba      	ldr	r2, [r7, #8]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	693a      	ldr	r2, [r7, #16]
 800b2bc:	7812      	ldrb	r2, [r2, #0]
 800b2be:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	613b      	str	r3, [r7, #16]
    idx++;
 800b2c6:	7dfb      	ldrb	r3, [r7, #23]
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b2cc:	7dfb      	ldrb	r3, [r7, #23]
 800b2ce:	68ba      	ldr	r2, [r7, #8]
 800b2d0:	4413      	add	r3, r2
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	701a      	strb	r2, [r3, #0]
    idx++;
 800b2d6:	7dfb      	ldrb	r3, [r7, #23]
 800b2d8:	3301      	adds	r3, #1
 800b2da:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d1e7      	bne.n	800b2b4 <USBD_GetString+0x52>
 800b2e4:	e000      	b.n	800b2e8 <USBD_GetString+0x86>
    return;
 800b2e6:	bf00      	nop
  }
}
 800b2e8:	3718      	adds	r7, #24
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}

0800b2ee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b2ee:	b480      	push	{r7}
 800b2f0:	b085      	sub	sp, #20
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b2fe:	e005      	b.n	800b30c <USBD_GetLen+0x1e>
  {
    len++;
 800b300:	7bfb      	ldrb	r3, [r7, #15]
 800b302:	3301      	adds	r3, #1
 800b304:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	3301      	adds	r3, #1
 800b30a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d1f5      	bne.n	800b300 <USBD_GetLen+0x12>
  }

  return len;
 800b314:	7bfb      	ldrb	r3, [r7, #15]
}
 800b316:	4618      	mov	r0, r3
 800b318:	3714      	adds	r7, #20
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr

0800b322 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b322:	b580      	push	{r7, lr}
 800b324:	b084      	sub	sp, #16
 800b326:	af00      	add	r7, sp, #0
 800b328:	60f8      	str	r0, [r7, #12]
 800b32a:	60b9      	str	r1, [r7, #8]
 800b32c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2202      	movs	r2, #2
 800b332:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	687a      	ldr	r2, [r7, #4]
 800b33a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	68ba      	ldr	r2, [r7, #8]
 800b346:	2100      	movs	r1, #0
 800b348:	68f8      	ldr	r0, [r7, #12]
 800b34a:	f000 fcbb 	bl	800bcc4 <USBD_LL_Transmit>

  return USBD_OK;
 800b34e:	2300      	movs	r3, #0
}
 800b350:	4618      	mov	r0, r3
 800b352:	3710      	adds	r7, #16
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	60f8      	str	r0, [r7, #12]
 800b360:	60b9      	str	r1, [r7, #8]
 800b362:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	68ba      	ldr	r2, [r7, #8]
 800b368:	2100      	movs	r1, #0
 800b36a:	68f8      	ldr	r0, [r7, #12]
 800b36c:	f000 fcaa 	bl	800bcc4 <USBD_LL_Transmit>

  return USBD_OK;
 800b370:	2300      	movs	r3, #0
}
 800b372:	4618      	mov	r0, r3
 800b374:	3710      	adds	r7, #16
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b084      	sub	sp, #16
 800b37e:	af00      	add	r7, sp, #0
 800b380:	60f8      	str	r0, [r7, #12]
 800b382:	60b9      	str	r1, [r7, #8]
 800b384:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2203      	movs	r2, #3
 800b38a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	68ba      	ldr	r2, [r7, #8]
 800b3a2:	2100      	movs	r1, #0
 800b3a4:	68f8      	ldr	r0, [r7, #12]
 800b3a6:	f000 fcae 	bl	800bd06 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3aa:	2300      	movs	r3, #0
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3710      	adds	r7, #16
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	68ba      	ldr	r2, [r7, #8]
 800b3c4:	2100      	movs	r1, #0
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	f000 fc9d 	bl	800bd06 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3cc:	2300      	movs	r3, #0
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3710      	adds	r7, #16
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b082      	sub	sp, #8
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2204      	movs	r2, #4
 800b3e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	2100      	movs	r1, #0
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f000 fc69 	bl	800bcc4 <USBD_LL_Transmit>

  return USBD_OK;
 800b3f2:	2300      	movs	r3, #0
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3708      	adds	r7, #8
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2205      	movs	r2, #5
 800b408:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b40c:	2300      	movs	r3, #0
 800b40e:	2200      	movs	r2, #0
 800b410:	2100      	movs	r1, #0
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 fc77 	bl	800bd06 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b418:	2300      	movs	r3, #0
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3708      	adds	r7, #8
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
	...

0800b424 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b428:	2200      	movs	r2, #0
 800b42a:	4912      	ldr	r1, [pc, #72]	; (800b474 <MX_USB_Device_Init+0x50>)
 800b42c:	4812      	ldr	r0, [pc, #72]	; (800b478 <MX_USB_Device_Init+0x54>)
 800b42e:	f7fe fed9 	bl	800a1e4 <USBD_Init>
 800b432:	4603      	mov	r3, r0
 800b434:	2b00      	cmp	r3, #0
 800b436:	d001      	beq.n	800b43c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b438:	f7f6 f958 	bl	80016ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b43c:	490f      	ldr	r1, [pc, #60]	; (800b47c <MX_USB_Device_Init+0x58>)
 800b43e:	480e      	ldr	r0, [pc, #56]	; (800b478 <MX_USB_Device_Init+0x54>)
 800b440:	f7fe ff00 	bl	800a244 <USBD_RegisterClass>
 800b444:	4603      	mov	r3, r0
 800b446:	2b00      	cmp	r3, #0
 800b448:	d001      	beq.n	800b44e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b44a:	f7f6 f94f 	bl	80016ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b44e:	490c      	ldr	r1, [pc, #48]	; (800b480 <MX_USB_Device_Init+0x5c>)
 800b450:	4809      	ldr	r0, [pc, #36]	; (800b478 <MX_USB_Device_Init+0x54>)
 800b452:	f7fe fe21 	bl	800a098 <USBD_CDC_RegisterInterface>
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d001      	beq.n	800b460 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b45c:	f7f6 f946 	bl	80016ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b460:	4805      	ldr	r0, [pc, #20]	; (800b478 <MX_USB_Device_Init+0x54>)
 800b462:	f7fe ff16 	bl	800a292 <USBD_Start>
 800b466:	4603      	mov	r3, r0
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d001      	beq.n	800b470 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b46c:	f7f6 f93e 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b470:	bf00      	nop
 800b472:	bd80      	pop	{r7, pc}
 800b474:	20000140 	.word	0x20000140
 800b478:	200004c0 	.word	0x200004c0
 800b47c:	20000028 	.word	0x20000028
 800b480:	2000012c 	.word	0x2000012c

0800b484 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b488:	2200      	movs	r2, #0
 800b48a:	4905      	ldr	r1, [pc, #20]	; (800b4a0 <CDC_Init_FS+0x1c>)
 800b48c:	4805      	ldr	r0, [pc, #20]	; (800b4a4 <CDC_Init_FS+0x20>)
 800b48e:	f7fe fe18 	bl	800a0c2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b492:	4905      	ldr	r1, [pc, #20]	; (800b4a8 <CDC_Init_FS+0x24>)
 800b494:	4803      	ldr	r0, [pc, #12]	; (800b4a4 <CDC_Init_FS+0x20>)
 800b496:	f7fe fe32 	bl	800a0fe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b49a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	bd80      	pop	{r7, pc}
 800b4a0:	20000f90 	.word	0x20000f90
 800b4a4:	200004c0 	.word	0x200004c0
 800b4a8:	20000790 	.word	0x20000790

0800b4ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b4b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b083      	sub	sp, #12
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	6039      	str	r1, [r7, #0]
 800b4c6:	71fb      	strb	r3, [r7, #7]
 800b4c8:	4613      	mov	r3, r2
 800b4ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b4cc:	79fb      	ldrb	r3, [r7, #7]
 800b4ce:	2b23      	cmp	r3, #35	; 0x23
 800b4d0:	d84a      	bhi.n	800b568 <CDC_Control_FS+0xac>
 800b4d2:	a201      	add	r2, pc, #4	; (adr r2, 800b4d8 <CDC_Control_FS+0x1c>)
 800b4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d8:	0800b569 	.word	0x0800b569
 800b4dc:	0800b569 	.word	0x0800b569
 800b4e0:	0800b569 	.word	0x0800b569
 800b4e4:	0800b569 	.word	0x0800b569
 800b4e8:	0800b569 	.word	0x0800b569
 800b4ec:	0800b569 	.word	0x0800b569
 800b4f0:	0800b569 	.word	0x0800b569
 800b4f4:	0800b569 	.word	0x0800b569
 800b4f8:	0800b569 	.word	0x0800b569
 800b4fc:	0800b569 	.word	0x0800b569
 800b500:	0800b569 	.word	0x0800b569
 800b504:	0800b569 	.word	0x0800b569
 800b508:	0800b569 	.word	0x0800b569
 800b50c:	0800b569 	.word	0x0800b569
 800b510:	0800b569 	.word	0x0800b569
 800b514:	0800b569 	.word	0x0800b569
 800b518:	0800b569 	.word	0x0800b569
 800b51c:	0800b569 	.word	0x0800b569
 800b520:	0800b569 	.word	0x0800b569
 800b524:	0800b569 	.word	0x0800b569
 800b528:	0800b569 	.word	0x0800b569
 800b52c:	0800b569 	.word	0x0800b569
 800b530:	0800b569 	.word	0x0800b569
 800b534:	0800b569 	.word	0x0800b569
 800b538:	0800b569 	.word	0x0800b569
 800b53c:	0800b569 	.word	0x0800b569
 800b540:	0800b569 	.word	0x0800b569
 800b544:	0800b569 	.word	0x0800b569
 800b548:	0800b569 	.word	0x0800b569
 800b54c:	0800b569 	.word	0x0800b569
 800b550:	0800b569 	.word	0x0800b569
 800b554:	0800b569 	.word	0x0800b569
 800b558:	0800b569 	.word	0x0800b569
 800b55c:	0800b569 	.word	0x0800b569
 800b560:	0800b569 	.word	0x0800b569
 800b564:	0800b569 	.word	0x0800b569
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b568:	bf00      	nop
  }

  return (USBD_OK);
 800b56a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	370c      	adds	r7, #12
 800b570:	46bd      	mov	sp, r7
 800b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b576:	4770      	bx	lr

0800b578 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b582:	6879      	ldr	r1, [r7, #4]
 800b584:	4810      	ldr	r0, [pc, #64]	; (800b5c8 <CDC_Receive_FS+0x50>)
 800b586:	f7fe fdba 	bl	800a0fe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b58a:	480f      	ldr	r0, [pc, #60]	; (800b5c8 <CDC_Receive_FS+0x50>)
 800b58c:	f7fe fe00 	bl	800a190 <USBD_CDC_ReceivePacket>

  memset(buffer, '\0', 64);  // clear the buffer
 800b590:	2240      	movs	r2, #64	; 0x40
 800b592:	2100      	movs	r1, #0
 800b594:	480d      	ldr	r0, [pc, #52]	; (800b5cc <CDC_Receive_FS+0x54>)
 800b596:	f000 fca3 	bl	800bee0 <memset>
  uint8_t len = (uint8_t)*Len;
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer, Buf, len);  // copy the data to the buffer
 800b5a0:	7bfb      	ldrb	r3, [r7, #15]
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	6879      	ldr	r1, [r7, #4]
 800b5a6:	4809      	ldr	r0, [pc, #36]	; (800b5cc <CDC_Receive_FS+0x54>)
 800b5a8:	f000 fc8c 	bl	800bec4 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 800b5ac:	7bfb      	ldrb	r3, [r7, #15]
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	2100      	movs	r1, #0
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f000 fc94 	bl	800bee0 <memset>
  newReceived = true;
 800b5b8:	4b05      	ldr	r3, [pc, #20]	; (800b5d0 <CDC_Receive_FS+0x58>)
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 800b5be:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3710      	adds	r7, #16
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	200004c0 	.word	0x200004c0
 800b5cc:	20000470 	.word	0x20000470
 800b5d0:	200004b0 	.word	0x200004b0

0800b5d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	460b      	mov	r3, r1
 800b5de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b5e4:	4b0d      	ldr	r3, [pc, #52]	; (800b61c <CDC_Transmit_FS+0x48>)
 800b5e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d001      	beq.n	800b5fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	e00b      	b.n	800b612 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b5fa:	887b      	ldrh	r3, [r7, #2]
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	6879      	ldr	r1, [r7, #4]
 800b600:	4806      	ldr	r0, [pc, #24]	; (800b61c <CDC_Transmit_FS+0x48>)
 800b602:	f7fe fd5e 	bl	800a0c2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b606:	4805      	ldr	r0, [pc, #20]	; (800b61c <CDC_Transmit_FS+0x48>)
 800b608:	f7fe fd92 	bl	800a130 <USBD_CDC_TransmitPacket>
 800b60c:	4603      	mov	r3, r0
 800b60e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b610:	7bfb      	ldrb	r3, [r7, #15]
}
 800b612:	4618      	mov	r0, r3
 800b614:	3710      	adds	r7, #16
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	200004c0 	.word	0x200004c0

0800b620 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b620:	b480      	push	{r7}
 800b622:	b087      	sub	sp, #28
 800b624:	af00      	add	r7, sp, #0
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	60b9      	str	r1, [r7, #8]
 800b62a:	4613      	mov	r3, r2
 800b62c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b62e:	2300      	movs	r3, #0
 800b630:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b632:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b636:	4618      	mov	r0, r3
 800b638:	371c      	adds	r7, #28
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr
	...

0800b644 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b644:	b480      	push	{r7}
 800b646:	b083      	sub	sp, #12
 800b648:	af00      	add	r7, sp, #0
 800b64a:	4603      	mov	r3, r0
 800b64c:	6039      	str	r1, [r7, #0]
 800b64e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	2212      	movs	r2, #18
 800b654:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b656:	4b03      	ldr	r3, [pc, #12]	; (800b664 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b658:	4618      	mov	r0, r3
 800b65a:	370c      	adds	r7, #12
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr
 800b664:	20000160 	.word	0x20000160

0800b668 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b668:	b480      	push	{r7}
 800b66a:	b083      	sub	sp, #12
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	4603      	mov	r3, r0
 800b670:	6039      	str	r1, [r7, #0]
 800b672:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	2204      	movs	r2, #4
 800b678:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b67a:	4b03      	ldr	r3, [pc, #12]	; (800b688 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	370c      	adds	r7, #12
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr
 800b688:	20000174 	.word	0x20000174

0800b68c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	af00      	add	r7, sp, #0
 800b692:	4603      	mov	r3, r0
 800b694:	6039      	str	r1, [r7, #0]
 800b696:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b698:	79fb      	ldrb	r3, [r7, #7]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d105      	bne.n	800b6aa <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b69e:	683a      	ldr	r2, [r7, #0]
 800b6a0:	4907      	ldr	r1, [pc, #28]	; (800b6c0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b6a2:	4808      	ldr	r0, [pc, #32]	; (800b6c4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b6a4:	f7ff fddd 	bl	800b262 <USBD_GetString>
 800b6a8:	e004      	b.n	800b6b4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b6aa:	683a      	ldr	r2, [r7, #0]
 800b6ac:	4904      	ldr	r1, [pc, #16]	; (800b6c0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b6ae:	4805      	ldr	r0, [pc, #20]	; (800b6c4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b6b0:	f7ff fdd7 	bl	800b262 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6b4:	4b02      	ldr	r3, [pc, #8]	; (800b6c0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3708      	adds	r7, #8
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	20001790 	.word	0x20001790
 800b6c4:	0800d378 	.word	0x0800d378

0800b6c8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	6039      	str	r1, [r7, #0]
 800b6d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b6d4:	683a      	ldr	r2, [r7, #0]
 800b6d6:	4904      	ldr	r1, [pc, #16]	; (800b6e8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b6d8:	4804      	ldr	r0, [pc, #16]	; (800b6ec <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b6da:	f7ff fdc2 	bl	800b262 <USBD_GetString>
  return USBD_StrDesc;
 800b6de:	4b02      	ldr	r3, [pc, #8]	; (800b6e8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3708      	adds	r7, #8
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	20001790 	.word	0x20001790
 800b6ec:	0800d390 	.word	0x0800d390

0800b6f0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	6039      	str	r1, [r7, #0]
 800b6fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	221a      	movs	r2, #26
 800b700:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b702:	f000 f843 	bl	800b78c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b706:	4b02      	ldr	r3, [pc, #8]	; (800b710 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3708      	adds	r7, #8
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	20000178 	.word	0x20000178

0800b714 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
 800b71a:	4603      	mov	r3, r0
 800b71c:	6039      	str	r1, [r7, #0]
 800b71e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b720:	79fb      	ldrb	r3, [r7, #7]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d105      	bne.n	800b732 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b726:	683a      	ldr	r2, [r7, #0]
 800b728:	4907      	ldr	r1, [pc, #28]	; (800b748 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b72a:	4808      	ldr	r0, [pc, #32]	; (800b74c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b72c:	f7ff fd99 	bl	800b262 <USBD_GetString>
 800b730:	e004      	b.n	800b73c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b732:	683a      	ldr	r2, [r7, #0]
 800b734:	4904      	ldr	r1, [pc, #16]	; (800b748 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b736:	4805      	ldr	r0, [pc, #20]	; (800b74c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b738:	f7ff fd93 	bl	800b262 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b73c:	4b02      	ldr	r3, [pc, #8]	; (800b748 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3708      	adds	r7, #8
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	20001790 	.word	0x20001790
 800b74c:	0800d3a4 	.word	0x0800d3a4

0800b750 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
 800b756:	4603      	mov	r3, r0
 800b758:	6039      	str	r1, [r7, #0]
 800b75a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b75c:	79fb      	ldrb	r3, [r7, #7]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d105      	bne.n	800b76e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b762:	683a      	ldr	r2, [r7, #0]
 800b764:	4907      	ldr	r1, [pc, #28]	; (800b784 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b766:	4808      	ldr	r0, [pc, #32]	; (800b788 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b768:	f7ff fd7b 	bl	800b262 <USBD_GetString>
 800b76c:	e004      	b.n	800b778 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b76e:	683a      	ldr	r2, [r7, #0]
 800b770:	4904      	ldr	r1, [pc, #16]	; (800b784 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b772:	4805      	ldr	r0, [pc, #20]	; (800b788 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b774:	f7ff fd75 	bl	800b262 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b778:	4b02      	ldr	r3, [pc, #8]	; (800b784 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3708      	adds	r7, #8
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	20001790 	.word	0x20001790
 800b788:	0800d3b0 	.word	0x0800d3b0

0800b78c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b792:	4b0f      	ldr	r3, [pc, #60]	; (800b7d0 <Get_SerialNum+0x44>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b798:	4b0e      	ldr	r3, [pc, #56]	; (800b7d4 <Get_SerialNum+0x48>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b79e:	4b0e      	ldr	r3, [pc, #56]	; (800b7d8 <Get_SerialNum+0x4c>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b7a4:	68fa      	ldr	r2, [r7, #12]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	4413      	add	r3, r2
 800b7aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d009      	beq.n	800b7c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b7b2:	2208      	movs	r2, #8
 800b7b4:	4909      	ldr	r1, [pc, #36]	; (800b7dc <Get_SerialNum+0x50>)
 800b7b6:	68f8      	ldr	r0, [r7, #12]
 800b7b8:	f000 f814 	bl	800b7e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b7bc:	2204      	movs	r2, #4
 800b7be:	4908      	ldr	r1, [pc, #32]	; (800b7e0 <Get_SerialNum+0x54>)
 800b7c0:	68b8      	ldr	r0, [r7, #8]
 800b7c2:	f000 f80f 	bl	800b7e4 <IntToUnicode>
  }
}
 800b7c6:	bf00      	nop
 800b7c8:	3710      	adds	r7, #16
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}
 800b7ce:	bf00      	nop
 800b7d0:	1fff7590 	.word	0x1fff7590
 800b7d4:	1fff7594 	.word	0x1fff7594
 800b7d8:	1fff7598 	.word	0x1fff7598
 800b7dc:	2000017a 	.word	0x2000017a
 800b7e0:	2000018a 	.word	0x2000018a

0800b7e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b087      	sub	sp, #28
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	60b9      	str	r1, [r7, #8]
 800b7ee:	4613      	mov	r3, r2
 800b7f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	75fb      	strb	r3, [r7, #23]
 800b7fa:	e027      	b.n	800b84c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	0f1b      	lsrs	r3, r3, #28
 800b800:	2b09      	cmp	r3, #9
 800b802:	d80b      	bhi.n	800b81c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	0f1b      	lsrs	r3, r3, #28
 800b808:	b2da      	uxtb	r2, r3
 800b80a:	7dfb      	ldrb	r3, [r7, #23]
 800b80c:	005b      	lsls	r3, r3, #1
 800b80e:	4619      	mov	r1, r3
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	440b      	add	r3, r1
 800b814:	3230      	adds	r2, #48	; 0x30
 800b816:	b2d2      	uxtb	r2, r2
 800b818:	701a      	strb	r2, [r3, #0]
 800b81a:	e00a      	b.n	800b832 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	0f1b      	lsrs	r3, r3, #28
 800b820:	b2da      	uxtb	r2, r3
 800b822:	7dfb      	ldrb	r3, [r7, #23]
 800b824:	005b      	lsls	r3, r3, #1
 800b826:	4619      	mov	r1, r3
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	440b      	add	r3, r1
 800b82c:	3237      	adds	r2, #55	; 0x37
 800b82e:	b2d2      	uxtb	r2, r2
 800b830:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	011b      	lsls	r3, r3, #4
 800b836:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b838:	7dfb      	ldrb	r3, [r7, #23]
 800b83a:	005b      	lsls	r3, r3, #1
 800b83c:	3301      	adds	r3, #1
 800b83e:	68ba      	ldr	r2, [r7, #8]
 800b840:	4413      	add	r3, r2
 800b842:	2200      	movs	r2, #0
 800b844:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b846:	7dfb      	ldrb	r3, [r7, #23]
 800b848:	3301      	adds	r3, #1
 800b84a:	75fb      	strb	r3, [r7, #23]
 800b84c:	7dfa      	ldrb	r2, [r7, #23]
 800b84e:	79fb      	ldrb	r3, [r7, #7]
 800b850:	429a      	cmp	r2, r3
 800b852:	d3d3      	bcc.n	800b7fc <IntToUnicode+0x18>
  }
}
 800b854:	bf00      	nop
 800b856:	bf00      	nop
 800b858:	371c      	adds	r7, #28
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr
	...

0800b864 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b098      	sub	sp, #96	; 0x60
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b86c:	f107 030c 	add.w	r3, r7, #12
 800b870:	2254      	movs	r2, #84	; 0x54
 800b872:	2100      	movs	r1, #0
 800b874:	4618      	mov	r0, r3
 800b876:	f000 fb33 	bl	800bee0 <memset>
  if(pcdHandle->Instance==USB)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	4a15      	ldr	r2, [pc, #84]	; (800b8d4 <HAL_PCD_MspInit+0x70>)
 800b880:	4293      	cmp	r3, r2
 800b882:	d123      	bne.n	800b8cc <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b888:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800b88a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b88e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b890:	f107 030c 	add.w	r3, r7, #12
 800b894:	4618      	mov	r0, r3
 800b896:	f7fb f8b1 	bl	80069fc <HAL_RCCEx_PeriphCLKConfig>
 800b89a:	4603      	mov	r3, r0
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d001      	beq.n	800b8a4 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800b8a0:	f7f5 ff24 	bl	80016ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b8a4:	4b0c      	ldr	r3, [pc, #48]	; (800b8d8 <HAL_PCD_MspInit+0x74>)
 800b8a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8a8:	4a0b      	ldr	r2, [pc, #44]	; (800b8d8 <HAL_PCD_MspInit+0x74>)
 800b8aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b8ae:	6593      	str	r3, [r2, #88]	; 0x58
 800b8b0:	4b09      	ldr	r3, [pc, #36]	; (800b8d8 <HAL_PCD_MspInit+0x74>)
 800b8b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b8b8:	60bb      	str	r3, [r7, #8]
 800b8ba:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b8bc:	2200      	movs	r2, #0
 800b8be:	2100      	movs	r1, #0
 800b8c0:	2014      	movs	r0, #20
 800b8c2:	f7f8 f886 	bl	80039d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b8c6:	2014      	movs	r0, #20
 800b8c8:	f7f8 f89d 	bl	8003a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b8cc:	bf00      	nop
 800b8ce:	3760      	adds	r7, #96	; 0x60
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}
 800b8d4:	40005c00 	.word	0x40005c00
 800b8d8:	40021000 	.word	0x40021000

0800b8dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b082      	sub	sp, #8
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	4610      	mov	r0, r2
 800b8f4:	f7fe fd18 	bl	800a328 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b8f8:	bf00      	nop
 800b8fa:	3708      	adds	r7, #8
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	460b      	mov	r3, r1
 800b90a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b912:	78fa      	ldrb	r2, [r7, #3]
 800b914:	6879      	ldr	r1, [r7, #4]
 800b916:	4613      	mov	r3, r2
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	4413      	add	r3, r2
 800b91c:	00db      	lsls	r3, r3, #3
 800b91e:	440b      	add	r3, r1
 800b920:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	78fb      	ldrb	r3, [r7, #3]
 800b928:	4619      	mov	r1, r3
 800b92a:	f7fe fd52 	bl	800a3d2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b92e:	bf00      	nop
 800b930:	3708      	adds	r7, #8
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}

0800b936 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b936:	b580      	push	{r7, lr}
 800b938:	b082      	sub	sp, #8
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	6078      	str	r0, [r7, #4]
 800b93e:	460b      	mov	r3, r1
 800b940:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b948:	78fa      	ldrb	r2, [r7, #3]
 800b94a:	6879      	ldr	r1, [r7, #4]
 800b94c:	4613      	mov	r3, r2
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	4413      	add	r3, r2
 800b952:	00db      	lsls	r3, r3, #3
 800b954:	440b      	add	r3, r1
 800b956:	333c      	adds	r3, #60	; 0x3c
 800b958:	681a      	ldr	r2, [r3, #0]
 800b95a:	78fb      	ldrb	r3, [r7, #3]
 800b95c:	4619      	mov	r1, r3
 800b95e:	f7fe fd9b 	bl	800a498 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b962:	bf00      	nop
 800b964:	3708      	adds	r7, #8
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}

0800b96a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b96a:	b580      	push	{r7, lr}
 800b96c:	b082      	sub	sp, #8
 800b96e:	af00      	add	r7, sp, #0
 800b970:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b978:	4618      	mov	r0, r3
 800b97a:	f7fe feaf 	bl	800a6dc <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b97e:	bf00      	nop
 800b980:	3708      	adds	r7, #8
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}

0800b986 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b986:	b580      	push	{r7, lr}
 800b988:	b084      	sub	sp, #16
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b98e:	2301      	movs	r3, #1
 800b990:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	689b      	ldr	r3, [r3, #8]
 800b996:	2b02      	cmp	r3, #2
 800b998:	d001      	beq.n	800b99e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b99a:	f7f5 fea7 	bl	80016ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b9a4:	7bfa      	ldrb	r2, [r7, #15]
 800b9a6:	4611      	mov	r1, r2
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f7fe fe59 	bl	800a660 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f7fe fe05 	bl	800a5c4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b9ba:	bf00      	nop
 800b9bc:	3710      	adds	r7, #16
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
	...

0800b9c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7fe fe54 	bl	800a680 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	699b      	ldr	r3, [r3, #24]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d005      	beq.n	800b9ec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b9e0:	4b04      	ldr	r3, [pc, #16]	; (800b9f4 <HAL_PCD_SuspendCallback+0x30>)
 800b9e2:	691b      	ldr	r3, [r3, #16]
 800b9e4:	4a03      	ldr	r2, [pc, #12]	; (800b9f4 <HAL_PCD_SuspendCallback+0x30>)
 800b9e6:	f043 0306 	orr.w	r3, r3, #6
 800b9ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b9ec:	bf00      	nop
 800b9ee:	3708      	adds	r7, #8
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}
 800b9f4:	e000ed00 	.word	0xe000ed00

0800b9f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	699b      	ldr	r3, [r3, #24]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d007      	beq.n	800ba18 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba08:	4b08      	ldr	r3, [pc, #32]	; (800ba2c <HAL_PCD_ResumeCallback+0x34>)
 800ba0a:	691b      	ldr	r3, [r3, #16]
 800ba0c:	4a07      	ldr	r2, [pc, #28]	; (800ba2c <HAL_PCD_ResumeCallback+0x34>)
 800ba0e:	f023 0306 	bic.w	r3, r3, #6
 800ba12:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ba14:	f000 f9fa 	bl	800be0c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7fe fe44 	bl	800a6ac <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800ba24:	bf00      	nop
 800ba26:	3708      	adds	r7, #8
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	e000ed00 	.word	0xe000ed00

0800ba30 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b082      	sub	sp, #8
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800ba38:	4a2b      	ldr	r2, [pc, #172]	; (800bae8 <USBD_LL_Init+0xb8>)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	4a29      	ldr	r2, [pc, #164]	; (800bae8 <USBD_LL_Init+0xb8>)
 800ba44:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800ba48:	4b27      	ldr	r3, [pc, #156]	; (800bae8 <USBD_LL_Init+0xb8>)
 800ba4a:	4a28      	ldr	r2, [pc, #160]	; (800baec <USBD_LL_Init+0xbc>)
 800ba4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ba4e:	4b26      	ldr	r3, [pc, #152]	; (800bae8 <USBD_LL_Init+0xb8>)
 800ba50:	2208      	movs	r2, #8
 800ba52:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ba54:	4b24      	ldr	r3, [pc, #144]	; (800bae8 <USBD_LL_Init+0xb8>)
 800ba56:	2202      	movs	r2, #2
 800ba58:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ba5a:	4b23      	ldr	r3, [pc, #140]	; (800bae8 <USBD_LL_Init+0xb8>)
 800ba5c:	2202      	movs	r2, #2
 800ba5e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800ba60:	4b21      	ldr	r3, [pc, #132]	; (800bae8 <USBD_LL_Init+0xb8>)
 800ba62:	2200      	movs	r2, #0
 800ba64:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ba66:	4b20      	ldr	r3, [pc, #128]	; (800bae8 <USBD_LL_Init+0xb8>)
 800ba68:	2200      	movs	r2, #0
 800ba6a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ba6c:	4b1e      	ldr	r3, [pc, #120]	; (800bae8 <USBD_LL_Init+0xb8>)
 800ba6e:	2200      	movs	r2, #0
 800ba70:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ba72:	4b1d      	ldr	r3, [pc, #116]	; (800bae8 <USBD_LL_Init+0xb8>)
 800ba74:	2200      	movs	r2, #0
 800ba76:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ba78:	481b      	ldr	r0, [pc, #108]	; (800bae8 <USBD_LL_Init+0xb8>)
 800ba7a:	f7f8 fce0 	bl	800443e <HAL_PCD_Init>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d001      	beq.n	800ba88 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800ba84:	f7f5 fe32 	bl	80016ec <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ba8e:	2318      	movs	r3, #24
 800ba90:	2200      	movs	r2, #0
 800ba92:	2100      	movs	r1, #0
 800ba94:	f7fa f999 	bl	8005dca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ba9e:	2358      	movs	r3, #88	; 0x58
 800baa0:	2200      	movs	r2, #0
 800baa2:	2180      	movs	r1, #128	; 0x80
 800baa4:	f7fa f991 	bl	8005dca <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800baae:	23c0      	movs	r3, #192	; 0xc0
 800bab0:	2200      	movs	r2, #0
 800bab2:	2181      	movs	r1, #129	; 0x81
 800bab4:	f7fa f989 	bl	8005dca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800babe:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bac2:	2200      	movs	r2, #0
 800bac4:	2101      	movs	r1, #1
 800bac6:	f7fa f980 	bl	8005dca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bad0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bad4:	2200      	movs	r2, #0
 800bad6:	2182      	movs	r1, #130	; 0x82
 800bad8:	f7fa f977 	bl	8005dca <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800badc:	2300      	movs	r3, #0
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3708      	adds	r7, #8
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
 800bae6:	bf00      	nop
 800bae8:	20001990 	.word	0x20001990
 800baec:	40005c00 	.word	0x40005c00

0800baf0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baf8:	2300      	movs	r3, #0
 800bafa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bafc:	2300      	movs	r3, #0
 800bafe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb06:	4618      	mov	r0, r3
 800bb08:	f7f8 fd7e 	bl	8004608 <HAL_PCD_Start>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb10:	7bfb      	ldrb	r3, [r7, #15]
 800bb12:	4618      	mov	r0, r3
 800bb14:	f000 f980 	bl	800be18 <USBD_Get_USB_Status>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3710      	adds	r7, #16
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b084      	sub	sp, #16
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
 800bb2e:	4608      	mov	r0, r1
 800bb30:	4611      	mov	r1, r2
 800bb32:	461a      	mov	r2, r3
 800bb34:	4603      	mov	r3, r0
 800bb36:	70fb      	strb	r3, [r7, #3]
 800bb38:	460b      	mov	r3, r1
 800bb3a:	70bb      	strb	r3, [r7, #2]
 800bb3c:	4613      	mov	r3, r2
 800bb3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb40:	2300      	movs	r3, #0
 800bb42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb44:	2300      	movs	r3, #0
 800bb46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bb4e:	78bb      	ldrb	r3, [r7, #2]
 800bb50:	883a      	ldrh	r2, [r7, #0]
 800bb52:	78f9      	ldrb	r1, [r7, #3]
 800bb54:	f7f8 fec6 	bl	80048e4 <HAL_PCD_EP_Open>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb5c:	7bfb      	ldrb	r3, [r7, #15]
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f000 f95a 	bl	800be18 <USBD_Get_USB_Status>
 800bb64:	4603      	mov	r3, r0
 800bb66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb68:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3710      	adds	r7, #16
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}

0800bb72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb72:	b580      	push	{r7, lr}
 800bb74:	b084      	sub	sp, #16
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	6078      	str	r0, [r7, #4]
 800bb7a:	460b      	mov	r3, r1
 800bb7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb82:	2300      	movs	r3, #0
 800bb84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb8c:	78fa      	ldrb	r2, [r7, #3]
 800bb8e:	4611      	mov	r1, r2
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7f8 ff0d 	bl	80049b0 <HAL_PCD_EP_Close>
 800bb96:	4603      	mov	r3, r0
 800bb98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb9a:	7bfb      	ldrb	r3, [r7, #15]
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f000 f93b 	bl	800be18 <USBD_Get_USB_Status>
 800bba2:	4603      	mov	r3, r0
 800bba4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bba6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3710      	adds	r7, #16
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	460b      	mov	r3, r1
 800bbba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bbca:	78fa      	ldrb	r2, [r7, #3]
 800bbcc:	4611      	mov	r1, r2
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f7f8 ffce 	bl	8004b70 <HAL_PCD_EP_SetStall>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbd8:	7bfb      	ldrb	r3, [r7, #15]
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f000 f91c 	bl	800be18 <USBD_Get_USB_Status>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbe4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3710      	adds	r7, #16
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}

0800bbee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbee:	b580      	push	{r7, lr}
 800bbf0:	b084      	sub	sp, #16
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	6078      	str	r0, [r7, #4]
 800bbf6:	460b      	mov	r3, r1
 800bbf8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc08:	78fa      	ldrb	r2, [r7, #3]
 800bc0a:	4611      	mov	r1, r2
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7f9 f801 	bl	8004c14 <HAL_PCD_EP_ClrStall>
 800bc12:	4603      	mov	r3, r0
 800bc14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc16:	7bfb      	ldrb	r3, [r7, #15]
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f000 f8fd 	bl	800be18 <USBD_Get_USB_Status>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc22:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3710      	adds	r7, #16
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}

0800bc2c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b085      	sub	sp, #20
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	460b      	mov	r3, r1
 800bc36:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc3e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bc40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	da0c      	bge.n	800bc62 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bc48:	78fb      	ldrb	r3, [r7, #3]
 800bc4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc4e:	68f9      	ldr	r1, [r7, #12]
 800bc50:	1c5a      	adds	r2, r3, #1
 800bc52:	4613      	mov	r3, r2
 800bc54:	009b      	lsls	r3, r3, #2
 800bc56:	4413      	add	r3, r2
 800bc58:	00db      	lsls	r3, r3, #3
 800bc5a:	440b      	add	r3, r1
 800bc5c:	3302      	adds	r3, #2
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	e00b      	b.n	800bc7a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bc62:	78fb      	ldrb	r3, [r7, #3]
 800bc64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc68:	68f9      	ldr	r1, [r7, #12]
 800bc6a:	4613      	mov	r3, r2
 800bc6c:	009b      	lsls	r3, r3, #2
 800bc6e:	4413      	add	r3, r2
 800bc70:	00db      	lsls	r3, r3, #3
 800bc72:	440b      	add	r3, r1
 800bc74:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800bc78:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3714      	adds	r7, #20
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc84:	4770      	bx	lr

0800bc86 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bc86:	b580      	push	{r7, lr}
 800bc88:	b084      	sub	sp, #16
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
 800bc8e:	460b      	mov	r3, r1
 800bc90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc92:	2300      	movs	r3, #0
 800bc94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc96:	2300      	movs	r3, #0
 800bc98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bca0:	78fa      	ldrb	r2, [r7, #3]
 800bca2:	4611      	mov	r1, r2
 800bca4:	4618      	mov	r0, r3
 800bca6:	f7f8 fdf8 	bl	800489a <HAL_PCD_SetAddress>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcae:	7bfb      	ldrb	r3, [r7, #15]
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f000 f8b1 	bl	800be18 <USBD_Get_USB_Status>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcba:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3710      	adds	r7, #16
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b086      	sub	sp, #24
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	60f8      	str	r0, [r7, #12]
 800bccc:	607a      	str	r2, [r7, #4]
 800bcce:	603b      	str	r3, [r7, #0]
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bce2:	7af9      	ldrb	r1, [r7, #11]
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	f7f8 feff 	bl	8004aea <HAL_PCD_EP_Transmit>
 800bcec:	4603      	mov	r3, r0
 800bcee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcf0:	7dfb      	ldrb	r3, [r7, #23]
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f000 f890 	bl	800be18 <USBD_Get_USB_Status>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bcfc:	7dbb      	ldrb	r3, [r7, #22]
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3718      	adds	r7, #24
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}

0800bd06 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bd06:	b580      	push	{r7, lr}
 800bd08:	b086      	sub	sp, #24
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	60f8      	str	r0, [r7, #12]
 800bd0e:	607a      	str	r2, [r7, #4]
 800bd10:	603b      	str	r3, [r7, #0]
 800bd12:	460b      	mov	r3, r1
 800bd14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd16:	2300      	movs	r3, #0
 800bd18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bd24:	7af9      	ldrb	r1, [r7, #11]
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	687a      	ldr	r2, [r7, #4]
 800bd2a:	f7f8 fe89 	bl	8004a40 <HAL_PCD_EP_Receive>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd32:	7dfb      	ldrb	r3, [r7, #23]
 800bd34:	4618      	mov	r0, r3
 800bd36:	f000 f86f 	bl	800be18 <USBD_Get_USB_Status>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bd3e:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3718      	adds	r7, #24
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	460b      	mov	r3, r1
 800bd52:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bd5a:	78fa      	ldrb	r2, [r7, #3]
 800bd5c:	4611      	mov	r1, r2
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f7f8 feab 	bl	8004aba <HAL_PCD_EP_GetRxCount>
 800bd64:	4603      	mov	r3, r0
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3708      	adds	r7, #8
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
	...

0800bd70 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	460b      	mov	r3, r1
 800bd7a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800bd7c:	78fb      	ldrb	r3, [r7, #3]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d002      	beq.n	800bd88 <HAL_PCDEx_LPM_Callback+0x18>
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d013      	beq.n	800bdae <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800bd86:	e023      	b.n	800bdd0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	699b      	ldr	r3, [r3, #24]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d007      	beq.n	800bda0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bd90:	f000 f83c 	bl	800be0c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bd94:	4b10      	ldr	r3, [pc, #64]	; (800bdd8 <HAL_PCDEx_LPM_Callback+0x68>)
 800bd96:	691b      	ldr	r3, [r3, #16]
 800bd98:	4a0f      	ldr	r2, [pc, #60]	; (800bdd8 <HAL_PCDEx_LPM_Callback+0x68>)
 800bd9a:	f023 0306 	bic.w	r3, r3, #6
 800bd9e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7fe fc80 	bl	800a6ac <USBD_LL_Resume>
    break;
 800bdac:	e010      	b.n	800bdd0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7fe fc63 	bl	800a680 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	699b      	ldr	r3, [r3, #24]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d005      	beq.n	800bdce <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bdc2:	4b05      	ldr	r3, [pc, #20]	; (800bdd8 <HAL_PCDEx_LPM_Callback+0x68>)
 800bdc4:	691b      	ldr	r3, [r3, #16]
 800bdc6:	4a04      	ldr	r2, [pc, #16]	; (800bdd8 <HAL_PCDEx_LPM_Callback+0x68>)
 800bdc8:	f043 0306 	orr.w	r3, r3, #6
 800bdcc:	6113      	str	r3, [r2, #16]
    break;
 800bdce:	bf00      	nop
}
 800bdd0:	bf00      	nop
 800bdd2:	3708      	adds	r7, #8
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	e000ed00 	.word	0xe000ed00

0800bddc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bde4:	4b03      	ldr	r3, [pc, #12]	; (800bdf4 <USBD_static_malloc+0x18>)
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	370c      	adds	r7, #12
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr
 800bdf2:	bf00      	nop
 800bdf4:	20001c84 	.word	0x20001c84

0800bdf8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b083      	sub	sp, #12
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]

}
 800be00:	bf00      	nop
 800be02:	370c      	adds	r7, #12
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr

0800be0c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800be10:	f7f5 f952 	bl	80010b8 <SystemClock_Config>
}
 800be14:	bf00      	nop
 800be16:	bd80      	pop	{r7, pc}

0800be18 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800be18:	b480      	push	{r7}
 800be1a:	b085      	sub	sp, #20
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	4603      	mov	r3, r0
 800be20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be22:	2300      	movs	r3, #0
 800be24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800be26:	79fb      	ldrb	r3, [r7, #7]
 800be28:	2b03      	cmp	r3, #3
 800be2a:	d817      	bhi.n	800be5c <USBD_Get_USB_Status+0x44>
 800be2c:	a201      	add	r2, pc, #4	; (adr r2, 800be34 <USBD_Get_USB_Status+0x1c>)
 800be2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be32:	bf00      	nop
 800be34:	0800be45 	.word	0x0800be45
 800be38:	0800be4b 	.word	0x0800be4b
 800be3c:	0800be51 	.word	0x0800be51
 800be40:	0800be57 	.word	0x0800be57
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800be44:	2300      	movs	r3, #0
 800be46:	73fb      	strb	r3, [r7, #15]
    break;
 800be48:	e00b      	b.n	800be62 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be4a:	2303      	movs	r3, #3
 800be4c:	73fb      	strb	r3, [r7, #15]
    break;
 800be4e:	e008      	b.n	800be62 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be50:	2301      	movs	r3, #1
 800be52:	73fb      	strb	r3, [r7, #15]
    break;
 800be54:	e005      	b.n	800be62 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be56:	2303      	movs	r3, #3
 800be58:	73fb      	strb	r3, [r7, #15]
    break;
 800be5a:	e002      	b.n	800be62 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800be5c:	2303      	movs	r3, #3
 800be5e:	73fb      	strb	r3, [r7, #15]
    break;
 800be60:	bf00      	nop
  }
  return usb_status;
 800be62:	7bfb      	ldrb	r3, [r7, #15]
}
 800be64:	4618      	mov	r0, r3
 800be66:	3714      	adds	r7, #20
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr

0800be70 <__errno>:
 800be70:	4b01      	ldr	r3, [pc, #4]	; (800be78 <__errno+0x8>)
 800be72:	6818      	ldr	r0, [r3, #0]
 800be74:	4770      	bx	lr
 800be76:	bf00      	nop
 800be78:	20000194 	.word	0x20000194

0800be7c <__libc_init_array>:
 800be7c:	b570      	push	{r4, r5, r6, lr}
 800be7e:	4d0d      	ldr	r5, [pc, #52]	; (800beb4 <__libc_init_array+0x38>)
 800be80:	4c0d      	ldr	r4, [pc, #52]	; (800beb8 <__libc_init_array+0x3c>)
 800be82:	1b64      	subs	r4, r4, r5
 800be84:	10a4      	asrs	r4, r4, #2
 800be86:	2600      	movs	r6, #0
 800be88:	42a6      	cmp	r6, r4
 800be8a:	d109      	bne.n	800bea0 <__libc_init_array+0x24>
 800be8c:	4d0b      	ldr	r5, [pc, #44]	; (800bebc <__libc_init_array+0x40>)
 800be8e:	4c0c      	ldr	r4, [pc, #48]	; (800bec0 <__libc_init_array+0x44>)
 800be90:	f001 fa00 	bl	800d294 <_init>
 800be94:	1b64      	subs	r4, r4, r5
 800be96:	10a4      	asrs	r4, r4, #2
 800be98:	2600      	movs	r6, #0
 800be9a:	42a6      	cmp	r6, r4
 800be9c:	d105      	bne.n	800beaa <__libc_init_array+0x2e>
 800be9e:	bd70      	pop	{r4, r5, r6, pc}
 800bea0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bea4:	4798      	blx	r3
 800bea6:	3601      	adds	r6, #1
 800bea8:	e7ee      	b.n	800be88 <__libc_init_array+0xc>
 800beaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800beae:	4798      	blx	r3
 800beb0:	3601      	adds	r6, #1
 800beb2:	e7f2      	b.n	800be9a <__libc_init_array+0x1e>
 800beb4:	0800d56c 	.word	0x0800d56c
 800beb8:	0800d56c 	.word	0x0800d56c
 800bebc:	0800d56c 	.word	0x0800d56c
 800bec0:	0800d570 	.word	0x0800d570

0800bec4 <memcpy>:
 800bec4:	440a      	add	r2, r1
 800bec6:	4291      	cmp	r1, r2
 800bec8:	f100 33ff 	add.w	r3, r0, #4294967295
 800becc:	d100      	bne.n	800bed0 <memcpy+0xc>
 800bece:	4770      	bx	lr
 800bed0:	b510      	push	{r4, lr}
 800bed2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bed6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800beda:	4291      	cmp	r1, r2
 800bedc:	d1f9      	bne.n	800bed2 <memcpy+0xe>
 800bede:	bd10      	pop	{r4, pc}

0800bee0 <memset>:
 800bee0:	4402      	add	r2, r0
 800bee2:	4603      	mov	r3, r0
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d100      	bne.n	800beea <memset+0xa>
 800bee8:	4770      	bx	lr
 800beea:	f803 1b01 	strb.w	r1, [r3], #1
 800beee:	e7f9      	b.n	800bee4 <memset+0x4>

0800bef0 <iprintf>:
 800bef0:	b40f      	push	{r0, r1, r2, r3}
 800bef2:	4b0a      	ldr	r3, [pc, #40]	; (800bf1c <iprintf+0x2c>)
 800bef4:	b513      	push	{r0, r1, r4, lr}
 800bef6:	681c      	ldr	r4, [r3, #0]
 800bef8:	b124      	cbz	r4, 800bf04 <iprintf+0x14>
 800befa:	69a3      	ldr	r3, [r4, #24]
 800befc:	b913      	cbnz	r3, 800bf04 <iprintf+0x14>
 800befe:	4620      	mov	r0, r4
 800bf00:	f000 fa7e 	bl	800c400 <__sinit>
 800bf04:	ab05      	add	r3, sp, #20
 800bf06:	9a04      	ldr	r2, [sp, #16]
 800bf08:	68a1      	ldr	r1, [r4, #8]
 800bf0a:	9301      	str	r3, [sp, #4]
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	f000 fde3 	bl	800cad8 <_vfiprintf_r>
 800bf12:	b002      	add	sp, #8
 800bf14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf18:	b004      	add	sp, #16
 800bf1a:	4770      	bx	lr
 800bf1c:	20000194 	.word	0x20000194

0800bf20 <_puts_r>:
 800bf20:	b570      	push	{r4, r5, r6, lr}
 800bf22:	460e      	mov	r6, r1
 800bf24:	4605      	mov	r5, r0
 800bf26:	b118      	cbz	r0, 800bf30 <_puts_r+0x10>
 800bf28:	6983      	ldr	r3, [r0, #24]
 800bf2a:	b90b      	cbnz	r3, 800bf30 <_puts_r+0x10>
 800bf2c:	f000 fa68 	bl	800c400 <__sinit>
 800bf30:	69ab      	ldr	r3, [r5, #24]
 800bf32:	68ac      	ldr	r4, [r5, #8]
 800bf34:	b913      	cbnz	r3, 800bf3c <_puts_r+0x1c>
 800bf36:	4628      	mov	r0, r5
 800bf38:	f000 fa62 	bl	800c400 <__sinit>
 800bf3c:	4b2c      	ldr	r3, [pc, #176]	; (800bff0 <_puts_r+0xd0>)
 800bf3e:	429c      	cmp	r4, r3
 800bf40:	d120      	bne.n	800bf84 <_puts_r+0x64>
 800bf42:	686c      	ldr	r4, [r5, #4]
 800bf44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf46:	07db      	lsls	r3, r3, #31
 800bf48:	d405      	bmi.n	800bf56 <_puts_r+0x36>
 800bf4a:	89a3      	ldrh	r3, [r4, #12]
 800bf4c:	0598      	lsls	r0, r3, #22
 800bf4e:	d402      	bmi.n	800bf56 <_puts_r+0x36>
 800bf50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf52:	f000 faf3 	bl	800c53c <__retarget_lock_acquire_recursive>
 800bf56:	89a3      	ldrh	r3, [r4, #12]
 800bf58:	0719      	lsls	r1, r3, #28
 800bf5a:	d51d      	bpl.n	800bf98 <_puts_r+0x78>
 800bf5c:	6923      	ldr	r3, [r4, #16]
 800bf5e:	b1db      	cbz	r3, 800bf98 <_puts_r+0x78>
 800bf60:	3e01      	subs	r6, #1
 800bf62:	68a3      	ldr	r3, [r4, #8]
 800bf64:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bf68:	3b01      	subs	r3, #1
 800bf6a:	60a3      	str	r3, [r4, #8]
 800bf6c:	bb39      	cbnz	r1, 800bfbe <_puts_r+0x9e>
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	da38      	bge.n	800bfe4 <_puts_r+0xc4>
 800bf72:	4622      	mov	r2, r4
 800bf74:	210a      	movs	r1, #10
 800bf76:	4628      	mov	r0, r5
 800bf78:	f000 f868 	bl	800c04c <__swbuf_r>
 800bf7c:	3001      	adds	r0, #1
 800bf7e:	d011      	beq.n	800bfa4 <_puts_r+0x84>
 800bf80:	250a      	movs	r5, #10
 800bf82:	e011      	b.n	800bfa8 <_puts_r+0x88>
 800bf84:	4b1b      	ldr	r3, [pc, #108]	; (800bff4 <_puts_r+0xd4>)
 800bf86:	429c      	cmp	r4, r3
 800bf88:	d101      	bne.n	800bf8e <_puts_r+0x6e>
 800bf8a:	68ac      	ldr	r4, [r5, #8]
 800bf8c:	e7da      	b.n	800bf44 <_puts_r+0x24>
 800bf8e:	4b1a      	ldr	r3, [pc, #104]	; (800bff8 <_puts_r+0xd8>)
 800bf90:	429c      	cmp	r4, r3
 800bf92:	bf08      	it	eq
 800bf94:	68ec      	ldreq	r4, [r5, #12]
 800bf96:	e7d5      	b.n	800bf44 <_puts_r+0x24>
 800bf98:	4621      	mov	r1, r4
 800bf9a:	4628      	mov	r0, r5
 800bf9c:	f000 f8a8 	bl	800c0f0 <__swsetup_r>
 800bfa0:	2800      	cmp	r0, #0
 800bfa2:	d0dd      	beq.n	800bf60 <_puts_r+0x40>
 800bfa4:	f04f 35ff 	mov.w	r5, #4294967295
 800bfa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfaa:	07da      	lsls	r2, r3, #31
 800bfac:	d405      	bmi.n	800bfba <_puts_r+0x9a>
 800bfae:	89a3      	ldrh	r3, [r4, #12]
 800bfb0:	059b      	lsls	r3, r3, #22
 800bfb2:	d402      	bmi.n	800bfba <_puts_r+0x9a>
 800bfb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfb6:	f000 fac2 	bl	800c53e <__retarget_lock_release_recursive>
 800bfba:	4628      	mov	r0, r5
 800bfbc:	bd70      	pop	{r4, r5, r6, pc}
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	da04      	bge.n	800bfcc <_puts_r+0xac>
 800bfc2:	69a2      	ldr	r2, [r4, #24]
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	dc06      	bgt.n	800bfd6 <_puts_r+0xb6>
 800bfc8:	290a      	cmp	r1, #10
 800bfca:	d004      	beq.n	800bfd6 <_puts_r+0xb6>
 800bfcc:	6823      	ldr	r3, [r4, #0]
 800bfce:	1c5a      	adds	r2, r3, #1
 800bfd0:	6022      	str	r2, [r4, #0]
 800bfd2:	7019      	strb	r1, [r3, #0]
 800bfd4:	e7c5      	b.n	800bf62 <_puts_r+0x42>
 800bfd6:	4622      	mov	r2, r4
 800bfd8:	4628      	mov	r0, r5
 800bfda:	f000 f837 	bl	800c04c <__swbuf_r>
 800bfde:	3001      	adds	r0, #1
 800bfe0:	d1bf      	bne.n	800bf62 <_puts_r+0x42>
 800bfe2:	e7df      	b.n	800bfa4 <_puts_r+0x84>
 800bfe4:	6823      	ldr	r3, [r4, #0]
 800bfe6:	250a      	movs	r5, #10
 800bfe8:	1c5a      	adds	r2, r3, #1
 800bfea:	6022      	str	r2, [r4, #0]
 800bfec:	701d      	strb	r5, [r3, #0]
 800bfee:	e7db      	b.n	800bfa8 <_puts_r+0x88>
 800bff0:	0800d4f8 	.word	0x0800d4f8
 800bff4:	0800d518 	.word	0x0800d518
 800bff8:	0800d4d8 	.word	0x0800d4d8

0800bffc <puts>:
 800bffc:	4b02      	ldr	r3, [pc, #8]	; (800c008 <puts+0xc>)
 800bffe:	4601      	mov	r1, r0
 800c000:	6818      	ldr	r0, [r3, #0]
 800c002:	f7ff bf8d 	b.w	800bf20 <_puts_r>
 800c006:	bf00      	nop
 800c008:	20000194 	.word	0x20000194

0800c00c <siprintf>:
 800c00c:	b40e      	push	{r1, r2, r3}
 800c00e:	b500      	push	{lr}
 800c010:	b09c      	sub	sp, #112	; 0x70
 800c012:	ab1d      	add	r3, sp, #116	; 0x74
 800c014:	9002      	str	r0, [sp, #8]
 800c016:	9006      	str	r0, [sp, #24]
 800c018:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c01c:	4809      	ldr	r0, [pc, #36]	; (800c044 <siprintf+0x38>)
 800c01e:	9107      	str	r1, [sp, #28]
 800c020:	9104      	str	r1, [sp, #16]
 800c022:	4909      	ldr	r1, [pc, #36]	; (800c048 <siprintf+0x3c>)
 800c024:	f853 2b04 	ldr.w	r2, [r3], #4
 800c028:	9105      	str	r1, [sp, #20]
 800c02a:	6800      	ldr	r0, [r0, #0]
 800c02c:	9301      	str	r3, [sp, #4]
 800c02e:	a902      	add	r1, sp, #8
 800c030:	f000 fc28 	bl	800c884 <_svfiprintf_r>
 800c034:	9b02      	ldr	r3, [sp, #8]
 800c036:	2200      	movs	r2, #0
 800c038:	701a      	strb	r2, [r3, #0]
 800c03a:	b01c      	add	sp, #112	; 0x70
 800c03c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c040:	b003      	add	sp, #12
 800c042:	4770      	bx	lr
 800c044:	20000194 	.word	0x20000194
 800c048:	ffff0208 	.word	0xffff0208

0800c04c <__swbuf_r>:
 800c04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c04e:	460e      	mov	r6, r1
 800c050:	4614      	mov	r4, r2
 800c052:	4605      	mov	r5, r0
 800c054:	b118      	cbz	r0, 800c05e <__swbuf_r+0x12>
 800c056:	6983      	ldr	r3, [r0, #24]
 800c058:	b90b      	cbnz	r3, 800c05e <__swbuf_r+0x12>
 800c05a:	f000 f9d1 	bl	800c400 <__sinit>
 800c05e:	4b21      	ldr	r3, [pc, #132]	; (800c0e4 <__swbuf_r+0x98>)
 800c060:	429c      	cmp	r4, r3
 800c062:	d12b      	bne.n	800c0bc <__swbuf_r+0x70>
 800c064:	686c      	ldr	r4, [r5, #4]
 800c066:	69a3      	ldr	r3, [r4, #24]
 800c068:	60a3      	str	r3, [r4, #8]
 800c06a:	89a3      	ldrh	r3, [r4, #12]
 800c06c:	071a      	lsls	r2, r3, #28
 800c06e:	d52f      	bpl.n	800c0d0 <__swbuf_r+0x84>
 800c070:	6923      	ldr	r3, [r4, #16]
 800c072:	b36b      	cbz	r3, 800c0d0 <__swbuf_r+0x84>
 800c074:	6923      	ldr	r3, [r4, #16]
 800c076:	6820      	ldr	r0, [r4, #0]
 800c078:	1ac0      	subs	r0, r0, r3
 800c07a:	6963      	ldr	r3, [r4, #20]
 800c07c:	b2f6      	uxtb	r6, r6
 800c07e:	4283      	cmp	r3, r0
 800c080:	4637      	mov	r7, r6
 800c082:	dc04      	bgt.n	800c08e <__swbuf_r+0x42>
 800c084:	4621      	mov	r1, r4
 800c086:	4628      	mov	r0, r5
 800c088:	f000 f926 	bl	800c2d8 <_fflush_r>
 800c08c:	bb30      	cbnz	r0, 800c0dc <__swbuf_r+0x90>
 800c08e:	68a3      	ldr	r3, [r4, #8]
 800c090:	3b01      	subs	r3, #1
 800c092:	60a3      	str	r3, [r4, #8]
 800c094:	6823      	ldr	r3, [r4, #0]
 800c096:	1c5a      	adds	r2, r3, #1
 800c098:	6022      	str	r2, [r4, #0]
 800c09a:	701e      	strb	r6, [r3, #0]
 800c09c:	6963      	ldr	r3, [r4, #20]
 800c09e:	3001      	adds	r0, #1
 800c0a0:	4283      	cmp	r3, r0
 800c0a2:	d004      	beq.n	800c0ae <__swbuf_r+0x62>
 800c0a4:	89a3      	ldrh	r3, [r4, #12]
 800c0a6:	07db      	lsls	r3, r3, #31
 800c0a8:	d506      	bpl.n	800c0b8 <__swbuf_r+0x6c>
 800c0aa:	2e0a      	cmp	r6, #10
 800c0ac:	d104      	bne.n	800c0b8 <__swbuf_r+0x6c>
 800c0ae:	4621      	mov	r1, r4
 800c0b0:	4628      	mov	r0, r5
 800c0b2:	f000 f911 	bl	800c2d8 <_fflush_r>
 800c0b6:	b988      	cbnz	r0, 800c0dc <__swbuf_r+0x90>
 800c0b8:	4638      	mov	r0, r7
 800c0ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0bc:	4b0a      	ldr	r3, [pc, #40]	; (800c0e8 <__swbuf_r+0x9c>)
 800c0be:	429c      	cmp	r4, r3
 800c0c0:	d101      	bne.n	800c0c6 <__swbuf_r+0x7a>
 800c0c2:	68ac      	ldr	r4, [r5, #8]
 800c0c4:	e7cf      	b.n	800c066 <__swbuf_r+0x1a>
 800c0c6:	4b09      	ldr	r3, [pc, #36]	; (800c0ec <__swbuf_r+0xa0>)
 800c0c8:	429c      	cmp	r4, r3
 800c0ca:	bf08      	it	eq
 800c0cc:	68ec      	ldreq	r4, [r5, #12]
 800c0ce:	e7ca      	b.n	800c066 <__swbuf_r+0x1a>
 800c0d0:	4621      	mov	r1, r4
 800c0d2:	4628      	mov	r0, r5
 800c0d4:	f000 f80c 	bl	800c0f0 <__swsetup_r>
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	d0cb      	beq.n	800c074 <__swbuf_r+0x28>
 800c0dc:	f04f 37ff 	mov.w	r7, #4294967295
 800c0e0:	e7ea      	b.n	800c0b8 <__swbuf_r+0x6c>
 800c0e2:	bf00      	nop
 800c0e4:	0800d4f8 	.word	0x0800d4f8
 800c0e8:	0800d518 	.word	0x0800d518
 800c0ec:	0800d4d8 	.word	0x0800d4d8

0800c0f0 <__swsetup_r>:
 800c0f0:	4b32      	ldr	r3, [pc, #200]	; (800c1bc <__swsetup_r+0xcc>)
 800c0f2:	b570      	push	{r4, r5, r6, lr}
 800c0f4:	681d      	ldr	r5, [r3, #0]
 800c0f6:	4606      	mov	r6, r0
 800c0f8:	460c      	mov	r4, r1
 800c0fa:	b125      	cbz	r5, 800c106 <__swsetup_r+0x16>
 800c0fc:	69ab      	ldr	r3, [r5, #24]
 800c0fe:	b913      	cbnz	r3, 800c106 <__swsetup_r+0x16>
 800c100:	4628      	mov	r0, r5
 800c102:	f000 f97d 	bl	800c400 <__sinit>
 800c106:	4b2e      	ldr	r3, [pc, #184]	; (800c1c0 <__swsetup_r+0xd0>)
 800c108:	429c      	cmp	r4, r3
 800c10a:	d10f      	bne.n	800c12c <__swsetup_r+0x3c>
 800c10c:	686c      	ldr	r4, [r5, #4]
 800c10e:	89a3      	ldrh	r3, [r4, #12]
 800c110:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c114:	0719      	lsls	r1, r3, #28
 800c116:	d42c      	bmi.n	800c172 <__swsetup_r+0x82>
 800c118:	06dd      	lsls	r5, r3, #27
 800c11a:	d411      	bmi.n	800c140 <__swsetup_r+0x50>
 800c11c:	2309      	movs	r3, #9
 800c11e:	6033      	str	r3, [r6, #0]
 800c120:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c124:	81a3      	strh	r3, [r4, #12]
 800c126:	f04f 30ff 	mov.w	r0, #4294967295
 800c12a:	e03e      	b.n	800c1aa <__swsetup_r+0xba>
 800c12c:	4b25      	ldr	r3, [pc, #148]	; (800c1c4 <__swsetup_r+0xd4>)
 800c12e:	429c      	cmp	r4, r3
 800c130:	d101      	bne.n	800c136 <__swsetup_r+0x46>
 800c132:	68ac      	ldr	r4, [r5, #8]
 800c134:	e7eb      	b.n	800c10e <__swsetup_r+0x1e>
 800c136:	4b24      	ldr	r3, [pc, #144]	; (800c1c8 <__swsetup_r+0xd8>)
 800c138:	429c      	cmp	r4, r3
 800c13a:	bf08      	it	eq
 800c13c:	68ec      	ldreq	r4, [r5, #12]
 800c13e:	e7e6      	b.n	800c10e <__swsetup_r+0x1e>
 800c140:	0758      	lsls	r0, r3, #29
 800c142:	d512      	bpl.n	800c16a <__swsetup_r+0x7a>
 800c144:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c146:	b141      	cbz	r1, 800c15a <__swsetup_r+0x6a>
 800c148:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c14c:	4299      	cmp	r1, r3
 800c14e:	d002      	beq.n	800c156 <__swsetup_r+0x66>
 800c150:	4630      	mov	r0, r6
 800c152:	f000 fa5b 	bl	800c60c <_free_r>
 800c156:	2300      	movs	r3, #0
 800c158:	6363      	str	r3, [r4, #52]	; 0x34
 800c15a:	89a3      	ldrh	r3, [r4, #12]
 800c15c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c160:	81a3      	strh	r3, [r4, #12]
 800c162:	2300      	movs	r3, #0
 800c164:	6063      	str	r3, [r4, #4]
 800c166:	6923      	ldr	r3, [r4, #16]
 800c168:	6023      	str	r3, [r4, #0]
 800c16a:	89a3      	ldrh	r3, [r4, #12]
 800c16c:	f043 0308 	orr.w	r3, r3, #8
 800c170:	81a3      	strh	r3, [r4, #12]
 800c172:	6923      	ldr	r3, [r4, #16]
 800c174:	b94b      	cbnz	r3, 800c18a <__swsetup_r+0x9a>
 800c176:	89a3      	ldrh	r3, [r4, #12]
 800c178:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c17c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c180:	d003      	beq.n	800c18a <__swsetup_r+0x9a>
 800c182:	4621      	mov	r1, r4
 800c184:	4630      	mov	r0, r6
 800c186:	f000 fa01 	bl	800c58c <__smakebuf_r>
 800c18a:	89a0      	ldrh	r0, [r4, #12]
 800c18c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c190:	f010 0301 	ands.w	r3, r0, #1
 800c194:	d00a      	beq.n	800c1ac <__swsetup_r+0xbc>
 800c196:	2300      	movs	r3, #0
 800c198:	60a3      	str	r3, [r4, #8]
 800c19a:	6963      	ldr	r3, [r4, #20]
 800c19c:	425b      	negs	r3, r3
 800c19e:	61a3      	str	r3, [r4, #24]
 800c1a0:	6923      	ldr	r3, [r4, #16]
 800c1a2:	b943      	cbnz	r3, 800c1b6 <__swsetup_r+0xc6>
 800c1a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c1a8:	d1ba      	bne.n	800c120 <__swsetup_r+0x30>
 800c1aa:	bd70      	pop	{r4, r5, r6, pc}
 800c1ac:	0781      	lsls	r1, r0, #30
 800c1ae:	bf58      	it	pl
 800c1b0:	6963      	ldrpl	r3, [r4, #20]
 800c1b2:	60a3      	str	r3, [r4, #8]
 800c1b4:	e7f4      	b.n	800c1a0 <__swsetup_r+0xb0>
 800c1b6:	2000      	movs	r0, #0
 800c1b8:	e7f7      	b.n	800c1aa <__swsetup_r+0xba>
 800c1ba:	bf00      	nop
 800c1bc:	20000194 	.word	0x20000194
 800c1c0:	0800d4f8 	.word	0x0800d4f8
 800c1c4:	0800d518 	.word	0x0800d518
 800c1c8:	0800d4d8 	.word	0x0800d4d8

0800c1cc <__sflush_r>:
 800c1cc:	898a      	ldrh	r2, [r1, #12]
 800c1ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1d2:	4605      	mov	r5, r0
 800c1d4:	0710      	lsls	r0, r2, #28
 800c1d6:	460c      	mov	r4, r1
 800c1d8:	d458      	bmi.n	800c28c <__sflush_r+0xc0>
 800c1da:	684b      	ldr	r3, [r1, #4]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	dc05      	bgt.n	800c1ec <__sflush_r+0x20>
 800c1e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	dc02      	bgt.n	800c1ec <__sflush_r+0x20>
 800c1e6:	2000      	movs	r0, #0
 800c1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1ee:	2e00      	cmp	r6, #0
 800c1f0:	d0f9      	beq.n	800c1e6 <__sflush_r+0x1a>
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c1f8:	682f      	ldr	r7, [r5, #0]
 800c1fa:	602b      	str	r3, [r5, #0]
 800c1fc:	d032      	beq.n	800c264 <__sflush_r+0x98>
 800c1fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c200:	89a3      	ldrh	r3, [r4, #12]
 800c202:	075a      	lsls	r2, r3, #29
 800c204:	d505      	bpl.n	800c212 <__sflush_r+0x46>
 800c206:	6863      	ldr	r3, [r4, #4]
 800c208:	1ac0      	subs	r0, r0, r3
 800c20a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c20c:	b10b      	cbz	r3, 800c212 <__sflush_r+0x46>
 800c20e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c210:	1ac0      	subs	r0, r0, r3
 800c212:	2300      	movs	r3, #0
 800c214:	4602      	mov	r2, r0
 800c216:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c218:	6a21      	ldr	r1, [r4, #32]
 800c21a:	4628      	mov	r0, r5
 800c21c:	47b0      	blx	r6
 800c21e:	1c43      	adds	r3, r0, #1
 800c220:	89a3      	ldrh	r3, [r4, #12]
 800c222:	d106      	bne.n	800c232 <__sflush_r+0x66>
 800c224:	6829      	ldr	r1, [r5, #0]
 800c226:	291d      	cmp	r1, #29
 800c228:	d82c      	bhi.n	800c284 <__sflush_r+0xb8>
 800c22a:	4a2a      	ldr	r2, [pc, #168]	; (800c2d4 <__sflush_r+0x108>)
 800c22c:	40ca      	lsrs	r2, r1
 800c22e:	07d6      	lsls	r6, r2, #31
 800c230:	d528      	bpl.n	800c284 <__sflush_r+0xb8>
 800c232:	2200      	movs	r2, #0
 800c234:	6062      	str	r2, [r4, #4]
 800c236:	04d9      	lsls	r1, r3, #19
 800c238:	6922      	ldr	r2, [r4, #16]
 800c23a:	6022      	str	r2, [r4, #0]
 800c23c:	d504      	bpl.n	800c248 <__sflush_r+0x7c>
 800c23e:	1c42      	adds	r2, r0, #1
 800c240:	d101      	bne.n	800c246 <__sflush_r+0x7a>
 800c242:	682b      	ldr	r3, [r5, #0]
 800c244:	b903      	cbnz	r3, 800c248 <__sflush_r+0x7c>
 800c246:	6560      	str	r0, [r4, #84]	; 0x54
 800c248:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c24a:	602f      	str	r7, [r5, #0]
 800c24c:	2900      	cmp	r1, #0
 800c24e:	d0ca      	beq.n	800c1e6 <__sflush_r+0x1a>
 800c250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c254:	4299      	cmp	r1, r3
 800c256:	d002      	beq.n	800c25e <__sflush_r+0x92>
 800c258:	4628      	mov	r0, r5
 800c25a:	f000 f9d7 	bl	800c60c <_free_r>
 800c25e:	2000      	movs	r0, #0
 800c260:	6360      	str	r0, [r4, #52]	; 0x34
 800c262:	e7c1      	b.n	800c1e8 <__sflush_r+0x1c>
 800c264:	6a21      	ldr	r1, [r4, #32]
 800c266:	2301      	movs	r3, #1
 800c268:	4628      	mov	r0, r5
 800c26a:	47b0      	blx	r6
 800c26c:	1c41      	adds	r1, r0, #1
 800c26e:	d1c7      	bne.n	800c200 <__sflush_r+0x34>
 800c270:	682b      	ldr	r3, [r5, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d0c4      	beq.n	800c200 <__sflush_r+0x34>
 800c276:	2b1d      	cmp	r3, #29
 800c278:	d001      	beq.n	800c27e <__sflush_r+0xb2>
 800c27a:	2b16      	cmp	r3, #22
 800c27c:	d101      	bne.n	800c282 <__sflush_r+0xb6>
 800c27e:	602f      	str	r7, [r5, #0]
 800c280:	e7b1      	b.n	800c1e6 <__sflush_r+0x1a>
 800c282:	89a3      	ldrh	r3, [r4, #12]
 800c284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c288:	81a3      	strh	r3, [r4, #12]
 800c28a:	e7ad      	b.n	800c1e8 <__sflush_r+0x1c>
 800c28c:	690f      	ldr	r7, [r1, #16]
 800c28e:	2f00      	cmp	r7, #0
 800c290:	d0a9      	beq.n	800c1e6 <__sflush_r+0x1a>
 800c292:	0793      	lsls	r3, r2, #30
 800c294:	680e      	ldr	r6, [r1, #0]
 800c296:	bf08      	it	eq
 800c298:	694b      	ldreq	r3, [r1, #20]
 800c29a:	600f      	str	r7, [r1, #0]
 800c29c:	bf18      	it	ne
 800c29e:	2300      	movne	r3, #0
 800c2a0:	eba6 0807 	sub.w	r8, r6, r7
 800c2a4:	608b      	str	r3, [r1, #8]
 800c2a6:	f1b8 0f00 	cmp.w	r8, #0
 800c2aa:	dd9c      	ble.n	800c1e6 <__sflush_r+0x1a>
 800c2ac:	6a21      	ldr	r1, [r4, #32]
 800c2ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c2b0:	4643      	mov	r3, r8
 800c2b2:	463a      	mov	r2, r7
 800c2b4:	4628      	mov	r0, r5
 800c2b6:	47b0      	blx	r6
 800c2b8:	2800      	cmp	r0, #0
 800c2ba:	dc06      	bgt.n	800c2ca <__sflush_r+0xfe>
 800c2bc:	89a3      	ldrh	r3, [r4, #12]
 800c2be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2c2:	81a3      	strh	r3, [r4, #12]
 800c2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c8:	e78e      	b.n	800c1e8 <__sflush_r+0x1c>
 800c2ca:	4407      	add	r7, r0
 800c2cc:	eba8 0800 	sub.w	r8, r8, r0
 800c2d0:	e7e9      	b.n	800c2a6 <__sflush_r+0xda>
 800c2d2:	bf00      	nop
 800c2d4:	20400001 	.word	0x20400001

0800c2d8 <_fflush_r>:
 800c2d8:	b538      	push	{r3, r4, r5, lr}
 800c2da:	690b      	ldr	r3, [r1, #16]
 800c2dc:	4605      	mov	r5, r0
 800c2de:	460c      	mov	r4, r1
 800c2e0:	b913      	cbnz	r3, 800c2e8 <_fflush_r+0x10>
 800c2e2:	2500      	movs	r5, #0
 800c2e4:	4628      	mov	r0, r5
 800c2e6:	bd38      	pop	{r3, r4, r5, pc}
 800c2e8:	b118      	cbz	r0, 800c2f2 <_fflush_r+0x1a>
 800c2ea:	6983      	ldr	r3, [r0, #24]
 800c2ec:	b90b      	cbnz	r3, 800c2f2 <_fflush_r+0x1a>
 800c2ee:	f000 f887 	bl	800c400 <__sinit>
 800c2f2:	4b14      	ldr	r3, [pc, #80]	; (800c344 <_fflush_r+0x6c>)
 800c2f4:	429c      	cmp	r4, r3
 800c2f6:	d11b      	bne.n	800c330 <_fflush_r+0x58>
 800c2f8:	686c      	ldr	r4, [r5, #4]
 800c2fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d0ef      	beq.n	800c2e2 <_fflush_r+0xa>
 800c302:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c304:	07d0      	lsls	r0, r2, #31
 800c306:	d404      	bmi.n	800c312 <_fflush_r+0x3a>
 800c308:	0599      	lsls	r1, r3, #22
 800c30a:	d402      	bmi.n	800c312 <_fflush_r+0x3a>
 800c30c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c30e:	f000 f915 	bl	800c53c <__retarget_lock_acquire_recursive>
 800c312:	4628      	mov	r0, r5
 800c314:	4621      	mov	r1, r4
 800c316:	f7ff ff59 	bl	800c1cc <__sflush_r>
 800c31a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c31c:	07da      	lsls	r2, r3, #31
 800c31e:	4605      	mov	r5, r0
 800c320:	d4e0      	bmi.n	800c2e4 <_fflush_r+0xc>
 800c322:	89a3      	ldrh	r3, [r4, #12]
 800c324:	059b      	lsls	r3, r3, #22
 800c326:	d4dd      	bmi.n	800c2e4 <_fflush_r+0xc>
 800c328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c32a:	f000 f908 	bl	800c53e <__retarget_lock_release_recursive>
 800c32e:	e7d9      	b.n	800c2e4 <_fflush_r+0xc>
 800c330:	4b05      	ldr	r3, [pc, #20]	; (800c348 <_fflush_r+0x70>)
 800c332:	429c      	cmp	r4, r3
 800c334:	d101      	bne.n	800c33a <_fflush_r+0x62>
 800c336:	68ac      	ldr	r4, [r5, #8]
 800c338:	e7df      	b.n	800c2fa <_fflush_r+0x22>
 800c33a:	4b04      	ldr	r3, [pc, #16]	; (800c34c <_fflush_r+0x74>)
 800c33c:	429c      	cmp	r4, r3
 800c33e:	bf08      	it	eq
 800c340:	68ec      	ldreq	r4, [r5, #12]
 800c342:	e7da      	b.n	800c2fa <_fflush_r+0x22>
 800c344:	0800d4f8 	.word	0x0800d4f8
 800c348:	0800d518 	.word	0x0800d518
 800c34c:	0800d4d8 	.word	0x0800d4d8

0800c350 <std>:
 800c350:	2300      	movs	r3, #0
 800c352:	b510      	push	{r4, lr}
 800c354:	4604      	mov	r4, r0
 800c356:	e9c0 3300 	strd	r3, r3, [r0]
 800c35a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c35e:	6083      	str	r3, [r0, #8]
 800c360:	8181      	strh	r1, [r0, #12]
 800c362:	6643      	str	r3, [r0, #100]	; 0x64
 800c364:	81c2      	strh	r2, [r0, #14]
 800c366:	6183      	str	r3, [r0, #24]
 800c368:	4619      	mov	r1, r3
 800c36a:	2208      	movs	r2, #8
 800c36c:	305c      	adds	r0, #92	; 0x5c
 800c36e:	f7ff fdb7 	bl	800bee0 <memset>
 800c372:	4b05      	ldr	r3, [pc, #20]	; (800c388 <std+0x38>)
 800c374:	6263      	str	r3, [r4, #36]	; 0x24
 800c376:	4b05      	ldr	r3, [pc, #20]	; (800c38c <std+0x3c>)
 800c378:	62a3      	str	r3, [r4, #40]	; 0x28
 800c37a:	4b05      	ldr	r3, [pc, #20]	; (800c390 <std+0x40>)
 800c37c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c37e:	4b05      	ldr	r3, [pc, #20]	; (800c394 <std+0x44>)
 800c380:	6224      	str	r4, [r4, #32]
 800c382:	6323      	str	r3, [r4, #48]	; 0x30
 800c384:	bd10      	pop	{r4, pc}
 800c386:	bf00      	nop
 800c388:	0800d081 	.word	0x0800d081
 800c38c:	0800d0a3 	.word	0x0800d0a3
 800c390:	0800d0db 	.word	0x0800d0db
 800c394:	0800d0ff 	.word	0x0800d0ff

0800c398 <_cleanup_r>:
 800c398:	4901      	ldr	r1, [pc, #4]	; (800c3a0 <_cleanup_r+0x8>)
 800c39a:	f000 b8af 	b.w	800c4fc <_fwalk_reent>
 800c39e:	bf00      	nop
 800c3a0:	0800c2d9 	.word	0x0800c2d9

0800c3a4 <__sfmoreglue>:
 800c3a4:	b570      	push	{r4, r5, r6, lr}
 800c3a6:	2268      	movs	r2, #104	; 0x68
 800c3a8:	1e4d      	subs	r5, r1, #1
 800c3aa:	4355      	muls	r5, r2
 800c3ac:	460e      	mov	r6, r1
 800c3ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c3b2:	f000 f997 	bl	800c6e4 <_malloc_r>
 800c3b6:	4604      	mov	r4, r0
 800c3b8:	b140      	cbz	r0, 800c3cc <__sfmoreglue+0x28>
 800c3ba:	2100      	movs	r1, #0
 800c3bc:	e9c0 1600 	strd	r1, r6, [r0]
 800c3c0:	300c      	adds	r0, #12
 800c3c2:	60a0      	str	r0, [r4, #8]
 800c3c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c3c8:	f7ff fd8a 	bl	800bee0 <memset>
 800c3cc:	4620      	mov	r0, r4
 800c3ce:	bd70      	pop	{r4, r5, r6, pc}

0800c3d0 <__sfp_lock_acquire>:
 800c3d0:	4801      	ldr	r0, [pc, #4]	; (800c3d8 <__sfp_lock_acquire+0x8>)
 800c3d2:	f000 b8b3 	b.w	800c53c <__retarget_lock_acquire_recursive>
 800c3d6:	bf00      	nop
 800c3d8:	20001ea5 	.word	0x20001ea5

0800c3dc <__sfp_lock_release>:
 800c3dc:	4801      	ldr	r0, [pc, #4]	; (800c3e4 <__sfp_lock_release+0x8>)
 800c3de:	f000 b8ae 	b.w	800c53e <__retarget_lock_release_recursive>
 800c3e2:	bf00      	nop
 800c3e4:	20001ea5 	.word	0x20001ea5

0800c3e8 <__sinit_lock_acquire>:
 800c3e8:	4801      	ldr	r0, [pc, #4]	; (800c3f0 <__sinit_lock_acquire+0x8>)
 800c3ea:	f000 b8a7 	b.w	800c53c <__retarget_lock_acquire_recursive>
 800c3ee:	bf00      	nop
 800c3f0:	20001ea6 	.word	0x20001ea6

0800c3f4 <__sinit_lock_release>:
 800c3f4:	4801      	ldr	r0, [pc, #4]	; (800c3fc <__sinit_lock_release+0x8>)
 800c3f6:	f000 b8a2 	b.w	800c53e <__retarget_lock_release_recursive>
 800c3fa:	bf00      	nop
 800c3fc:	20001ea6 	.word	0x20001ea6

0800c400 <__sinit>:
 800c400:	b510      	push	{r4, lr}
 800c402:	4604      	mov	r4, r0
 800c404:	f7ff fff0 	bl	800c3e8 <__sinit_lock_acquire>
 800c408:	69a3      	ldr	r3, [r4, #24]
 800c40a:	b11b      	cbz	r3, 800c414 <__sinit+0x14>
 800c40c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c410:	f7ff bff0 	b.w	800c3f4 <__sinit_lock_release>
 800c414:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c418:	6523      	str	r3, [r4, #80]	; 0x50
 800c41a:	4b13      	ldr	r3, [pc, #76]	; (800c468 <__sinit+0x68>)
 800c41c:	4a13      	ldr	r2, [pc, #76]	; (800c46c <__sinit+0x6c>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	62a2      	str	r2, [r4, #40]	; 0x28
 800c422:	42a3      	cmp	r3, r4
 800c424:	bf04      	itt	eq
 800c426:	2301      	moveq	r3, #1
 800c428:	61a3      	streq	r3, [r4, #24]
 800c42a:	4620      	mov	r0, r4
 800c42c:	f000 f820 	bl	800c470 <__sfp>
 800c430:	6060      	str	r0, [r4, #4]
 800c432:	4620      	mov	r0, r4
 800c434:	f000 f81c 	bl	800c470 <__sfp>
 800c438:	60a0      	str	r0, [r4, #8]
 800c43a:	4620      	mov	r0, r4
 800c43c:	f000 f818 	bl	800c470 <__sfp>
 800c440:	2200      	movs	r2, #0
 800c442:	60e0      	str	r0, [r4, #12]
 800c444:	2104      	movs	r1, #4
 800c446:	6860      	ldr	r0, [r4, #4]
 800c448:	f7ff ff82 	bl	800c350 <std>
 800c44c:	68a0      	ldr	r0, [r4, #8]
 800c44e:	2201      	movs	r2, #1
 800c450:	2109      	movs	r1, #9
 800c452:	f7ff ff7d 	bl	800c350 <std>
 800c456:	68e0      	ldr	r0, [r4, #12]
 800c458:	2202      	movs	r2, #2
 800c45a:	2112      	movs	r1, #18
 800c45c:	f7ff ff78 	bl	800c350 <std>
 800c460:	2301      	movs	r3, #1
 800c462:	61a3      	str	r3, [r4, #24]
 800c464:	e7d2      	b.n	800c40c <__sinit+0xc>
 800c466:	bf00      	nop
 800c468:	0800d4d4 	.word	0x0800d4d4
 800c46c:	0800c399 	.word	0x0800c399

0800c470 <__sfp>:
 800c470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c472:	4607      	mov	r7, r0
 800c474:	f7ff ffac 	bl	800c3d0 <__sfp_lock_acquire>
 800c478:	4b1e      	ldr	r3, [pc, #120]	; (800c4f4 <__sfp+0x84>)
 800c47a:	681e      	ldr	r6, [r3, #0]
 800c47c:	69b3      	ldr	r3, [r6, #24]
 800c47e:	b913      	cbnz	r3, 800c486 <__sfp+0x16>
 800c480:	4630      	mov	r0, r6
 800c482:	f7ff ffbd 	bl	800c400 <__sinit>
 800c486:	3648      	adds	r6, #72	; 0x48
 800c488:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c48c:	3b01      	subs	r3, #1
 800c48e:	d503      	bpl.n	800c498 <__sfp+0x28>
 800c490:	6833      	ldr	r3, [r6, #0]
 800c492:	b30b      	cbz	r3, 800c4d8 <__sfp+0x68>
 800c494:	6836      	ldr	r6, [r6, #0]
 800c496:	e7f7      	b.n	800c488 <__sfp+0x18>
 800c498:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c49c:	b9d5      	cbnz	r5, 800c4d4 <__sfp+0x64>
 800c49e:	4b16      	ldr	r3, [pc, #88]	; (800c4f8 <__sfp+0x88>)
 800c4a0:	60e3      	str	r3, [r4, #12]
 800c4a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c4a6:	6665      	str	r5, [r4, #100]	; 0x64
 800c4a8:	f000 f847 	bl	800c53a <__retarget_lock_init_recursive>
 800c4ac:	f7ff ff96 	bl	800c3dc <__sfp_lock_release>
 800c4b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c4b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c4b8:	6025      	str	r5, [r4, #0]
 800c4ba:	61a5      	str	r5, [r4, #24]
 800c4bc:	2208      	movs	r2, #8
 800c4be:	4629      	mov	r1, r5
 800c4c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c4c4:	f7ff fd0c 	bl	800bee0 <memset>
 800c4c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c4cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c4d0:	4620      	mov	r0, r4
 800c4d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4d4:	3468      	adds	r4, #104	; 0x68
 800c4d6:	e7d9      	b.n	800c48c <__sfp+0x1c>
 800c4d8:	2104      	movs	r1, #4
 800c4da:	4638      	mov	r0, r7
 800c4dc:	f7ff ff62 	bl	800c3a4 <__sfmoreglue>
 800c4e0:	4604      	mov	r4, r0
 800c4e2:	6030      	str	r0, [r6, #0]
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	d1d5      	bne.n	800c494 <__sfp+0x24>
 800c4e8:	f7ff ff78 	bl	800c3dc <__sfp_lock_release>
 800c4ec:	230c      	movs	r3, #12
 800c4ee:	603b      	str	r3, [r7, #0]
 800c4f0:	e7ee      	b.n	800c4d0 <__sfp+0x60>
 800c4f2:	bf00      	nop
 800c4f4:	0800d4d4 	.word	0x0800d4d4
 800c4f8:	ffff0001 	.word	0xffff0001

0800c4fc <_fwalk_reent>:
 800c4fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c500:	4606      	mov	r6, r0
 800c502:	4688      	mov	r8, r1
 800c504:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c508:	2700      	movs	r7, #0
 800c50a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c50e:	f1b9 0901 	subs.w	r9, r9, #1
 800c512:	d505      	bpl.n	800c520 <_fwalk_reent+0x24>
 800c514:	6824      	ldr	r4, [r4, #0]
 800c516:	2c00      	cmp	r4, #0
 800c518:	d1f7      	bne.n	800c50a <_fwalk_reent+0xe>
 800c51a:	4638      	mov	r0, r7
 800c51c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c520:	89ab      	ldrh	r3, [r5, #12]
 800c522:	2b01      	cmp	r3, #1
 800c524:	d907      	bls.n	800c536 <_fwalk_reent+0x3a>
 800c526:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c52a:	3301      	adds	r3, #1
 800c52c:	d003      	beq.n	800c536 <_fwalk_reent+0x3a>
 800c52e:	4629      	mov	r1, r5
 800c530:	4630      	mov	r0, r6
 800c532:	47c0      	blx	r8
 800c534:	4307      	orrs	r7, r0
 800c536:	3568      	adds	r5, #104	; 0x68
 800c538:	e7e9      	b.n	800c50e <_fwalk_reent+0x12>

0800c53a <__retarget_lock_init_recursive>:
 800c53a:	4770      	bx	lr

0800c53c <__retarget_lock_acquire_recursive>:
 800c53c:	4770      	bx	lr

0800c53e <__retarget_lock_release_recursive>:
 800c53e:	4770      	bx	lr

0800c540 <__swhatbuf_r>:
 800c540:	b570      	push	{r4, r5, r6, lr}
 800c542:	460e      	mov	r6, r1
 800c544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c548:	2900      	cmp	r1, #0
 800c54a:	b096      	sub	sp, #88	; 0x58
 800c54c:	4614      	mov	r4, r2
 800c54e:	461d      	mov	r5, r3
 800c550:	da08      	bge.n	800c564 <__swhatbuf_r+0x24>
 800c552:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c556:	2200      	movs	r2, #0
 800c558:	602a      	str	r2, [r5, #0]
 800c55a:	061a      	lsls	r2, r3, #24
 800c55c:	d410      	bmi.n	800c580 <__swhatbuf_r+0x40>
 800c55e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c562:	e00e      	b.n	800c582 <__swhatbuf_r+0x42>
 800c564:	466a      	mov	r2, sp
 800c566:	f000 fdf1 	bl	800d14c <_fstat_r>
 800c56a:	2800      	cmp	r0, #0
 800c56c:	dbf1      	blt.n	800c552 <__swhatbuf_r+0x12>
 800c56e:	9a01      	ldr	r2, [sp, #4]
 800c570:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c574:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c578:	425a      	negs	r2, r3
 800c57a:	415a      	adcs	r2, r3
 800c57c:	602a      	str	r2, [r5, #0]
 800c57e:	e7ee      	b.n	800c55e <__swhatbuf_r+0x1e>
 800c580:	2340      	movs	r3, #64	; 0x40
 800c582:	2000      	movs	r0, #0
 800c584:	6023      	str	r3, [r4, #0]
 800c586:	b016      	add	sp, #88	; 0x58
 800c588:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c58c <__smakebuf_r>:
 800c58c:	898b      	ldrh	r3, [r1, #12]
 800c58e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c590:	079d      	lsls	r5, r3, #30
 800c592:	4606      	mov	r6, r0
 800c594:	460c      	mov	r4, r1
 800c596:	d507      	bpl.n	800c5a8 <__smakebuf_r+0x1c>
 800c598:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c59c:	6023      	str	r3, [r4, #0]
 800c59e:	6123      	str	r3, [r4, #16]
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	6163      	str	r3, [r4, #20]
 800c5a4:	b002      	add	sp, #8
 800c5a6:	bd70      	pop	{r4, r5, r6, pc}
 800c5a8:	ab01      	add	r3, sp, #4
 800c5aa:	466a      	mov	r2, sp
 800c5ac:	f7ff ffc8 	bl	800c540 <__swhatbuf_r>
 800c5b0:	9900      	ldr	r1, [sp, #0]
 800c5b2:	4605      	mov	r5, r0
 800c5b4:	4630      	mov	r0, r6
 800c5b6:	f000 f895 	bl	800c6e4 <_malloc_r>
 800c5ba:	b948      	cbnz	r0, 800c5d0 <__smakebuf_r+0x44>
 800c5bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5c0:	059a      	lsls	r2, r3, #22
 800c5c2:	d4ef      	bmi.n	800c5a4 <__smakebuf_r+0x18>
 800c5c4:	f023 0303 	bic.w	r3, r3, #3
 800c5c8:	f043 0302 	orr.w	r3, r3, #2
 800c5cc:	81a3      	strh	r3, [r4, #12]
 800c5ce:	e7e3      	b.n	800c598 <__smakebuf_r+0xc>
 800c5d0:	4b0d      	ldr	r3, [pc, #52]	; (800c608 <__smakebuf_r+0x7c>)
 800c5d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c5d4:	89a3      	ldrh	r3, [r4, #12]
 800c5d6:	6020      	str	r0, [r4, #0]
 800c5d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5dc:	81a3      	strh	r3, [r4, #12]
 800c5de:	9b00      	ldr	r3, [sp, #0]
 800c5e0:	6163      	str	r3, [r4, #20]
 800c5e2:	9b01      	ldr	r3, [sp, #4]
 800c5e4:	6120      	str	r0, [r4, #16]
 800c5e6:	b15b      	cbz	r3, 800c600 <__smakebuf_r+0x74>
 800c5e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5ec:	4630      	mov	r0, r6
 800c5ee:	f000 fdbf 	bl	800d170 <_isatty_r>
 800c5f2:	b128      	cbz	r0, 800c600 <__smakebuf_r+0x74>
 800c5f4:	89a3      	ldrh	r3, [r4, #12]
 800c5f6:	f023 0303 	bic.w	r3, r3, #3
 800c5fa:	f043 0301 	orr.w	r3, r3, #1
 800c5fe:	81a3      	strh	r3, [r4, #12]
 800c600:	89a0      	ldrh	r0, [r4, #12]
 800c602:	4305      	orrs	r5, r0
 800c604:	81a5      	strh	r5, [r4, #12]
 800c606:	e7cd      	b.n	800c5a4 <__smakebuf_r+0x18>
 800c608:	0800c399 	.word	0x0800c399

0800c60c <_free_r>:
 800c60c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c60e:	2900      	cmp	r1, #0
 800c610:	d044      	beq.n	800c69c <_free_r+0x90>
 800c612:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c616:	9001      	str	r0, [sp, #4]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	f1a1 0404 	sub.w	r4, r1, #4
 800c61e:	bfb8      	it	lt
 800c620:	18e4      	addlt	r4, r4, r3
 800c622:	f000 fde1 	bl	800d1e8 <__malloc_lock>
 800c626:	4a1e      	ldr	r2, [pc, #120]	; (800c6a0 <_free_r+0x94>)
 800c628:	9801      	ldr	r0, [sp, #4]
 800c62a:	6813      	ldr	r3, [r2, #0]
 800c62c:	b933      	cbnz	r3, 800c63c <_free_r+0x30>
 800c62e:	6063      	str	r3, [r4, #4]
 800c630:	6014      	str	r4, [r2, #0]
 800c632:	b003      	add	sp, #12
 800c634:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c638:	f000 bddc 	b.w	800d1f4 <__malloc_unlock>
 800c63c:	42a3      	cmp	r3, r4
 800c63e:	d908      	bls.n	800c652 <_free_r+0x46>
 800c640:	6825      	ldr	r5, [r4, #0]
 800c642:	1961      	adds	r1, r4, r5
 800c644:	428b      	cmp	r3, r1
 800c646:	bf01      	itttt	eq
 800c648:	6819      	ldreq	r1, [r3, #0]
 800c64a:	685b      	ldreq	r3, [r3, #4]
 800c64c:	1949      	addeq	r1, r1, r5
 800c64e:	6021      	streq	r1, [r4, #0]
 800c650:	e7ed      	b.n	800c62e <_free_r+0x22>
 800c652:	461a      	mov	r2, r3
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	b10b      	cbz	r3, 800c65c <_free_r+0x50>
 800c658:	42a3      	cmp	r3, r4
 800c65a:	d9fa      	bls.n	800c652 <_free_r+0x46>
 800c65c:	6811      	ldr	r1, [r2, #0]
 800c65e:	1855      	adds	r5, r2, r1
 800c660:	42a5      	cmp	r5, r4
 800c662:	d10b      	bne.n	800c67c <_free_r+0x70>
 800c664:	6824      	ldr	r4, [r4, #0]
 800c666:	4421      	add	r1, r4
 800c668:	1854      	adds	r4, r2, r1
 800c66a:	42a3      	cmp	r3, r4
 800c66c:	6011      	str	r1, [r2, #0]
 800c66e:	d1e0      	bne.n	800c632 <_free_r+0x26>
 800c670:	681c      	ldr	r4, [r3, #0]
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	6053      	str	r3, [r2, #4]
 800c676:	4421      	add	r1, r4
 800c678:	6011      	str	r1, [r2, #0]
 800c67a:	e7da      	b.n	800c632 <_free_r+0x26>
 800c67c:	d902      	bls.n	800c684 <_free_r+0x78>
 800c67e:	230c      	movs	r3, #12
 800c680:	6003      	str	r3, [r0, #0]
 800c682:	e7d6      	b.n	800c632 <_free_r+0x26>
 800c684:	6825      	ldr	r5, [r4, #0]
 800c686:	1961      	adds	r1, r4, r5
 800c688:	428b      	cmp	r3, r1
 800c68a:	bf04      	itt	eq
 800c68c:	6819      	ldreq	r1, [r3, #0]
 800c68e:	685b      	ldreq	r3, [r3, #4]
 800c690:	6063      	str	r3, [r4, #4]
 800c692:	bf04      	itt	eq
 800c694:	1949      	addeq	r1, r1, r5
 800c696:	6021      	streq	r1, [r4, #0]
 800c698:	6054      	str	r4, [r2, #4]
 800c69a:	e7ca      	b.n	800c632 <_free_r+0x26>
 800c69c:	b003      	add	sp, #12
 800c69e:	bd30      	pop	{r4, r5, pc}
 800c6a0:	20001ea8 	.word	0x20001ea8

0800c6a4 <sbrk_aligned>:
 800c6a4:	b570      	push	{r4, r5, r6, lr}
 800c6a6:	4e0e      	ldr	r6, [pc, #56]	; (800c6e0 <sbrk_aligned+0x3c>)
 800c6a8:	460c      	mov	r4, r1
 800c6aa:	6831      	ldr	r1, [r6, #0]
 800c6ac:	4605      	mov	r5, r0
 800c6ae:	b911      	cbnz	r1, 800c6b6 <sbrk_aligned+0x12>
 800c6b0:	f000 fcd6 	bl	800d060 <_sbrk_r>
 800c6b4:	6030      	str	r0, [r6, #0]
 800c6b6:	4621      	mov	r1, r4
 800c6b8:	4628      	mov	r0, r5
 800c6ba:	f000 fcd1 	bl	800d060 <_sbrk_r>
 800c6be:	1c43      	adds	r3, r0, #1
 800c6c0:	d00a      	beq.n	800c6d8 <sbrk_aligned+0x34>
 800c6c2:	1cc4      	adds	r4, r0, #3
 800c6c4:	f024 0403 	bic.w	r4, r4, #3
 800c6c8:	42a0      	cmp	r0, r4
 800c6ca:	d007      	beq.n	800c6dc <sbrk_aligned+0x38>
 800c6cc:	1a21      	subs	r1, r4, r0
 800c6ce:	4628      	mov	r0, r5
 800c6d0:	f000 fcc6 	bl	800d060 <_sbrk_r>
 800c6d4:	3001      	adds	r0, #1
 800c6d6:	d101      	bne.n	800c6dc <sbrk_aligned+0x38>
 800c6d8:	f04f 34ff 	mov.w	r4, #4294967295
 800c6dc:	4620      	mov	r0, r4
 800c6de:	bd70      	pop	{r4, r5, r6, pc}
 800c6e0:	20001eac 	.word	0x20001eac

0800c6e4 <_malloc_r>:
 800c6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6e8:	1ccd      	adds	r5, r1, #3
 800c6ea:	f025 0503 	bic.w	r5, r5, #3
 800c6ee:	3508      	adds	r5, #8
 800c6f0:	2d0c      	cmp	r5, #12
 800c6f2:	bf38      	it	cc
 800c6f4:	250c      	movcc	r5, #12
 800c6f6:	2d00      	cmp	r5, #0
 800c6f8:	4607      	mov	r7, r0
 800c6fa:	db01      	blt.n	800c700 <_malloc_r+0x1c>
 800c6fc:	42a9      	cmp	r1, r5
 800c6fe:	d905      	bls.n	800c70c <_malloc_r+0x28>
 800c700:	230c      	movs	r3, #12
 800c702:	603b      	str	r3, [r7, #0]
 800c704:	2600      	movs	r6, #0
 800c706:	4630      	mov	r0, r6
 800c708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c70c:	4e2e      	ldr	r6, [pc, #184]	; (800c7c8 <_malloc_r+0xe4>)
 800c70e:	f000 fd6b 	bl	800d1e8 <__malloc_lock>
 800c712:	6833      	ldr	r3, [r6, #0]
 800c714:	461c      	mov	r4, r3
 800c716:	bb34      	cbnz	r4, 800c766 <_malloc_r+0x82>
 800c718:	4629      	mov	r1, r5
 800c71a:	4638      	mov	r0, r7
 800c71c:	f7ff ffc2 	bl	800c6a4 <sbrk_aligned>
 800c720:	1c43      	adds	r3, r0, #1
 800c722:	4604      	mov	r4, r0
 800c724:	d14d      	bne.n	800c7c2 <_malloc_r+0xde>
 800c726:	6834      	ldr	r4, [r6, #0]
 800c728:	4626      	mov	r6, r4
 800c72a:	2e00      	cmp	r6, #0
 800c72c:	d140      	bne.n	800c7b0 <_malloc_r+0xcc>
 800c72e:	6823      	ldr	r3, [r4, #0]
 800c730:	4631      	mov	r1, r6
 800c732:	4638      	mov	r0, r7
 800c734:	eb04 0803 	add.w	r8, r4, r3
 800c738:	f000 fc92 	bl	800d060 <_sbrk_r>
 800c73c:	4580      	cmp	r8, r0
 800c73e:	d13a      	bne.n	800c7b6 <_malloc_r+0xd2>
 800c740:	6821      	ldr	r1, [r4, #0]
 800c742:	3503      	adds	r5, #3
 800c744:	1a6d      	subs	r5, r5, r1
 800c746:	f025 0503 	bic.w	r5, r5, #3
 800c74a:	3508      	adds	r5, #8
 800c74c:	2d0c      	cmp	r5, #12
 800c74e:	bf38      	it	cc
 800c750:	250c      	movcc	r5, #12
 800c752:	4629      	mov	r1, r5
 800c754:	4638      	mov	r0, r7
 800c756:	f7ff ffa5 	bl	800c6a4 <sbrk_aligned>
 800c75a:	3001      	adds	r0, #1
 800c75c:	d02b      	beq.n	800c7b6 <_malloc_r+0xd2>
 800c75e:	6823      	ldr	r3, [r4, #0]
 800c760:	442b      	add	r3, r5
 800c762:	6023      	str	r3, [r4, #0]
 800c764:	e00e      	b.n	800c784 <_malloc_r+0xa0>
 800c766:	6822      	ldr	r2, [r4, #0]
 800c768:	1b52      	subs	r2, r2, r5
 800c76a:	d41e      	bmi.n	800c7aa <_malloc_r+0xc6>
 800c76c:	2a0b      	cmp	r2, #11
 800c76e:	d916      	bls.n	800c79e <_malloc_r+0xba>
 800c770:	1961      	adds	r1, r4, r5
 800c772:	42a3      	cmp	r3, r4
 800c774:	6025      	str	r5, [r4, #0]
 800c776:	bf18      	it	ne
 800c778:	6059      	strne	r1, [r3, #4]
 800c77a:	6863      	ldr	r3, [r4, #4]
 800c77c:	bf08      	it	eq
 800c77e:	6031      	streq	r1, [r6, #0]
 800c780:	5162      	str	r2, [r4, r5]
 800c782:	604b      	str	r3, [r1, #4]
 800c784:	4638      	mov	r0, r7
 800c786:	f104 060b 	add.w	r6, r4, #11
 800c78a:	f000 fd33 	bl	800d1f4 <__malloc_unlock>
 800c78e:	f026 0607 	bic.w	r6, r6, #7
 800c792:	1d23      	adds	r3, r4, #4
 800c794:	1af2      	subs	r2, r6, r3
 800c796:	d0b6      	beq.n	800c706 <_malloc_r+0x22>
 800c798:	1b9b      	subs	r3, r3, r6
 800c79a:	50a3      	str	r3, [r4, r2]
 800c79c:	e7b3      	b.n	800c706 <_malloc_r+0x22>
 800c79e:	6862      	ldr	r2, [r4, #4]
 800c7a0:	42a3      	cmp	r3, r4
 800c7a2:	bf0c      	ite	eq
 800c7a4:	6032      	streq	r2, [r6, #0]
 800c7a6:	605a      	strne	r2, [r3, #4]
 800c7a8:	e7ec      	b.n	800c784 <_malloc_r+0xa0>
 800c7aa:	4623      	mov	r3, r4
 800c7ac:	6864      	ldr	r4, [r4, #4]
 800c7ae:	e7b2      	b.n	800c716 <_malloc_r+0x32>
 800c7b0:	4634      	mov	r4, r6
 800c7b2:	6876      	ldr	r6, [r6, #4]
 800c7b4:	e7b9      	b.n	800c72a <_malloc_r+0x46>
 800c7b6:	230c      	movs	r3, #12
 800c7b8:	603b      	str	r3, [r7, #0]
 800c7ba:	4638      	mov	r0, r7
 800c7bc:	f000 fd1a 	bl	800d1f4 <__malloc_unlock>
 800c7c0:	e7a1      	b.n	800c706 <_malloc_r+0x22>
 800c7c2:	6025      	str	r5, [r4, #0]
 800c7c4:	e7de      	b.n	800c784 <_malloc_r+0xa0>
 800c7c6:	bf00      	nop
 800c7c8:	20001ea8 	.word	0x20001ea8

0800c7cc <__ssputs_r>:
 800c7cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7d0:	688e      	ldr	r6, [r1, #8]
 800c7d2:	429e      	cmp	r6, r3
 800c7d4:	4682      	mov	sl, r0
 800c7d6:	460c      	mov	r4, r1
 800c7d8:	4690      	mov	r8, r2
 800c7da:	461f      	mov	r7, r3
 800c7dc:	d838      	bhi.n	800c850 <__ssputs_r+0x84>
 800c7de:	898a      	ldrh	r2, [r1, #12]
 800c7e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c7e4:	d032      	beq.n	800c84c <__ssputs_r+0x80>
 800c7e6:	6825      	ldr	r5, [r4, #0]
 800c7e8:	6909      	ldr	r1, [r1, #16]
 800c7ea:	eba5 0901 	sub.w	r9, r5, r1
 800c7ee:	6965      	ldr	r5, [r4, #20]
 800c7f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c7f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c7f8:	3301      	adds	r3, #1
 800c7fa:	444b      	add	r3, r9
 800c7fc:	106d      	asrs	r5, r5, #1
 800c7fe:	429d      	cmp	r5, r3
 800c800:	bf38      	it	cc
 800c802:	461d      	movcc	r5, r3
 800c804:	0553      	lsls	r3, r2, #21
 800c806:	d531      	bpl.n	800c86c <__ssputs_r+0xa0>
 800c808:	4629      	mov	r1, r5
 800c80a:	f7ff ff6b 	bl	800c6e4 <_malloc_r>
 800c80e:	4606      	mov	r6, r0
 800c810:	b950      	cbnz	r0, 800c828 <__ssputs_r+0x5c>
 800c812:	230c      	movs	r3, #12
 800c814:	f8ca 3000 	str.w	r3, [sl]
 800c818:	89a3      	ldrh	r3, [r4, #12]
 800c81a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c81e:	81a3      	strh	r3, [r4, #12]
 800c820:	f04f 30ff 	mov.w	r0, #4294967295
 800c824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c828:	6921      	ldr	r1, [r4, #16]
 800c82a:	464a      	mov	r2, r9
 800c82c:	f7ff fb4a 	bl	800bec4 <memcpy>
 800c830:	89a3      	ldrh	r3, [r4, #12]
 800c832:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c83a:	81a3      	strh	r3, [r4, #12]
 800c83c:	6126      	str	r6, [r4, #16]
 800c83e:	6165      	str	r5, [r4, #20]
 800c840:	444e      	add	r6, r9
 800c842:	eba5 0509 	sub.w	r5, r5, r9
 800c846:	6026      	str	r6, [r4, #0]
 800c848:	60a5      	str	r5, [r4, #8]
 800c84a:	463e      	mov	r6, r7
 800c84c:	42be      	cmp	r6, r7
 800c84e:	d900      	bls.n	800c852 <__ssputs_r+0x86>
 800c850:	463e      	mov	r6, r7
 800c852:	6820      	ldr	r0, [r4, #0]
 800c854:	4632      	mov	r2, r6
 800c856:	4641      	mov	r1, r8
 800c858:	f000 fcac 	bl	800d1b4 <memmove>
 800c85c:	68a3      	ldr	r3, [r4, #8]
 800c85e:	1b9b      	subs	r3, r3, r6
 800c860:	60a3      	str	r3, [r4, #8]
 800c862:	6823      	ldr	r3, [r4, #0]
 800c864:	4433      	add	r3, r6
 800c866:	6023      	str	r3, [r4, #0]
 800c868:	2000      	movs	r0, #0
 800c86a:	e7db      	b.n	800c824 <__ssputs_r+0x58>
 800c86c:	462a      	mov	r2, r5
 800c86e:	f000 fcc7 	bl	800d200 <_realloc_r>
 800c872:	4606      	mov	r6, r0
 800c874:	2800      	cmp	r0, #0
 800c876:	d1e1      	bne.n	800c83c <__ssputs_r+0x70>
 800c878:	6921      	ldr	r1, [r4, #16]
 800c87a:	4650      	mov	r0, sl
 800c87c:	f7ff fec6 	bl	800c60c <_free_r>
 800c880:	e7c7      	b.n	800c812 <__ssputs_r+0x46>
	...

0800c884 <_svfiprintf_r>:
 800c884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c888:	4698      	mov	r8, r3
 800c88a:	898b      	ldrh	r3, [r1, #12]
 800c88c:	061b      	lsls	r3, r3, #24
 800c88e:	b09d      	sub	sp, #116	; 0x74
 800c890:	4607      	mov	r7, r0
 800c892:	460d      	mov	r5, r1
 800c894:	4614      	mov	r4, r2
 800c896:	d50e      	bpl.n	800c8b6 <_svfiprintf_r+0x32>
 800c898:	690b      	ldr	r3, [r1, #16]
 800c89a:	b963      	cbnz	r3, 800c8b6 <_svfiprintf_r+0x32>
 800c89c:	2140      	movs	r1, #64	; 0x40
 800c89e:	f7ff ff21 	bl	800c6e4 <_malloc_r>
 800c8a2:	6028      	str	r0, [r5, #0]
 800c8a4:	6128      	str	r0, [r5, #16]
 800c8a6:	b920      	cbnz	r0, 800c8b2 <_svfiprintf_r+0x2e>
 800c8a8:	230c      	movs	r3, #12
 800c8aa:	603b      	str	r3, [r7, #0]
 800c8ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c8b0:	e0d1      	b.n	800ca56 <_svfiprintf_r+0x1d2>
 800c8b2:	2340      	movs	r3, #64	; 0x40
 800c8b4:	616b      	str	r3, [r5, #20]
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	9309      	str	r3, [sp, #36]	; 0x24
 800c8ba:	2320      	movs	r3, #32
 800c8bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8c4:	2330      	movs	r3, #48	; 0x30
 800c8c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ca70 <_svfiprintf_r+0x1ec>
 800c8ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8ce:	f04f 0901 	mov.w	r9, #1
 800c8d2:	4623      	mov	r3, r4
 800c8d4:	469a      	mov	sl, r3
 800c8d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8da:	b10a      	cbz	r2, 800c8e0 <_svfiprintf_r+0x5c>
 800c8dc:	2a25      	cmp	r2, #37	; 0x25
 800c8de:	d1f9      	bne.n	800c8d4 <_svfiprintf_r+0x50>
 800c8e0:	ebba 0b04 	subs.w	fp, sl, r4
 800c8e4:	d00b      	beq.n	800c8fe <_svfiprintf_r+0x7a>
 800c8e6:	465b      	mov	r3, fp
 800c8e8:	4622      	mov	r2, r4
 800c8ea:	4629      	mov	r1, r5
 800c8ec:	4638      	mov	r0, r7
 800c8ee:	f7ff ff6d 	bl	800c7cc <__ssputs_r>
 800c8f2:	3001      	adds	r0, #1
 800c8f4:	f000 80aa 	beq.w	800ca4c <_svfiprintf_r+0x1c8>
 800c8f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8fa:	445a      	add	r2, fp
 800c8fc:	9209      	str	r2, [sp, #36]	; 0x24
 800c8fe:	f89a 3000 	ldrb.w	r3, [sl]
 800c902:	2b00      	cmp	r3, #0
 800c904:	f000 80a2 	beq.w	800ca4c <_svfiprintf_r+0x1c8>
 800c908:	2300      	movs	r3, #0
 800c90a:	f04f 32ff 	mov.w	r2, #4294967295
 800c90e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c912:	f10a 0a01 	add.w	sl, sl, #1
 800c916:	9304      	str	r3, [sp, #16]
 800c918:	9307      	str	r3, [sp, #28]
 800c91a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c91e:	931a      	str	r3, [sp, #104]	; 0x68
 800c920:	4654      	mov	r4, sl
 800c922:	2205      	movs	r2, #5
 800c924:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c928:	4851      	ldr	r0, [pc, #324]	; (800ca70 <_svfiprintf_r+0x1ec>)
 800c92a:	f7f3 fc79 	bl	8000220 <memchr>
 800c92e:	9a04      	ldr	r2, [sp, #16]
 800c930:	b9d8      	cbnz	r0, 800c96a <_svfiprintf_r+0xe6>
 800c932:	06d0      	lsls	r0, r2, #27
 800c934:	bf44      	itt	mi
 800c936:	2320      	movmi	r3, #32
 800c938:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c93c:	0711      	lsls	r1, r2, #28
 800c93e:	bf44      	itt	mi
 800c940:	232b      	movmi	r3, #43	; 0x2b
 800c942:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c946:	f89a 3000 	ldrb.w	r3, [sl]
 800c94a:	2b2a      	cmp	r3, #42	; 0x2a
 800c94c:	d015      	beq.n	800c97a <_svfiprintf_r+0xf6>
 800c94e:	9a07      	ldr	r2, [sp, #28]
 800c950:	4654      	mov	r4, sl
 800c952:	2000      	movs	r0, #0
 800c954:	f04f 0c0a 	mov.w	ip, #10
 800c958:	4621      	mov	r1, r4
 800c95a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c95e:	3b30      	subs	r3, #48	; 0x30
 800c960:	2b09      	cmp	r3, #9
 800c962:	d94e      	bls.n	800ca02 <_svfiprintf_r+0x17e>
 800c964:	b1b0      	cbz	r0, 800c994 <_svfiprintf_r+0x110>
 800c966:	9207      	str	r2, [sp, #28]
 800c968:	e014      	b.n	800c994 <_svfiprintf_r+0x110>
 800c96a:	eba0 0308 	sub.w	r3, r0, r8
 800c96e:	fa09 f303 	lsl.w	r3, r9, r3
 800c972:	4313      	orrs	r3, r2
 800c974:	9304      	str	r3, [sp, #16]
 800c976:	46a2      	mov	sl, r4
 800c978:	e7d2      	b.n	800c920 <_svfiprintf_r+0x9c>
 800c97a:	9b03      	ldr	r3, [sp, #12]
 800c97c:	1d19      	adds	r1, r3, #4
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	9103      	str	r1, [sp, #12]
 800c982:	2b00      	cmp	r3, #0
 800c984:	bfbb      	ittet	lt
 800c986:	425b      	neglt	r3, r3
 800c988:	f042 0202 	orrlt.w	r2, r2, #2
 800c98c:	9307      	strge	r3, [sp, #28]
 800c98e:	9307      	strlt	r3, [sp, #28]
 800c990:	bfb8      	it	lt
 800c992:	9204      	strlt	r2, [sp, #16]
 800c994:	7823      	ldrb	r3, [r4, #0]
 800c996:	2b2e      	cmp	r3, #46	; 0x2e
 800c998:	d10c      	bne.n	800c9b4 <_svfiprintf_r+0x130>
 800c99a:	7863      	ldrb	r3, [r4, #1]
 800c99c:	2b2a      	cmp	r3, #42	; 0x2a
 800c99e:	d135      	bne.n	800ca0c <_svfiprintf_r+0x188>
 800c9a0:	9b03      	ldr	r3, [sp, #12]
 800c9a2:	1d1a      	adds	r2, r3, #4
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	9203      	str	r2, [sp, #12]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	bfb8      	it	lt
 800c9ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800c9b0:	3402      	adds	r4, #2
 800c9b2:	9305      	str	r3, [sp, #20]
 800c9b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ca80 <_svfiprintf_r+0x1fc>
 800c9b8:	7821      	ldrb	r1, [r4, #0]
 800c9ba:	2203      	movs	r2, #3
 800c9bc:	4650      	mov	r0, sl
 800c9be:	f7f3 fc2f 	bl	8000220 <memchr>
 800c9c2:	b140      	cbz	r0, 800c9d6 <_svfiprintf_r+0x152>
 800c9c4:	2340      	movs	r3, #64	; 0x40
 800c9c6:	eba0 000a 	sub.w	r0, r0, sl
 800c9ca:	fa03 f000 	lsl.w	r0, r3, r0
 800c9ce:	9b04      	ldr	r3, [sp, #16]
 800c9d0:	4303      	orrs	r3, r0
 800c9d2:	3401      	adds	r4, #1
 800c9d4:	9304      	str	r3, [sp, #16]
 800c9d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9da:	4826      	ldr	r0, [pc, #152]	; (800ca74 <_svfiprintf_r+0x1f0>)
 800c9dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9e0:	2206      	movs	r2, #6
 800c9e2:	f7f3 fc1d 	bl	8000220 <memchr>
 800c9e6:	2800      	cmp	r0, #0
 800c9e8:	d038      	beq.n	800ca5c <_svfiprintf_r+0x1d8>
 800c9ea:	4b23      	ldr	r3, [pc, #140]	; (800ca78 <_svfiprintf_r+0x1f4>)
 800c9ec:	bb1b      	cbnz	r3, 800ca36 <_svfiprintf_r+0x1b2>
 800c9ee:	9b03      	ldr	r3, [sp, #12]
 800c9f0:	3307      	adds	r3, #7
 800c9f2:	f023 0307 	bic.w	r3, r3, #7
 800c9f6:	3308      	adds	r3, #8
 800c9f8:	9303      	str	r3, [sp, #12]
 800c9fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9fc:	4433      	add	r3, r6
 800c9fe:	9309      	str	r3, [sp, #36]	; 0x24
 800ca00:	e767      	b.n	800c8d2 <_svfiprintf_r+0x4e>
 800ca02:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca06:	460c      	mov	r4, r1
 800ca08:	2001      	movs	r0, #1
 800ca0a:	e7a5      	b.n	800c958 <_svfiprintf_r+0xd4>
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	3401      	adds	r4, #1
 800ca10:	9305      	str	r3, [sp, #20]
 800ca12:	4619      	mov	r1, r3
 800ca14:	f04f 0c0a 	mov.w	ip, #10
 800ca18:	4620      	mov	r0, r4
 800ca1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca1e:	3a30      	subs	r2, #48	; 0x30
 800ca20:	2a09      	cmp	r2, #9
 800ca22:	d903      	bls.n	800ca2c <_svfiprintf_r+0x1a8>
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d0c5      	beq.n	800c9b4 <_svfiprintf_r+0x130>
 800ca28:	9105      	str	r1, [sp, #20]
 800ca2a:	e7c3      	b.n	800c9b4 <_svfiprintf_r+0x130>
 800ca2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca30:	4604      	mov	r4, r0
 800ca32:	2301      	movs	r3, #1
 800ca34:	e7f0      	b.n	800ca18 <_svfiprintf_r+0x194>
 800ca36:	ab03      	add	r3, sp, #12
 800ca38:	9300      	str	r3, [sp, #0]
 800ca3a:	462a      	mov	r2, r5
 800ca3c:	4b0f      	ldr	r3, [pc, #60]	; (800ca7c <_svfiprintf_r+0x1f8>)
 800ca3e:	a904      	add	r1, sp, #16
 800ca40:	4638      	mov	r0, r7
 800ca42:	f3af 8000 	nop.w
 800ca46:	1c42      	adds	r2, r0, #1
 800ca48:	4606      	mov	r6, r0
 800ca4a:	d1d6      	bne.n	800c9fa <_svfiprintf_r+0x176>
 800ca4c:	89ab      	ldrh	r3, [r5, #12]
 800ca4e:	065b      	lsls	r3, r3, #25
 800ca50:	f53f af2c 	bmi.w	800c8ac <_svfiprintf_r+0x28>
 800ca54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca56:	b01d      	add	sp, #116	; 0x74
 800ca58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca5c:	ab03      	add	r3, sp, #12
 800ca5e:	9300      	str	r3, [sp, #0]
 800ca60:	462a      	mov	r2, r5
 800ca62:	4b06      	ldr	r3, [pc, #24]	; (800ca7c <_svfiprintf_r+0x1f8>)
 800ca64:	a904      	add	r1, sp, #16
 800ca66:	4638      	mov	r0, r7
 800ca68:	f000 f9d4 	bl	800ce14 <_printf_i>
 800ca6c:	e7eb      	b.n	800ca46 <_svfiprintf_r+0x1c2>
 800ca6e:	bf00      	nop
 800ca70:	0800d538 	.word	0x0800d538
 800ca74:	0800d542 	.word	0x0800d542
 800ca78:	00000000 	.word	0x00000000
 800ca7c:	0800c7cd 	.word	0x0800c7cd
 800ca80:	0800d53e 	.word	0x0800d53e

0800ca84 <__sfputc_r>:
 800ca84:	6893      	ldr	r3, [r2, #8]
 800ca86:	3b01      	subs	r3, #1
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	b410      	push	{r4}
 800ca8c:	6093      	str	r3, [r2, #8]
 800ca8e:	da08      	bge.n	800caa2 <__sfputc_r+0x1e>
 800ca90:	6994      	ldr	r4, [r2, #24]
 800ca92:	42a3      	cmp	r3, r4
 800ca94:	db01      	blt.n	800ca9a <__sfputc_r+0x16>
 800ca96:	290a      	cmp	r1, #10
 800ca98:	d103      	bne.n	800caa2 <__sfputc_r+0x1e>
 800ca9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca9e:	f7ff bad5 	b.w	800c04c <__swbuf_r>
 800caa2:	6813      	ldr	r3, [r2, #0]
 800caa4:	1c58      	adds	r0, r3, #1
 800caa6:	6010      	str	r0, [r2, #0]
 800caa8:	7019      	strb	r1, [r3, #0]
 800caaa:	4608      	mov	r0, r1
 800caac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cab0:	4770      	bx	lr

0800cab2 <__sfputs_r>:
 800cab2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cab4:	4606      	mov	r6, r0
 800cab6:	460f      	mov	r7, r1
 800cab8:	4614      	mov	r4, r2
 800caba:	18d5      	adds	r5, r2, r3
 800cabc:	42ac      	cmp	r4, r5
 800cabe:	d101      	bne.n	800cac4 <__sfputs_r+0x12>
 800cac0:	2000      	movs	r0, #0
 800cac2:	e007      	b.n	800cad4 <__sfputs_r+0x22>
 800cac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cac8:	463a      	mov	r2, r7
 800caca:	4630      	mov	r0, r6
 800cacc:	f7ff ffda 	bl	800ca84 <__sfputc_r>
 800cad0:	1c43      	adds	r3, r0, #1
 800cad2:	d1f3      	bne.n	800cabc <__sfputs_r+0xa>
 800cad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cad8 <_vfiprintf_r>:
 800cad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cadc:	460d      	mov	r5, r1
 800cade:	b09d      	sub	sp, #116	; 0x74
 800cae0:	4614      	mov	r4, r2
 800cae2:	4698      	mov	r8, r3
 800cae4:	4606      	mov	r6, r0
 800cae6:	b118      	cbz	r0, 800caf0 <_vfiprintf_r+0x18>
 800cae8:	6983      	ldr	r3, [r0, #24]
 800caea:	b90b      	cbnz	r3, 800caf0 <_vfiprintf_r+0x18>
 800caec:	f7ff fc88 	bl	800c400 <__sinit>
 800caf0:	4b89      	ldr	r3, [pc, #548]	; (800cd18 <_vfiprintf_r+0x240>)
 800caf2:	429d      	cmp	r5, r3
 800caf4:	d11b      	bne.n	800cb2e <_vfiprintf_r+0x56>
 800caf6:	6875      	ldr	r5, [r6, #4]
 800caf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cafa:	07d9      	lsls	r1, r3, #31
 800cafc:	d405      	bmi.n	800cb0a <_vfiprintf_r+0x32>
 800cafe:	89ab      	ldrh	r3, [r5, #12]
 800cb00:	059a      	lsls	r2, r3, #22
 800cb02:	d402      	bmi.n	800cb0a <_vfiprintf_r+0x32>
 800cb04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb06:	f7ff fd19 	bl	800c53c <__retarget_lock_acquire_recursive>
 800cb0a:	89ab      	ldrh	r3, [r5, #12]
 800cb0c:	071b      	lsls	r3, r3, #28
 800cb0e:	d501      	bpl.n	800cb14 <_vfiprintf_r+0x3c>
 800cb10:	692b      	ldr	r3, [r5, #16]
 800cb12:	b9eb      	cbnz	r3, 800cb50 <_vfiprintf_r+0x78>
 800cb14:	4629      	mov	r1, r5
 800cb16:	4630      	mov	r0, r6
 800cb18:	f7ff faea 	bl	800c0f0 <__swsetup_r>
 800cb1c:	b1c0      	cbz	r0, 800cb50 <_vfiprintf_r+0x78>
 800cb1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb20:	07dc      	lsls	r4, r3, #31
 800cb22:	d50e      	bpl.n	800cb42 <_vfiprintf_r+0x6a>
 800cb24:	f04f 30ff 	mov.w	r0, #4294967295
 800cb28:	b01d      	add	sp, #116	; 0x74
 800cb2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb2e:	4b7b      	ldr	r3, [pc, #492]	; (800cd1c <_vfiprintf_r+0x244>)
 800cb30:	429d      	cmp	r5, r3
 800cb32:	d101      	bne.n	800cb38 <_vfiprintf_r+0x60>
 800cb34:	68b5      	ldr	r5, [r6, #8]
 800cb36:	e7df      	b.n	800caf8 <_vfiprintf_r+0x20>
 800cb38:	4b79      	ldr	r3, [pc, #484]	; (800cd20 <_vfiprintf_r+0x248>)
 800cb3a:	429d      	cmp	r5, r3
 800cb3c:	bf08      	it	eq
 800cb3e:	68f5      	ldreq	r5, [r6, #12]
 800cb40:	e7da      	b.n	800caf8 <_vfiprintf_r+0x20>
 800cb42:	89ab      	ldrh	r3, [r5, #12]
 800cb44:	0598      	lsls	r0, r3, #22
 800cb46:	d4ed      	bmi.n	800cb24 <_vfiprintf_r+0x4c>
 800cb48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb4a:	f7ff fcf8 	bl	800c53e <__retarget_lock_release_recursive>
 800cb4e:	e7e9      	b.n	800cb24 <_vfiprintf_r+0x4c>
 800cb50:	2300      	movs	r3, #0
 800cb52:	9309      	str	r3, [sp, #36]	; 0x24
 800cb54:	2320      	movs	r3, #32
 800cb56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb5e:	2330      	movs	r3, #48	; 0x30
 800cb60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cd24 <_vfiprintf_r+0x24c>
 800cb64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb68:	f04f 0901 	mov.w	r9, #1
 800cb6c:	4623      	mov	r3, r4
 800cb6e:	469a      	mov	sl, r3
 800cb70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb74:	b10a      	cbz	r2, 800cb7a <_vfiprintf_r+0xa2>
 800cb76:	2a25      	cmp	r2, #37	; 0x25
 800cb78:	d1f9      	bne.n	800cb6e <_vfiprintf_r+0x96>
 800cb7a:	ebba 0b04 	subs.w	fp, sl, r4
 800cb7e:	d00b      	beq.n	800cb98 <_vfiprintf_r+0xc0>
 800cb80:	465b      	mov	r3, fp
 800cb82:	4622      	mov	r2, r4
 800cb84:	4629      	mov	r1, r5
 800cb86:	4630      	mov	r0, r6
 800cb88:	f7ff ff93 	bl	800cab2 <__sfputs_r>
 800cb8c:	3001      	adds	r0, #1
 800cb8e:	f000 80aa 	beq.w	800cce6 <_vfiprintf_r+0x20e>
 800cb92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb94:	445a      	add	r2, fp
 800cb96:	9209      	str	r2, [sp, #36]	; 0x24
 800cb98:	f89a 3000 	ldrb.w	r3, [sl]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	f000 80a2 	beq.w	800cce6 <_vfiprintf_r+0x20e>
 800cba2:	2300      	movs	r3, #0
 800cba4:	f04f 32ff 	mov.w	r2, #4294967295
 800cba8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbac:	f10a 0a01 	add.w	sl, sl, #1
 800cbb0:	9304      	str	r3, [sp, #16]
 800cbb2:	9307      	str	r3, [sp, #28]
 800cbb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cbb8:	931a      	str	r3, [sp, #104]	; 0x68
 800cbba:	4654      	mov	r4, sl
 800cbbc:	2205      	movs	r2, #5
 800cbbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbc2:	4858      	ldr	r0, [pc, #352]	; (800cd24 <_vfiprintf_r+0x24c>)
 800cbc4:	f7f3 fb2c 	bl	8000220 <memchr>
 800cbc8:	9a04      	ldr	r2, [sp, #16]
 800cbca:	b9d8      	cbnz	r0, 800cc04 <_vfiprintf_r+0x12c>
 800cbcc:	06d1      	lsls	r1, r2, #27
 800cbce:	bf44      	itt	mi
 800cbd0:	2320      	movmi	r3, #32
 800cbd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbd6:	0713      	lsls	r3, r2, #28
 800cbd8:	bf44      	itt	mi
 800cbda:	232b      	movmi	r3, #43	; 0x2b
 800cbdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbe0:	f89a 3000 	ldrb.w	r3, [sl]
 800cbe4:	2b2a      	cmp	r3, #42	; 0x2a
 800cbe6:	d015      	beq.n	800cc14 <_vfiprintf_r+0x13c>
 800cbe8:	9a07      	ldr	r2, [sp, #28]
 800cbea:	4654      	mov	r4, sl
 800cbec:	2000      	movs	r0, #0
 800cbee:	f04f 0c0a 	mov.w	ip, #10
 800cbf2:	4621      	mov	r1, r4
 800cbf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbf8:	3b30      	subs	r3, #48	; 0x30
 800cbfa:	2b09      	cmp	r3, #9
 800cbfc:	d94e      	bls.n	800cc9c <_vfiprintf_r+0x1c4>
 800cbfe:	b1b0      	cbz	r0, 800cc2e <_vfiprintf_r+0x156>
 800cc00:	9207      	str	r2, [sp, #28]
 800cc02:	e014      	b.n	800cc2e <_vfiprintf_r+0x156>
 800cc04:	eba0 0308 	sub.w	r3, r0, r8
 800cc08:	fa09 f303 	lsl.w	r3, r9, r3
 800cc0c:	4313      	orrs	r3, r2
 800cc0e:	9304      	str	r3, [sp, #16]
 800cc10:	46a2      	mov	sl, r4
 800cc12:	e7d2      	b.n	800cbba <_vfiprintf_r+0xe2>
 800cc14:	9b03      	ldr	r3, [sp, #12]
 800cc16:	1d19      	adds	r1, r3, #4
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	9103      	str	r1, [sp, #12]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	bfbb      	ittet	lt
 800cc20:	425b      	neglt	r3, r3
 800cc22:	f042 0202 	orrlt.w	r2, r2, #2
 800cc26:	9307      	strge	r3, [sp, #28]
 800cc28:	9307      	strlt	r3, [sp, #28]
 800cc2a:	bfb8      	it	lt
 800cc2c:	9204      	strlt	r2, [sp, #16]
 800cc2e:	7823      	ldrb	r3, [r4, #0]
 800cc30:	2b2e      	cmp	r3, #46	; 0x2e
 800cc32:	d10c      	bne.n	800cc4e <_vfiprintf_r+0x176>
 800cc34:	7863      	ldrb	r3, [r4, #1]
 800cc36:	2b2a      	cmp	r3, #42	; 0x2a
 800cc38:	d135      	bne.n	800cca6 <_vfiprintf_r+0x1ce>
 800cc3a:	9b03      	ldr	r3, [sp, #12]
 800cc3c:	1d1a      	adds	r2, r3, #4
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	9203      	str	r2, [sp, #12]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	bfb8      	it	lt
 800cc46:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc4a:	3402      	adds	r4, #2
 800cc4c:	9305      	str	r3, [sp, #20]
 800cc4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cd34 <_vfiprintf_r+0x25c>
 800cc52:	7821      	ldrb	r1, [r4, #0]
 800cc54:	2203      	movs	r2, #3
 800cc56:	4650      	mov	r0, sl
 800cc58:	f7f3 fae2 	bl	8000220 <memchr>
 800cc5c:	b140      	cbz	r0, 800cc70 <_vfiprintf_r+0x198>
 800cc5e:	2340      	movs	r3, #64	; 0x40
 800cc60:	eba0 000a 	sub.w	r0, r0, sl
 800cc64:	fa03 f000 	lsl.w	r0, r3, r0
 800cc68:	9b04      	ldr	r3, [sp, #16]
 800cc6a:	4303      	orrs	r3, r0
 800cc6c:	3401      	adds	r4, #1
 800cc6e:	9304      	str	r3, [sp, #16]
 800cc70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc74:	482c      	ldr	r0, [pc, #176]	; (800cd28 <_vfiprintf_r+0x250>)
 800cc76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc7a:	2206      	movs	r2, #6
 800cc7c:	f7f3 fad0 	bl	8000220 <memchr>
 800cc80:	2800      	cmp	r0, #0
 800cc82:	d03f      	beq.n	800cd04 <_vfiprintf_r+0x22c>
 800cc84:	4b29      	ldr	r3, [pc, #164]	; (800cd2c <_vfiprintf_r+0x254>)
 800cc86:	bb1b      	cbnz	r3, 800ccd0 <_vfiprintf_r+0x1f8>
 800cc88:	9b03      	ldr	r3, [sp, #12]
 800cc8a:	3307      	adds	r3, #7
 800cc8c:	f023 0307 	bic.w	r3, r3, #7
 800cc90:	3308      	adds	r3, #8
 800cc92:	9303      	str	r3, [sp, #12]
 800cc94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc96:	443b      	add	r3, r7
 800cc98:	9309      	str	r3, [sp, #36]	; 0x24
 800cc9a:	e767      	b.n	800cb6c <_vfiprintf_r+0x94>
 800cc9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cca0:	460c      	mov	r4, r1
 800cca2:	2001      	movs	r0, #1
 800cca4:	e7a5      	b.n	800cbf2 <_vfiprintf_r+0x11a>
 800cca6:	2300      	movs	r3, #0
 800cca8:	3401      	adds	r4, #1
 800ccaa:	9305      	str	r3, [sp, #20]
 800ccac:	4619      	mov	r1, r3
 800ccae:	f04f 0c0a 	mov.w	ip, #10
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccb8:	3a30      	subs	r2, #48	; 0x30
 800ccba:	2a09      	cmp	r2, #9
 800ccbc:	d903      	bls.n	800ccc6 <_vfiprintf_r+0x1ee>
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d0c5      	beq.n	800cc4e <_vfiprintf_r+0x176>
 800ccc2:	9105      	str	r1, [sp, #20]
 800ccc4:	e7c3      	b.n	800cc4e <_vfiprintf_r+0x176>
 800ccc6:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccca:	4604      	mov	r4, r0
 800cccc:	2301      	movs	r3, #1
 800ccce:	e7f0      	b.n	800ccb2 <_vfiprintf_r+0x1da>
 800ccd0:	ab03      	add	r3, sp, #12
 800ccd2:	9300      	str	r3, [sp, #0]
 800ccd4:	462a      	mov	r2, r5
 800ccd6:	4b16      	ldr	r3, [pc, #88]	; (800cd30 <_vfiprintf_r+0x258>)
 800ccd8:	a904      	add	r1, sp, #16
 800ccda:	4630      	mov	r0, r6
 800ccdc:	f3af 8000 	nop.w
 800cce0:	4607      	mov	r7, r0
 800cce2:	1c78      	adds	r0, r7, #1
 800cce4:	d1d6      	bne.n	800cc94 <_vfiprintf_r+0x1bc>
 800cce6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cce8:	07d9      	lsls	r1, r3, #31
 800ccea:	d405      	bmi.n	800ccf8 <_vfiprintf_r+0x220>
 800ccec:	89ab      	ldrh	r3, [r5, #12]
 800ccee:	059a      	lsls	r2, r3, #22
 800ccf0:	d402      	bmi.n	800ccf8 <_vfiprintf_r+0x220>
 800ccf2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccf4:	f7ff fc23 	bl	800c53e <__retarget_lock_release_recursive>
 800ccf8:	89ab      	ldrh	r3, [r5, #12]
 800ccfa:	065b      	lsls	r3, r3, #25
 800ccfc:	f53f af12 	bmi.w	800cb24 <_vfiprintf_r+0x4c>
 800cd00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd02:	e711      	b.n	800cb28 <_vfiprintf_r+0x50>
 800cd04:	ab03      	add	r3, sp, #12
 800cd06:	9300      	str	r3, [sp, #0]
 800cd08:	462a      	mov	r2, r5
 800cd0a:	4b09      	ldr	r3, [pc, #36]	; (800cd30 <_vfiprintf_r+0x258>)
 800cd0c:	a904      	add	r1, sp, #16
 800cd0e:	4630      	mov	r0, r6
 800cd10:	f000 f880 	bl	800ce14 <_printf_i>
 800cd14:	e7e4      	b.n	800cce0 <_vfiprintf_r+0x208>
 800cd16:	bf00      	nop
 800cd18:	0800d4f8 	.word	0x0800d4f8
 800cd1c:	0800d518 	.word	0x0800d518
 800cd20:	0800d4d8 	.word	0x0800d4d8
 800cd24:	0800d538 	.word	0x0800d538
 800cd28:	0800d542 	.word	0x0800d542
 800cd2c:	00000000 	.word	0x00000000
 800cd30:	0800cab3 	.word	0x0800cab3
 800cd34:	0800d53e 	.word	0x0800d53e

0800cd38 <_printf_common>:
 800cd38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd3c:	4616      	mov	r6, r2
 800cd3e:	4699      	mov	r9, r3
 800cd40:	688a      	ldr	r2, [r1, #8]
 800cd42:	690b      	ldr	r3, [r1, #16]
 800cd44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cd48:	4293      	cmp	r3, r2
 800cd4a:	bfb8      	it	lt
 800cd4c:	4613      	movlt	r3, r2
 800cd4e:	6033      	str	r3, [r6, #0]
 800cd50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd54:	4607      	mov	r7, r0
 800cd56:	460c      	mov	r4, r1
 800cd58:	b10a      	cbz	r2, 800cd5e <_printf_common+0x26>
 800cd5a:	3301      	adds	r3, #1
 800cd5c:	6033      	str	r3, [r6, #0]
 800cd5e:	6823      	ldr	r3, [r4, #0]
 800cd60:	0699      	lsls	r1, r3, #26
 800cd62:	bf42      	ittt	mi
 800cd64:	6833      	ldrmi	r3, [r6, #0]
 800cd66:	3302      	addmi	r3, #2
 800cd68:	6033      	strmi	r3, [r6, #0]
 800cd6a:	6825      	ldr	r5, [r4, #0]
 800cd6c:	f015 0506 	ands.w	r5, r5, #6
 800cd70:	d106      	bne.n	800cd80 <_printf_common+0x48>
 800cd72:	f104 0a19 	add.w	sl, r4, #25
 800cd76:	68e3      	ldr	r3, [r4, #12]
 800cd78:	6832      	ldr	r2, [r6, #0]
 800cd7a:	1a9b      	subs	r3, r3, r2
 800cd7c:	42ab      	cmp	r3, r5
 800cd7e:	dc26      	bgt.n	800cdce <_printf_common+0x96>
 800cd80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cd84:	1e13      	subs	r3, r2, #0
 800cd86:	6822      	ldr	r2, [r4, #0]
 800cd88:	bf18      	it	ne
 800cd8a:	2301      	movne	r3, #1
 800cd8c:	0692      	lsls	r2, r2, #26
 800cd8e:	d42b      	bmi.n	800cde8 <_printf_common+0xb0>
 800cd90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd94:	4649      	mov	r1, r9
 800cd96:	4638      	mov	r0, r7
 800cd98:	47c0      	blx	r8
 800cd9a:	3001      	adds	r0, #1
 800cd9c:	d01e      	beq.n	800cddc <_printf_common+0xa4>
 800cd9e:	6823      	ldr	r3, [r4, #0]
 800cda0:	68e5      	ldr	r5, [r4, #12]
 800cda2:	6832      	ldr	r2, [r6, #0]
 800cda4:	f003 0306 	and.w	r3, r3, #6
 800cda8:	2b04      	cmp	r3, #4
 800cdaa:	bf08      	it	eq
 800cdac:	1aad      	subeq	r5, r5, r2
 800cdae:	68a3      	ldr	r3, [r4, #8]
 800cdb0:	6922      	ldr	r2, [r4, #16]
 800cdb2:	bf0c      	ite	eq
 800cdb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cdb8:	2500      	movne	r5, #0
 800cdba:	4293      	cmp	r3, r2
 800cdbc:	bfc4      	itt	gt
 800cdbe:	1a9b      	subgt	r3, r3, r2
 800cdc0:	18ed      	addgt	r5, r5, r3
 800cdc2:	2600      	movs	r6, #0
 800cdc4:	341a      	adds	r4, #26
 800cdc6:	42b5      	cmp	r5, r6
 800cdc8:	d11a      	bne.n	800ce00 <_printf_common+0xc8>
 800cdca:	2000      	movs	r0, #0
 800cdcc:	e008      	b.n	800cde0 <_printf_common+0xa8>
 800cdce:	2301      	movs	r3, #1
 800cdd0:	4652      	mov	r2, sl
 800cdd2:	4649      	mov	r1, r9
 800cdd4:	4638      	mov	r0, r7
 800cdd6:	47c0      	blx	r8
 800cdd8:	3001      	adds	r0, #1
 800cdda:	d103      	bne.n	800cde4 <_printf_common+0xac>
 800cddc:	f04f 30ff 	mov.w	r0, #4294967295
 800cde0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cde4:	3501      	adds	r5, #1
 800cde6:	e7c6      	b.n	800cd76 <_printf_common+0x3e>
 800cde8:	18e1      	adds	r1, r4, r3
 800cdea:	1c5a      	adds	r2, r3, #1
 800cdec:	2030      	movs	r0, #48	; 0x30
 800cdee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cdf2:	4422      	add	r2, r4
 800cdf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cdf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cdfc:	3302      	adds	r3, #2
 800cdfe:	e7c7      	b.n	800cd90 <_printf_common+0x58>
 800ce00:	2301      	movs	r3, #1
 800ce02:	4622      	mov	r2, r4
 800ce04:	4649      	mov	r1, r9
 800ce06:	4638      	mov	r0, r7
 800ce08:	47c0      	blx	r8
 800ce0a:	3001      	adds	r0, #1
 800ce0c:	d0e6      	beq.n	800cddc <_printf_common+0xa4>
 800ce0e:	3601      	adds	r6, #1
 800ce10:	e7d9      	b.n	800cdc6 <_printf_common+0x8e>
	...

0800ce14 <_printf_i>:
 800ce14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce18:	7e0f      	ldrb	r7, [r1, #24]
 800ce1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ce1c:	2f78      	cmp	r7, #120	; 0x78
 800ce1e:	4691      	mov	r9, r2
 800ce20:	4680      	mov	r8, r0
 800ce22:	460c      	mov	r4, r1
 800ce24:	469a      	mov	sl, r3
 800ce26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ce2a:	d807      	bhi.n	800ce3c <_printf_i+0x28>
 800ce2c:	2f62      	cmp	r7, #98	; 0x62
 800ce2e:	d80a      	bhi.n	800ce46 <_printf_i+0x32>
 800ce30:	2f00      	cmp	r7, #0
 800ce32:	f000 80d8 	beq.w	800cfe6 <_printf_i+0x1d2>
 800ce36:	2f58      	cmp	r7, #88	; 0x58
 800ce38:	f000 80a3 	beq.w	800cf82 <_printf_i+0x16e>
 800ce3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ce44:	e03a      	b.n	800cebc <_printf_i+0xa8>
 800ce46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ce4a:	2b15      	cmp	r3, #21
 800ce4c:	d8f6      	bhi.n	800ce3c <_printf_i+0x28>
 800ce4e:	a101      	add	r1, pc, #4	; (adr r1, 800ce54 <_printf_i+0x40>)
 800ce50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce54:	0800cead 	.word	0x0800cead
 800ce58:	0800cec1 	.word	0x0800cec1
 800ce5c:	0800ce3d 	.word	0x0800ce3d
 800ce60:	0800ce3d 	.word	0x0800ce3d
 800ce64:	0800ce3d 	.word	0x0800ce3d
 800ce68:	0800ce3d 	.word	0x0800ce3d
 800ce6c:	0800cec1 	.word	0x0800cec1
 800ce70:	0800ce3d 	.word	0x0800ce3d
 800ce74:	0800ce3d 	.word	0x0800ce3d
 800ce78:	0800ce3d 	.word	0x0800ce3d
 800ce7c:	0800ce3d 	.word	0x0800ce3d
 800ce80:	0800cfcd 	.word	0x0800cfcd
 800ce84:	0800cef1 	.word	0x0800cef1
 800ce88:	0800cfaf 	.word	0x0800cfaf
 800ce8c:	0800ce3d 	.word	0x0800ce3d
 800ce90:	0800ce3d 	.word	0x0800ce3d
 800ce94:	0800cfef 	.word	0x0800cfef
 800ce98:	0800ce3d 	.word	0x0800ce3d
 800ce9c:	0800cef1 	.word	0x0800cef1
 800cea0:	0800ce3d 	.word	0x0800ce3d
 800cea4:	0800ce3d 	.word	0x0800ce3d
 800cea8:	0800cfb7 	.word	0x0800cfb7
 800ceac:	682b      	ldr	r3, [r5, #0]
 800ceae:	1d1a      	adds	r2, r3, #4
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	602a      	str	r2, [r5, #0]
 800ceb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ceb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cebc:	2301      	movs	r3, #1
 800cebe:	e0a3      	b.n	800d008 <_printf_i+0x1f4>
 800cec0:	6820      	ldr	r0, [r4, #0]
 800cec2:	6829      	ldr	r1, [r5, #0]
 800cec4:	0606      	lsls	r6, r0, #24
 800cec6:	f101 0304 	add.w	r3, r1, #4
 800ceca:	d50a      	bpl.n	800cee2 <_printf_i+0xce>
 800cecc:	680e      	ldr	r6, [r1, #0]
 800cece:	602b      	str	r3, [r5, #0]
 800ced0:	2e00      	cmp	r6, #0
 800ced2:	da03      	bge.n	800cedc <_printf_i+0xc8>
 800ced4:	232d      	movs	r3, #45	; 0x2d
 800ced6:	4276      	negs	r6, r6
 800ced8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cedc:	485e      	ldr	r0, [pc, #376]	; (800d058 <_printf_i+0x244>)
 800cede:	230a      	movs	r3, #10
 800cee0:	e019      	b.n	800cf16 <_printf_i+0x102>
 800cee2:	680e      	ldr	r6, [r1, #0]
 800cee4:	602b      	str	r3, [r5, #0]
 800cee6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ceea:	bf18      	it	ne
 800ceec:	b236      	sxthne	r6, r6
 800ceee:	e7ef      	b.n	800ced0 <_printf_i+0xbc>
 800cef0:	682b      	ldr	r3, [r5, #0]
 800cef2:	6820      	ldr	r0, [r4, #0]
 800cef4:	1d19      	adds	r1, r3, #4
 800cef6:	6029      	str	r1, [r5, #0]
 800cef8:	0601      	lsls	r1, r0, #24
 800cefa:	d501      	bpl.n	800cf00 <_printf_i+0xec>
 800cefc:	681e      	ldr	r6, [r3, #0]
 800cefe:	e002      	b.n	800cf06 <_printf_i+0xf2>
 800cf00:	0646      	lsls	r6, r0, #25
 800cf02:	d5fb      	bpl.n	800cefc <_printf_i+0xe8>
 800cf04:	881e      	ldrh	r6, [r3, #0]
 800cf06:	4854      	ldr	r0, [pc, #336]	; (800d058 <_printf_i+0x244>)
 800cf08:	2f6f      	cmp	r7, #111	; 0x6f
 800cf0a:	bf0c      	ite	eq
 800cf0c:	2308      	moveq	r3, #8
 800cf0e:	230a      	movne	r3, #10
 800cf10:	2100      	movs	r1, #0
 800cf12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cf16:	6865      	ldr	r5, [r4, #4]
 800cf18:	60a5      	str	r5, [r4, #8]
 800cf1a:	2d00      	cmp	r5, #0
 800cf1c:	bfa2      	ittt	ge
 800cf1e:	6821      	ldrge	r1, [r4, #0]
 800cf20:	f021 0104 	bicge.w	r1, r1, #4
 800cf24:	6021      	strge	r1, [r4, #0]
 800cf26:	b90e      	cbnz	r6, 800cf2c <_printf_i+0x118>
 800cf28:	2d00      	cmp	r5, #0
 800cf2a:	d04d      	beq.n	800cfc8 <_printf_i+0x1b4>
 800cf2c:	4615      	mov	r5, r2
 800cf2e:	fbb6 f1f3 	udiv	r1, r6, r3
 800cf32:	fb03 6711 	mls	r7, r3, r1, r6
 800cf36:	5dc7      	ldrb	r7, [r0, r7]
 800cf38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cf3c:	4637      	mov	r7, r6
 800cf3e:	42bb      	cmp	r3, r7
 800cf40:	460e      	mov	r6, r1
 800cf42:	d9f4      	bls.n	800cf2e <_printf_i+0x11a>
 800cf44:	2b08      	cmp	r3, #8
 800cf46:	d10b      	bne.n	800cf60 <_printf_i+0x14c>
 800cf48:	6823      	ldr	r3, [r4, #0]
 800cf4a:	07de      	lsls	r6, r3, #31
 800cf4c:	d508      	bpl.n	800cf60 <_printf_i+0x14c>
 800cf4e:	6923      	ldr	r3, [r4, #16]
 800cf50:	6861      	ldr	r1, [r4, #4]
 800cf52:	4299      	cmp	r1, r3
 800cf54:	bfde      	ittt	le
 800cf56:	2330      	movle	r3, #48	; 0x30
 800cf58:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cf5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cf60:	1b52      	subs	r2, r2, r5
 800cf62:	6122      	str	r2, [r4, #16]
 800cf64:	f8cd a000 	str.w	sl, [sp]
 800cf68:	464b      	mov	r3, r9
 800cf6a:	aa03      	add	r2, sp, #12
 800cf6c:	4621      	mov	r1, r4
 800cf6e:	4640      	mov	r0, r8
 800cf70:	f7ff fee2 	bl	800cd38 <_printf_common>
 800cf74:	3001      	adds	r0, #1
 800cf76:	d14c      	bne.n	800d012 <_printf_i+0x1fe>
 800cf78:	f04f 30ff 	mov.w	r0, #4294967295
 800cf7c:	b004      	add	sp, #16
 800cf7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf82:	4835      	ldr	r0, [pc, #212]	; (800d058 <_printf_i+0x244>)
 800cf84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cf88:	6829      	ldr	r1, [r5, #0]
 800cf8a:	6823      	ldr	r3, [r4, #0]
 800cf8c:	f851 6b04 	ldr.w	r6, [r1], #4
 800cf90:	6029      	str	r1, [r5, #0]
 800cf92:	061d      	lsls	r5, r3, #24
 800cf94:	d514      	bpl.n	800cfc0 <_printf_i+0x1ac>
 800cf96:	07df      	lsls	r7, r3, #31
 800cf98:	bf44      	itt	mi
 800cf9a:	f043 0320 	orrmi.w	r3, r3, #32
 800cf9e:	6023      	strmi	r3, [r4, #0]
 800cfa0:	b91e      	cbnz	r6, 800cfaa <_printf_i+0x196>
 800cfa2:	6823      	ldr	r3, [r4, #0]
 800cfa4:	f023 0320 	bic.w	r3, r3, #32
 800cfa8:	6023      	str	r3, [r4, #0]
 800cfaa:	2310      	movs	r3, #16
 800cfac:	e7b0      	b.n	800cf10 <_printf_i+0xfc>
 800cfae:	6823      	ldr	r3, [r4, #0]
 800cfb0:	f043 0320 	orr.w	r3, r3, #32
 800cfb4:	6023      	str	r3, [r4, #0]
 800cfb6:	2378      	movs	r3, #120	; 0x78
 800cfb8:	4828      	ldr	r0, [pc, #160]	; (800d05c <_printf_i+0x248>)
 800cfba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cfbe:	e7e3      	b.n	800cf88 <_printf_i+0x174>
 800cfc0:	0659      	lsls	r1, r3, #25
 800cfc2:	bf48      	it	mi
 800cfc4:	b2b6      	uxthmi	r6, r6
 800cfc6:	e7e6      	b.n	800cf96 <_printf_i+0x182>
 800cfc8:	4615      	mov	r5, r2
 800cfca:	e7bb      	b.n	800cf44 <_printf_i+0x130>
 800cfcc:	682b      	ldr	r3, [r5, #0]
 800cfce:	6826      	ldr	r6, [r4, #0]
 800cfd0:	6961      	ldr	r1, [r4, #20]
 800cfd2:	1d18      	adds	r0, r3, #4
 800cfd4:	6028      	str	r0, [r5, #0]
 800cfd6:	0635      	lsls	r5, r6, #24
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	d501      	bpl.n	800cfe0 <_printf_i+0x1cc>
 800cfdc:	6019      	str	r1, [r3, #0]
 800cfde:	e002      	b.n	800cfe6 <_printf_i+0x1d2>
 800cfe0:	0670      	lsls	r0, r6, #25
 800cfe2:	d5fb      	bpl.n	800cfdc <_printf_i+0x1c8>
 800cfe4:	8019      	strh	r1, [r3, #0]
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	6123      	str	r3, [r4, #16]
 800cfea:	4615      	mov	r5, r2
 800cfec:	e7ba      	b.n	800cf64 <_printf_i+0x150>
 800cfee:	682b      	ldr	r3, [r5, #0]
 800cff0:	1d1a      	adds	r2, r3, #4
 800cff2:	602a      	str	r2, [r5, #0]
 800cff4:	681d      	ldr	r5, [r3, #0]
 800cff6:	6862      	ldr	r2, [r4, #4]
 800cff8:	2100      	movs	r1, #0
 800cffa:	4628      	mov	r0, r5
 800cffc:	f7f3 f910 	bl	8000220 <memchr>
 800d000:	b108      	cbz	r0, 800d006 <_printf_i+0x1f2>
 800d002:	1b40      	subs	r0, r0, r5
 800d004:	6060      	str	r0, [r4, #4]
 800d006:	6863      	ldr	r3, [r4, #4]
 800d008:	6123      	str	r3, [r4, #16]
 800d00a:	2300      	movs	r3, #0
 800d00c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d010:	e7a8      	b.n	800cf64 <_printf_i+0x150>
 800d012:	6923      	ldr	r3, [r4, #16]
 800d014:	462a      	mov	r2, r5
 800d016:	4649      	mov	r1, r9
 800d018:	4640      	mov	r0, r8
 800d01a:	47d0      	blx	sl
 800d01c:	3001      	adds	r0, #1
 800d01e:	d0ab      	beq.n	800cf78 <_printf_i+0x164>
 800d020:	6823      	ldr	r3, [r4, #0]
 800d022:	079b      	lsls	r3, r3, #30
 800d024:	d413      	bmi.n	800d04e <_printf_i+0x23a>
 800d026:	68e0      	ldr	r0, [r4, #12]
 800d028:	9b03      	ldr	r3, [sp, #12]
 800d02a:	4298      	cmp	r0, r3
 800d02c:	bfb8      	it	lt
 800d02e:	4618      	movlt	r0, r3
 800d030:	e7a4      	b.n	800cf7c <_printf_i+0x168>
 800d032:	2301      	movs	r3, #1
 800d034:	4632      	mov	r2, r6
 800d036:	4649      	mov	r1, r9
 800d038:	4640      	mov	r0, r8
 800d03a:	47d0      	blx	sl
 800d03c:	3001      	adds	r0, #1
 800d03e:	d09b      	beq.n	800cf78 <_printf_i+0x164>
 800d040:	3501      	adds	r5, #1
 800d042:	68e3      	ldr	r3, [r4, #12]
 800d044:	9903      	ldr	r1, [sp, #12]
 800d046:	1a5b      	subs	r3, r3, r1
 800d048:	42ab      	cmp	r3, r5
 800d04a:	dcf2      	bgt.n	800d032 <_printf_i+0x21e>
 800d04c:	e7eb      	b.n	800d026 <_printf_i+0x212>
 800d04e:	2500      	movs	r5, #0
 800d050:	f104 0619 	add.w	r6, r4, #25
 800d054:	e7f5      	b.n	800d042 <_printf_i+0x22e>
 800d056:	bf00      	nop
 800d058:	0800d549 	.word	0x0800d549
 800d05c:	0800d55a 	.word	0x0800d55a

0800d060 <_sbrk_r>:
 800d060:	b538      	push	{r3, r4, r5, lr}
 800d062:	4d06      	ldr	r5, [pc, #24]	; (800d07c <_sbrk_r+0x1c>)
 800d064:	2300      	movs	r3, #0
 800d066:	4604      	mov	r4, r0
 800d068:	4608      	mov	r0, r1
 800d06a:	602b      	str	r3, [r5, #0]
 800d06c:	f7f4 fd7a 	bl	8001b64 <_sbrk>
 800d070:	1c43      	adds	r3, r0, #1
 800d072:	d102      	bne.n	800d07a <_sbrk_r+0x1a>
 800d074:	682b      	ldr	r3, [r5, #0]
 800d076:	b103      	cbz	r3, 800d07a <_sbrk_r+0x1a>
 800d078:	6023      	str	r3, [r4, #0]
 800d07a:	bd38      	pop	{r3, r4, r5, pc}
 800d07c:	20001eb0 	.word	0x20001eb0

0800d080 <__sread>:
 800d080:	b510      	push	{r4, lr}
 800d082:	460c      	mov	r4, r1
 800d084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d088:	f000 f8ea 	bl	800d260 <_read_r>
 800d08c:	2800      	cmp	r0, #0
 800d08e:	bfab      	itete	ge
 800d090:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d092:	89a3      	ldrhlt	r3, [r4, #12]
 800d094:	181b      	addge	r3, r3, r0
 800d096:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d09a:	bfac      	ite	ge
 800d09c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d09e:	81a3      	strhlt	r3, [r4, #12]
 800d0a0:	bd10      	pop	{r4, pc}

0800d0a2 <__swrite>:
 800d0a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0a6:	461f      	mov	r7, r3
 800d0a8:	898b      	ldrh	r3, [r1, #12]
 800d0aa:	05db      	lsls	r3, r3, #23
 800d0ac:	4605      	mov	r5, r0
 800d0ae:	460c      	mov	r4, r1
 800d0b0:	4616      	mov	r6, r2
 800d0b2:	d505      	bpl.n	800d0c0 <__swrite+0x1e>
 800d0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0b8:	2302      	movs	r3, #2
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	f000 f868 	bl	800d190 <_lseek_r>
 800d0c0:	89a3      	ldrh	r3, [r4, #12]
 800d0c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d0ca:	81a3      	strh	r3, [r4, #12]
 800d0cc:	4632      	mov	r2, r6
 800d0ce:	463b      	mov	r3, r7
 800d0d0:	4628      	mov	r0, r5
 800d0d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0d6:	f000 b817 	b.w	800d108 <_write_r>

0800d0da <__sseek>:
 800d0da:	b510      	push	{r4, lr}
 800d0dc:	460c      	mov	r4, r1
 800d0de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0e2:	f000 f855 	bl	800d190 <_lseek_r>
 800d0e6:	1c43      	adds	r3, r0, #1
 800d0e8:	89a3      	ldrh	r3, [r4, #12]
 800d0ea:	bf15      	itete	ne
 800d0ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800d0ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d0f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d0f6:	81a3      	strheq	r3, [r4, #12]
 800d0f8:	bf18      	it	ne
 800d0fa:	81a3      	strhne	r3, [r4, #12]
 800d0fc:	bd10      	pop	{r4, pc}

0800d0fe <__sclose>:
 800d0fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d102:	f000 b813 	b.w	800d12c <_close_r>
	...

0800d108 <_write_r>:
 800d108:	b538      	push	{r3, r4, r5, lr}
 800d10a:	4d07      	ldr	r5, [pc, #28]	; (800d128 <_write_r+0x20>)
 800d10c:	4604      	mov	r4, r0
 800d10e:	4608      	mov	r0, r1
 800d110:	4611      	mov	r1, r2
 800d112:	2200      	movs	r2, #0
 800d114:	602a      	str	r2, [r5, #0]
 800d116:	461a      	mov	r2, r3
 800d118:	f7f3 fad0 	bl	80006bc <_write>
 800d11c:	1c43      	adds	r3, r0, #1
 800d11e:	d102      	bne.n	800d126 <_write_r+0x1e>
 800d120:	682b      	ldr	r3, [r5, #0]
 800d122:	b103      	cbz	r3, 800d126 <_write_r+0x1e>
 800d124:	6023      	str	r3, [r4, #0]
 800d126:	bd38      	pop	{r3, r4, r5, pc}
 800d128:	20001eb0 	.word	0x20001eb0

0800d12c <_close_r>:
 800d12c:	b538      	push	{r3, r4, r5, lr}
 800d12e:	4d06      	ldr	r5, [pc, #24]	; (800d148 <_close_r+0x1c>)
 800d130:	2300      	movs	r3, #0
 800d132:	4604      	mov	r4, r0
 800d134:	4608      	mov	r0, r1
 800d136:	602b      	str	r3, [r5, #0]
 800d138:	f7f4 fcdf 	bl	8001afa <_close>
 800d13c:	1c43      	adds	r3, r0, #1
 800d13e:	d102      	bne.n	800d146 <_close_r+0x1a>
 800d140:	682b      	ldr	r3, [r5, #0]
 800d142:	b103      	cbz	r3, 800d146 <_close_r+0x1a>
 800d144:	6023      	str	r3, [r4, #0]
 800d146:	bd38      	pop	{r3, r4, r5, pc}
 800d148:	20001eb0 	.word	0x20001eb0

0800d14c <_fstat_r>:
 800d14c:	b538      	push	{r3, r4, r5, lr}
 800d14e:	4d07      	ldr	r5, [pc, #28]	; (800d16c <_fstat_r+0x20>)
 800d150:	2300      	movs	r3, #0
 800d152:	4604      	mov	r4, r0
 800d154:	4608      	mov	r0, r1
 800d156:	4611      	mov	r1, r2
 800d158:	602b      	str	r3, [r5, #0]
 800d15a:	f7f4 fcda 	bl	8001b12 <_fstat>
 800d15e:	1c43      	adds	r3, r0, #1
 800d160:	d102      	bne.n	800d168 <_fstat_r+0x1c>
 800d162:	682b      	ldr	r3, [r5, #0]
 800d164:	b103      	cbz	r3, 800d168 <_fstat_r+0x1c>
 800d166:	6023      	str	r3, [r4, #0]
 800d168:	bd38      	pop	{r3, r4, r5, pc}
 800d16a:	bf00      	nop
 800d16c:	20001eb0 	.word	0x20001eb0

0800d170 <_isatty_r>:
 800d170:	b538      	push	{r3, r4, r5, lr}
 800d172:	4d06      	ldr	r5, [pc, #24]	; (800d18c <_isatty_r+0x1c>)
 800d174:	2300      	movs	r3, #0
 800d176:	4604      	mov	r4, r0
 800d178:	4608      	mov	r0, r1
 800d17a:	602b      	str	r3, [r5, #0]
 800d17c:	f7f4 fcd9 	bl	8001b32 <_isatty>
 800d180:	1c43      	adds	r3, r0, #1
 800d182:	d102      	bne.n	800d18a <_isatty_r+0x1a>
 800d184:	682b      	ldr	r3, [r5, #0]
 800d186:	b103      	cbz	r3, 800d18a <_isatty_r+0x1a>
 800d188:	6023      	str	r3, [r4, #0]
 800d18a:	bd38      	pop	{r3, r4, r5, pc}
 800d18c:	20001eb0 	.word	0x20001eb0

0800d190 <_lseek_r>:
 800d190:	b538      	push	{r3, r4, r5, lr}
 800d192:	4d07      	ldr	r5, [pc, #28]	; (800d1b0 <_lseek_r+0x20>)
 800d194:	4604      	mov	r4, r0
 800d196:	4608      	mov	r0, r1
 800d198:	4611      	mov	r1, r2
 800d19a:	2200      	movs	r2, #0
 800d19c:	602a      	str	r2, [r5, #0]
 800d19e:	461a      	mov	r2, r3
 800d1a0:	f7f4 fcd2 	bl	8001b48 <_lseek>
 800d1a4:	1c43      	adds	r3, r0, #1
 800d1a6:	d102      	bne.n	800d1ae <_lseek_r+0x1e>
 800d1a8:	682b      	ldr	r3, [r5, #0]
 800d1aa:	b103      	cbz	r3, 800d1ae <_lseek_r+0x1e>
 800d1ac:	6023      	str	r3, [r4, #0]
 800d1ae:	bd38      	pop	{r3, r4, r5, pc}
 800d1b0:	20001eb0 	.word	0x20001eb0

0800d1b4 <memmove>:
 800d1b4:	4288      	cmp	r0, r1
 800d1b6:	b510      	push	{r4, lr}
 800d1b8:	eb01 0402 	add.w	r4, r1, r2
 800d1bc:	d902      	bls.n	800d1c4 <memmove+0x10>
 800d1be:	4284      	cmp	r4, r0
 800d1c0:	4623      	mov	r3, r4
 800d1c2:	d807      	bhi.n	800d1d4 <memmove+0x20>
 800d1c4:	1e43      	subs	r3, r0, #1
 800d1c6:	42a1      	cmp	r1, r4
 800d1c8:	d008      	beq.n	800d1dc <memmove+0x28>
 800d1ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d1d2:	e7f8      	b.n	800d1c6 <memmove+0x12>
 800d1d4:	4402      	add	r2, r0
 800d1d6:	4601      	mov	r1, r0
 800d1d8:	428a      	cmp	r2, r1
 800d1da:	d100      	bne.n	800d1de <memmove+0x2a>
 800d1dc:	bd10      	pop	{r4, pc}
 800d1de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d1e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d1e6:	e7f7      	b.n	800d1d8 <memmove+0x24>

0800d1e8 <__malloc_lock>:
 800d1e8:	4801      	ldr	r0, [pc, #4]	; (800d1f0 <__malloc_lock+0x8>)
 800d1ea:	f7ff b9a7 	b.w	800c53c <__retarget_lock_acquire_recursive>
 800d1ee:	bf00      	nop
 800d1f0:	20001ea4 	.word	0x20001ea4

0800d1f4 <__malloc_unlock>:
 800d1f4:	4801      	ldr	r0, [pc, #4]	; (800d1fc <__malloc_unlock+0x8>)
 800d1f6:	f7ff b9a2 	b.w	800c53e <__retarget_lock_release_recursive>
 800d1fa:	bf00      	nop
 800d1fc:	20001ea4 	.word	0x20001ea4

0800d200 <_realloc_r>:
 800d200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d204:	4680      	mov	r8, r0
 800d206:	4614      	mov	r4, r2
 800d208:	460e      	mov	r6, r1
 800d20a:	b921      	cbnz	r1, 800d216 <_realloc_r+0x16>
 800d20c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d210:	4611      	mov	r1, r2
 800d212:	f7ff ba67 	b.w	800c6e4 <_malloc_r>
 800d216:	b92a      	cbnz	r2, 800d224 <_realloc_r+0x24>
 800d218:	f7ff f9f8 	bl	800c60c <_free_r>
 800d21c:	4625      	mov	r5, r4
 800d21e:	4628      	mov	r0, r5
 800d220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d224:	f000 f82e 	bl	800d284 <_malloc_usable_size_r>
 800d228:	4284      	cmp	r4, r0
 800d22a:	4607      	mov	r7, r0
 800d22c:	d802      	bhi.n	800d234 <_realloc_r+0x34>
 800d22e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d232:	d812      	bhi.n	800d25a <_realloc_r+0x5a>
 800d234:	4621      	mov	r1, r4
 800d236:	4640      	mov	r0, r8
 800d238:	f7ff fa54 	bl	800c6e4 <_malloc_r>
 800d23c:	4605      	mov	r5, r0
 800d23e:	2800      	cmp	r0, #0
 800d240:	d0ed      	beq.n	800d21e <_realloc_r+0x1e>
 800d242:	42bc      	cmp	r4, r7
 800d244:	4622      	mov	r2, r4
 800d246:	4631      	mov	r1, r6
 800d248:	bf28      	it	cs
 800d24a:	463a      	movcs	r2, r7
 800d24c:	f7fe fe3a 	bl	800bec4 <memcpy>
 800d250:	4631      	mov	r1, r6
 800d252:	4640      	mov	r0, r8
 800d254:	f7ff f9da 	bl	800c60c <_free_r>
 800d258:	e7e1      	b.n	800d21e <_realloc_r+0x1e>
 800d25a:	4635      	mov	r5, r6
 800d25c:	e7df      	b.n	800d21e <_realloc_r+0x1e>
	...

0800d260 <_read_r>:
 800d260:	b538      	push	{r3, r4, r5, lr}
 800d262:	4d07      	ldr	r5, [pc, #28]	; (800d280 <_read_r+0x20>)
 800d264:	4604      	mov	r4, r0
 800d266:	4608      	mov	r0, r1
 800d268:	4611      	mov	r1, r2
 800d26a:	2200      	movs	r2, #0
 800d26c:	602a      	str	r2, [r5, #0]
 800d26e:	461a      	mov	r2, r3
 800d270:	f7f4 fc26 	bl	8001ac0 <_read>
 800d274:	1c43      	adds	r3, r0, #1
 800d276:	d102      	bne.n	800d27e <_read_r+0x1e>
 800d278:	682b      	ldr	r3, [r5, #0]
 800d27a:	b103      	cbz	r3, 800d27e <_read_r+0x1e>
 800d27c:	6023      	str	r3, [r4, #0]
 800d27e:	bd38      	pop	{r3, r4, r5, pc}
 800d280:	20001eb0 	.word	0x20001eb0

0800d284 <_malloc_usable_size_r>:
 800d284:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d288:	1f18      	subs	r0, r3, #4
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	bfbc      	itt	lt
 800d28e:	580b      	ldrlt	r3, [r1, r0]
 800d290:	18c0      	addlt	r0, r0, r3
 800d292:	4770      	bx	lr

0800d294 <_init>:
 800d294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d296:	bf00      	nop
 800d298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d29a:	bc08      	pop	{r3}
 800d29c:	469e      	mov	lr, r3
 800d29e:	4770      	bx	lr

0800d2a0 <_fini>:
 800d2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2a2:	bf00      	nop
 800d2a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2a6:	bc08      	pop	{r3}
 800d2a8:	469e      	mov	lr, r3
 800d2aa:	4770      	bx	lr
